
I2C_SOFTWARE_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003244  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a34  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e58  08004e58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000000c  08004e6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08004e6c  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c73a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c51  00000000  00000000  0002c776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a49  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c359  00000000  00000000  00054189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5f3f  00000000  00000000  000604e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002830  00000000  00000000  00146474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003404 	.word	0x08003404

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003404 	.word	0x08003404

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <IIC_delay>:
		}
}

//��ʱ
void IIC_delay(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	uint8_t t=15;
 8000516:	230f      	movs	r3, #15
 8000518:	71fb      	strb	r3, [r7, #7]
	while(t--);
 800051a:	bf00      	nop
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	71fa      	strb	r2, [r7, #7]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1fa      	bne.n	800051c <IIC_delay+0xc>
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <I2C_Start>:

//��ʼ�ź�
void I2C_Start(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	OLED_SDA_Set();
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f001 f939 	bl	80017b8 <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <I2C_Start+0x44>)
 800054c:	f001 f934 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8000550:	f7ff ffde 	bl	8000510 <IIC_delay>
	OLED_SDA_Clr();
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 f92b 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8000562:	f7ff ffd5 	bl	8000510 <IIC_delay>
	OLED_SCL_Clr();
 8000566:	2200      	movs	r2, #0
 8000568:	2110      	movs	r1, #16
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <I2C_Start+0x44>)
 800056c:	f001 f924 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8000570:	f7ff ffce 	bl	8000510 <IIC_delay>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	48000800 	.word	0x48000800

0800057c <I2C_Stop>:

//�����ź�
void I2C_Stop(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	OLED_SDA_Clr();
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f001 f915 	bl	80017b8 <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 800058e:	2201      	movs	r2, #1
 8000590:	2110      	movs	r1, #16
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <I2C_Stop+0x34>)
 8000594:	f001 f910 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 8000598:	f7ff ffba 	bl	8000510 <IIC_delay>
	OLED_SDA_Set();
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 f907 	bl	80017b8 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000800 	.word	0x48000800

080005b4 <I2C_WaitAck>:

//�ȴ��ź���Ӧ
void I2C_WaitAck(void) //�������źŵĵ�ƽ
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	OLED_SDA_Set();
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f001 f8f9 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 80005c6:	f7ff ffa3 	bl	8000510 <IIC_delay>
	OLED_SCL_Set();
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <I2C_WaitAck+0x38>)
 80005d0:	f001 f8f2 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 80005d4:	f7ff ff9c 	bl	8000510 <IIC_delay>
	OLED_SCL_Clr();
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <I2C_WaitAck+0x38>)
 80005de:	f001 f8eb 	bl	80017b8 <HAL_GPIO_WritePin>
	IIC_delay();
 80005e2:	f7ff ff95 	bl	8000510 <IIC_delay>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000800 	.word	0x48000800

080005f0 <Send_Byte>:

//д��һ���ֽ�
void Send_Byte(uint8_t dat)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;i<8;i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
 80005fe:	e026      	b.n	800064e <Send_Byte+0x5e>
	{
		if(dat&0x80)//��dat��8λ�����λ����д��
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	da07      	bge.n	8000618 <Send_Byte+0x28>
		{
			OLED_SDA_Set();
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 f8d1 	bl	80017b8 <HAL_GPIO_WritePin>
 8000616:	e006      	b.n	8000626 <Send_Byte+0x36>
    }
		else
		{
			OLED_SDA_Clr();
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 f8c9 	bl	80017b8 <HAL_GPIO_WritePin>
    }
		IIC_delay();
 8000626:	f7ff ff73 	bl	8000510 <IIC_delay>
		OLED_SCL_Set();
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <Send_Byte+0x70>)
 8000630:	f001 f8c2 	bl	80017b8 <HAL_GPIO_WritePin>
		IIC_delay();
 8000634:	f7ff ff6c 	bl	8000510 <IIC_delay>
		OLED_SCL_Clr();//��ʱ���ź�����Ϊ�͵�ƽ
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <Send_Byte+0x70>)
 800063e:	f001 f8bb 	bl	80017b8 <HAL_GPIO_WritePin>
		dat<<=1;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	3301      	adds	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	2b07      	cmp	r3, #7
 8000652:	d9d5      	bls.n	8000600 <Send_Byte+0x10>
  }
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	48000800 	.word	0x48000800

08000664 <OLED_WR_Byte>:

//����һ���ֽ�
//mode:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(uint8_t dat,uint8_t mode)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	I2C_Start();
 8000674:	f7ff ff5e 	bl	8000534 <I2C_Start>
	Send_Byte(0x78);
 8000678:	2078      	movs	r0, #120	; 0x78
 800067a:	f7ff ffb9 	bl	80005f0 <Send_Byte>
	I2C_WaitAck();
 800067e:	f7ff ff99 	bl	80005b4 <I2C_WaitAck>
	if(mode){Send_Byte(0x40);}
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <OLED_WR_Byte+0x2c>
 8000688:	2040      	movs	r0, #64	; 0x40
 800068a:	f7ff ffb1 	bl	80005f0 <Send_Byte>
 800068e:	e002      	b.n	8000696 <OLED_WR_Byte+0x32>
  else{Send_Byte(0x00);}
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ffad 	bl	80005f0 <Send_Byte>
	I2C_WaitAck();
 8000696:	f7ff ff8d 	bl	80005b4 <I2C_WaitAck>
	Send_Byte(dat);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffa7 	bl	80005f0 <Send_Byte>
	I2C_WaitAck();
 80006a2:	f7ff ff87 	bl	80005b4 <I2C_WaitAck>
	I2C_Stop();
 80006a6:	f7ff ff69 	bl	800057c <I2C_Stop>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	e035      	b.n	800072c <OLED_Refresh+0x78>
	{
		OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	3b50      	subs	r3, #80	; 0x50
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffcb 	bl	8000664 <OLED_WR_Byte>
		OLED_WR_Byte(0x00,OLED_CMD);   //���õ�����ʼ��ַ
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ffc7 	bl	8000664 <OLED_WR_Byte>
		OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 80006d6:	2100      	movs	r1, #0
 80006d8:	2010      	movs	r0, #16
 80006da:	f7ff ffc3 	bl	8000664 <OLED_WR_Byte>
		I2C_Start();
 80006de:	f7ff ff29 	bl	8000534 <I2C_Start>
		Send_Byte(0x78);
 80006e2:	2078      	movs	r0, #120	; 0x78
 80006e4:	f7ff ff84 	bl	80005f0 <Send_Byte>
		I2C_WaitAck();
 80006e8:	f7ff ff64 	bl	80005b4 <I2C_WaitAck>
		Send_Byte(0x40);
 80006ec:	2040      	movs	r0, #64	; 0x40
 80006ee:	f7ff ff7f 	bl	80005f0 <Send_Byte>
		I2C_WaitAck();
 80006f2:	f7ff ff5f 	bl	80005b4 <I2C_WaitAck>
		for(n=0;n<128;n++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	e00e      	b.n	800071a <OLED_Refresh+0x66>
		{
			Send_Byte(OLED_GRAM[n][i]);
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	490e      	ldr	r1, [pc, #56]	; (800073c <OLED_Refresh+0x88>)
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	440a      	add	r2, r1
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff70 	bl	80005f0 <Send_Byte>
			I2C_WaitAck();
 8000710:	f7ff ff50 	bl	80005b4 <I2C_WaitAck>
		for(n=0;n<128;n++)
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	3301      	adds	r3, #1
 8000718:	71bb      	strb	r3, [r7, #6]
 800071a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800071e:	2b00      	cmp	r3, #0
 8000720:	daec      	bge.n	80006fc <OLED_Refresh+0x48>
		}
		I2C_Stop();
 8000722:	f7ff ff2b 	bl	800057c <I2C_Stop>
	for(i=0;i<8;i++)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3301      	adds	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d9c6      	bls.n	80006c0 <OLED_Refresh+0xc>
  }
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028

08000740 <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e014      	b.n	8000776 <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 800074c:	2300      	movs	r3, #0
 800074e:	71bb      	strb	r3, [r7, #6]
 8000750:	e00a      	b.n	8000768 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//�����������
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <OLED_Clear+0x48>)
 8000758:	00d2      	lsls	r2, r2, #3
 800075a:	440a      	add	r2, r1
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	3301      	adds	r3, #1
 8000766:	71bb      	strb	r3, [r7, #6]
 8000768:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	daf0      	bge.n	8000752 <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	3301      	adds	r3, #1
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d9e7      	bls.n	800074c <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//������ʾ
 800077c:	f7ff ff9a 	bl	80006b4 <OLED_Refresh>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000028 	.word	0x20000028

0800078c <OLED_Fill>:

void OLED_Fill(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	e014      	b.n	80007c2 <OLED_Fill+0x36>
	{
	   for(n=0;n<128;n++)
 8000798:	2300      	movs	r3, #0
 800079a:	71bb      	strb	r3, [r7, #6]
 800079c:	e00a      	b.n	80007b4 <OLED_Fill+0x28>
			{
			 OLED_GRAM[n][i]=1;//清除所有数据
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	490c      	ldr	r1, [pc, #48]	; (80007d4 <OLED_Fill+0x48>)
 80007a4:	00d2      	lsls	r2, r2, #3
 80007a6:	440a      	add	r2, r1
 80007a8:	4413      	add	r3, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71bb      	strb	r3, [r7, #6]
 80007b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	daf0      	bge.n	800079e <OLED_Fill+0x12>
	for(i=0;i<8;i++)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3301      	adds	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d9e7      	bls.n	8000798 <OLED_Fill+0xc>
			}
  }
	OLED_Refresh();//更新显示
 80007c8:	f7ff ff74 	bl	80006b4 <OLED_Refresh>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000028 	.word	0x20000028

080007d8 <OLED_DrawPoint>:
//���� 
//x:0~127
//y:0~63
//t:1 ��� 0,���	
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	460b      	mov	r3, r1
 80007e4:	71bb      	strb	r3, [r7, #6]
 80007e6:	4613      	mov	r3, r2
 80007e8:	717b      	strb	r3, [r7, #5]
	uint8_t i,m,n;
	i=y/8;
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2201      	movs	r2, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	737b      	strb	r3, [r7, #13]
	if(t){OLED_GRAM[x][i]|=n;}
 8000802:	797b      	ldrb	r3, [r7, #5]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d012      	beq.n	800082e <OLED_DrawPoint+0x56>
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	4925      	ldr	r1, [pc, #148]	; (80008a4 <OLED_DrawPoint+0xcc>)
 800080e:	00d2      	lsls	r2, r2, #3
 8000810:	440a      	add	r2, r1
 8000812:	4413      	add	r3, r2
 8000814:	7818      	ldrb	r0, [r3, #0]
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	7b79      	ldrb	r1, [r7, #13]
 800081c:	4301      	orrs	r1, r0
 800081e:	b2c8      	uxtb	r0, r1
 8000820:	4920      	ldr	r1, [pc, #128]	; (80008a4 <OLED_DrawPoint+0xcc>)
 8000822:	00d2      	lsls	r2, r2, #3
 8000824:	440a      	add	r2, r1
 8000826:	4413      	add	r3, r2
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 800082c:	e033      	b.n	8000896 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	491c      	ldr	r1, [pc, #112]	; (80008a4 <OLED_DrawPoint+0xcc>)
 8000834:	00d2      	lsls	r2, r2, #3
 8000836:	440a      	add	r2, r1
 8000838:	4413      	add	r3, r2
 800083a:	7819      	ldrb	r1, [r3, #0]
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	43c9      	mvns	r1, r1
 8000842:	b2c8      	uxtb	r0, r1
 8000844:	4917      	ldr	r1, [pc, #92]	; (80008a4 <OLED_DrawPoint+0xcc>)
 8000846:	00d2      	lsls	r2, r2, #3
 8000848:	440a      	add	r2, r1
 800084a:	4413      	add	r3, r2
 800084c:	4602      	mov	r2, r0
 800084e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]|=n;
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	4913      	ldr	r1, [pc, #76]	; (80008a4 <OLED_DrawPoint+0xcc>)
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	440a      	add	r2, r1
 800085a:	4413      	add	r3, r2
 800085c:	7818      	ldrb	r0, [r3, #0]
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	7b79      	ldrb	r1, [r7, #13]
 8000864:	4301      	orrs	r1, r0
 8000866:	b2c8      	uxtb	r0, r1
 8000868:	490e      	ldr	r1, [pc, #56]	; (80008a4 <OLED_DrawPoint+0xcc>)
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	440a      	add	r2, r1
 800086e:	4413      	add	r3, r2
 8000870:	4602      	mov	r2, r0
 8000872:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	490a      	ldr	r1, [pc, #40]	; (80008a4 <OLED_DrawPoint+0xcc>)
 800087a:	00d2      	lsls	r2, r2, #3
 800087c:	440a      	add	r2, r1
 800087e:	4413      	add	r3, r2
 8000880:	7819      	ldrb	r1, [r3, #0]
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	43c9      	mvns	r1, r1
 8000888:	b2c8      	uxtb	r0, r1
 800088a:	4906      	ldr	r1, [pc, #24]	; (80008a4 <OLED_DrawPoint+0xcc>)
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	440a      	add	r2, r1
 8000890:	4413      	add	r3, r2
 8000892:	4602      	mov	r2, r0
 8000894:	701a      	strb	r2, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028

080008a8 <OLED_DrawCircle>:
	}
}
//x,y:Բ������
//r:Բ�İ뾶
void OLED_DrawCircle(uint8_t x,uint8_t y,uint8_t r)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	460b      	mov	r3, r1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	4613      	mov	r3, r2
 80008b8:	717b      	strb	r3, [r7, #5]
	int a, b,num;
    a = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
    b = r;
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	613b      	str	r3, [r7, #16]
    while(2 * b * b >= r * r)      
 80008c2:	e088      	b.n	80009d6 <OLED_DrawCircle+0x12e>
    {
        OLED_DrawPoint(x + a, y - b,1);
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4413      	add	r3, r2
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	f7ff ff7c 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x - a, y - b,1);
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b2d8      	uxtb	r0, r3
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	79ba      	ldrb	r2, [r7, #6]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2201      	movs	r2, #1
 80008f6:	4619      	mov	r1, r3
 80008f8:	f7ff ff6e 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x - a, y + b,1);
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	b2d8      	uxtb	r0, r3
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4413      	add	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	f7ff ff60 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x + a, y + b,1);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4413      	add	r3, r2
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	f7ff ff52 	bl	80007d8 <OLED_DrawPoint>
 
        OLED_DrawPoint(x + b, y + a,1);
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4413      	add	r3, r2
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	4413      	add	r3, r2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	f7ff ff44 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x + b, y - a,1);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4413      	add	r3, r2
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff ff36 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x - b, y - a,1);
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	b2d8      	uxtb	r0, r3
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	79ba      	ldrb	r2, [r7, #6]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	f7ff ff28 	bl	80007d8 <OLED_DrawPoint>
        OLED_DrawPoint(x - b, y + a,1);
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	4413      	add	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	f7ff ff1a 	bl	80007d8 <OLED_DrawPoint>
        
        a++;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
        num = (a * a + b * b) - r*r;//���㻭�ĵ���Բ�ĵľ���
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fb03 f203 	mul.w	r2, r3, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	fb03 f303 	mul.w	r3, r3, r3
 80009b6:	441a      	add	r2, r3
 80009b8:	797b      	ldrb	r3, [r7, #5]
 80009ba:	7979      	ldrb	r1, [r7, #5]
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	60fb      	str	r3, [r7, #12]
        if(num > 0)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	dd05      	ble.n	80009d6 <OLED_DrawCircle+0x12e>
        {
            b--;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
            a--;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
    while(2 * b * b >= r * r)      
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	fb03 f303 	mul.w	r3, r3, r3
 80009dc:	005a      	lsls	r2, r3, #1
 80009de:	797b      	ldrb	r3, [r7, #5]
 80009e0:	7979      	ldrb	r1, [r7, #5]
 80009e2:	fb01 f303 	mul.w	r3, r1, r3
 80009e6:	429a      	cmp	r2, r3
 80009e8:	f6bf af6c 	bge.w	80008c4 <OLED_DrawCircle+0x1c>
        }
    }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:ѡ������ 6x8/6x12/8x16/12x24
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size1,uint8_t mode)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	717b      	strb	r3, [r7, #5]
 8000a12:	4613      	mov	r3, r2
 8000a14:	713b      	strb	r3, [r7, #4]
	uint8_t i,m,temp,size2,chr1;
	uint8_t x0=x,y0=y;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	72bb      	strb	r3, [r7, #10]
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	72fb      	strb	r3, [r7, #11]
	if(size1==8)size2=6;
 8000a1e:	793b      	ldrb	r3, [r7, #4]
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d102      	bne.n	8000a2a <OLED_ShowChar+0x32>
 8000a24:	2306      	movs	r3, #6
 8000a26:	733b      	strb	r3, [r7, #12]
 8000a28:	e014      	b.n	8000a54 <OLED_ShowChar+0x5c>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8000a2a:	793b      	ldrb	r3, [r7, #4]
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	793b      	ldrb	r3, [r7, #4]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2301      	movne	r3, #1
 8000a40:	2300      	moveq	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	085b      	lsrs	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	fb12 f303 	smulbb	r3, r2, r3
 8000a52:	733b      	strb	r3, [r7, #12]
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 8000a54:	797b      	ldrb	r3, [r7, #5]
 8000a56:	3b20      	subs	r3, #32
 8000a58:	727b      	strb	r3, [r7, #9]
	for(i=0;i<size2;i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e078      	b.n	8000b52 <OLED_ShowChar+0x15a>
	{
		if(size1==8)
 8000a60:	793b      	ldrb	r3, [r7, #4]
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	d10b      	bne.n	8000a7e <OLED_ShowChar+0x86>
			  {temp=asc2_0806[chr1][i];} //����0806����
 8000a66:	7a7a      	ldrb	r2, [r7, #9]
 8000a68:	7bf9      	ldrb	r1, [r7, #15]
 8000a6a:	483e      	ldr	r0, [pc, #248]	; (8000b64 <OLED_ShowChar+0x16c>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4403      	add	r3, r0
 8000a76:	440b      	add	r3, r1
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	737b      	strb	r3, [r7, #13]
 8000a7c:	e028      	b.n	8000ad0 <OLED_ShowChar+0xd8>
		else if(size1==12)
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	2b0c      	cmp	r3, #12
 8000a82:	d10b      	bne.n	8000a9c <OLED_ShowChar+0xa4>
        {temp=asc2_1206[chr1][i];} //����1206����
 8000a84:	7a7a      	ldrb	r2, [r7, #9]
 8000a86:	7bf9      	ldrb	r1, [r7, #15]
 8000a88:	4837      	ldr	r0, [pc, #220]	; (8000b68 <OLED_ShowChar+0x170>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4403      	add	r3, r0
 8000a94:	440b      	add	r3, r1
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	737b      	strb	r3, [r7, #13]
 8000a9a:	e019      	b.n	8000ad0 <OLED_ShowChar+0xd8>
		else if(size1==16)
 8000a9c:	793b      	ldrb	r3, [r7, #4]
 8000a9e:	2b10      	cmp	r3, #16
 8000aa0:	d108      	bne.n	8000ab4 <OLED_ShowChar+0xbc>
        {temp=asc2_1608[chr1][i];} //����1608����
 8000aa2:	7a7a      	ldrb	r2, [r7, #9]
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	4931      	ldr	r1, [pc, #196]	; (8000b6c <OLED_ShowChar+0x174>)
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	440a      	add	r2, r1
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	737b      	strb	r3, [r7, #13]
 8000ab2:	e00d      	b.n	8000ad0 <OLED_ShowChar+0xd8>
		else if(size1==24)
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	2b18      	cmp	r3, #24
 8000ab8:	d150      	bne.n	8000b5c <OLED_ShowChar+0x164>
        {temp=asc2_2412[chr1][i];} //����2412����
 8000aba:	7a7a      	ldrb	r2, [r7, #9]
 8000abc:	7bf9      	ldrb	r1, [r7, #15]
 8000abe:	482c      	ldr	r0, [pc, #176]	; (8000b70 <OLED_ShowChar+0x178>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	440b      	add	r3, r1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	737b      	strb	r3, [r7, #13]
		else return;
		for(m=0;m<8;m++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73bb      	strb	r3, [r7, #14]
 8000ad4:	e022      	b.n	8000b1c <OLED_ShowChar+0x124>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 8000ad6:	7b7b      	ldrb	r3, [r7, #13]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <OLED_ShowChar+0xf8>
 8000ae0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ae4:	79b9      	ldrb	r1, [r7, #6]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe75 	bl	80007d8 <OLED_DrawPoint>
 8000aee:	e00c      	b.n	8000b0a <OLED_ShowChar+0x112>
			else OLED_DrawPoint(x,y,!mode);
 8000af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	79b9      	ldrb	r1, [r7, #6]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe67 	bl	80007d8 <OLED_DrawPoint>
			temp>>=1;
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	737b      	strb	r3, [r7, #13]
			y++;
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	3301      	adds	r3, #1
 8000b14:	71bb      	strb	r3, [r7, #6]
		for(m=0;m<8;m++)
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73bb      	strb	r3, [r7, #14]
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	2b07      	cmp	r3, #7
 8000b20:	d9d9      	bls.n	8000ad6 <OLED_ShowChar+0xde>
		}
		x++;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3301      	adds	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
		if((size1!=8)&&((x-x0)==size1/2))
 8000b28:	793b      	ldrb	r3, [r7, #4]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d00c      	beq.n	8000b48 <OLED_ShowChar+0x150>
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	7abb      	ldrb	r3, [r7, #10]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	793a      	ldrb	r2, [r7, #4]
 8000b36:	0852      	lsrs	r2, r2, #1
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d104      	bne.n	8000b48 <OLED_ShowChar+0x150>
		{x=x0;y0=y0+8;}
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	7afb      	ldrb	r3, [r7, #11]
 8000b44:	3308      	adds	r3, #8
 8000b46:	72fb      	strb	r3, [r7, #11]
		y=y0;
 8000b48:	7afb      	ldrb	r3, [r7, #11]
 8000b4a:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<size2;i++)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	7b3b      	ldrb	r3, [r7, #12]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d382      	bcc.n	8000a60 <OLED_ShowChar+0x68>
 8000b5a:	e000      	b.n	8000b5e <OLED_ShowChar+0x166>
		else return;
 8000b5c:	bf00      	nop
  }
}
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	08003428 	.word	0x08003428
 8000b68:	08003650 	.word	0x08003650
 8000b6c:	08003ac4 	.word	0x08003ac4
 8000b70:	080040b4 	.word	0x080040b4

08000b74 <OLED_ShowString>:
//x,y:�������  
//size1:�����С 
//*chr:�ַ�����ʼ��ַ 
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t size1,uint8_t mode)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	603a      	str	r2, [r7, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
 8000b8a:	e019      	b.n	8000bc0 <OLED_ShowString+0x4c>
	{
		OLED_ShowChar(x,y,*chr,size1,mode);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	797c      	ldrb	r4, [r7, #5]
 8000b92:	79b9      	ldrb	r1, [r7, #6]
 8000b94:	79f8      	ldrb	r0, [r7, #7]
 8000b96:	7e3b      	ldrb	r3, [r7, #24]
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	f7ff ff2c 	bl	80009f8 <OLED_ShowChar>
		if(size1==8)x+=6;
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d103      	bne.n	8000bae <OLED_ShowString+0x3a>
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e005      	b.n	8000bba <OLED_ShowString+0x46>
		else x+=size1/2;
 8000bae:	797b      	ldrb	r3, [r7, #5]
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	71fb      	strb	r3, [r7, #7]
		chr++;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	603b      	str	r3, [r7, #0]
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b1f      	cmp	r3, #31
 8000bc6:	d903      	bls.n	8000bd0 <OLED_ShowString+0x5c>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b7e      	cmp	r3, #126	; 0x7e
 8000bce:	d9dd      	bls.n	8000b8c <OLED_ShowString+0x18>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}

08000bd8 <OLED_Init>:
     }
	 }
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	
	OLED_RES_Clr();
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 fde8 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000be8:	20c8      	movs	r0, #200	; 0xc8
 8000bea:	f000 fb31 	bl	8001250 <HAL_Delay>
	OLED_RES_Set();
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 fddf 	bl	80017b8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	20ae      	movs	r0, #174	; 0xae
 8000bfe:	f7ff fd31 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd2d 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f7ff fd29 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000c12:	2100      	movs	r1, #0
 8000c14:	2040      	movs	r0, #64	; 0x40
 8000c16:	f7ff fd25 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2081      	movs	r0, #129	; 0x81
 8000c1e:	f7ff fd21 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
 8000c22:	2100      	movs	r1, #0
 8000c24:	20cf      	movs	r0, #207	; 0xcf
 8000c26:	f7ff fd1d 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	20a1      	movs	r0, #161	; 0xa1
 8000c2e:	f7ff fd19 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8000c32:	2100      	movs	r1, #0
 8000c34:	20c8      	movs	r0, #200	; 0xc8
 8000c36:	f7ff fd15 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	20a6      	movs	r0, #166	; 0xa6
 8000c3e:	f7ff fd11 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8000c42:	2100      	movs	r1, #0
 8000c44:	20a8      	movs	r0, #168	; 0xa8
 8000c46:	f7ff fd0d 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	203f      	movs	r0, #63	; 0x3f
 8000c4e:	f7ff fd09 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8000c52:	2100      	movs	r1, #0
 8000c54:	20d3      	movs	r0, #211	; 0xd3
 8000c56:	f7ff fd05 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fd01 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8000c62:	2100      	movs	r1, #0
 8000c64:	20d5      	movs	r0, #213	; 0xd5
 8000c66:	f7ff fcfd 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	f7ff fcf9 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8000c72:	2100      	movs	r1, #0
 8000c74:	20d9      	movs	r0, #217	; 0xd9
 8000c76:	f7ff fcf5 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	20f1      	movs	r0, #241	; 0xf1
 8000c7e:	f7ff fcf1 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8000c82:	2100      	movs	r1, #0
 8000c84:	20da      	movs	r0, #218	; 0xda
 8000c86:	f7ff fced 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f7ff fce9 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8000c92:	2100      	movs	r1, #0
 8000c94:	20db      	movs	r0, #219	; 0xdb
 8000c96:	f7ff fce5 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//Set VCOM Deselect Level
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2030      	movs	r0, #48	; 0x30
 8000c9e:	f7ff fce1 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f7ff fcdd 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8000caa:	2100      	movs	r1, #0
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fcd9 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	208d      	movs	r0, #141	; 0x8d
 8000cb6:	f7ff fcd5 	bl	8000664 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2014      	movs	r0, #20
 8000cbe:	f7ff fcd1 	bl	8000664 <OLED_WR_Byte>
	OLED_Clear();
 8000cc2:	f7ff fd3d 	bl	8000740 <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	20af      	movs	r0, #175	; 0xaf
 8000cca:	f7ff fccb 	bl	8000664 <OLED_WR_Byte>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 fa48 	bl	800116e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f827 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f8d7 	bl	8000e94 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ce6:	f000 f88b 	bl	8000e00 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000cea:	f7ff ff75 	bl	8000bd8 <OLED_Init>
  OLED_Clear()  	;
 8000cee:	f7ff fd27 	bl	8000740 <OLED_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t a[] = "hello world";
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <main+0x58>)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  OLED_Clear();
 8000cfc:	f7ff fd20 	bl	8000740 <OLED_Clear>

	  OLED_Fill();
 8000d00:	f7ff fd44 	bl	800078c <OLED_Fill>
	  OLED_DrawCircle(5,5,5);
 8000d04:	2205      	movs	r2, #5
 8000d06:	2105      	movs	r1, #5
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff fdcd 	bl	80008a8 <OLED_DrawCircle>
	  OLED_ShowString(0,0,a,8,1);
 8000d0e:	1d3a      	adds	r2, r7, #4
 8000d10:	2301      	movs	r3, #1
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2308      	movs	r3, #8
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ff2b 	bl	8000b74 <OLED_ShowString>
		OLED_Refresh();
 8000d1e:	f7ff fcc9 	bl	80006b4 <OLED_Refresh>

HAL_Delay(4000);
 8000d22:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d26:	f000 fa93 	bl	8001250 <HAL_Delay>
  {
 8000d2a:	e7e2      	b.n	8000cf2 <main+0x1e>
 8000d2c:	0800341c 	.word	0x0800341c

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0a8      	sub	sp, #160	; 0xa0
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d3a:	2238      	movs	r2, #56	; 0x38
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fb58 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2254      	movs	r2, #84	; 0x54
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fb4a 	bl	80033f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 fd65 	bl	8001830 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d86:	2355      	movs	r3, #85	; 0x55
 8000d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fdf8 	bl	8001998 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dae:	f000 f905 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2303      	movs	r3, #3
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f8fb 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dd8:	f000 f8f0 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ddc:	2320      	movs	r3, #32
 8000dde:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fb0a 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000df2:	f000 f8e3 	bl	8000fbc <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	37a0      	adds	r7, #160	; 0xa0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_LPUART1_UART_Init+0x90>)
 8000e08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e42:	4812      	ldr	r0, [pc, #72]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e44:	f001 fd28 	bl	8002898 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 f8b5 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e56:	f002 f9df 	bl	8003218 <HAL_UARTEx_SetTxFifoThreshold>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e60:	f000 f8ac 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e68:	f002 fa14 	bl	8003294 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e72:	f000 f8a3 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_LPUART1_UART_Init+0x8c>)
 8000e78:	f002 f995 	bl	80031a6 <HAL_UARTEx_DisableFifoMode>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e82:	f000 f89b 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200004a8 	.word	0x200004a8
 8000e90:	40008000 	.word	0x40008000

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a3a      	ldr	r2, [pc, #232]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <MX_GPIO_Init+0x11c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f000 fc50 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <MX_GPIO_Init+0x120>)
 8000f1e:	f000 fc4b 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0x120>)
 8000f38:	f000 fabc 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f000 faad 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0x120>)
 8000f72:	f000 fa9f 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f000 fa8f 	bl	80014b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2028      	movs	r0, #40	; 0x28
 8000f9c:	f000 fa55 	bl	800144a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa0:	2028      	movs	r0, #40	; 0x28
 8000fa2:	f000 fa6c 	bl	800147e <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	10110000 	.word	0x10110000

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_MspInit+0x44>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_MspInit+0x44>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x44>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x44>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ffe:	f000 fcbb 	bl	8001978 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_UART_MspInit+0x7c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d128      	bne.n	8001084 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_UART_MspInit+0x80>)
 8001034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_UART_MspInit+0x80>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x80>)
 8001040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_UART_MspInit+0x80>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_UART_MspInit+0x80>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001072:	230c      	movs	r3, #12
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f000 fa18 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40008000 	.word	0x40008000
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f898 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f0:	f000 fb7a 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f7ff ffd7 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f002 f92f 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff fdc1 	bl	8000cd4 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   r0, =_estack
 8001154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001160:	08004e60 	.word	0x08004e60
  ldr r2, =_sbss
 8001164:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001168:	2000053c 	.word	0x2000053c

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>

0800116e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f95b 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f80e 	bl	80011a0 <HAL_InitTick>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	e001      	b.n	8001194 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001190:	f7ff ff1a 	bl	8000fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001194:	79fb      	ldrb	r3, [r7, #7]

}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_InitTick+0x68>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d022      	beq.n	80011fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_InitTick+0x6c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_InitTick+0x68>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f966 	bl	800149a <HAL_SYSTICK_Config>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10f      	bne.n	80011f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	d809      	bhi.n	80011ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	2200      	movs	r2, #0
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f04f 30ff 	mov.w	r0, #4294967295
 80011e2:	f000 f932 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_InitTick+0x70>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e007      	b.n	80011fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e004      	b.n	80011fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000008 	.word	0x20000008
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	4a03      	ldr	r2, [pc, #12]	; (8001230 <HAL_IncTick+0x1c>)
 8001224:	6013      	str	r3, [r2, #0]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20000538 	.word	0x20000538
 8001234:	20000008 	.word	0x20000008

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000538 	.word	0x20000538

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d004      	beq.n	8001274 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_Delay+0x40>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001274:	bf00      	nop
 8001276:	f7ff ffdf 	bl	8001238 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	429a      	cmp	r2, r3
 8001284:	d8f7      	bhi.n	8001276 <HAL_Delay+0x26>
  {
  }
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff40 	bl	80012dc <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff90 	bl	8001388 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5f 	bl	8001334 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff33 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa4 	bl	80013f0 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014c2:	e15a      	b.n	800177a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 814c 	beq.w	8001774 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d00b      	beq.n	80014fc <HAL_GPIO_Init+0x48>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b12      	cmp	r3, #18
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 0201 	and.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0xea>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b12      	cmp	r3, #18
 800159c:	d123      	bne.n	80015e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0203 	and.w	r2, r3, #3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80a6 	beq.w	8001774 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_GPIO_Init+0x2e4>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162c:	4a5a      	ldr	r2, [pc, #360]	; (8001798 <HAL_GPIO_Init+0x2e4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6613      	str	r3, [r2, #96]	; 0x60
 8001634:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_GPIO_Init+0x2e4>)
 8001636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001640:	4a56      	ldr	r2, [pc, #344]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800166a:	d01f      	beq.n	80016ac <HAL_GPIO_Init+0x1f8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d019      	beq.n	80016a8 <HAL_GPIO_Init+0x1f4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4b      	ldr	r2, [pc, #300]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1f0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4a      	ldr	r2, [pc, #296]	; (80017a8 <HAL_GPIO_Init+0x2f4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1ec>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a49      	ldr	r2, [pc, #292]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1e8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <HAL_GPIO_Init+0x2fc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1e4>
 8001694:	2305      	movs	r3, #5
 8001696:	e00a      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 8001698:	2306      	movs	r3, #6
 800169a:	e008      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 800169c:	2304      	movs	r3, #4
 800169e:	e006      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x1fa>
 80016ac:	2300      	movs	r3, #0
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016be:	4937      	ldr	r1, [pc, #220]	; (800179c <HAL_GPIO_Init+0x2e8>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_GPIO_Init+0x300>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f0:	4a30      	ldr	r2, [pc, #192]	; (80017b4 <HAL_GPIO_Init+0x300>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x300>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_GPIO_Init+0x300>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_GPIO_Init+0x300>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_GPIO_Init+0x300>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_GPIO_Init+0x300>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_GPIO_Init+0x300>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	f47f ae9d 	bne.w	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48001000 	.word	0x48001000
 80017b0:	48001400 	.word	0x48001400
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f806 	bl	8001818 <HAL_GPIO_EXTI_Callback>
  }
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d141      	bne.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d131      	bne.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001864:	4a41      	ldr	r2, [pc, #260]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2232      	movs	r2, #50	; 0x32
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a3f      	ldr	r2, [pc, #252]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	0c9b      	lsrs	r3, r3, #18
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001882:	e002      	b.n	800188a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3b01      	subs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001896:	d102      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f2      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d158      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e057      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b6:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018c0:	e04d      	b.n	800195e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c8:	d141      	bne.n	800194e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d131      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2232      	movs	r2, #50	; 0x32
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190e:	e002      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3b01      	subs	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d102      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f2      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d112      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e011      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800194c:	e007      	b.n	800195e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40007000 	.word	0x40007000
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	6093      	str	r3, [r2, #8]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e308      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d075      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4ba3      	ldr	r3, [pc, #652]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c0:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3e>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_OscConfig+0x44>
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d10b      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	4b99      	ldr	r3, [pc, #612]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05b      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x108>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d157      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e2e3      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x74>
 80019fe:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a90      	ldr	r2, [pc, #576]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x98>
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a8a      	ldr	r2, [pc, #552]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xb0>
 8001a30:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a83      	ldr	r2, [pc, #524]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a80      	ldr	r2, [pc, #512]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fbf2 	bl	8001238 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fbee 	bl	8001238 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e2a8      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xc0>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fbde 	bl	8001238 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fbda 	bl	8001238 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e294      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0xe8>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d075      	beq.n	8001b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab8:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0x136>
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d002      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x13c>
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d11f      	bne.n	8001b14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_OscConfig+0x154>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e267      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	4952      	ldr	r1, [pc, #328]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b00:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_OscConfig+0x2b0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb4b 	bl	80011a0 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d043      	beq.n	8001b98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e253      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d023      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fb86 	bl	8001238 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff fb82 	bl	8001238 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e23c      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	061b      	lsls	r3, r3, #24
 8001b5c:	4939      	ldr	r1, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e01a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a36      	ldr	r2, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb62 	bl	8001238 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff fb5e 	bl	8001238 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e218      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e0>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fb3b 	bl	8001238 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fb37 	bl	8001238 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1f1      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0ef      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x22e>
 8001be6:	e01b      	b.n	8001c20 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fb1e 	bl	8001238 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fb1a 	bl	8001238 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1d4      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ef      	bne.n	8001c00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80ab 	beq.w	8001d84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2b4>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e005      	b.n	8001c4e <HAL_RCC_OscConfig+0x2b6>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00d      	beq.n	8001c6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4baf      	ldr	r3, [pc, #700]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	4aae      	ldr	r2, [pc, #696]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5e:	4bac      	ldr	r3, [pc, #688]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6e:	4ba9      	ldr	r3, [pc, #676]	; (8001f14 <HAL_RCC_OscConfig+0x57c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7a:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <HAL_RCC_OscConfig+0x57c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4aa5      	ldr	r2, [pc, #660]	; (8001f14 <HAL_RCC_OscConfig+0x57c>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fad7 	bl	8001238 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fad3 	bl	8001238 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e18d      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	4b9c      	ldr	r3, [pc, #624]	; (8001f14 <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d108      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x32e>
 8001cb4:	4b96      	ldr	r3, [pc, #600]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a95      	ldr	r2, [pc, #596]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc4:	e024      	b.n	8001d10 <HAL_RCC_OscConfig+0x378>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d110      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x358>
 8001cce:	4b90      	ldr	r3, [pc, #576]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	4a8e      	ldr	r2, [pc, #568]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cde:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x378>
 8001cf0:	4b87      	ldr	r3, [pc, #540]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a86      	ldr	r2, [pc, #536]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a82      	ldr	r2, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d016      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fa8e 	bl	8001238 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fa8a 	bl	8001238 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e142      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ed      	beq.n	8001d20 <HAL_RCC_OscConfig+0x388>
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff fa77 	bl	8001238 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fa73 	bl	8001238 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e12b      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ed      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a64      	ldr	r2, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d9e:	4a5c      	ldr	r2, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa46 	bl	8001238 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff fa42 	bl	8001238 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0fc      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x418>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd2:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa29 	bl	8001238 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dea:	f7ff fa25 	bl	8001238 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0df      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80d3 	beq.w	8001fba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	f000 808d 	beq.w	8001f3c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d15a      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f9ff 	bl	8001238 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f9fb 	bl	8001238 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0b5      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_OscConfig+0x580>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6a11      	ldr	r1, [r2, #32]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e76:	0212      	lsls	r2, r2, #8
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e7e:	0852      	lsrs	r2, r2, #1
 8001e80:	3a01      	subs	r2, #1
 8001e82:	0552      	lsls	r2, r2, #21
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e8a:	0852      	lsrs	r2, r2, #1
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	0652      	lsls	r2, r2, #25
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e96:	06d2      	lsls	r2, r2, #27
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	491d      	ldr	r1, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f9be 	bl	8001238 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff f9ba 	bl	8001238 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e074      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x528>
 8001ede:	e06c      	b.n	8001fba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_OscConfig+0x578>)
 8001efe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f996 	bl	8001238 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0e:	e00e      	b.n	8001f2e <HAL_RCC_OscConfig+0x596>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f98c 	bl	8001238 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e046      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x62c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x584>
 8001f3a:	e03e      	b.n	8001fba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e039      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_OscConfig+0x62c>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d12c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	3b01      	subs	r3, #1
 8001f68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d123      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d113      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e11e      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	498c      	ldr	r1, [pc, #560]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e106      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d073      	beq.n	8002104 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d129      	bne.n	8002078 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002024:	4b81      	ldr	r3, [pc, #516]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0f4      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002034:	f000 f99e 	bl	8002374 <RCC_GetSysClockFreqFromPLLSource>
 8002038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4a7c      	ldr	r2, [pc, #496]	; (8002230 <HAL_RCC_ClockConfig+0x268>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d93f      	bls.n	80020c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002042:	4b7a      	ldr	r3, [pc, #488]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002056:	2b00      	cmp	r3, #0
 8002058:	d033      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d12f      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a70      	ldr	r2, [pc, #448]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e024      	b.n	80020c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d107      	bne.n	8002090 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0c6      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0be      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80020a0:	f000 f8ce 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4a61      	ldr	r2, [pc, #388]	; (8002230 <HAL_RCC_ClockConfig+0x268>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d909      	bls.n	80020c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020ae:	4b5f      	ldr	r3, [pc, #380]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4957      	ldr	r1, [pc, #348]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d4:	f7ff f8b0 	bl	8001238 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff f8ac 	bl	8001238 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e095      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d023      	beq.n	8002158 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a42      	ldr	r2, [pc, #264]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002126:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002134:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800213c:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
 8002156:	e008      	b.n	800216a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d105      	bne.n	800216a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4a32      	ldr	r2, [pc, #200]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 8002164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002168:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d21d      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 020f 	bic.w	r2, r3, #15
 8002180:	4929      	ldr	r1, [pc, #164]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002188:	f7ff f856 	bl	8001238 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff f852 	bl	8001238 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e03b      	b.n	800221e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x260>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1ed      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4917      	ldr	r1, [pc, #92]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	490f      	ldr	r1, [pc, #60]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021f2:	f000 f825 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_RCC_ClockConfig+0x264>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	490c      	ldr	r1, [pc, #48]	; (8002234 <HAL_RCC_ClockConfig+0x26c>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ffc2 	bl	80011a0 <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	04c4b400 	.word	0x04c4b400
 8002234:	08004e10 	.word	0x08004e10
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d102      	bne.n	8002258 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e047      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d102      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e03e      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d136      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3301      	adds	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229e:	68d2      	ldr	r2, [r2, #12]
 80022a0:	0a12      	lsrs	r2, r2, #8
 80022a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
      break;
 80022ac:	e00c      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	0a12      	lsrs	r2, r2, #8
 80022bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
      break;
 80022c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e001      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022e8:	693b      	ldr	r3, [r7, #16]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	016e3600 	.word	0x016e3600

08002304 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002320:	f7ff fff0 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4904      	ldr	r1, [pc, #16]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	08004e20 	.word	0x08004e20

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800234c:	f7ff ffda 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0adb      	lsrs	r3, r3, #11
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08004e20 	.word	0x08004e20

08002374 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d10c      	bne.n	80023b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023a2:	68d2      	ldr	r2, [r2, #12]
 80023a4:	0a12      	lsrs	r2, r2, #8
 80023a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
    break;
 80023b0:	e00c      	b.n	80023cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	0a12      	lsrs	r2, r2, #8
 80023c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    break;
 80023ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0e5b      	lsrs	r3, r3, #25
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	016e3600 	.word	0x016e3600
 80023fc:	00f42400 	.word	0x00f42400

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002408:	2300      	movs	r3, #0
 800240a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2300      	movs	r3, #0
 800240e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8098 	beq.w	800254e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002446:	2301      	movs	r3, #1
 8002448:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002456:	f7fe feef 	bl	8001238 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800245c:	e009      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe feeb 	bl	8001238 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d902      	bls.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	74fb      	strb	r3, [r7, #19]
        break;
 8002470:	e005      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ef      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d159      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01e      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d019      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024cc:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe feab 	bl	8001238 <HAL_GetTick>
 80024e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	e00b      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fea7 	bl	8001238 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d902      	bls.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	74fb      	strb	r3, [r7, #19]
            break;
 80024fc:	e006      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ec      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002528:	e008      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	74bb      	strb	r3, [r7, #18]
 800252e:	e005      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253c:	7c7b      	ldrb	r3, [r7, #17]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4baf      	ldr	r3, [pc, #700]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4aae      	ldr	r2, [pc, #696]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800255a:	4ba9      	ldr	r3, [pc, #676]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 0203 	bic.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	49a5      	ldr	r1, [pc, #660]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800257c:	4ba0      	ldr	r3, [pc, #640]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 020c 	bic.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	499d      	ldr	r1, [pc, #628]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800259e:	4b98      	ldr	r3, [pc, #608]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4994      	ldr	r1, [pc, #592]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	498c      	ldr	r1, [pc, #560]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025e2:	4b87      	ldr	r3, [pc, #540]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	4983      	ldr	r1, [pc, #524]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002604:	4b7e      	ldr	r3, [pc, #504]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	497b      	ldr	r1, [pc, #492]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002626:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4972      	ldr	r1, [pc, #456]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002648:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	496a      	ldr	r1, [pc, #424]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	4961      	ldr	r1, [pc, #388]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800268e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	4959      	ldr	r1, [pc, #356]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	4950      	ldr	r1, [pc, #320]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4948      	ldr	r1, [pc, #288]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f0:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a42      	ldr	r2, [pc, #264]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002708:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	493a      	ldr	r1, [pc, #232]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a34      	ldr	r2, [pc, #208]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	492c      	ldr	r1, [pc, #176]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275e:	d105      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d015      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	491e      	ldr	r1, [pc, #120]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d018      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4902      	ldr	r1, [pc, #8]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002800:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800280c:	d105      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	4917      	ldr	r1, [pc, #92]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800287c:	d105      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002888:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800288a:	7cbb      	ldrb	r3, [r7, #18]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e042      	b.n	8002930 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fe fba7 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2224      	movs	r2, #36	; 0x24
 80028c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f82c 	bl	8002938 <UART_SetConfig>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e022      	b.n	8002930 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 faea 	bl	8002ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fb71 	bl	8003010 <UART_CheckIdleState>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4313      	orrs	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4bb1      	ldr	r3, [pc, #708]	; (8002c28 <UART_SetConfig+0x2f0>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	69f9      	ldr	r1, [r7, #28]
 800296c:	430b      	orrs	r3, r1
 800296e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4aa6      	ldr	r2, [pc, #664]	; (8002c2c <UART_SetConfig+0x2f4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4313      	orrs	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	69f9      	ldr	r1, [r7, #28]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f023 010f 	bic.w	r1, r3, #15
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a97      	ldr	r2, [pc, #604]	; (8002c30 <UART_SetConfig+0x2f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d120      	bne.n	8002a1a <UART_SetConfig+0xe2>
 80029d8:	4b96      	ldr	r3, [pc, #600]	; (8002c34 <UART_SetConfig+0x2fc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d816      	bhi.n	8002a14 <UART_SetConfig+0xdc>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <UART_SetConfig+0xb4>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a09 	.word	0x08002a09
 80029f4:	08002a03 	.word	0x08002a03
 80029f8:	08002a0f 	.word	0x08002a0f
 80029fc:	2301      	movs	r3, #1
 80029fe:	76fb      	strb	r3, [r7, #27]
 8002a00:	e0e7      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	76fb      	strb	r3, [r7, #27]
 8002a06:	e0e4      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	76fb      	strb	r3, [r7, #27]
 8002a0c:	e0e1      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	76fb      	strb	r3, [r7, #27]
 8002a12:	e0de      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a14:	2310      	movs	r3, #16
 8002a16:	76fb      	strb	r3, [r7, #27]
 8002a18:	e0db      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a86      	ldr	r2, [pc, #536]	; (8002c38 <UART_SetConfig+0x300>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d132      	bne.n	8002a8a <UART_SetConfig+0x152>
 8002a24:	4b83      	ldr	r3, [pc, #524]	; (8002c34 <UART_SetConfig+0x2fc>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d828      	bhi.n	8002a84 <UART_SetConfig+0x14c>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0x100>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a85 	.word	0x08002a85
 8002a44:	08002a85 	.word	0x08002a85
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002a85 	.word	0x08002a85
 8002a58:	08002a73 	.word	0x08002a73
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002a85 	.word	0x08002a85
 8002a68:	08002a7f 	.word	0x08002a7f
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	76fb      	strb	r3, [r7, #27]
 8002a70:	e0af      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	76fb      	strb	r3, [r7, #27]
 8002a76:	e0ac      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	76fb      	strb	r3, [r7, #27]
 8002a7c:	e0a9      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	76fb      	strb	r3, [r7, #27]
 8002a82:	e0a6      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a84:	2310      	movs	r3, #16
 8002a86:	76fb      	strb	r3, [r7, #27]
 8002a88:	e0a3      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6b      	ldr	r2, [pc, #428]	; (8002c3c <UART_SetConfig+0x304>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d120      	bne.n	8002ad6 <UART_SetConfig+0x19e>
 8002a94:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <UART_SetConfig+0x2fc>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a9e:	2b30      	cmp	r3, #48	; 0x30
 8002aa0:	d013      	beq.n	8002aca <UART_SetConfig+0x192>
 8002aa2:	2b30      	cmp	r3, #48	; 0x30
 8002aa4:	d814      	bhi.n	8002ad0 <UART_SetConfig+0x198>
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d009      	beq.n	8002abe <UART_SetConfig+0x186>
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d810      	bhi.n	8002ad0 <UART_SetConfig+0x198>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <UART_SetConfig+0x180>
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d006      	beq.n	8002ac4 <UART_SetConfig+0x18c>
 8002ab6:	e00b      	b.n	8002ad0 <UART_SetConfig+0x198>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	76fb      	strb	r3, [r7, #27]
 8002abc:	e089      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	76fb      	strb	r3, [r7, #27]
 8002ac2:	e086      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	76fb      	strb	r3, [r7, #27]
 8002ac8:	e083      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002aca:	2308      	movs	r3, #8
 8002acc:	76fb      	strb	r3, [r7, #27]
 8002ace:	e080      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	76fb      	strb	r3, [r7, #27]
 8002ad4:	e07d      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a59      	ldr	r2, [pc, #356]	; (8002c40 <UART_SetConfig+0x308>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d120      	bne.n	8002b22 <UART_SetConfig+0x1ea>
 8002ae0:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <UART_SetConfig+0x2fc>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002aea:	2bc0      	cmp	r3, #192	; 0xc0
 8002aec:	d013      	beq.n	8002b16 <UART_SetConfig+0x1de>
 8002aee:	2bc0      	cmp	r3, #192	; 0xc0
 8002af0:	d814      	bhi.n	8002b1c <UART_SetConfig+0x1e4>
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d009      	beq.n	8002b0a <UART_SetConfig+0x1d2>
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d810      	bhi.n	8002b1c <UART_SetConfig+0x1e4>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <UART_SetConfig+0x1cc>
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d006      	beq.n	8002b10 <UART_SetConfig+0x1d8>
 8002b02:	e00b      	b.n	8002b1c <UART_SetConfig+0x1e4>
 8002b04:	2300      	movs	r3, #0
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e063      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e060      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b10:	2304      	movs	r3, #4
 8002b12:	76fb      	strb	r3, [r7, #27]
 8002b14:	e05d      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b16:	2308      	movs	r3, #8
 8002b18:	76fb      	strb	r3, [r7, #27]
 8002b1a:	e05a      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	76fb      	strb	r3, [r7, #27]
 8002b20:	e057      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <UART_SetConfig+0x30c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d125      	bne.n	8002b78 <UART_SetConfig+0x240>
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <UART_SetConfig+0x2fc>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b3a:	d017      	beq.n	8002b6c <UART_SetConfig+0x234>
 8002b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b40:	d817      	bhi.n	8002b72 <UART_SetConfig+0x23a>
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b46:	d00b      	beq.n	8002b60 <UART_SetConfig+0x228>
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d811      	bhi.n	8002b72 <UART_SetConfig+0x23a>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <UART_SetConfig+0x222>
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d006      	beq.n	8002b66 <UART_SetConfig+0x22e>
 8002b58:	e00b      	b.n	8002b72 <UART_SetConfig+0x23a>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	76fb      	strb	r3, [r7, #27]
 8002b5e:	e038      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b60:	2302      	movs	r3, #2
 8002b62:	76fb      	strb	r3, [r7, #27]
 8002b64:	e035      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b66:	2304      	movs	r3, #4
 8002b68:	76fb      	strb	r3, [r7, #27]
 8002b6a:	e032      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	76fb      	strb	r3, [r7, #27]
 8002b70:	e02f      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b72:	2310      	movs	r3, #16
 8002b74:	76fb      	strb	r3, [r7, #27]
 8002b76:	e02c      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <UART_SetConfig+0x2f4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d125      	bne.n	8002bce <UART_SetConfig+0x296>
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <UART_SetConfig+0x2fc>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b90:	d017      	beq.n	8002bc2 <UART_SetConfig+0x28a>
 8002b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b96:	d817      	bhi.n	8002bc8 <UART_SetConfig+0x290>
 8002b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9c:	d00b      	beq.n	8002bb6 <UART_SetConfig+0x27e>
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba2:	d811      	bhi.n	8002bc8 <UART_SetConfig+0x290>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <UART_SetConfig+0x278>
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d006      	beq.n	8002bbc <UART_SetConfig+0x284>
 8002bae:	e00b      	b.n	8002bc8 <UART_SetConfig+0x290>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	76fb      	strb	r3, [r7, #27]
 8002bb4:	e00d      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	76fb      	strb	r3, [r7, #27]
 8002bba:	e00a      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	76fb      	strb	r3, [r7, #27]
 8002bc0:	e007      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	76fb      	strb	r3, [r7, #27]
 8002bc6:	e004      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	76fb      	strb	r3, [r7, #27]
 8002bcc:	e001      	b.n	8002bd2 <UART_SetConfig+0x29a>
 8002bce:	2310      	movs	r3, #16
 8002bd0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <UART_SetConfig+0x2f4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f040 809f 	bne.w	8002d1c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bde:	7efb      	ldrb	r3, [r7, #27]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d837      	bhi.n	8002c54 <UART_SetConfig+0x31c>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <UART_SetConfig+0x2b4>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c55 	.word	0x08002c55
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c55 	.word	0x08002c55
 8002bfc:	08002c1f 	.word	0x08002c1f
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002c55 	.word	0x08002c55
 8002c08:	08002c55 	.word	0x08002c55
 8002c0c:	08002c4d 	.word	0x08002c4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff fb84 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002c14:	6178      	str	r0, [r7, #20]
        break;
 8002c16:	e022      	b.n	8002c5e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <UART_SetConfig+0x310>)
 8002c1a:	617b      	str	r3, [r7, #20]
        break;
 8002c1c:	e01f      	b.n	8002c5e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7ff fb0f 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8002c22:	6178      	str	r0, [r7, #20]
        break;
 8002c24:	e01b      	b.n	8002c5e <UART_SetConfig+0x326>
 8002c26:	bf00      	nop
 8002c28:	cfff69f3 	.word	0xcfff69f3
 8002c2c:	40008000 	.word	0x40008000
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40004400 	.word	0x40004400
 8002c3c:	40004800 	.word	0x40004800
 8002c40:	40004c00 	.word	0x40004c00
 8002c44:	40005000 	.word	0x40005000
 8002c48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c50:	617b      	str	r3, [r7, #20]
        break;
 8002c52:	e004      	b.n	8002c5e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	76bb      	strb	r3, [r7, #26]
        break;
 8002c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 811b 	beq.w	8002e9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	4a96      	ldr	r2, [pc, #600]	; (8002ec4 <UART_SetConfig+0x58c>)
 8002c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c70:	461a      	mov	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d305      	bcc.n	8002c96 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d902      	bls.n	8002c9c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	76bb      	strb	r3, [r7, #26]
 8002c9a:	e0ff      	b.n	8002e9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	4a86      	ldr	r2, [pc, #536]	; (8002ec4 <UART_SetConfig+0x58c>)
 8002caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f7fd fab0 	bl	8000218 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	020b      	lsls	r3, r1, #8
 8002cca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002cce:	0202      	lsls	r2, r0, #8
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6849      	ldr	r1, [r1, #4]
 8002cd4:	0849      	lsrs	r1, r1, #1
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	1814      	adds	r4, r2, r0
 8002cde:	eb43 0501 	adc.w	r5, r3, r1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fa92 	bl	8000218 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d02:	d308      	bcc.n	8002d16 <UART_SetConfig+0x3de>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0a:	d204      	bcs.n	8002d16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e0c2      	b.n	8002e9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	76bb      	strb	r3, [r7, #26]
 8002d1a:	e0bf      	b.n	8002e9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d24:	d165      	bne.n	8002df2 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002d26:	7efb      	ldrb	r3, [r7, #27]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d828      	bhi.n	8002d7e <UART_SetConfig+0x446>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <UART_SetConfig+0x3fc>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d61 	.word	0x08002d61
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d7f 	.word	0x08002d7f
 8002d44:	08002d6f 	.word	0x08002d6f
 8002d48:	08002d7f 	.word	0x08002d7f
 8002d4c:	08002d7f 	.word	0x08002d7f
 8002d50:	08002d7f 	.word	0x08002d7f
 8002d54:	08002d77 	.word	0x08002d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff fae0 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002d5c:	6178      	str	r0, [r7, #20]
        break;
 8002d5e:	e013      	b.n	8002d88 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d60:	f7ff faf2 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8002d64:	6178      	str	r0, [r7, #20]
        break;
 8002d66:	e00f      	b.n	8002d88 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <UART_SetConfig+0x590>)
 8002d6a:	617b      	str	r3, [r7, #20]
        break;
 8002d6c:	e00c      	b.n	8002d88 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6e:	f7ff fa67 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8002d72:	6178      	str	r0, [r7, #20]
        break;
 8002d74:	e008      	b.n	8002d88 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7a:	617b      	str	r3, [r7, #20]
        break;
 8002d7c:	e004      	b.n	8002d88 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	76bb      	strb	r3, [r7, #26]
        break;
 8002d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8086 	beq.w	8002e9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <UART_SetConfig+0x58c>)
 8002d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da2:	005a      	lsls	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	d916      	bls.n	8002dec <UART_SetConfig+0x4b4>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d212      	bcs.n	8002dec <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f023 030f 	bic.w	r3, r3, #15
 8002dce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	89fa      	ldrh	r2, [r7, #14]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e057      	b.n	8002e9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	76bb      	strb	r3, [r7, #26]
 8002df0:	e054      	b.n	8002e9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002df2:	7efb      	ldrb	r3, [r7, #27]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d828      	bhi.n	8002e4a <UART_SetConfig+0x512>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <UART_SetConfig+0x4c8>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e35 	.word	0x08002e35
 8002e0c:	08002e4b 	.word	0x08002e4b
 8002e10:	08002e3b 	.word	0x08002e3b
 8002e14:	08002e4b 	.word	0x08002e4b
 8002e18:	08002e4b 	.word	0x08002e4b
 8002e1c:	08002e4b 	.word	0x08002e4b
 8002e20:	08002e43 	.word	0x08002e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e24:	f7ff fa7a 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002e28:	6178      	str	r0, [r7, #20]
        break;
 8002e2a:	e013      	b.n	8002e54 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e2c:	f7ff fa8c 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8002e30:	6178      	str	r0, [r7, #20]
        break;
 8002e32:	e00f      	b.n	8002e54 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <UART_SetConfig+0x590>)
 8002e36:	617b      	str	r3, [r7, #20]
        break;
 8002e38:	e00c      	b.n	8002e54 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3a:	f7ff fa01 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8002e3e:	6178      	str	r0, [r7, #20]
        break;
 8002e40:	e008      	b.n	8002e54 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e46:	617b      	str	r3, [r7, #20]
        break;
 8002e48:	e004      	b.n	8002e54 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	76bb      	strb	r3, [r7, #26]
        break;
 8002e52:	bf00      	nop
    }

    if (pclk != 0U)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d020      	beq.n	8002e9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <UART_SetConfig+0x58c>)
 8002e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e64:	461a      	mov	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	d908      	bls.n	8002e98 <UART_SetConfig+0x560>
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d204      	bcs.n	8002e98 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e001      	b.n	8002e9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002eb8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	08004e28 	.word	0x08004e28
 8002ec8:	00f42400 	.word	0x00f42400

08002ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01a      	beq.n	8002fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fca:	d10a      	bne.n	8002fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003020:	f7fe f90a 	bl	8001238 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d10e      	bne.n	8003052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f82f 	bl	80030a6 <UART_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e025      	b.n	800309e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d10e      	bne.n	800307e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f819 	bl	80030a6 <UART_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00f      	b.n	800309e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b6:	e062      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d05e      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7fe f8ba 	bl	8001238 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02e      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d126      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003138:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003148:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e00f      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	429a      	cmp	r2, r3
 800319a:	d08d      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_UARTEx_DisableFifoMode+0x16>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e027      	b.n	800320c <HAL_UARTEx_DisableFifoMode+0x66>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80031ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e02d      	b.n	800328c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f84f 	bl	8003310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e02d      	b.n	8003308 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f811 	bl	8003310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331c:	2b00      	cmp	r3, #0
 800331e:	d108      	bne.n	8003332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003330:	e031      	b.n	8003396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003332:	2308      	movs	r3, #8
 8003334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003336:	2308      	movs	r3, #8
 8003338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	0e5b      	lsrs	r3, r3, #25
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	0f5b      	lsrs	r3, r3, #29
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800335a:	7bbb      	ldrb	r3, [r7, #14]
 800335c:	7b3a      	ldrb	r2, [r7, #12]
 800335e:	4911      	ldr	r1, [pc, #68]	; (80033a4 <UARTEx_SetNbDataToProcess+0x94>)
 8003360:	5c8a      	ldrb	r2, [r1, r2]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003366:	7b3a      	ldrb	r2, [r7, #12]
 8003368:	490f      	ldr	r1, [pc, #60]	; (80033a8 <UARTEx_SetNbDataToProcess+0x98>)
 800336a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800336c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	7b7a      	ldrb	r2, [r7, #13]
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <UARTEx_SetNbDataToProcess+0x94>)
 800337e:	5c8a      	ldrb	r2, [r1, r2]
 8003380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003384:	7b7a      	ldrb	r2, [r7, #13]
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <UARTEx_SetNbDataToProcess+0x98>)
 8003388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800338a:	fb93 f3f2 	sdiv	r3, r3, r2
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	08004e40 	.word	0x08004e40
 80033a8:	08004e48 	.word	0x08004e48

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 f820 	bl	8003404 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08004e58 	.word	0x08004e58
 80033e8:	08004e58 	.word	0x08004e58
 80033ec:	08004e58 	.word	0x08004e58
 80033f0:	08004e5c 	.word	0x08004e5c

080033f4 <memset>:
 80033f4:	4402      	add	r2, r0
 80033f6:	4603      	mov	r3, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <_init>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr

08003410 <_fini>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr
