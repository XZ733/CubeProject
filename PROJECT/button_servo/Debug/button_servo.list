
button_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c04  08002c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c0c  08002c0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002c20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002c20  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b095  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b14  00000000  00000000  0002b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ba7  00000000  00000000  0002de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf1e  00000000  00000000  000519b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e29ab  00000000  00000000  0005d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002510  00000000  00000000  001402d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bac 	.word	0x08002bac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002bac 	.word	0x08002bac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xd4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fcd9 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_GPIO_Init+0xd8>)
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <MX_GPIO_Init+0xdc>)
 80005a8:	f000 fb4a 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fb3b 	bl	8000c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f000 fb01 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d4:	2028      	movs	r0, #40	; 0x28
 80005d6:	f000 fb18 	bl	8000c0a <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	10110000 	.word	0x10110000
 80005ec:	48000800 	.word	0x48000800

080005f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin )
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000600:	d104      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000602:	2120      	movs	r1, #32
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fcb4 	bl	8000f74 <HAL_GPIO_TogglePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 f991 	bl	800093e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f805 	bl	800062a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f7ff ff76 	bl	8000510 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000624:	f000 f8d6 	bl	80007d4 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x14>

0800062a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b0a8      	sub	sp, #160	; 0xa0
 800062e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000630:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000634:	2238      	movs	r2, #56	; 0x38
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 faaf 	bl	8002b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2254      	movs	r2, #84	; 0x54
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f002 faa1 	bl	8002b9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fcbc 	bl	8000fd8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000680:	2355      	movs	r3, #85	; 0x55
 8000682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd4f 	bl	8001140 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a8:	f000 f826 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f852 	bl	8001770 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006d2:	f000 f811 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006d6:	2320      	movs	r3, #32
 80006d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fa61 	bl	8001ba8 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ec:	f000 f804 	bl	80006f8 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	37a0      	adds	r7, #160	; 0xa0
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6593      	str	r3, [r2, #88]	; 0x58
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800073a:	f000 fcf1 	bl	8001120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f924 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007a8:	f000 fbfe 	bl	8000fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f001 fc12 	bl	8002040 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f7ff ff69 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800082a:	f002 f8c9 	bl	80029c0 <HAL_UARTEx_SetTxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000834:	f7ff ff60 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800083c:	f002 f8fe 	bl	8002a3c <HAL_UARTEx_SetRxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000846:	f7ff ff57 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_LPUART1_UART_Init+0x8c>)
 800084c:	f002 f87f 	bl	800294e <HAL_UARTEx_DisableFifoMode>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000856:	f7ff ff4f 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000028 	.word	0x20000028
 8000864:	40008000 	.word	0x40008000

08000868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d128      	bne.n	80008dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x80>)
 800088c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0x80>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x80>)
 8000898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_UART_MspInit+0x80>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008ba:	230c      	movs	r3, #12
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008ca:	230c      	movs	r3, #12
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 f9b2 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40008000 	.word	0x40008000
 80008e8:	40021000 	.word	0x40021000

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f7ff ff4b 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 f91b 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fe79 	bl	8000614 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	08002c14 	.word	0x08002c14
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	200000bc 	.word	0x200000bc

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>

0800093e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f939 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f80e 	bl	8000970 <HAL_InitTick>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	e001      	b.n	8000964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000960:	f7ff fed0 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000964:	79fb      	ldrb	r3, [r7, #7]

}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_InitTick+0x68>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d022      	beq.n	80009ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_InitTick+0x6c>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_InitTick+0x68>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000990:	fbb1 f3f3 	udiv	r3, r1, r3
 8000994:	fbb2 f3f3 	udiv	r3, r2, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f944 	bl	8000c26 <HAL_SYSTICK_Config>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d10f      	bne.n	80009c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d809      	bhi.n	80009be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009aa:	2200      	movs	r2, #0
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f04f 30ff 	mov.w	r0, #4294967295
 80009b2:	f000 f910 	bl	8000bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_InitTick+0x70>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e007      	b.n	80009ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e004      	b.n	80009ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e001      	b.n	80009ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <HAL_IncTick+0x1c>)
 80009f4:	6013      	str	r3, [r2, #0]
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200000b8 	.word	0x200000b8
 8000a04:	20000008 	.word	0x20000008

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200000b8 	.word	0x200000b8

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff29 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff40 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff33 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa4 	bl	8000b7c <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c4e:	e15a      	b.n	8000f06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 814c 	beq.w	8000f00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d00b      	beq.n	8000c88 <HAL_GPIO_Init+0x48>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7c:	2b11      	cmp	r3, #17
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b12      	cmp	r3, #18
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0xea>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	6939      	ldr	r1, [r7, #16]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80a6 	beq.w	8000f00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b5b      	ldr	r3, [pc, #364]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db8:	4a5a      	ldr	r2, [pc, #360]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc0:	4b58      	ldr	r3, [pc, #352]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dcc:	4a56      	ldr	r2, [pc, #344]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df6:	d01f      	beq.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d019      	beq.n	8000e34 <HAL_GPIO_Init+0x1f4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4b      	ldr	r2, [pc, #300]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d013      	beq.n	8000e30 <HAL_GPIO_Init+0x1f0>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a4a      	ldr	r2, [pc, #296]	; (8000f34 <HAL_GPIO_Init+0x2f4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00d      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a49      	ldr	r2, [pc, #292]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_GPIO_Init+0x2fc>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d101      	bne.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e20:	2305      	movs	r3, #5
 8000e22:	e00a      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e24:	2306      	movs	r3, #6
 8000e26:	e008      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e004      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_Init+0x1fa>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4093      	lsls	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4a:	4937      	ldr	r1, [pc, #220]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e7c:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_GPIO_Init+0x300>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f47f ae9d 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	48000800 	.word	0x48000800
 8000f34:	48000c00 	.word	0x48000c00
 8000f38:	48001000 	.word	0x48001000
 8000f3c:	48001400 	.word	0x48001400
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43d9      	mvns	r1, r3
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	400b      	ands	r3, r1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb12 	bl	80005f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d141      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d131      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	4a46      	ldr	r2, [pc, #280]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800100c:	4a41      	ldr	r2, [pc, #260]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102a:	e002      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	d102      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f2      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d158      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e057      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001068:	e04d      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001070:	d141      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107e:	d131      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001086:	4a23      	ldr	r2, [pc, #140]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	; 0x32
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b6:	e002      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ca:	d102      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f2      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010de:	d112      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e011      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010f4:	e007      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40007000 	.word	0x40007000
 8001118:	20000000 	.word	0x20000000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6093      	str	r3, [r2, #8]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e308      	b.n	8001764 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x3e>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d002      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e2e3      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a83      	ldr	r2, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc06 	bl	8000a08 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fc02 	bl	8000a08 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e2a8      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fbf2 	bl	8000a08 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fbee 	bl	8000a08 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e294      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x136>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d002      	beq.n	800127c <HAL_RCC_OscConfig+0x13c>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d11f      	bne.n	80012bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x154>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e267      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b55      	ldr	r3, [pc, #340]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4952      	ldr	r1, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fb5f 	bl	8000970 <HAL_InitTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d043      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e253      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d023      	beq.n	800130c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb9a 	bl	8000a08 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fb96 	bl	8000a08 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e23c      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	4939      	ldr	r1, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e01a      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a36      	ldr	r2, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fb76 	bl	8000a08 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fb72 	bl	8000a08 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e218      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1e0>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fb4f 	bl	8000a08 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fb4b 	bl	8000a08 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1f1      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ef      	beq.n	800136e <HAL_RCC_OscConfig+0x22e>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fb32 	bl	8000a08 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fb2e 	bl	8000a08 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1d4      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ef      	bne.n	80013a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80ab 	beq.w	800152c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e005      	b.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	2300      	movs	r3, #0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4baf      	ldr	r3, [pc, #700]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	4aae      	ldr	r2, [pc, #696]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
 8001406:	4bac      	ldr	r3, [pc, #688]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001416:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <HAL_RCC_OscConfig+0x57c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001422:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <HAL_RCC_OscConfig+0x57c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4aa5      	ldr	r2, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x57c>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff faeb 	bl	8000a08 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff fae7 	bl	8000a08 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e18d      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001448:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <HAL_RCC_OscConfig+0x57c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_RCC_OscConfig+0x32e>
 800145c:	4b96      	ldr	r3, [pc, #600]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a95      	ldr	r2, [pc, #596]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	e024      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d110      	bne.n	8001498 <HAL_RCC_OscConfig+0x358>
 8001476:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147c:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001486:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148c:	4a8a      	ldr	r2, [pc, #552]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001496:	e00f      	b.n	80014b8 <HAL_RCC_OscConfig+0x378>
 8001498:	4b87      	ldr	r3, [pc, #540]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a86      	ldr	r2, [pc, #536]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a8:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	4a82      	ldr	r2, [pc, #520]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d016      	beq.n	80014ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff faa2 	bl	8000a08 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fa9e 	bl	8000a08 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e142      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ed      	beq.n	80014c8 <HAL_RCC_OscConfig+0x388>
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa8b 	bl	8000a08 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fa87 	bl	8000a08 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e12b      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ed      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	4a64      	ldr	r2, [pc, #400]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01c      	beq.n	800157a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001546:	4a5c      	ldr	r2, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fa5a 	bl	8000a08 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001558:	f7ff fa56 	bl	8000a08 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0fc      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ef      	beq.n	8001558 <HAL_RCC_OscConfig+0x418>
 8001578:	e01b      	b.n	80015b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800157a:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001580:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fa3d 	bl	8000a08 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001592:	f7ff fa39 	bl	8000a08 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0df      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a4:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ef      	bne.n	8001592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80d3 	beq.w	8001762 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015bc:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	f000 808d 	beq.w	80016e4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d15a      	bne.n	8001688 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fa13 	bl	8000a08 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa0f 	bl	8000a08 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0b5      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x580>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6a11      	ldr	r1, [r2, #32]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001614:	3a01      	subs	r2, #1
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800161e:	0212      	lsls	r2, r2, #8
 8001620:	4311      	orrs	r1, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001626:	0852      	lsrs	r2, r2, #1
 8001628:	3a01      	subs	r2, #1
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	4311      	orrs	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001632:	0852      	lsrs	r2, r2, #1
 8001634:	3a01      	subs	r2, #1
 8001636:	0652      	lsls	r2, r2, #25
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800163e:	06d2      	lsls	r2, r2, #27
 8001640:	430a      	orrs	r2, r1
 8001642:	491d      	ldr	r1, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001644:	4313      	orrs	r3, r2
 8001646:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff f9d2 	bl	8000a08 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f9ce 	bl	8000a08 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e074      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x528>
 8001686:	e06c      	b.n	8001762 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800168e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_RCC_OscConfig+0x578>)
 80016a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9aa 	bl	8000a08 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b6:	e00e      	b.n	80016d6 <HAL_RCC_OscConfig+0x596>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40007000 	.word	0x40007000
 80016c0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f9a0 	bl	8000a08 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e046      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x62c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x584>
 80016e2:	e03e      	b.n	8001762 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e039      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x62c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	429a      	cmp	r2, r3
 8001702:	d12c      	bne.n	800175e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d123      	bne.n	800175e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11b      	bne.n	800175e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d109      	bne.n	800175e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e11e      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b91      	ldr	r3, [pc, #580]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	498c      	ldr	r1, [pc, #560]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b8a      	ldr	r3, [pc, #552]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e106      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d073      	beq.n	80018ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d129      	bne.n	8001820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0f4      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017dc:	f000 f99e 	bl	8001b1c <RCC_GetSysClockFreqFromPLLSource>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <HAL_RCC_ClockConfig+0x268>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d93f      	bls.n	800186a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d033      	beq.n	800186a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d12f      	bne.n	800186a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001812:	4a70      	ldr	r2, [pc, #448]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e024      	b.n	800186a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d107      	bne.n	8001838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0c6      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0be      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001848:	f000 f8ce 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800184c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <HAL_RCC_ClockConfig+0x268>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d909      	bls.n	800186a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800185e:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4957      	ldr	r1, [pc, #348]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800187c:	f7ff f8c4 	bl	8000a08 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff f8c0 	bl	8000a08 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e095      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d023      	beq.n	8001900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018e4:	4a3b      	ldr	r2, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4936      	ldr	r1, [pc, #216]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
 80018fe:	e008      	b.n	8001912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b80      	cmp	r3, #128	; 0x80
 8001904:	d105      	bne.n	8001912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800190c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d21d      	bcs.n	800195c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 020f 	bic.w	r2, r3, #15
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001930:	f7ff f86a 	bl	8000a08 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff f866 	bl	8000a08 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e03b      	b.n	80019c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x260>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d1ed      	bne.n	8001938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4917      	ldr	r1, [pc, #92]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490f      	ldr	r1, [pc, #60]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800199a:	f000 f825 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <HAL_RCC_ClockConfig+0x26c>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x270>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe ffd6 	bl	8000970 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	04c4b400 	.word	0x04c4b400
 80019dc:	08002bc4 	.word	0x08002bc4
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e047      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	e03e      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d136      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a46:	68d2      	ldr	r2, [r2, #12]
 8001a48:	0a12      	lsrs	r2, r2, #8
 8001a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
      break;
 8001a54:	e00c      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	0a12      	lsrs	r2, r2, #8
 8001a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
      break;
 8001a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0e5b      	lsrs	r3, r3, #25
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e001      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	016e3600 	.word	0x016e3600

08001aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08002bd4 	.word	0x08002bd4

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001af4:	f7ff ffda 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0adb      	lsrs	r3, r3, #11
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08002bd4 	.word	0x08002bd4

08001b1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d10c      	bne.n	8001b5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b4a:	68d2      	ldr	r2, [r2, #12]
 8001b4c:	0a12      	lsrs	r2, r2, #8
 8001b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
    break;
 8001b58:	e00c      	b.n	8001b74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b64:	68d2      	ldr	r2, [r2, #12]
 8001b66:	0a12      	lsrs	r2, r2, #8
 8001b68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    break;
 8001b72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0e5b      	lsrs	r3, r3, #25
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	016e3600 	.word	0x016e3600
 8001ba4:	00f42400 	.word	0x00f42400

08001ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8098 	beq.w	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a3f      	ldr	r2, [pc, #252]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a39      	ldr	r2, [pc, #228]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe ff03 	bl	8000a08 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c04:	e009      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7fe feff 	bl	8000a08 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d902      	bls.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	74fb      	strb	r3, [r7, #19]
        break;
 8001c18:	e005      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ef      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d159      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01e      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d019      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7fe febf 	bl	8000a08 <HAL_GetTick>
 8001c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7fe febb 	bl	8000a08 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8001ca4:	e006      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ec      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cd2:	7cfb      	ldrb	r3, [r7, #19]
 8001cd4:	74bb      	strb	r3, [r7, #18]
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce4:	7c7b      	ldrb	r3, [r7, #17]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4baf      	ldr	r3, [pc, #700]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4aae      	ldr	r2, [pc, #696]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d02:	4ba9      	ldr	r3, [pc, #676]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d08:	f023 0203 	bic.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	49a5      	ldr	r1, [pc, #660]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d24:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f023 020c 	bic.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	499d      	ldr	r1, [pc, #628]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d46:	4b98      	ldr	r3, [pc, #608]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4994      	ldr	r1, [pc, #592]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d68:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	498c      	ldr	r1, [pc, #560]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	4983      	ldr	r1, [pc, #524]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dac:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	497b      	ldr	r1, [pc, #492]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	4972      	ldr	r1, [pc, #456]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001df0:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	496a      	ldr	r1, [pc, #424]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	4961      	ldr	r1, [pc, #388]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e34:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	4959      	ldr	r1, [pc, #356]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e56:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	4950      	ldr	r1, [pc, #320]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d015      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e78:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4948      	ldr	r1, [pc, #288]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ea2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	493a      	ldr	r1, [pc, #232]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ece:	d105      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d015      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	492c      	ldr	r1, [pc, #176]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f06:	d105      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	491e      	ldr	r1, [pc, #120]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4910      	ldr	r1, [pc, #64]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f76:	d105      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d018      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4902      	ldr	r1, [pc, #8]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x404>
 8001fa8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fdc:	4917      	ldr	r1, [pc, #92]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d105      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800200c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4909      	ldr	r1, [pc, #36]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002024:	d105      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800202c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002030:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002032:	7cbb      	ldrb	r3, [r7, #18]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fbff 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f82c 	bl	80020e0 <UART_SetConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e022      	b.n	80020d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 faea 	bl	8002674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb71 	bl	80027b8 <UART_CheckIdleState>
 80020d6:	4603      	mov	r3, r0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4313      	orrs	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4bb1      	ldr	r3, [pc, #708]	; (80023d0 <UART_SetConfig+0x2f0>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	69f9      	ldr	r1, [r7, #28]
 8002114:	430b      	orrs	r3, r1
 8002116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4aa6      	ldr	r2, [pc, #664]	; (80023d4 <UART_SetConfig+0x2f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	4313      	orrs	r3, r2
 8002146:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002152:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	69f9      	ldr	r1, [r7, #28]
 800215c:	430b      	orrs	r3, r1
 800215e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f023 010f 	bic.w	r1, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a97      	ldr	r2, [pc, #604]	; (80023d8 <UART_SetConfig+0x2f8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d120      	bne.n	80021c2 <UART_SetConfig+0xe2>
 8002180:	4b96      	ldr	r3, [pc, #600]	; (80023dc <UART_SetConfig+0x2fc>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d816      	bhi.n	80021bc <UART_SetConfig+0xdc>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <UART_SetConfig+0xb4>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021b1 	.word	0x080021b1
 800219c:	080021ab 	.word	0x080021ab
 80021a0:	080021b7 	.word	0x080021b7
 80021a4:	2301      	movs	r3, #1
 80021a6:	76fb      	strb	r3, [r7, #27]
 80021a8:	e0e7      	b.n	800237a <UART_SetConfig+0x29a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	76fb      	strb	r3, [r7, #27]
 80021ae:	e0e4      	b.n	800237a <UART_SetConfig+0x29a>
 80021b0:	2304      	movs	r3, #4
 80021b2:	76fb      	strb	r3, [r7, #27]
 80021b4:	e0e1      	b.n	800237a <UART_SetConfig+0x29a>
 80021b6:	2308      	movs	r3, #8
 80021b8:	76fb      	strb	r3, [r7, #27]
 80021ba:	e0de      	b.n	800237a <UART_SetConfig+0x29a>
 80021bc:	2310      	movs	r3, #16
 80021be:	76fb      	strb	r3, [r7, #27]
 80021c0:	e0db      	b.n	800237a <UART_SetConfig+0x29a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a86      	ldr	r2, [pc, #536]	; (80023e0 <UART_SetConfig+0x300>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d132      	bne.n	8002232 <UART_SetConfig+0x152>
 80021cc:	4b83      	ldr	r3, [pc, #524]	; (80023dc <UART_SetConfig+0x2fc>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d828      	bhi.n	800222c <UART_SetConfig+0x14c>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <UART_SetConfig+0x100>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	08002215 	.word	0x08002215
 80021e4:	0800222d 	.word	0x0800222d
 80021e8:	0800222d 	.word	0x0800222d
 80021ec:	0800222d 	.word	0x0800222d
 80021f0:	08002221 	.word	0x08002221
 80021f4:	0800222d 	.word	0x0800222d
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	0800222d 	.word	0x0800222d
 8002200:	0800221b 	.word	0x0800221b
 8002204:	0800222d 	.word	0x0800222d
 8002208:	0800222d 	.word	0x0800222d
 800220c:	0800222d 	.word	0x0800222d
 8002210:	08002227 	.word	0x08002227
 8002214:	2300      	movs	r3, #0
 8002216:	76fb      	strb	r3, [r7, #27]
 8002218:	e0af      	b.n	800237a <UART_SetConfig+0x29a>
 800221a:	2302      	movs	r3, #2
 800221c:	76fb      	strb	r3, [r7, #27]
 800221e:	e0ac      	b.n	800237a <UART_SetConfig+0x29a>
 8002220:	2304      	movs	r3, #4
 8002222:	76fb      	strb	r3, [r7, #27]
 8002224:	e0a9      	b.n	800237a <UART_SetConfig+0x29a>
 8002226:	2308      	movs	r3, #8
 8002228:	76fb      	strb	r3, [r7, #27]
 800222a:	e0a6      	b.n	800237a <UART_SetConfig+0x29a>
 800222c:	2310      	movs	r3, #16
 800222e:	76fb      	strb	r3, [r7, #27]
 8002230:	e0a3      	b.n	800237a <UART_SetConfig+0x29a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6b      	ldr	r2, [pc, #428]	; (80023e4 <UART_SetConfig+0x304>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d120      	bne.n	800227e <UART_SetConfig+0x19e>
 800223c:	4b67      	ldr	r3, [pc, #412]	; (80023dc <UART_SetConfig+0x2fc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002246:	2b30      	cmp	r3, #48	; 0x30
 8002248:	d013      	beq.n	8002272 <UART_SetConfig+0x192>
 800224a:	2b30      	cmp	r3, #48	; 0x30
 800224c:	d814      	bhi.n	8002278 <UART_SetConfig+0x198>
 800224e:	2b20      	cmp	r3, #32
 8002250:	d009      	beq.n	8002266 <UART_SetConfig+0x186>
 8002252:	2b20      	cmp	r3, #32
 8002254:	d810      	bhi.n	8002278 <UART_SetConfig+0x198>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <UART_SetConfig+0x180>
 800225a:	2b10      	cmp	r3, #16
 800225c:	d006      	beq.n	800226c <UART_SetConfig+0x18c>
 800225e:	e00b      	b.n	8002278 <UART_SetConfig+0x198>
 8002260:	2300      	movs	r3, #0
 8002262:	76fb      	strb	r3, [r7, #27]
 8002264:	e089      	b.n	800237a <UART_SetConfig+0x29a>
 8002266:	2302      	movs	r3, #2
 8002268:	76fb      	strb	r3, [r7, #27]
 800226a:	e086      	b.n	800237a <UART_SetConfig+0x29a>
 800226c:	2304      	movs	r3, #4
 800226e:	76fb      	strb	r3, [r7, #27]
 8002270:	e083      	b.n	800237a <UART_SetConfig+0x29a>
 8002272:	2308      	movs	r3, #8
 8002274:	76fb      	strb	r3, [r7, #27]
 8002276:	e080      	b.n	800237a <UART_SetConfig+0x29a>
 8002278:	2310      	movs	r3, #16
 800227a:	76fb      	strb	r3, [r7, #27]
 800227c:	e07d      	b.n	800237a <UART_SetConfig+0x29a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <UART_SetConfig+0x308>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d120      	bne.n	80022ca <UART_SetConfig+0x1ea>
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <UART_SetConfig+0x2fc>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002292:	2bc0      	cmp	r3, #192	; 0xc0
 8002294:	d013      	beq.n	80022be <UART_SetConfig+0x1de>
 8002296:	2bc0      	cmp	r3, #192	; 0xc0
 8002298:	d814      	bhi.n	80022c4 <UART_SetConfig+0x1e4>
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d009      	beq.n	80022b2 <UART_SetConfig+0x1d2>
 800229e:	2b80      	cmp	r3, #128	; 0x80
 80022a0:	d810      	bhi.n	80022c4 <UART_SetConfig+0x1e4>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <UART_SetConfig+0x1cc>
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d006      	beq.n	80022b8 <UART_SetConfig+0x1d8>
 80022aa:	e00b      	b.n	80022c4 <UART_SetConfig+0x1e4>
 80022ac:	2300      	movs	r3, #0
 80022ae:	76fb      	strb	r3, [r7, #27]
 80022b0:	e063      	b.n	800237a <UART_SetConfig+0x29a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	76fb      	strb	r3, [r7, #27]
 80022b6:	e060      	b.n	800237a <UART_SetConfig+0x29a>
 80022b8:	2304      	movs	r3, #4
 80022ba:	76fb      	strb	r3, [r7, #27]
 80022bc:	e05d      	b.n	800237a <UART_SetConfig+0x29a>
 80022be:	2308      	movs	r3, #8
 80022c0:	76fb      	strb	r3, [r7, #27]
 80022c2:	e05a      	b.n	800237a <UART_SetConfig+0x29a>
 80022c4:	2310      	movs	r3, #16
 80022c6:	76fb      	strb	r3, [r7, #27]
 80022c8:	e057      	b.n	800237a <UART_SetConfig+0x29a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <UART_SetConfig+0x30c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d125      	bne.n	8002320 <UART_SetConfig+0x240>
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <UART_SetConfig+0x2fc>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e2:	d017      	beq.n	8002314 <UART_SetConfig+0x234>
 80022e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e8:	d817      	bhi.n	800231a <UART_SetConfig+0x23a>
 80022ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ee:	d00b      	beq.n	8002308 <UART_SetConfig+0x228>
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f4:	d811      	bhi.n	800231a <UART_SetConfig+0x23a>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <UART_SetConfig+0x222>
 80022fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fe:	d006      	beq.n	800230e <UART_SetConfig+0x22e>
 8002300:	e00b      	b.n	800231a <UART_SetConfig+0x23a>
 8002302:	2300      	movs	r3, #0
 8002304:	76fb      	strb	r3, [r7, #27]
 8002306:	e038      	b.n	800237a <UART_SetConfig+0x29a>
 8002308:	2302      	movs	r3, #2
 800230a:	76fb      	strb	r3, [r7, #27]
 800230c:	e035      	b.n	800237a <UART_SetConfig+0x29a>
 800230e:	2304      	movs	r3, #4
 8002310:	76fb      	strb	r3, [r7, #27]
 8002312:	e032      	b.n	800237a <UART_SetConfig+0x29a>
 8002314:	2308      	movs	r3, #8
 8002316:	76fb      	strb	r3, [r7, #27]
 8002318:	e02f      	b.n	800237a <UART_SetConfig+0x29a>
 800231a:	2310      	movs	r3, #16
 800231c:	76fb      	strb	r3, [r7, #27]
 800231e:	e02c      	b.n	800237a <UART_SetConfig+0x29a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2b      	ldr	r2, [pc, #172]	; (80023d4 <UART_SetConfig+0x2f4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d125      	bne.n	8002376 <UART_SetConfig+0x296>
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <UART_SetConfig+0x2fc>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002338:	d017      	beq.n	800236a <UART_SetConfig+0x28a>
 800233a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800233e:	d817      	bhi.n	8002370 <UART_SetConfig+0x290>
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002344:	d00b      	beq.n	800235e <UART_SetConfig+0x27e>
 8002346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234a:	d811      	bhi.n	8002370 <UART_SetConfig+0x290>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <UART_SetConfig+0x278>
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d006      	beq.n	8002364 <UART_SetConfig+0x284>
 8002356:	e00b      	b.n	8002370 <UART_SetConfig+0x290>
 8002358:	2300      	movs	r3, #0
 800235a:	76fb      	strb	r3, [r7, #27]
 800235c:	e00d      	b.n	800237a <UART_SetConfig+0x29a>
 800235e:	2302      	movs	r3, #2
 8002360:	76fb      	strb	r3, [r7, #27]
 8002362:	e00a      	b.n	800237a <UART_SetConfig+0x29a>
 8002364:	2304      	movs	r3, #4
 8002366:	76fb      	strb	r3, [r7, #27]
 8002368:	e007      	b.n	800237a <UART_SetConfig+0x29a>
 800236a:	2308      	movs	r3, #8
 800236c:	76fb      	strb	r3, [r7, #27]
 800236e:	e004      	b.n	800237a <UART_SetConfig+0x29a>
 8002370:	2310      	movs	r3, #16
 8002372:	76fb      	strb	r3, [r7, #27]
 8002374:	e001      	b.n	800237a <UART_SetConfig+0x29a>
 8002376:	2310      	movs	r3, #16
 8002378:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <UART_SetConfig+0x2f4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	f040 809f 	bne.w	80024c4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002386:	7efb      	ldrb	r3, [r7, #27]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d837      	bhi.n	80023fc <UART_SetConfig+0x31c>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <UART_SetConfig+0x2b4>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023b9 	.word	0x080023b9
 8002398:	080023fd 	.word	0x080023fd
 800239c:	080023c1 	.word	0x080023c1
 80023a0:	080023fd 	.word	0x080023fd
 80023a4:	080023c7 	.word	0x080023c7
 80023a8:	080023fd 	.word	0x080023fd
 80023ac:	080023fd 	.word	0x080023fd
 80023b0:	080023fd 	.word	0x080023fd
 80023b4:	080023f5 	.word	0x080023f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b8:	f7ff fb84 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 80023bc:	6178      	str	r0, [r7, #20]
        break;
 80023be:	e022      	b.n	8002406 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <UART_SetConfig+0x310>)
 80023c2:	617b      	str	r3, [r7, #20]
        break;
 80023c4:	e01f      	b.n	8002406 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023c6:	f7ff fb0f 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80023ca:	6178      	str	r0, [r7, #20]
        break;
 80023cc:	e01b      	b.n	8002406 <UART_SetConfig+0x326>
 80023ce:	bf00      	nop
 80023d0:	cfff69f3 	.word	0xcfff69f3
 80023d4:	40008000 	.word	0x40008000
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40004400 	.word	0x40004400
 80023e4:	40004800 	.word	0x40004800
 80023e8:	40004c00 	.word	0x40004c00
 80023ec:	40005000 	.word	0x40005000
 80023f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f8:	617b      	str	r3, [r7, #20]
        break;
 80023fa:	e004      	b.n	8002406 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	76bb      	strb	r3, [r7, #26]
        break;
 8002404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 811b 	beq.w	8002644 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	4a96      	ldr	r2, [pc, #600]	; (800266c <UART_SetConfig+0x58c>)
 8002414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002420:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d305      	bcc.n	800243e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d902      	bls.n	8002444 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	76bb      	strb	r3, [r7, #26]
 8002442:	e0ff      	b.n	8002644 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4618      	mov	r0, r3
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4a86      	ldr	r2, [pc, #536]	; (800266c <UART_SetConfig+0x58c>)
 8002452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002456:	b29a      	uxth	r2, r3
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	f7fd fedc 	bl	8000218 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	020b      	lsls	r3, r1, #8
 8002472:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002476:	0202      	lsls	r2, r0, #8
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6849      	ldr	r1, [r1, #4]
 800247c:	0849      	lsrs	r1, r1, #1
 800247e:	4608      	mov	r0, r1
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	1814      	adds	r4, r2, r0
 8002486:	eb43 0501 	adc.w	r5, r3, r1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fd febe 	bl	8000218 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024aa:	d308      	bcc.n	80024be <UART_SetConfig+0x3de>
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b2:	d204      	bcs.n	80024be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	e0c2      	b.n	8002644 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	76bb      	strb	r3, [r7, #26]
 80024c2:	e0bf      	b.n	8002644 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024cc:	d165      	bne.n	800259a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80024ce:	7efb      	ldrb	r3, [r7, #27]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d828      	bhi.n	8002526 <UART_SetConfig+0x446>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <UART_SetConfig+0x3fc>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002501 	.word	0x08002501
 80024e0:	08002509 	.word	0x08002509
 80024e4:	08002511 	.word	0x08002511
 80024e8:	08002527 	.word	0x08002527
 80024ec:	08002517 	.word	0x08002517
 80024f0:	08002527 	.word	0x08002527
 80024f4:	08002527 	.word	0x08002527
 80024f8:	08002527 	.word	0x08002527
 80024fc:	0800251f 	.word	0x0800251f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002500:	f7ff fae0 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8002504:	6178      	str	r0, [r7, #20]
        break;
 8002506:	e013      	b.n	8002530 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002508:	f7ff faf2 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 800250c:	6178      	str	r0, [r7, #20]
        break;
 800250e:	e00f      	b.n	8002530 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002510:	4b57      	ldr	r3, [pc, #348]	; (8002670 <UART_SetConfig+0x590>)
 8002512:	617b      	str	r3, [r7, #20]
        break;
 8002514:	e00c      	b.n	8002530 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002516:	f7ff fa67 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800251a:	6178      	str	r0, [r7, #20]
        break;
 800251c:	e008      	b.n	8002530 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800251e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002522:	617b      	str	r3, [r7, #20]
        break;
 8002524:	e004      	b.n	8002530 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	76bb      	strb	r3, [r7, #26]
        break;
 800252e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8086 	beq.w	8002644 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <UART_SetConfig+0x58c>)
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	461a      	mov	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fbb3 f3f2 	udiv	r3, r3, r2
 800254a:	005a      	lsls	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	441a      	add	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	b29b      	uxth	r3, r3
 800255e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	d916      	bls.n	8002594 <UART_SetConfig+0x4b4>
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256c:	d212      	bcs.n	8002594 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f023 030f 	bic.w	r3, r3, #15
 8002576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	b29b      	uxth	r3, r3
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	b29a      	uxth	r2, r3
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	4313      	orrs	r3, r2
 8002588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	89fa      	ldrh	r2, [r7, #14]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e057      	b.n	8002644 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	76bb      	strb	r3, [r7, #26]
 8002598:	e054      	b.n	8002644 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800259a:	7efb      	ldrb	r3, [r7, #27]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d828      	bhi.n	80025f2 <UART_SetConfig+0x512>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <UART_SetConfig+0x4c8>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	080025d5 	.word	0x080025d5
 80025b0:	080025dd 	.word	0x080025dd
 80025b4:	080025f3 	.word	0x080025f3
 80025b8:	080025e3 	.word	0x080025e3
 80025bc:	080025f3 	.word	0x080025f3
 80025c0:	080025f3 	.word	0x080025f3
 80025c4:	080025f3 	.word	0x080025f3
 80025c8:	080025eb 	.word	0x080025eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025cc:	f7ff fa7a 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 80025d0:	6178      	str	r0, [r7, #20]
        break;
 80025d2:	e013      	b.n	80025fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025d4:	f7ff fa8c 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 80025d8:	6178      	str	r0, [r7, #20]
        break;
 80025da:	e00f      	b.n	80025fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <UART_SetConfig+0x590>)
 80025de:	617b      	str	r3, [r7, #20]
        break;
 80025e0:	e00c      	b.n	80025fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025e2:	f7ff fa01 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80025e6:	6178      	str	r0, [r7, #20]
        break;
 80025e8:	e008      	b.n	80025fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ee:	617b      	str	r3, [r7, #20]
        break;
 80025f0:	e004      	b.n	80025fc <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	76bb      	strb	r3, [r7, #26]
        break;
 80025fa:	bf00      	nop
    }

    if (pclk != 0U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d020      	beq.n	8002644 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	4a19      	ldr	r2, [pc, #100]	; (800266c <UART_SetConfig+0x58c>)
 8002608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800260c:	461a      	mov	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fbb3 f2f2 	udiv	r2, r3, r2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	441a      	add	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d908      	bls.n	8002640 <UART_SetConfig+0x560>
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d204      	bcs.n	8002640 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	e001      	b.n	8002644 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002660:	7ebb      	ldrb	r3, [r7, #26]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bdb0      	pop	{r4, r5, r7, pc}
 800266a:	bf00      	nop
 800266c:	08002bdc 	.word	0x08002bdc
 8002670:	00f42400 	.word	0x00f42400

08002674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01a      	beq.n	800278a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002772:	d10a      	bne.n	800278a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027c8:	f7fe f91e 	bl	8000a08 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d10e      	bne.n	80027fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f82f 	bl	800284e <UART_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e025      	b.n	8002846 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d10e      	bne.n	8002826 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f819 	bl	800284e <UART_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800285e:	e062      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d05e      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe f8ce 	bl	8000a08 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <UART_WaitOnFlagUntilTimeout+0x30>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800288c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e045      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02e      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d6:	d126      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d08d      	beq.n	8002860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_UARTEx_DisableFifoMode+0x16>
 8002960:	2302      	movs	r3, #2
 8002962:	e027      	b.n	80029b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002992:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e02d      	b.n	8002a34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f84f 	bl	8002ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e02d      	b.n	8002ab0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f811 	bl	8002ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ad8:	e031      	b.n	8002b3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ada:	2308      	movs	r3, #8
 8002adc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	0e5b      	lsrs	r3, r3, #25
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	0f5b      	lsrs	r3, r3, #29
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	7b3a      	ldrb	r2, [r7, #12]
 8002b06:	4911      	ldr	r1, [pc, #68]	; (8002b4c <UARTEx_SetNbDataToProcess+0x94>)
 8002b08:	5c8a      	ldrb	r2, [r1, r2]
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002b0e:	7b3a      	ldrb	r2, [r7, #12]
 8002b10:	490f      	ldr	r1, [pc, #60]	; (8002b50 <UARTEx_SetNbDataToProcess+0x98>)
 8002b12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	7b7a      	ldrb	r2, [r7, #13]
 8002b24:	4909      	ldr	r1, [pc, #36]	; (8002b4c <UARTEx_SetNbDataToProcess+0x94>)
 8002b26:	5c8a      	ldrb	r2, [r1, r2]
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002b2c:	7b7a      	ldrb	r2, [r7, #13]
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <UARTEx_SetNbDataToProcess+0x98>)
 8002b30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	08002bf4 	.word	0x08002bf4
 8002b50:	08002bfc 	.word	0x08002bfc

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4d0d      	ldr	r5, [pc, #52]	; (8002b8c <__libc_init_array+0x38>)
 8002b58:	4c0d      	ldr	r4, [pc, #52]	; (8002b90 <__libc_init_array+0x3c>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	2600      	movs	r6, #0
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	4d0b      	ldr	r5, [pc, #44]	; (8002b94 <__libc_init_array+0x40>)
 8002b66:	4c0c      	ldr	r4, [pc, #48]	; (8002b98 <__libc_init_array+0x44>)
 8002b68:	f000 f820 	bl	8002bac <_init>
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	2600      	movs	r6, #0
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002c0c 	.word	0x08002c0c
 8002b90:	08002c0c 	.word	0x08002c0c
 8002b94:	08002c0c 	.word	0x08002c0c
 8002b98:	08002c10 	.word	0x08002c10

08002b9c <memset>:
 8002b9c:	4402      	add	r2, r0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d100      	bne.n	8002ba6 <memset+0xa>
 8002ba4:	4770      	bx	lr
 8002ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8002baa:	e7f9      	b.n	8002ba0 <memset+0x4>

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
