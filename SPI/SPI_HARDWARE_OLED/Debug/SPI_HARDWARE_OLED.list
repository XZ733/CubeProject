
SPI_HARDWARE_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001810  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005140  08005140  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005148  08005148  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  0800515c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800515c  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd63  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a1  00000000  00000000  0002fd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00032040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f11  00000000  00000000  000337c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8a  00000000  00000000  000586d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e83a1  00000000  00000000  00068663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150a04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  00150a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003918 	.word	0x08003918

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003918 	.word	0x08003918

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <OLED_ColorTurn>:

uint8_t OLED_GRAM[144][8];

//反显函数
void OLED_ColorTurn(uint8_t i)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	if(i==0)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d103      	bne.n	8000528 <OLED_ColorTurn+0x18>
		{
			OLED_WR_Byte(0xA6,OLED_CMD);//正常显示
 8000520:	2100      	movs	r1, #0
 8000522:	20a6      	movs	r0, #166	; 0xa6
 8000524:	f000 f82a 	bl	800057c <OLED_WR_Byte>
		}
	if(i==1)
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d103      	bne.n	8000536 <OLED_ColorTurn+0x26>
		{
			OLED_WR_Byte(0xA7,OLED_CMD);//反色显示
 800052e:	2100      	movs	r1, #0
 8000530:	20a7      	movs	r0, #167	; 0xa7
 8000532:	f000 f823 	bl	800057c <OLED_WR_Byte>
		}
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <OLED_DisplayTurn>:

//屏幕旋转180度
void OLED_DisplayTurn(uint8_t i)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	4603      	mov	r3, r0
 8000546:	71fb      	strb	r3, [r7, #7]
	if(i==0)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d107      	bne.n	800055e <OLED_DisplayTurn+0x20>
		{
			OLED_WR_Byte(0xC8,OLED_CMD);//正常显示
 800054e:	2100      	movs	r1, #0
 8000550:	20c8      	movs	r0, #200	; 0xc8
 8000552:	f000 f813 	bl	800057c <OLED_WR_Byte>
			OLED_WR_Byte(0xA1,OLED_CMD);
 8000556:	2100      	movs	r1, #0
 8000558:	20a1      	movs	r0, #161	; 0xa1
 800055a:	f000 f80f 	bl	800057c <OLED_WR_Byte>
		}
	if(i==1)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d107      	bne.n	8000574 <OLED_DisplayTurn+0x36>
		{
			OLED_WR_Byte(0xC0,OLED_CMD);//反转显示
 8000564:	2100      	movs	r1, #0
 8000566:	20c0      	movs	r0, #192	; 0xc0
 8000568:	f000 f808 	bl	800057c <OLED_WR_Byte>
			OLED_WR_Byte(0xA0,OLED_CMD);
 800056c:	2100      	movs	r1, #0
 800056e:	20a0      	movs	r0, #160	; 0xa0
 8000570:	f000 f804 	bl	800057c <OLED_WR_Byte>
		}
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <OLED_WR_Byte>:


void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	uint8_t * data = &dat;
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	60fb      	str	r3, [r7, #12]
	if(cmd)
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d005      	beq.n	80005a2 <OLED_WR_Byte+0x26>
	  OLED_DC_Set();
 8000596:	2201      	movs	r2, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <OLED_WR_Byte+0x68>)
 800059c:	f001 f81c 	bl	80015d8 <HAL_GPIO_WritePin>
 80005a0:	e004      	b.n	80005ac <OLED_WR_Byte+0x30>
	else
	  OLED_DC_Clr();
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <OLED_WR_Byte+0x68>)
 80005a8:	f001 f816 	bl	80015d8 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <OLED_WR_Byte+0x68>)
 80005b4:	f001 f810 	bl	80015d8 <HAL_GPIO_WritePin>

HAL_SPI_Transmit(WHICH_SPI,(uint8_t *)data,1,200); //需根据实际情况修改
 80005b8:	23c8      	movs	r3, #200	; 0xc8
 80005ba:	2201      	movs	r2, #1
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <OLED_WR_Byte+0x6c>)
 80005c0:	f002 f925 	bl	800280e <HAL_SPI_Transmit>

	OLED_CS_Set();
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <OLED_WR_Byte+0x68>)
 80005cc:	f001 f804 	bl	80015d8 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <OLED_WR_Byte+0x68>)
 80005d6:	f000 ffff 	bl	80015d8 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	48000800 	.word	0x48000800
 80005e8:	200004a8 	.word	0x200004a8

080005ec <OLED_Refresh>:
	OLED_WR_Byte(0xAF,OLED_CMD);//关闭屏幕
}

//更新显存到OLED
void OLED_Refresh(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e026      	b.n	8000646 <OLED_Refresh+0x5a>
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //设置行起始地址
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	3b50      	subs	r3, #80	; 0x50
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffbb 	bl	800057c <OLED_WR_Byte>
	   OLED_WR_Byte(0x00,OLED_CMD);   //设置低列起始地址
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ffb7 	bl	800057c <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
 800060e:	2100      	movs	r1, #0
 8000610:	2010      	movs	r0, #16
 8000612:	f7ff ffb3 	bl	800057c <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8000616:	2300      	movs	r3, #0
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	e00d      	b.n	8000638 <OLED_Refresh+0x4c>
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	490d      	ldr	r1, [pc, #52]	; (8000658 <OLED_Refresh+0x6c>)
 8000622:	00d2      	lsls	r2, r2, #3
 8000624:	440a      	add	r2, r1
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffa5 	bl	800057c <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	3301      	adds	r3, #1
 8000636:	71bb      	strb	r3, [r7, #6]
 8000638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	daed      	bge.n	800061c <OLED_Refresh+0x30>
	for(i=0;i<8;i++)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3301      	adds	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d9d5      	bls.n	80005f8 <OLED_Refresh+0xc>
  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028

0800065c <OLED_Clear>:
//清屏函数
void OLED_Clear(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e014      	b.n	8000692 <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 8000668:	2300      	movs	r3, #0
 800066a:	71bb      	strb	r3, [r7, #6]
 800066c:	e00a      	b.n	8000684 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//清除所有数据
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	490c      	ldr	r1, [pc, #48]	; (80006a4 <OLED_Clear+0x48>)
 8000674:	00d2      	lsls	r2, r2, #3
 8000676:	440a      	add	r2, r1
 8000678:	4413      	add	r3, r2
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	3301      	adds	r3, #1
 8000682:	71bb      	strb	r3, [r7, #6]
 8000684:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000688:	2b00      	cmp	r3, #0
 800068a:	daf0      	bge.n	800066e <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3301      	adds	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b07      	cmp	r3, #7
 8000696:	d9e7      	bls.n	8000668 <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//更新显示
 8000698:	f7ff ffa8 	bl	80005ec <OLED_Refresh>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028

080006a8 <OLED_DrawPoint>:

//画点
//x:0~127
//y:0~63
void OLED_DrawPoint(uint8_t x,uint8_t y)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	uint8_t i,m,n;
	i=y/8;
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	2201      	movs	r2, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i]|=n;
 80006d0:	79fa      	ldrb	r2, [r7, #7]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	490a      	ldr	r1, [pc, #40]	; (8000700 <OLED_DrawPoint+0x58>)
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	440a      	add	r2, r1
 80006da:	4413      	add	r3, r2
 80006dc:	7818      	ldrb	r0, [r3, #0]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	7b79      	ldrb	r1, [r7, #13]
 80006e4:	4301      	orrs	r1, r0
 80006e6:	b2c8      	uxtb	r0, r1
 80006e8:	4905      	ldr	r1, [pc, #20]	; (8000700 <OLED_DrawPoint+0x58>)
 80006ea:	00d2      	lsls	r2, r2, #3
 80006ec:	440a      	add	r2, r1
 80006ee:	4413      	add	r3, r2
 80006f0:	4602      	mov	r2, r0
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20000028 	.word	0x20000028

08000704 <OLED_ClearPoint>:

//清除一个点
//x:0~127
//y:0~63
void OLED_ClearPoint(uint8_t x,uint8_t y)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]
	uint8_t i,m,n;
	i=y/8;
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	2201      	movs	r2, #1
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	491b      	ldr	r1, [pc, #108]	; (80007a0 <OLED_ClearPoint+0x9c>)
 8000732:	00d2      	lsls	r2, r2, #3
 8000734:	440a      	add	r2, r1
 8000736:	4413      	add	r3, r2
 8000738:	7819      	ldrb	r1, [r3, #0]
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	43c9      	mvns	r1, r1
 8000740:	b2c8      	uxtb	r0, r1
 8000742:	4917      	ldr	r1, [pc, #92]	; (80007a0 <OLED_ClearPoint+0x9c>)
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	440a      	add	r2, r1
 8000748:	4413      	add	r3, r2
 800074a:	4602      	mov	r2, r0
 800074c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i]|=n;
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4913      	ldr	r1, [pc, #76]	; (80007a0 <OLED_ClearPoint+0x9c>)
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	440a      	add	r2, r1
 8000758:	4413      	add	r3, r2
 800075a:	7818      	ldrb	r0, [r3, #0]
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	7b79      	ldrb	r1, [r7, #13]
 8000762:	4301      	orrs	r1, r0
 8000764:	b2c8      	uxtb	r0, r1
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <OLED_ClearPoint+0x9c>)
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	440a      	add	r2, r1
 800076c:	4413      	add	r3, r2
 800076e:	4602      	mov	r2, r0
 8000770:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8000772:	79fa      	ldrb	r2, [r7, #7]
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	490a      	ldr	r1, [pc, #40]	; (80007a0 <OLED_ClearPoint+0x9c>)
 8000778:	00d2      	lsls	r2, r2, #3
 800077a:	440a      	add	r2, r1
 800077c:	4413      	add	r3, r2
 800077e:	7819      	ldrb	r1, [r3, #0]
 8000780:	79fa      	ldrb	r2, [r7, #7]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	43c9      	mvns	r1, r1
 8000786:	b2c8      	uxtb	r0, r1
 8000788:	4905      	ldr	r1, [pc, #20]	; (80007a0 <OLED_ClearPoint+0x9c>)
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	440a      	add	r2, r1
 800078e:	4413      	add	r3, r2
 8000790:	4602      	mov	r2, r0
 8000792:	701a      	strb	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000028 	.word	0x20000028

080007a4 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size:选择字体 12/16/24
//取模方式 逐列式
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size1)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	4603      	mov	r3, r0
 80007b8:	71bb      	strb	r3, [r7, #6]
 80007ba:	460b      	mov	r3, r1
 80007bc:	717b      	strb	r3, [r7, #5]
 80007be:	4613      	mov	r3, r2
 80007c0:	713b      	strb	r3, [r7, #4]
	uint8_t i,m,temp,size2,chr1;
	uint8_t y0=y;
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	733b      	strb	r3, [r7, #12]
	size2=(size1/8+((size1%8)?1:0))*(size1/2);  //得到字体一个字符对应点阵集所占的字节数
 80007c6:	793b      	ldrb	r3, [r7, #4]
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	793b      	ldrb	r3, [r7, #4]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4413      	add	r3, r2
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	fb12 f303 	smulbb	r3, r2, r3
 80007ee:	72fb      	strb	r3, [r7, #11]
	chr1=chr-' ';  //计算偏移后的值
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	3b20      	subs	r3, #32
 80007f4:	72bb      	strb	r3, [r7, #10]
	for(i=0;i<size2;i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e057      	b.n	80008ac <OLED_ShowChar+0x108>
	{
		if(size1==12)
 80007fc:	793b      	ldrb	r3, [r7, #4]
 80007fe:	2b0c      	cmp	r3, #12
 8000800:	d10b      	bne.n	800081a <OLED_ShowChar+0x76>
        {temp=asc2_1206[chr1][i];} //调用12 06字体
 8000802:	7aba      	ldrb	r2, [r7, #10]
 8000804:	7bf9      	ldrb	r1, [r7, #15]
 8000806:	482e      	ldr	r0, [pc, #184]	; (80008c0 <OLED_ShowChar+0x11c>)
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4403      	add	r3, r0
 8000812:	440b      	add	r3, r1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	737b      	strb	r3, [r7, #13]
 8000818:	e019      	b.n	800084e <OLED_ShowChar+0xaa>
		else if(size1==16)
 800081a:	793b      	ldrb	r3, [r7, #4]
 800081c:	2b10      	cmp	r3, #16
 800081e:	d108      	bne.n	8000832 <OLED_ShowChar+0x8e>
        {temp=asc2_1608[chr1][i];} //调用16 08字体
 8000820:	7aba      	ldrb	r2, [r7, #10]
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	4927      	ldr	r1, [pc, #156]	; (80008c4 <OLED_ShowChar+0x120>)
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	440a      	add	r2, r1
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	737b      	strb	r3, [r7, #13]
 8000830:	e00d      	b.n	800084e <OLED_ShowChar+0xaa>
		else if(size1==24)
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	2b18      	cmp	r3, #24
 8000836:	d13e      	bne.n	80008b6 <OLED_ShowChar+0x112>
        {temp=asc2_2412[chr1][i];} //调用24 12字体
 8000838:	7aba      	ldrb	r2, [r7, #10]
 800083a:	7bf9      	ldrb	r1, [r7, #15]
 800083c:	4822      	ldr	r0, [pc, #136]	; (80008c8 <OLED_ShowChar+0x124>)
 800083e:	4613      	mov	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	4413      	add	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4403      	add	r3, r0
 8000848:	440b      	add	r3, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	737b      	strb	r3, [r7, #13]
		else return;
				for(m=0;m<8;m++)           //写入数据
 800084e:	2300      	movs	r3, #0
 8000850:	73bb      	strb	r3, [r7, #14]
 8000852:	e025      	b.n	80008a0 <OLED_ShowChar+0xfc>
				{
					if(temp&0x80)OLED_DrawPoint(x,y);
 8000854:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000858:	2b00      	cmp	r3, #0
 800085a:	da06      	bge.n	800086a <OLED_ShowChar+0xc6>
 800085c:	79ba      	ldrb	r2, [r7, #6]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff20 	bl	80006a8 <OLED_DrawPoint>
 8000868:	e005      	b.n	8000876 <OLED_ShowChar+0xd2>
					else OLED_ClearPoint(x,y);
 800086a:	79ba      	ldrb	r2, [r7, #6]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff47 	bl	8000704 <OLED_ClearPoint>
					temp<<=1;
 8000876:	7b7b      	ldrb	r3, [r7, #13]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	737b      	strb	r3, [r7, #13]
					y++;
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	3301      	adds	r3, #1
 8000880:	71bb      	strb	r3, [r7, #6]
					if((y-y0)==size1)
 8000882:	79ba      	ldrb	r2, [r7, #6]
 8000884:	7b3b      	ldrb	r3, [r7, #12]
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	d105      	bne.n	800089a <OLED_ShowChar+0xf6>
					{
						y=y0;
 800088e:	7b3b      	ldrb	r3, [r7, #12]
 8000890:	71bb      	strb	r3, [r7, #6]
						x++;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3301      	adds	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]
						break;
 8000898:	e005      	b.n	80008a6 <OLED_ShowChar+0x102>
				for(m=0;m<8;m++)           //写入数据
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	3301      	adds	r3, #1
 800089e:	73bb      	strb	r3, [r7, #14]
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	d9d6      	bls.n	8000854 <OLED_ShowChar+0xb0>
	for(i=0;i<size2;i++)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	3301      	adds	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3a3      	bcc.n	80007fc <OLED_ShowChar+0x58>
 80008b4:	e000      	b.n	80008b8 <OLED_ShowChar+0x114>
		else return;
 80008b6:	bf00      	nop
          }
				}
  }
}
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	bf00      	nop
 80008c0:	08003940 	.word	0x08003940
 80008c4:	08003db4 	.word	0x08003db4
 80008c8:	080043a4 	.word	0x080043a4

080008cc <OLED_ShowString>:
//显示字符串
//x,y:起点坐标
//size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t size1)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	603a      	str	r2, [r7, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	460b      	mov	r3, r1
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	4613      	mov	r3, r2
 80008e0:	717b      	strb	r3, [r7, #5]
	while((*chr>=' ')&&(*chr<='~'))//判断是不是非法字符!
 80008e2:	e01b      	b.n	800091c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x,y,*chr,size1);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	79b9      	ldrb	r1, [r7, #6]
 80008ec:	79f8      	ldrb	r0, [r7, #7]
 80008ee:	f7ff ff59 	bl	80007a4 <OLED_ShowChar>
		x+=size1/2;
 80008f2:	797b      	ldrb	r3, [r7, #5]
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4413      	add	r3, r2
 80008fc:	71fb      	strb	r3, [r7, #7]
		if(x>128-size1)  //换行
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	797b      	ldrb	r3, [r7, #5]
 8000902:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000906:	429a      	cmp	r2, r3
 8000908:	dd05      	ble.n	8000916 <OLED_ShowString+0x4a>
		{
			x=2;//x=0
 800090a:	2302      	movs	r3, #2
 800090c:	71fb      	strb	r3, [r7, #7]
			y+=size1;
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	797b      	ldrb	r3, [r7, #5]
 8000912:	4413      	add	r3, r2
 8000914:	71bb      	strb	r3, [r7, #6]
    }
		chr++;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	603b      	str	r3, [r7, #0]
	while((*chr>=' ')&&(*chr<='~'))//判断是不是非法字符!
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b1f      	cmp	r3, #31
 8000922:	d903      	bls.n	800092c <OLED_ShowString+0x60>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b7e      	cmp	r3, #126	; 0x7e
 800092a:	d9db      	bls.n	80008e4 <OLED_ShowString+0x18>
  }
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <OLED_Printf>:
	 }
}
//
//
void OLED_Printf(uint8_t str[])
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
OLED_Clear();
 800093c:	f7ff fe8e 	bl	800065c <OLED_Clear>
OLED_ShowString(2,2,str,12);
 8000940:	230c      	movs	r3, #12
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	2102      	movs	r1, #2
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff ffc0 	bl	80008cc <OLED_ShowString>
OLED_Refresh();
 800094c:	f7ff fe4e 	bl	80005ec <OLED_Refresh>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <OLED_Init>:
//OLED的初始化
void OLED_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0


	OLED_RES_Clr();
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	4840      	ldr	r0, [pc, #256]	; (8000a64 <OLED_Init+0x10c>)
 8000964:	f000 fe38 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000968:	20c8      	movs	r0, #200	; 0xc8
 800096a:	f000 fb81 	bl	8001070 <HAL_Delay>
	OLED_RES_Set();
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <OLED_Init+0x10c>)
 8000976:	f000 fe2f 	bl	80015d8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800097a:	2100      	movs	r1, #0
 800097c:	20ae      	movs	r0, #174	; 0xae
 800097e:	f7ff fdfd 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fdf9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800098a:	2100      	movs	r1, #0
 800098c:	2010      	movs	r0, #16
 800098e:	f7ff fdf5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000992:	2100      	movs	r1, #0
 8000994:	2040      	movs	r0, #64	; 0x40
 8000996:	f7ff fdf1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800099a:	2100      	movs	r1, #0
 800099c:	2081      	movs	r0, #129	; 0x81
 800099e:	f7ff fded 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
 80009a2:	2100      	movs	r1, #0
 80009a4:	20cf      	movs	r0, #207	; 0xcf
 80009a6:	f7ff fde9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 80009aa:	2100      	movs	r1, #0
 80009ac:	20a1      	movs	r0, #161	; 0xa1
 80009ae:	f7ff fde5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 80009b2:	2100      	movs	r1, #0
 80009b4:	20c8      	movs	r0, #200	; 0xc8
 80009b6:	f7ff fde1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 80009ba:	2100      	movs	r1, #0
 80009bc:	20a6      	movs	r0, #166	; 0xa6
 80009be:	f7ff fddd 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80009c2:	2100      	movs	r1, #0
 80009c4:	20a8      	movs	r0, #168	; 0xa8
 80009c6:	f7ff fdd9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 80009ca:	2100      	movs	r1, #0
 80009cc:	203f      	movs	r0, #63	; 0x3f
 80009ce:	f7ff fdd5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80009d2:	2100      	movs	r1, #0
 80009d4:	20d3      	movs	r0, #211	; 0xd3
 80009d6:	f7ff fdd1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fdcd 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 80009e2:	2100      	movs	r1, #0
 80009e4:	20d5      	movs	r0, #213	; 0xd5
 80009e6:	f7ff fdc9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 80009ea:	2100      	movs	r1, #0
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	f7ff fdc5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80009f2:	2100      	movs	r1, #0
 80009f4:	20d9      	movs	r0, #217	; 0xd9
 80009f6:	f7ff fdc1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80009fa:	2100      	movs	r1, #0
 80009fc:	20f1      	movs	r0, #241	; 0xf1
 80009fe:	f7ff fdbd 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8000a02:	2100      	movs	r1, #0
 8000a04:	20da      	movs	r0, #218	; 0xda
 8000a06:	f7ff fdb9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2012      	movs	r0, #18
 8000a0e:	f7ff fdb5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8000a12:	2100      	movs	r1, #0
 8000a14:	20db      	movs	r0, #219	; 0xdb
 8000a16:	f7ff fdb1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2040      	movs	r0, #64	; 0x40
 8000a1e:	f7ff fdad 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8000a22:	2100      	movs	r1, #0
 8000a24:	2020      	movs	r0, #32
 8000a26:	f7ff fda9 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fda5 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8000a32:	2100      	movs	r1, #0
 8000a34:	208d      	movs	r0, #141	; 0x8d
 8000a36:	f7ff fda1 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2014      	movs	r0, #20
 8000a3e:	f7ff fd9d 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8000a42:	2100      	movs	r1, #0
 8000a44:	20a4      	movs	r0, #164	; 0xa4
 8000a46:	f7ff fd99 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	20a6      	movs	r0, #166	; 0xa6
 8000a4e:	f7ff fd95 	bl	800057c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);
 8000a52:	2100      	movs	r1, #0
 8000a54:	20af      	movs	r0, #175	; 0xaf
 8000a56:	f7ff fd91 	bl	800057c <OLED_WR_Byte>
	OLED_Clear();
 8000a5a:	f7ff fdff 	bl	800065c <OLED_Clear>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	48000800 	.word	0x48000800

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_GPIO_Init+0xd4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0xd8>)
 8000ae6:	f000 fd77 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_GPIO_Init+0xdc>)
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <MX_GPIO_Init+0xd8>)
 8000b00:	f000 fbe8 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin;
 8000b04:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_GPIO_Init+0xd8>)
 8000b1e:	f000 fbd9 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2028      	movs	r0, #40	; 0x28
 8000b28:	f000 fb9f 	bl	800126a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2c:	2028      	movs	r0, #40	; 0x28
 8000b2e:	f000 fbb6 	bl	800129e <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000800 	.word	0x48000800
 8000b44:	10110000 	.word	0x10110000

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fa1f 	bl	8000f8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f816 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f7ff ff88 	bl	8000a68 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000b58:	f000 f964 	bl	8000e24 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000b5c:	f000 f87a 	bl	8000c54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000b60:	f7ff fefa 	bl	8000958 <OLED_Init>
  OLED_ColorTurn(0);//0正常显示，1 反色显示
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fcd3 	bl	8000510 <OLED_ColorTurn>
  OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fce7 	bl	800053e <OLED_DisplayTurn>
  OLED_Refresh(); //每次更改后，需要刷新
 8000b70:	f7ff fd3c 	bl	80005ec <OLED_Refresh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OLED_Printf((uint8_t *)"this is a test");
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <main+0x34>)
 8000b76:	f7ff fedd 	bl	8000934 <OLED_Printf>
 8000b7a:	e7fb      	b.n	8000b74 <main+0x2c>
 8000b7c:	08003930 	.word	0x08003930

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0a8      	sub	sp, #160	; 0xa0
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b8a:	2238      	movs	r2, #56	; 0x38
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 feba 	bl	8003908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2254      	movs	r2, #84	; 0x54
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 feac 	bl	8003908 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fd4d 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bd2:	2355      	movs	r3, #85	; 0x55
 8000bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fde2 	bl	80017b8 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bfa:	f000 f826 	bl	8000c4a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 f8e5 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c24:	f000 f811 	bl	8000c4a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 faf4 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3e:	f000 f804 	bl	8000c4a <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	37a0      	adds	r7, #160	; 0xa0
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4e:	b672      	cpsid	i
}
 8000c50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <Error_Handler+0x8>

08000c54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_SPI1_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c8a:	2238      	movs	r2, #56	; 0x38
 8000c8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000cb4:	f001 fd00 	bl	80026b8 <HAL_SPI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f7ff ffc4 	bl	8000c4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200004a8 	.word	0x200004a8
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_SPI_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_SPI_MspInit+0x80>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MISO_Pin|OLED_MOSI_Pin;
 8000d22:	23e0      	movs	r3, #224	; 0xe0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d32:	2305      	movs	r3, #5
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f000 fac8 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013000 	.word	0x40013000
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	; 0x60
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d8a:	f000 fd05 	bl	8001798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f924 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000df4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df8:	f000 fc06 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <MX_LPUART1_UART_Init+0x90>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e68:	f001 ffa0 	bl	8002dac <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f7ff feea 	bl	8000c4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e7a:	f002 fc57 	bl	800372c <HAL_UARTEx_SetTxFifoThreshold>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e84:	f7ff fee1 	bl	8000c4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e8c:	f002 fc8c 	bl	80037a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e96:	f7ff fed8 	bl	8000c4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_LPUART1_UART_Init+0x8c>)
 8000e9c:	f002 fc0d 	bl	80036ba <HAL_UARTEx_DisableFifoMode>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ea6:	f7ff fed0 	bl	8000c4a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000050c 	.word	0x2000050c
 8000eb4:	40008000 	.word	0x40008000

08000eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_UART_MspInit+0x7c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d128      	bne.n	8000f2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f000 f9d4 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40008000 	.word	0x40008000
 8000f38:	40021000 	.word	0x40021000

08000f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f66:	f7ff ff4b 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 fca9 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6e:	f7ff fdeb 	bl	8000b48 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   r0, =_estack
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	08005150 	.word	0x08005150
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	200005a0 	.word	0x200005a0

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>

08000f8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f95b 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f80e 	bl	8000fc0 <HAL_InitTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e001      	b.n	8000fb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb0:	f7ff fed0 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d022      	beq.n	800101a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_InitTick+0x6c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_InitTick+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f966 	bl	80012ba <HAL_SYSTICK_Config>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10f      	bne.n	8001014 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d809      	bhi.n	800100e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8001002:	f000 f932 	bl	800126a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_InitTick+0x70>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e007      	b.n	800101e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e004      	b.n	800101e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e001      	b.n	800101e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000008 	.word	0x20000008
 800102c:	20000000 	.word	0x20000000
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x1c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x20>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4413      	add	r3, r2
 8001042:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x1c>)
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	2000059c 	.word	0x2000059c
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000059c 	.word	0x2000059c

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d004      	beq.n	8001094 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_Delay+0x40>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001094:	bf00      	nop
 8001096:	f7ff ffdf 	bl	8001058 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d8f7      	bhi.n	8001096 <HAL_Delay+0x26>
  {
  }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff40 	bl	80010fc <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff33 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa4 	bl	8001210 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e2:	e15a      	b.n	800159a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 814c 	beq.w	8001594 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d00b      	beq.n	800131c <HAL_GPIO_Init+0x48>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001310:	2b11      	cmp	r3, #17
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b12      	cmp	r3, #18
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0xea>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	6939      	ldr	r1, [r7, #16]
 8001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0203 	and.w	r2, r3, #3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a6 	beq.w	8001594 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	4a5a      	ldr	r2, [pc, #360]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6613      	str	r3, [r2, #96]	; 0x60
 8001454:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800148a:	d01f      	beq.n	80014cc <HAL_GPIO_Init+0x1f8>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d019      	beq.n	80014c8 <HAL_GPIO_Init+0x1f4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1f0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <HAL_GPIO_Init+0x2f4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a49      	ldr	r2, [pc, #292]	; (80015cc <HAL_GPIO_Init+0x2f8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2fc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e00a      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014b8:	2306      	movs	r3, #6
 80014ba:	e008      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014bc:	2304      	movs	r3, #4
 80014be:	e006      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c0:	2303      	movs	r3, #3
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014cc:	2300      	movs	r3, #0
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014de:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_GPIO_Init+0x300>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800153a:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <HAL_GPIO_Init+0x300>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_GPIO_Init+0x300>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f ae9d 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	48001000 	.word	0x48001000
 80015d0:	48001400 	.word	0x48001400
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f806 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e308      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2e3      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a8a      	ldr	r2, [pc, #552]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a83      	ldr	r2, [pc, #524]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a80      	ldr	r2, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fbf2 	bl	8001058 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fbee 	bl	8001058 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a8      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fbde 	bl	8001058 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fbda 	bl	8001058 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e294      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x136>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x13c>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x154>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e267      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4952      	ldr	r1, [pc, #328]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb4b 	bl	8000fc0 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e253      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb86 	bl	8001058 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fb82 	bl	8001058 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e23c      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a36      	ldr	r2, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fb62 	bl	8001058 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fb5e 	bl	8001058 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e218      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fb3b 	bl	8001058 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb37 	bl	8001058 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ef      	beq.n	80019e6 <HAL_RCC_OscConfig+0x22e>
 8001a06:	e01b      	b.n	8001a40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb1e 	bl	8001058 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb1a 	bl	8001058 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d4      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ef      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ab 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e005      	b.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4baf      	ldr	r3, [pc, #700]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4aae      	ldr	r2, [pc, #696]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4bac      	ldr	r3, [pc, #688]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4ba9      	ldr	r3, [pc, #676]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9a:	4ba6      	ldr	r3, [pc, #664]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4aa5      	ldr	r2, [pc, #660]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fad7 	bl	8001058 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fad3 	bl	8001058 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18d      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b9c      	ldr	r3, [pc, #624]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x32e>
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e024      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d110      	bne.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001aee:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a8a      	ldr	r2, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b10:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a86      	ldr	r2, [pc, #536]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa8e 	bl	8001058 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fa8a 	bl	8001058 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e142      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa77 	bl	8001058 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fa73 	bl	8001058 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e12b      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ed      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a64      	ldr	r2, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	4a5c      	ldr	r2, [pc, #368]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa46 	bl	8001058 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff fa42 	bl	8001058 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fc      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x418>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf8:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa29 	bl	8001058 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff fa25 	bl	8001058 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0df      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80d3 	beq.w	8001dda <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f000 808d 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d15a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f9ff 	bl	8001058 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff f9fb 	bl	8001058 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b5      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x580>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6a11      	ldr	r1, [r2, #32]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c96:	0212      	lsls	r2, r2, #8
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c9e:	0852      	lsrs	r2, r2, #1
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	0552      	lsls	r2, r2, #21
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0652      	lsls	r2, r2, #25
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cb6:	06d2      	lsls	r2, r2, #27
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	491d      	ldr	r1, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f9be 	bl	8001058 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f9ba 	bl	8001058 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e074      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x528>
 8001cfe:	e06c      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f996 	bl	8001058 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e00e      	b.n	8001d4e <HAL_RCC_OscConfig+0x596>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
 8001d38:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f98c 	bl	8001058 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e046      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x584>
 8001d5a:	e03e      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e039      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d123      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e11e      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	498c      	ldr	r1, [pc, #560]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e106      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d073      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d129      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f4      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e54:	f000 f99e 	bl	8002194 <RCC_GetSysClockFreqFromPLLSource>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d93f      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d033      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12f      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c6      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec0:	f000 f8ce 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d909      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f8b0 	bl	8001058 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f8ac 	bl	8001058 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e095      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21d      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 020f 	bic.w	r2, r3, #15
 8001fa0:	4929      	ldr	r1, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f856 	bl	8001058 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f852 	bl	8001058 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ed      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x26c>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x270>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ffc2 	bl	8000fc0 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	04c4b400 	.word	0x04c4b400
 8002054:	08005100 	.word	0x08005100
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e047      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e03e      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d136      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e001      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	00f42400 	.word	0x00f42400
 8002120:	016e3600 	.word	0x016e3600

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08005110 	.word	0x08005110

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08005110 	.word	0x08005110

08002194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d10c      	bne.n	80021d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	0a12      	lsrs	r2, r2, #8
 80021c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
    break;
 80021d0:	e00c      	b.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	0a12      	lsrs	r2, r2, #8
 80021e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    break;
 80021ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0e5b      	lsrs	r3, r3, #25
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	016e3600 	.word	0x016e3600
 800221c:	00f42400 	.word	0x00f42400

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800222c:	2300      	movs	r3, #0
 800222e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8098 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002276:	f7fe feef 	bl	8001058 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe feeb 	bl	8001058 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	74fb      	strb	r3, [r7, #19]
        break;
 8002290:	e005      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d159      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe feab 	bl	8001058 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fea7 	bl	8001058 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
            break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ec      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002348:	e008      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4baf      	ldr	r3, [pc, #700]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4aae      	ldr	r2, [pc, #696]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0203 	bic.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	49a5      	ldr	r1, [pc, #660]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239c:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	499d      	ldr	r1, [pc, #628]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4b98      	ldr	r3, [pc, #608]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4994      	ldr	r1, [pc, #592]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	498c      	ldr	r1, [pc, #560]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002402:	4b87      	ldr	r3, [pc, #540]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	4983      	ldr	r1, [pc, #524]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	497b      	ldr	r1, [pc, #492]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4972      	ldr	r1, [pc, #456]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	4961      	ldr	r1, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	4959      	ldr	r1, [pc, #356]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4950      	ldr	r1, [pc, #320]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4948      	ldr	r1, [pc, #288]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	493a      	ldr	r1, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	491e      	ldr	r1, [pc, #120]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4910      	ldr	r1, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4902      	ldr	r1, [pc, #8]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800261e:	e001      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002620:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	4917      	ldr	r1, [pc, #92]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d105      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d105      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e09d      	b.n	8002806 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d009      	beq.n	80026f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	e005      	b.n	80026f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fae0 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002730:	d902      	bls.n	8002738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e002      	b.n	800273e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002746:	d007      	beq.n	8002758 <HAL_SPI_Init+0xa0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002750:	d002      	beq.n	8002758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 0204 	and.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027d4:	ea42 0103 	orr.w	r1, r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b088      	sub	sp, #32
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_SPI_Transmit+0x22>
 800282c:	2302      	movs	r3, #2
 800282e:	e158      	b.n	8002ae2 <HAL_SPI_Transmit+0x2d4>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002838:	f7fe fc0e 	bl	8001058 <HAL_GetTick>
 800283c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d002      	beq.n	8002854 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002852:	e13d      	b.n	8002ad0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_SPI_Transmit+0x52>
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002864:	e134      	b.n	8002ad0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b0:	d10f      	bne.n	80028d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d007      	beq.n	80028f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f8:	d94b      	bls.n	8002992 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0xfa>
 8002902:	8afb      	ldrh	r3, [r7, #22]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d13e      	bne.n	8002986 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800292c:	e02b      	b.n	8002986 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d112      	bne.n	8002962 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002960:	e011      	b.n	8002986 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002962:	f7fe fb79 	bl	8001058 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d803      	bhi.n	800297a <HAL_SPI_Transmit+0x16c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d102      	bne.n	8002980 <HAL_SPI_Transmit+0x172>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002984:	e0a4      	b.n	8002ad0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ce      	bne.n	800292e <HAL_SPI_Transmit+0x120>
 8002990:	e07c      	b.n	8002a8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0x192>
 800299a:	8afb      	ldrh	r3, [r7, #22]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d170      	bne.n	8002a82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d912      	bls.n	80029d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	1c9a      	adds	r2, r3, #2
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b02      	subs	r3, #2
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029ce:	e058      	b.n	8002a82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80029f6:	e044      	b.n	8002a82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d12b      	bne.n	8002a5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d912      	bls.n	8002a36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	1c9a      	adds	r2, r3, #2
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b02      	subs	r3, #2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a34:	e025      	b.n	8002a82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a5c:	e011      	b.n	8002a82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a5e:	f7fe fafb 	bl	8001058 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d803      	bhi.n	8002a76 <HAL_SPI_Transmit+0x268>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d102      	bne.n	8002a7c <HAL_SPI_Transmit+0x26e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a80:	e026      	b.n	8002ad0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1b5      	bne.n	80029f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f945 	bl	8002d20 <SPI_EndRxTxTransaction>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e000      	b.n	8002ad0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002afc:	f7fe faac 	bl	8001058 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b0c:	f7fe faa4 	bl	8001058 <HAL_GetTick>
 8002b10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	015b      	lsls	r3, r3, #5
 8002b18:	0d1b      	lsrs	r3, r3, #20
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b22:	e054      	b.n	8002bce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d050      	beq.n	8002bce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b2c:	f7fe fa94 	bl	8001058 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d902      	bls.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13d      	bne.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5a:	d111      	bne.n	8002b80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b64:	d004      	beq.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d107      	bne.n	8002b80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b88:	d10f      	bne.n	8002baa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e017      	b.n	8002bee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	bf0c      	ite	eq
 8002bde:	2301      	moveq	r3, #1
 8002be0:	2300      	movne	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d19b      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c0a:	f7fe fa25 	bl	8001058 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c1a:	f7fe fa1d 	bl	8001058 <HAL_GetTick>
 8002c1e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c20:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00da      	lsls	r2, r3, #3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	0d1b      	lsrs	r3, r3, #20
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c38:	e062      	b.n	8002d00 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c40:	d109      	bne.n	8002c56 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002c54:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d050      	beq.n	8002d00 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c5e:	f7fe f9fb 	bl	8001058 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d902      	bls.n	8002c74 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13d      	bne.n	8002cf0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8c:	d111      	bne.n	8002cb2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c96:	d004      	beq.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca0:	d107      	bne.n	8002cb2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	d10f      	bne.n	8002cdc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e010      	b.n	8002d12 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d194      	bne.n	8002c3a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff ff5f 	bl	8002bfc <SPI_WaitFifoStateUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e027      	b.n	8002da4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fec4 	bl	8002aec <SPI_WaitFlagStateUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e014      	b.n	8002da4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff ff38 	bl	8002bfc <SPI_WaitFifoStateUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e000      	b.n	8002da4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e042      	b.n	8002e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fe f871 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2224      	movs	r2, #36	; 0x24
 8002dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f82c 	bl	8002e4c <UART_SetConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e022      	b.n	8002e44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 faea 	bl	80033e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fb71 	bl	8003524 <UART_CheckIdleState>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b5b0      	push	{r4, r5, r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4bb1      	ldr	r3, [pc, #708]	; (800313c <UART_SetConfig+0x2f0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4aa6      	ldr	r2, [pc, #664]	; (8003140 <UART_SetConfig+0x2f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ebe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	69f9      	ldr	r1, [r7, #28]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f023 010f 	bic.w	r1, r3, #15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a97      	ldr	r2, [pc, #604]	; (8003144 <UART_SetConfig+0x2f8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d120      	bne.n	8002f2e <UART_SetConfig+0xe2>
 8002eec:	4b96      	ldr	r3, [pc, #600]	; (8003148 <UART_SetConfig+0x2fc>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d816      	bhi.n	8002f28 <UART_SetConfig+0xdc>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0xb4>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f17 	.word	0x08002f17
 8002f0c:	08002f23 	.word	0x08002f23
 8002f10:	2301      	movs	r3, #1
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	e0e7      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f16:	2302      	movs	r3, #2
 8002f18:	76fb      	strb	r3, [r7, #27]
 8002f1a:	e0e4      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	76fb      	strb	r3, [r7, #27]
 8002f20:	e0e1      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f22:	2308      	movs	r3, #8
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	e0de      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	76fb      	strb	r3, [r7, #27]
 8002f2c:	e0db      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a86      	ldr	r2, [pc, #536]	; (800314c <UART_SetConfig+0x300>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d132      	bne.n	8002f9e <UART_SetConfig+0x152>
 8002f38:	4b83      	ldr	r3, [pc, #524]	; (8003148 <UART_SetConfig+0x2fc>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d828      	bhi.n	8002f98 <UART_SetConfig+0x14c>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x100>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002f99 	.word	0x08002f99
 8002f54:	08002f99 	.word	0x08002f99
 8002f58:	08002f99 	.word	0x08002f99
 8002f5c:	08002f8d 	.word	0x08002f8d
 8002f60:	08002f99 	.word	0x08002f99
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	08002f99 	.word	0x08002f99
 8002f6c:	08002f87 	.word	0x08002f87
 8002f70:	08002f99 	.word	0x08002f99
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002f99 	.word	0x08002f99
 8002f7c:	08002f93 	.word	0x08002f93
 8002f80:	2300      	movs	r3, #0
 8002f82:	76fb      	strb	r3, [r7, #27]
 8002f84:	e0af      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	76fb      	strb	r3, [r7, #27]
 8002f8a:	e0ac      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	76fb      	strb	r3, [r7, #27]
 8002f90:	e0a9      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f92:	2308      	movs	r3, #8
 8002f94:	76fb      	strb	r3, [r7, #27]
 8002f96:	e0a6      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	76fb      	strb	r3, [r7, #27]
 8002f9c:	e0a3      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6b      	ldr	r2, [pc, #428]	; (8003150 <UART_SetConfig+0x304>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d120      	bne.n	8002fea <UART_SetConfig+0x19e>
 8002fa8:	4b67      	ldr	r3, [pc, #412]	; (8003148 <UART_SetConfig+0x2fc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fb2:	2b30      	cmp	r3, #48	; 0x30
 8002fb4:	d013      	beq.n	8002fde <UART_SetConfig+0x192>
 8002fb6:	2b30      	cmp	r3, #48	; 0x30
 8002fb8:	d814      	bhi.n	8002fe4 <UART_SetConfig+0x198>
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d009      	beq.n	8002fd2 <UART_SetConfig+0x186>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d810      	bhi.n	8002fe4 <UART_SetConfig+0x198>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <UART_SetConfig+0x180>
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d006      	beq.n	8002fd8 <UART_SetConfig+0x18c>
 8002fca:	e00b      	b.n	8002fe4 <UART_SetConfig+0x198>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	e089      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	76fb      	strb	r3, [r7, #27]
 8002fd6:	e086      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	76fb      	strb	r3, [r7, #27]
 8002fdc:	e083      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	76fb      	strb	r3, [r7, #27]
 8002fe2:	e080      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	76fb      	strb	r3, [r7, #27]
 8002fe8:	e07d      	b.n	80030e6 <UART_SetConfig+0x29a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a59      	ldr	r2, [pc, #356]	; (8003154 <UART_SetConfig+0x308>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d120      	bne.n	8003036 <UART_SetConfig+0x1ea>
 8002ff4:	4b54      	ldr	r3, [pc, #336]	; (8003148 <UART_SetConfig+0x2fc>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8003000:	d013      	beq.n	800302a <UART_SetConfig+0x1de>
 8003002:	2bc0      	cmp	r3, #192	; 0xc0
 8003004:	d814      	bhi.n	8003030 <UART_SetConfig+0x1e4>
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d009      	beq.n	800301e <UART_SetConfig+0x1d2>
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d810      	bhi.n	8003030 <UART_SetConfig+0x1e4>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <UART_SetConfig+0x1cc>
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d006      	beq.n	8003024 <UART_SetConfig+0x1d8>
 8003016:	e00b      	b.n	8003030 <UART_SetConfig+0x1e4>
 8003018:	2300      	movs	r3, #0
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e063      	b.n	80030e6 <UART_SetConfig+0x29a>
 800301e:	2302      	movs	r3, #2
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e060      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003024:	2304      	movs	r3, #4
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e05d      	b.n	80030e6 <UART_SetConfig+0x29a>
 800302a:	2308      	movs	r3, #8
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e05a      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003030:	2310      	movs	r3, #16
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e057      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a47      	ldr	r2, [pc, #284]	; (8003158 <UART_SetConfig+0x30c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d125      	bne.n	800308c <UART_SetConfig+0x240>
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <UART_SetConfig+0x2fc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304e:	d017      	beq.n	8003080 <UART_SetConfig+0x234>
 8003050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003054:	d817      	bhi.n	8003086 <UART_SetConfig+0x23a>
 8003056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305a:	d00b      	beq.n	8003074 <UART_SetConfig+0x228>
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d811      	bhi.n	8003086 <UART_SetConfig+0x23a>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <UART_SetConfig+0x222>
 8003066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306a:	d006      	beq.n	800307a <UART_SetConfig+0x22e>
 800306c:	e00b      	b.n	8003086 <UART_SetConfig+0x23a>
 800306e:	2300      	movs	r3, #0
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e038      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003074:	2302      	movs	r3, #2
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	e035      	b.n	80030e6 <UART_SetConfig+0x29a>
 800307a:	2304      	movs	r3, #4
 800307c:	76fb      	strb	r3, [r7, #27]
 800307e:	e032      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003080:	2308      	movs	r3, #8
 8003082:	76fb      	strb	r3, [r7, #27]
 8003084:	e02f      	b.n	80030e6 <UART_SetConfig+0x29a>
 8003086:	2310      	movs	r3, #16
 8003088:	76fb      	strb	r3, [r7, #27]
 800308a:	e02c      	b.n	80030e6 <UART_SetConfig+0x29a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <UART_SetConfig+0x2f4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d125      	bne.n	80030e2 <UART_SetConfig+0x296>
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <UART_SetConfig+0x2fc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a4:	d017      	beq.n	80030d6 <UART_SetConfig+0x28a>
 80030a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030aa:	d817      	bhi.n	80030dc <UART_SetConfig+0x290>
 80030ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b0:	d00b      	beq.n	80030ca <UART_SetConfig+0x27e>
 80030b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b6:	d811      	bhi.n	80030dc <UART_SetConfig+0x290>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <UART_SetConfig+0x278>
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c0:	d006      	beq.n	80030d0 <UART_SetConfig+0x284>
 80030c2:	e00b      	b.n	80030dc <UART_SetConfig+0x290>
 80030c4:	2300      	movs	r3, #0
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e00d      	b.n	80030e6 <UART_SetConfig+0x29a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e00a      	b.n	80030e6 <UART_SetConfig+0x29a>
 80030d0:	2304      	movs	r3, #4
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e007      	b.n	80030e6 <UART_SetConfig+0x29a>
 80030d6:	2308      	movs	r3, #8
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e004      	b.n	80030e6 <UART_SetConfig+0x29a>
 80030dc:	2310      	movs	r3, #16
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e001      	b.n	80030e6 <UART_SetConfig+0x29a>
 80030e2:	2310      	movs	r3, #16
 80030e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <UART_SetConfig+0x2f4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	f040 809f 	bne.w	8003230 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030f2:	7efb      	ldrb	r3, [r7, #27]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d837      	bhi.n	8003168 <UART_SetConfig+0x31c>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x2b4>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003125 	.word	0x08003125
 8003104:	08003169 	.word	0x08003169
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003169 	.word	0x08003169
 8003110:	08003133 	.word	0x08003133
 8003114:	08003169 	.word	0x08003169
 8003118:	08003169 	.word	0x08003169
 800311c:	08003169 	.word	0x08003169
 8003120:	08003161 	.word	0x08003161
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7ff f80a 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003128:	6178      	str	r0, [r7, #20]
        break;
 800312a:	e022      	b.n	8003172 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <UART_SetConfig+0x310>)
 800312e:	617b      	str	r3, [r7, #20]
        break;
 8003130:	e01f      	b.n	8003172 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7fe ff95 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003136:	6178      	str	r0, [r7, #20]
        break;
 8003138:	e01b      	b.n	8003172 <UART_SetConfig+0x326>
 800313a:	bf00      	nop
 800313c:	cfff69f3 	.word	0xcfff69f3
 8003140:	40008000 	.word	0x40008000
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40004400 	.word	0x40004400
 8003150:	40004800 	.word	0x40004800
 8003154:	40004c00 	.word	0x40004c00
 8003158:	40005000 	.word	0x40005000
 800315c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003164:	617b      	str	r3, [r7, #20]
        break;
 8003166:	e004      	b.n	8003172 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	76bb      	strb	r3, [r7, #26]
        break;
 8003170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 811b 	beq.w	80033b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	4a96      	ldr	r2, [pc, #600]	; (80033d8 <UART_SetConfig+0x58c>)
 8003180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003184:	461a      	mov	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fbb3 f3f2 	udiv	r3, r3, r2
 800318c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d305      	bcc.n	80031aa <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d902      	bls.n	80031b0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	76bb      	strb	r3, [r7, #26]
 80031ae:	e0ff      	b.n	80033b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4a86      	ldr	r2, [pc, #536]	; (80033d8 <UART_SetConfig+0x58c>)
 80031be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f7fd f826 	bl	8000218 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	020b      	lsls	r3, r1, #8
 80031de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031e2:	0202      	lsls	r2, r0, #8
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6849      	ldr	r1, [r1, #4]
 80031e8:	0849      	lsrs	r1, r1, #1
 80031ea:	4608      	mov	r0, r1
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	1814      	adds	r4, r2, r0
 80031f2:	eb43 0501 	adc.w	r5, r3, r1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f7fd f808 	bl	8000218 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003216:	d308      	bcc.n	800322a <UART_SetConfig+0x3de>
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321e:	d204      	bcs.n	800322a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	e0c2      	b.n	80033b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	76bb      	strb	r3, [r7, #26]
 800322e:	e0bf      	b.n	80033b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d165      	bne.n	8003306 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d828      	bhi.n	8003292 <UART_SetConfig+0x446>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0x3fc>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003275 	.word	0x08003275
 8003250:	0800327d 	.word	0x0800327d
 8003254:	08003293 	.word	0x08003293
 8003258:	08003283 	.word	0x08003283
 800325c:	08003293 	.word	0x08003293
 8003260:	08003293 	.word	0x08003293
 8003264:	08003293 	.word	0x08003293
 8003268:	0800328b 	.word	0x0800328b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe ff66 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003270:	6178      	str	r0, [r7, #20]
        break;
 8003272:	e013      	b.n	800329c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7fe ff78 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003278:	6178      	str	r0, [r7, #20]
        break;
 800327a:	e00f      	b.n	800329c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800327c:	4b57      	ldr	r3, [pc, #348]	; (80033dc <UART_SetConfig+0x590>)
 800327e:	617b      	str	r3, [r7, #20]
        break;
 8003280:	e00c      	b.n	800329c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7fe feed 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003286:	6178      	str	r0, [r7, #20]
        break;
 8003288:	e008      	b.n	800329c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	617b      	str	r3, [r7, #20]
        break;
 8003290:	e004      	b.n	800329c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	76bb      	strb	r3, [r7, #26]
        break;
 800329a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8086 	beq.w	80033b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <UART_SetConfig+0x58c>)
 80032aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ae:	461a      	mov	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b6:	005a      	lsls	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	441a      	add	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d916      	bls.n	8003300 <UART_SetConfig+0x4b4>
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d212      	bcs.n	8003300 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	89fa      	ldrh	r2, [r7, #14]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e057      	b.n	80033b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	76bb      	strb	r3, [r7, #26]
 8003304:	e054      	b.n	80033b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003306:	7efb      	ldrb	r3, [r7, #27]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d828      	bhi.n	800335e <UART_SetConfig+0x512>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0x4c8>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003339 	.word	0x08003339
 8003318:	08003341 	.word	0x08003341
 800331c:	08003349 	.word	0x08003349
 8003320:	0800335f 	.word	0x0800335f
 8003324:	0800334f 	.word	0x0800334f
 8003328:	0800335f 	.word	0x0800335f
 800332c:	0800335f 	.word	0x0800335f
 8003330:	0800335f 	.word	0x0800335f
 8003334:	08003357 	.word	0x08003357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003338:	f7fe ff00 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 800333c:	6178      	str	r0, [r7, #20]
        break;
 800333e:	e013      	b.n	8003368 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003340:	f7fe ff12 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003344:	6178      	str	r0, [r7, #20]
        break;
 8003346:	e00f      	b.n	8003368 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <UART_SetConfig+0x590>)
 800334a:	617b      	str	r3, [r7, #20]
        break;
 800334c:	e00c      	b.n	8003368 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334e:	f7fe fe87 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003352:	6178      	str	r0, [r7, #20]
        break;
 8003354:	e008      	b.n	8003368 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335a:	617b      	str	r3, [r7, #20]
        break;
 800335c:	e004      	b.n	8003368 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	76bb      	strb	r3, [r7, #26]
        break;
 8003366:	bf00      	nop
    }

    if (pclk != 0U)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <UART_SetConfig+0x58c>)
 8003374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003378:	461a      	mov	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	441a      	add	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	b29b      	uxth	r3, r3
 8003392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d908      	bls.n	80033ac <UART_SetConfig+0x560>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d204      	bcs.n	80033ac <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e001      	b.n	80033b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80033cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bdb0      	pop	{r4, r5, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	08005118 	.word	0x08005118
 80033dc:	00f42400 	.word	0x00f42400

080033e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01a      	beq.n	80034f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d10a      	bne.n	80034f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003534:	f7fd fd90 	bl	8001058 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10e      	bne.n	8003566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f82f 	bl	80035ba <UART_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e025      	b.n	80035b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d10e      	bne.n	8003592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f819 	bl	80035ba <UART_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ca:	e062      	b.n	8003692 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d05e      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fd fd40 	bl	8001058 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <UART_WaitOnFlagUntilTimeout+0x30>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11d      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e045      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02e      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003642:	d126      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800364c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d08d      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e027      	b.n	8003720 <HAL_UARTEx_DisableFifoMode+0x66>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80036fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e02d      	b.n	80037a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f84f 	bl	8003824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e02d      	b.n	800381c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f811 	bl	8003824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003844:	e031      	b.n	80038aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003846:	2308      	movs	r3, #8
 8003848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800384a:	2308      	movs	r3, #8
 800384c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	0f5b      	lsrs	r3, r3, #29
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	7b3a      	ldrb	r2, [r7, #12]
 8003872:	4911      	ldr	r1, [pc, #68]	; (80038b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003874:	5c8a      	ldrb	r2, [r1, r2]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800387a:	7b3a      	ldrb	r2, [r7, #12]
 800387c:	490f      	ldr	r1, [pc, #60]	; (80038bc <UARTEx_SetNbDataToProcess+0x98>)
 800387e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003880:	fb93 f3f2 	sdiv	r3, r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	7b7a      	ldrb	r2, [r7, #13]
 8003890:	4909      	ldr	r1, [pc, #36]	; (80038b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003892:	5c8a      	ldrb	r2, [r1, r2]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003898:	7b7a      	ldrb	r2, [r7, #13]
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <UARTEx_SetNbDataToProcess+0x98>)
 800389c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800389e:	fb93 f3f2 	sdiv	r3, r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	08005130 	.word	0x08005130
 80038bc:	08005138 	.word	0x08005138

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4d0d      	ldr	r5, [pc, #52]	; (80038f8 <__libc_init_array+0x38>)
 80038c4:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	2600      	movs	r6, #0
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	4d0b      	ldr	r5, [pc, #44]	; (8003900 <__libc_init_array+0x40>)
 80038d2:	4c0c      	ldr	r4, [pc, #48]	; (8003904 <__libc_init_array+0x44>)
 80038d4:	f000 f820 	bl	8003918 <_init>
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	2600      	movs	r6, #0
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08005148 	.word	0x08005148
 80038fc:	08005148 	.word	0x08005148
 8003900:	08005148 	.word	0x08005148
 8003904:	0800514c 	.word	0x0800514c

08003908 <memset>:
 8003908:	4402      	add	r2, r0
 800390a:	4603      	mov	r3, r0
 800390c:	4293      	cmp	r3, r2
 800390e:	d100      	bne.n	8003912 <memset+0xa>
 8003910:	4770      	bx	lr
 8003912:	f803 1b01 	strb.w	r1, [r3], #1
 8003916:	e7f9      	b.n	800390c <memset+0x4>

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
