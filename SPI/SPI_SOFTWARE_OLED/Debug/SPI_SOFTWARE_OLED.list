
SPI_SOFTWARE_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fc4  08002fc4  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08002fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001cc  08003198  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003198  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9eb  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de0  00000000  00000000  0002cbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002472f  00000000  00000000  0002fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d05f  00000000  00000000  0005442f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6139  00000000  00000000  0006148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001475c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  0014761c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001cc 	.word	0x200001cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f64 	.word	0x08002f64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d0 	.word	0x200001d0
 8000214:	08002f64 	.word	0x08002f64

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <my_delay_ms>:
#include "oled.h" 
#include "oledfont.h"  	 
#include "stdlib.h"

void my_delay_ms(int ms)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fc48 	bl	8000db0 <HAL_Delay>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <OLED_WR_Byte>:

//向SSD1106写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if(cmd)
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d005      	beq.n	800054a <OLED_WR_Byte+0x22>
	  OLED_DC_Set();
 800053e:	2201      	movs	r2, #1
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <OLED_WR_Byte+0xa8>)
 8000544:	f000 fee8 	bl	8001318 <HAL_GPIO_WritePin>
 8000548:	e004      	b.n	8000554 <OLED_WR_Byte+0x2c>
	else 
	  OLED_DC_Clr();		  
 800054a:	2200      	movs	r2, #0
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	4820      	ldr	r0, [pc, #128]	; (80005d0 <OLED_WR_Byte+0xa8>)
 8000550:	f000 fee2 	bl	8001318 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055a:	481d      	ldr	r0, [pc, #116]	; (80005d0 <OLED_WR_Byte+0xa8>)
 800055c:	f000 fedc 	bl	8001318 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e022      	b.n	80005ac <OLED_WR_Byte+0x84>
	{			  
		OLED_SCLK_Clr();
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f000 fed3 	bl	8001318 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	2b00      	cmp	r3, #0
 8000578:	da06      	bge.n	8000588 <OLED_WR_Byte+0x60>
		   OLED_SDIN_Set();
 800057a:	2201      	movs	r2, #1
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fec9 	bl	8001318 <HAL_GPIO_WritePin>
 8000586:	e005      	b.n	8000594 <OLED_WR_Byte+0x6c>
		else 
		   OLED_SDIN_Clr();
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fec2 	bl	8001318 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 febc 	bl	8001318 <HAL_GPIO_WritePin>
		dat<<=1;   
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	3301      	adds	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2b07      	cmp	r3, #7
 80005b0:	d9d9      	bls.n	8000566 <OLED_WR_Byte+0x3e>
	}				 		  
	OLED_CS_Set();
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <OLED_WR_Byte+0xa8>)
 80005ba:	f000 fead 	bl	8001318 <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <OLED_WR_Byte+0xa8>)
 80005c4:	f000 fea8 	bl	8001318 <HAL_GPIO_WritePin>
} 
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000800 	.word	0x48000800

080005d4 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{ 
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	3b50      	subs	r3, #80	; 0x50
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff9b 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff91 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	f003 030e 	and.w	r3, r3, #14
 800060e:	b25b      	sxtb	r3, r3
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff84 	bl	8000528 <OLED_WR_Byte>
}   	  
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 

void OLED_Clear(void)  
{  
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	e01f      	b.n	8000674 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3b50      	subs	r3, #80	; 0x50
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff73 	bl	8000528 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ff6f 	bl	8000528 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 800064a:	2100      	movs	r1, #0
 800064c:	2010      	movs	r0, #16
 800064e:	f7ff ff6b 	bl	8000528 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
 8000656:	e006      	b.n	8000666 <OLED_Clear+0x3e>
 8000658:	2101      	movs	r1, #1
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff64 	bl	8000528 <OLED_WR_Byte>
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	3301      	adds	r3, #1
 8000664:	71bb      	strb	r3, [r7, #6]
 8000666:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	daf4      	bge.n	8000658 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	3301      	adds	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b07      	cmp	r3, #7
 8000678:	d9dc      	bls.n	8000634 <OLED_Clear+0xc>
	} //������ʾ
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <OLED_ShowCHinese>:
			j++;
	}
}
//��ʾ����
void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)
{      			    
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	717b      	strb	r3, [r7, #5]
	uint8_t t,adder=0;
 8000696:	2300      	movs	r3, #0
 8000698:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff97 	bl	80005d4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e011      	b.n	80006d0 <OLED_ShowCHinese+0x4c>
		{
				OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	005a      	lsls	r2, r3, #1
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	491c      	ldr	r1, [pc, #112]	; (8000724 <OLED_ShowCHinese+0xa0>)
 80006b4:	0152      	lsls	r2, r2, #5
 80006b6:	440a      	add	r2, r1
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff32 	bl	8000528 <OLED_WR_Byte>
				adder+=1;
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	3301      	adds	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d9ea      	bls.n	80006ac <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff77 	bl	80005d4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	e012      	b.n	8000712 <OLED_ShowCHinese+0x8e>
			{	
				OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	490b      	ldr	r1, [pc, #44]	; (8000724 <OLED_ShowCHinese+0xa0>)
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	440a      	add	r2, r1
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff11 	bl	8000528 <OLED_WR_Byte>
				adder+=1;
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d9e9      	bls.n	80006ec <OLED_ShowCHinese+0x68>
      }					
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000

08000728 <OLED_Init>:
} 


//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
 
	OLED_RST_Set();
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	4848      	ldr	r0, [pc, #288]	; (8000854 <OLED_Init+0x12c>)
 8000734:	f000 fdf0 	bl	8001318 <HAL_GPIO_WritePin>
	my_delay_ms(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f7ff fee9 	bl	8000510 <my_delay_ms>
	OLED_RST_Clr();
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4843      	ldr	r0, [pc, #268]	; (8000854 <OLED_Init+0x12c>)
 8000746:	f000 fde7 	bl	8001318 <HAL_GPIO_WritePin>
	my_delay_ms(200);
 800074a:	20c8      	movs	r0, #200	; 0xc8
 800074c:	f7ff fee0 	bl	8000510 <my_delay_ms>
	OLED_RST_Set(); 
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <OLED_Init+0x12c>)
 8000758:	f000 fdde 	bl	8001318 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800075c:	2100      	movs	r1, #0
 800075e:	20ae      	movs	r0, #174	; 0xae
 8000760:	f7ff fee2 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8000764:	2100      	movs	r1, #0
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fede 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800076c:	2100      	movs	r1, #0
 800076e:	2010      	movs	r0, #16
 8000770:	f7ff feda 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000774:	2100      	movs	r1, #0
 8000776:	2040      	movs	r0, #64	; 0x40
 8000778:	f7ff fed6 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800077c:	2100      	movs	r1, #0
 800077e:	2081      	movs	r0, #129	; 0x81
 8000780:	f7ff fed2 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8000784:	2100      	movs	r1, #0
 8000786:	20cf      	movs	r0, #207	; 0xcf
 8000788:	f7ff fece 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 800078c:	2100      	movs	r1, #0
 800078e:	20a1      	movs	r0, #161	; 0xa1
 8000790:	f7ff feca 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8000794:	2100      	movs	r1, #0
 8000796:	20c8      	movs	r0, #200	; 0xc8
 8000798:	f7ff fec6 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800079c:	2100      	movs	r1, #0
 800079e:	20a6      	movs	r0, #166	; 0xa6
 80007a0:	f7ff fec2 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80007a4:	2100      	movs	r1, #0
 80007a6:	20a8      	movs	r0, #168	; 0xa8
 80007a8:	f7ff febe 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 80007ac:	2100      	movs	r1, #0
 80007ae:	203f      	movs	r0, #63	; 0x3f
 80007b0:	f7ff feba 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80007b4:	2100      	movs	r1, #0
 80007b6:	20d3      	movs	r0, #211	; 0xd3
 80007b8:	f7ff feb6 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff feb2 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 80007c4:	2100      	movs	r1, #0
 80007c6:	20d5      	movs	r0, #213	; 0xd5
 80007c8:	f7ff feae 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 80007cc:	2100      	movs	r1, #0
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	f7ff feaa 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80007d4:	2100      	movs	r1, #0
 80007d6:	20d9      	movs	r0, #217	; 0xd9
 80007d8:	f7ff fea6 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80007dc:	2100      	movs	r1, #0
 80007de:	20f1      	movs	r0, #241	; 0xf1
 80007e0:	f7ff fea2 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 80007e4:	2100      	movs	r1, #0
 80007e6:	20da      	movs	r0, #218	; 0xda
 80007e8:	f7ff fe9e 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2012      	movs	r0, #18
 80007f0:	f7ff fe9a 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80007f4:	2100      	movs	r1, #0
 80007f6:	20db      	movs	r0, #219	; 0xdb
 80007f8:	f7ff fe96 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80007fc:	2100      	movs	r1, #0
 80007fe:	2040      	movs	r0, #64	; 0x40
 8000800:	f7ff fe92 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8000804:	2100      	movs	r1, #0
 8000806:	2020      	movs	r0, #32
 8000808:	f7ff fe8e 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 800080c:	2100      	movs	r1, #0
 800080e:	2002      	movs	r0, #2
 8000810:	f7ff fe8a 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8000814:	2100      	movs	r1, #0
 8000816:	208d      	movs	r0, #141	; 0x8d
 8000818:	f7ff fe86 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 800081c:	2100      	movs	r1, #0
 800081e:	2014      	movs	r0, #20
 8000820:	f7ff fe82 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8000824:	2100      	movs	r1, #0
 8000826:	20a4      	movs	r0, #164	; 0xa4
 8000828:	f7ff fe7e 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 800082c:	2100      	movs	r1, #0
 800082e:	20a6      	movs	r0, #166	; 0xa6
 8000830:	f7ff fe7a 	bl	8000528 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8000834:	2100      	movs	r1, #0
 8000836:	20af      	movs	r0, #175	; 0xaf
 8000838:	f7ff fe76 	bl	8000528 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 800083c:	2100      	movs	r1, #0
 800083e:	20af      	movs	r0, #175	; 0xaf
 8000840:	f7ff fe72 	bl	8000528 <OLED_WR_Byte>
	OLED_Clear();
 8000844:	f7ff fef0 	bl	8000628 <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fec2 	bl	80005d4 <OLED_Set_Pos>
}  
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	48000800 	.word	0x48000800

08000858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <MX_GPIO_Init+0xfc>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a32      	ldr	r2, [pc, #200]	; (8000954 <MX_GPIO_Init+0xfc>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <MX_GPIO_Init+0xfc>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_GPIO_Init+0xfc>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CLK_Pin|OLED_DIN_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	21a0      	movs	r1, #160	; 0xa0
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 fd1f 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_DC_Pin|OLED_RES_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7150 	mov.w	r1, #832	; 0x340
 80008e0:	481d      	ldr	r0, [pc, #116]	; (8000958 <MX_GPIO_Init+0x100>)
 80008e2:	f000 fd19 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_GPIO_Init+0x104>)
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <MX_GPIO_Init+0x100>)
 80008fc:	f000 fb8a 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_CLK_Pin|OLED_DIN_Pin;
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fb7b 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin|OLED_CS_Pin;
 800091e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_GPIO_Init+0x100>)
 8000938:	f000 fb6c 	bl	8001014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fb32 	bl	8000faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f000 fb49 	bl	8000fde <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800
 800095c:	10110000 	.word	0x10110000

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f000 f9b3 	bl	8000cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f82a 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096c:	f7ff ff74 	bl	8000858 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000970:	f000 f8f8 	bl	8000b64 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000974:	f7ff fed8 	bl	8000728 <OLED_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		OLED_ShowCHinese(0,0,0);//中
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fe81 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(18,0,1);//景
 8000982:	2201      	movs	r2, #1
 8000984:	2100      	movs	r1, #0
 8000986:	2012      	movs	r0, #18
 8000988:	f7ff fe7c 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(36,0,2);//园
 800098c:	2202      	movs	r2, #2
 800098e:	2100      	movs	r1, #0
 8000990:	2024      	movs	r0, #36	; 0x24
 8000992:	f7ff fe77 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(54,0,3);//电
 8000996:	2203      	movs	r2, #3
 8000998:	2100      	movs	r1, #0
 800099a:	2036      	movs	r0, #54	; 0x36
 800099c:	f7ff fe72 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(72,0,4);//子
 80009a0:	2204      	movs	r2, #4
 80009a2:	2100      	movs	r1, #0
 80009a4:	2048      	movs	r0, #72	; 0x48
 80009a6:	f7ff fe6d 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(90,0,5);//科
 80009aa:	2205      	movs	r2, #5
 80009ac:	2100      	movs	r1, #0
 80009ae:	205a      	movs	r0, #90	; 0x5a
 80009b0:	f7ff fe68 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(108,0,6);//技
 80009b4:	2206      	movs	r2, #6
 80009b6:	2100      	movs	r1, #0
 80009b8:	206c      	movs	r0, #108	; 0x6c
 80009ba:	f7ff fe63 	bl	8000684 <OLED_ShowCHinese>
		OLED_ShowCHinese(0,0,0);//中
 80009be:	e7db      	b.n	8000978 <main+0x18>

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a8      	sub	sp, #160	; 0xa0
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009ca:	2238      	movs	r2, #56	; 0x38
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fac0 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2254      	movs	r2, #84	; 0x54
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fab2 	bl	8002f54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fccd 	bl	8001390 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a12:	2355      	movs	r3, #85	; 0x55
 8000a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fd62 	bl	80014f8 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a3a:	f000 f826 	bl	8000a8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2303      	movs	r3, #3
 8000a44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	2104      	movs	r1, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f865 	bl	8001b28 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a64:	f000 f811 	bl	8000a8a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fa74 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f804 	bl	8000a8a <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	37a0      	adds	r7, #160	; 0xa0
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aca:	f000 fd05 	bl	80014d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f924 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b38:	f000 fc06 	bl	8001348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ba6:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000ba8:	f001 fc26 	bl	80023f8 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f7ff ff6a 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000bba:	f002 f8dd 	bl	8002d78 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000bc4:	f7ff ff61 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000bcc:	f002 f912 	bl	8002df4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000bd6:	f7ff ff58 	bl	8000a8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_LPUART1_UART_Init+0x8c>)
 8000bdc:	f002 f893 	bl	8002d06 <HAL_UARTEx_DisableFifoMode>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000be6:	f7ff ff50 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001e8 	.word	0x200001e8
 8000bf4:	40008000 	.word	0x40008000

08000bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x7c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d128      	bne.n	8000c6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0x80>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 f9d4 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40008000 	.word	0x40008000
 8000c78:	40021000 	.word	0x40021000

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca6:	f7ff ff4b 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 f92f 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fe57 	bl	8000960 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   r0, =_estack
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000cc0:	08002fcc 	.word	0x08002fcc
  ldr r2, =_sbss
 8000cc4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000cc8:	2000027c 	.word	0x2000027c

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>

08000cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f95b 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff fed0 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_InitTick+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d022      	beq.n	8000d5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f966 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10f      	bne.n	8000d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d809      	bhi.n	8000d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d42:	f000 f932 	bl	8000faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_InitTick+0x70>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e004      	b.n	8000d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001c8 	.word	0x200001c8
 8000d6c:	200001c0 	.word	0x200001c0
 8000d70:	200001c4 	.word	0x200001c4

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d84:	6013      	str	r3, [r2, #0]
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000278 	.word	0x20000278
 8000d94:	200001c8 	.word	0x200001c8

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000278 	.word	0x20000278

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d004      	beq.n	8000dd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_Delay+0x40>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd4:	bf00      	nop
 8000dd6:	f7ff ffdf 	bl	8000d98 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d8f7      	bhi.n	8000dd6 <HAL_Delay+0x26>
  {
  }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200001c8 	.word	0x200001c8

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff40 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff33 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa4 	bl	8000f50 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001022:	e15a      	b.n	80012da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 814c 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00b      	beq.n	800105c <HAL_GPIO_Init+0x48>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	2b11      	cmp	r3, #17
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0xea>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	4a56      	ldr	r2, [pc, #344]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d01f      	beq.n	800120c <HAL_GPIO_Init+0x1f8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d019      	beq.n	8001208 <HAL_GPIO_Init+0x1f4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1f0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x2f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_GPIO_Init+0x2fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f4:	2305      	movs	r3, #5
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011f8:	2306      	movs	r3, #6
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_GPIO_Init+0x300>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x300>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae9d 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f806 	bl	8001378 <HAL_GPIO_EXTI_Callback>
  }
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d141      	bne.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800139e:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d131      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013b2:	4a46      	ldr	r2, [pc, #280]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c4:	4a41      	ldr	r2, [pc, #260]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2232      	movs	r2, #50	; 0x32
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e2:	e002      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f6:	d102      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f2      	bne.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	d158      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e057      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001416:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001420:	e04d      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001428:	d141      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001436:	d131      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001450:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2232      	movs	r2, #50	; 0x32
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	e002      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3b01      	subs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001482:	d102      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f2      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d112      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e011      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014ac:	e007      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40007000 	.word	0x40007000
 80014d0:	200001c0 	.word	0x200001c0
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e6:	6093      	str	r3, [r2, #8]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e308      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001520:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d002      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e2e3      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a90      	ldr	r2, [pc, #576]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b84      	ldr	r3, [pc, #528]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a80      	ldr	r2, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbf2 	bl	8000d98 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbee 	bl	8000d98 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e2a8      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fbde 	bl	8000d98 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbda 	bl	8000d98 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e294      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x136>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x13c>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d11f      	bne.n	8001674 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x154>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e267      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	4952      	ldr	r1, [pc, #328]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001660:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_RCC_OscConfig+0x2b0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb4b 	bl	8000d00 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d043      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e253      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb86 	bl	8000d98 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb82 	bl	8000d98 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e23c      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a2:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	4939      	ldr	r1, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e01a      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb62 	bl	8000d98 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb5e 	bl	8000d98 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e218      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1e0>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d03c      	beq.n	8001780 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01c      	beq.n	8001748 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fb3b 	bl	8000d98 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb37 	bl	8000d98 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1f1      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ef      	beq.n	8001726 <HAL_RCC_OscConfig+0x22e>
 8001746:	e01b      	b.n	8001780 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fb1e 	bl	8000d98 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fb1a 	bl	8000d98 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1d4      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ef      	bne.n	8001760 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80ab 	beq.w	80018e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x2b4>
 800179e:	2301      	movs	r3, #1
 80017a0:	e005      	b.n	80017ae <HAL_RCC_OscConfig+0x2b6>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	200001c4 	.word	0x200001c4
 80017ac:	2300      	movs	r3, #0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4baf      	ldr	r3, [pc, #700]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4aae      	ldr	r2, [pc, #696]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4bac      	ldr	r3, [pc, #688]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4ba9      	ldr	r3, [pc, #676]	; (8001a74 <HAL_RCC_OscConfig+0x57c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017da:	4ba6      	ldr	r3, [pc, #664]	; (8001a74 <HAL_RCC_OscConfig+0x57c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4aa5      	ldr	r2, [pc, #660]	; (8001a74 <HAL_RCC_OscConfig+0x57c>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fad7 	bl	8000d98 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fad3 	bl	8000d98 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e18d      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b9c      	ldr	r3, [pc, #624]	; (8001a74 <HAL_RCC_OscConfig+0x57c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_RCC_OscConfig+0x32e>
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a95      	ldr	r2, [pc, #596]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001824:	e024      	b.n	8001870 <HAL_RCC_OscConfig+0x378>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d110      	bne.n	8001850 <HAL_RCC_OscConfig+0x358>
 800182e:	4b90      	ldr	r3, [pc, #576]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	4a8e      	ldr	r2, [pc, #568]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183e:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	4a8a      	ldr	r2, [pc, #552]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x378>
 8001850:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	4a86      	ldr	r2, [pc, #536]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001860:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d016      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa8e 	bl	8000d98 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa8a 	bl	8000d98 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e142      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ed      	beq.n	8001880 <HAL_RCC_OscConfig+0x388>
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fa77 	bl	8000d98 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fa73 	bl	8000d98 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e12b      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a64      	ldr	r2, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018f8:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fe:	4a5c      	ldr	r2, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fa46 	bl	8000d98 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001910:	f7ff fa42 	bl	8000d98 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0fc      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x418>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001932:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001938:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fa29 	bl	8000d98 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff fa25 	bl	8000d98 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0df      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195c:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80d3 	beq.w	8001b1a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b0c      	cmp	r3, #12
 800197e:	f000 808d 	beq.w	8001a9c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d15a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f9ff 	bl	8000d98 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f9fb 	bl	8000d98 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0b5      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_OscConfig+0x580>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6a11      	ldr	r1, [r2, #32]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0552      	lsls	r2, r2, #21
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0652      	lsls	r2, r2, #25
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019f6:	06d2      	lsls	r2, r2, #27
 80019f8:	430a      	orrs	r2, r1
 80019fa:	491d      	ldr	r1, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f9be 	bl	8000d98 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f9ba 	bl	8000d98 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e074      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x528>
 8001a3e:	e06c      	b.n	8001b1a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x578>)
 8001a5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f996 	bl	8000d98 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	e00e      	b.n	8001a8e <HAL_RCC_OscConfig+0x596>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f98c 	bl	8000d98 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e046      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x62c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x584>
 8001a9a:	e03e      	b.n	8001b1a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e039      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_RCC_OscConfig+0x62c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d12c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d123      	bne.n	8001b16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d11b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d113      	bne.n	8001b16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e11e      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b8e      	ldr	r3, [pc, #568]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	498c      	ldr	r1, [pc, #560]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b8a      	ldr	r3, [pc, #552]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e106      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d073      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d129      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0f4      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b94:	f000 f99e 	bl	8001ed4 <RCC_GetSysClockFreqFromPLLSource>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4a7c      	ldr	r2, [pc, #496]	; (8001d90 <HAL_RCC_ClockConfig+0x268>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d93f      	bls.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ba2:	4b7a      	ldr	r3, [pc, #488]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d033      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d12f      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bca:	4a70      	ldr	r2, [pc, #448]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e024      	b.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0c6      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0be      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c00:	f000 f8ce 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <HAL_RCC_ClockConfig+0x268>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d909      	bls.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4957      	ldr	r1, [pc, #348]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c34:	f7ff f8b0 	bl	8000d98 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff f8ac 	bl	8000d98 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e095      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a42      	ldr	r2, [pc, #264]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c94:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c9c:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b80      	cmp	r3, #128	; 0x80
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d21d      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 020f 	bic.w	r2, r3, #15
 8001ce0:	4929      	ldr	r1, [pc, #164]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f856 	bl	8000d98 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff f852 	bl	8000d98 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e03b      	b.n	8001d7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1ed      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4917      	ldr	r1, [pc, #92]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	490f      	ldr	r1, [pc, #60]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d52:	f000 f825 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	490c      	ldr	r1, [pc, #48]	; (8001d94 <HAL_RCC_ClockConfig+0x26c>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x270>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x274>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ffc2 	bl	8000d00 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	04c4b400 	.word	0x04c4b400
 8001d94:	08002f7c 	.word	0x08002f7c
 8001d98:	200001c0 	.word	0x200001c0
 8001d9c:	200001c4 	.word	0x200001c4

08001da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e047      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d102      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e03e      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d136      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3301      	adds	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df4:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfe:	68d2      	ldr	r2, [r2, #12]
 8001e00:	0a12      	lsrs	r2, r2, #8
 8001e02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
      break;
 8001e0c:	e00c      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	0a12      	lsrs	r2, r2, #8
 8001e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0e5b      	lsrs	r3, r3, #25
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e001      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e48:	693b      	ldr	r3, [r7, #16]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	016e3600 	.word	0x016e3600

08001e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200001c0 	.word	0x200001c0

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08002f8c 	.word	0x08002f8c

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eac:	f7ff ffda 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0adb      	lsrs	r3, r3, #11
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08002f8c 	.word	0x08002f8c

08001ed4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d10c      	bne.n	8001f12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f02:	68d2      	ldr	r2, [r2, #12]
 8001f04:	0a12      	lsrs	r2, r2, #8
 8001f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
    break;
 8001f10:	e00c      	b.n	8001f2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	0a12      	lsrs	r2, r2, #8
 8001f20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    break;
 8001f2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	3301      	adds	r3, #1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	016e3600 	.word	0x016e3600
 8001f5c:	00f42400 	.word	0x00f42400

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8098 	beq.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe feef 	bl	8000d98 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe feeb 	bl	8000d98 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d902      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	74fb      	strb	r3, [r7, #19]
        break;
 8001fd0:	e005      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ef      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d159      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01e      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d019      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7fe feab 	bl	8000d98 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002044:	e00b      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fea7 	bl	8000d98 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d902      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	74fb      	strb	r3, [r7, #19]
            break;
 800205c:	e006      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ec      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002088:	e008      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	74bb      	strb	r3, [r7, #18]
 800208e:	e005      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209c:	7c7b      	ldrb	r3, [r7, #17]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4baf      	ldr	r3, [pc, #700]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	4aae      	ldr	r2, [pc, #696]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ba:	4ba9      	ldr	r3, [pc, #676]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f023 0203 	bic.w	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	49a5      	ldr	r1, [pc, #660]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020dc:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f023 020c 	bic.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	499d      	ldr	r1, [pc, #628]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fe:	4b98      	ldr	r3, [pc, #608]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4994      	ldr	r1, [pc, #592]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	498c      	ldr	r1, [pc, #560]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002142:	4b87      	ldr	r3, [pc, #540]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4983      	ldr	r1, [pc, #524]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002164:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	497b      	ldr	r1, [pc, #492]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4972      	ldr	r1, [pc, #456]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a8:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	496a      	ldr	r1, [pc, #424]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	4961      	ldr	r1, [pc, #388]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ec:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	4959      	ldr	r1, [pc, #356]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	4950      	ldr	r1, [pc, #320]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d015      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4948      	ldr	r1, [pc, #288]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a42      	ldr	r2, [pc, #264]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	493a      	ldr	r1, [pc, #232]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d105      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a34      	ldr	r2, [pc, #208]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	491e      	ldr	r1, [pc, #120]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4910      	ldr	r1, [pc, #64]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4902      	ldr	r1, [pc, #8]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800235e:	e001      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002360:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800236c:	d105      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	4917      	ldr	r1, [pc, #92]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d105      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d015      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	4909      	ldr	r1, [pc, #36]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e042      	b.n	8002490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe fbeb 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	; 0x24
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f82c 	bl	8002498 <UART_SetConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 faea 	bl	8002a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb71 	bl	8002b70 <UART_CheckIdleState>
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4bb1      	ldr	r3, [pc, #708]	; (8002788 <UART_SetConfig+0x2f0>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	69f9      	ldr	r1, [r7, #28]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4aa6      	ldr	r2, [pc, #664]	; (800278c <UART_SetConfig+0x2f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800250a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	69f9      	ldr	r1, [r7, #28]
 8002514:	430b      	orrs	r3, r1
 8002516:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f023 010f 	bic.w	r1, r3, #15
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a97      	ldr	r2, [pc, #604]	; (8002790 <UART_SetConfig+0x2f8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d120      	bne.n	800257a <UART_SetConfig+0xe2>
 8002538:	4b96      	ldr	r3, [pc, #600]	; (8002794 <UART_SetConfig+0x2fc>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d816      	bhi.n	8002574 <UART_SetConfig+0xdc>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <UART_SetConfig+0xb4>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	0800255d 	.word	0x0800255d
 8002550:	08002569 	.word	0x08002569
 8002554:	08002563 	.word	0x08002563
 8002558:	0800256f 	.word	0x0800256f
 800255c:	2301      	movs	r3, #1
 800255e:	76fb      	strb	r3, [r7, #27]
 8002560:	e0e7      	b.n	8002732 <UART_SetConfig+0x29a>
 8002562:	2302      	movs	r3, #2
 8002564:	76fb      	strb	r3, [r7, #27]
 8002566:	e0e4      	b.n	8002732 <UART_SetConfig+0x29a>
 8002568:	2304      	movs	r3, #4
 800256a:	76fb      	strb	r3, [r7, #27]
 800256c:	e0e1      	b.n	8002732 <UART_SetConfig+0x29a>
 800256e:	2308      	movs	r3, #8
 8002570:	76fb      	strb	r3, [r7, #27]
 8002572:	e0de      	b.n	8002732 <UART_SetConfig+0x29a>
 8002574:	2310      	movs	r3, #16
 8002576:	76fb      	strb	r3, [r7, #27]
 8002578:	e0db      	b.n	8002732 <UART_SetConfig+0x29a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a86      	ldr	r2, [pc, #536]	; (8002798 <UART_SetConfig+0x300>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d132      	bne.n	80025ea <UART_SetConfig+0x152>
 8002584:	4b83      	ldr	r3, [pc, #524]	; (8002794 <UART_SetConfig+0x2fc>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d828      	bhi.n	80025e4 <UART_SetConfig+0x14c>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <UART_SetConfig+0x100>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025e5 	.word	0x080025e5
 80025a0:	080025e5 	.word	0x080025e5
 80025a4:	080025e5 	.word	0x080025e5
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080025e5 	.word	0x080025e5
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	080025e5 	.word	0x080025e5
 80025b8:	080025d3 	.word	0x080025d3
 80025bc:	080025e5 	.word	0x080025e5
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080025e5 	.word	0x080025e5
 80025c8:	080025df 	.word	0x080025df
 80025cc:	2300      	movs	r3, #0
 80025ce:	76fb      	strb	r3, [r7, #27]
 80025d0:	e0af      	b.n	8002732 <UART_SetConfig+0x29a>
 80025d2:	2302      	movs	r3, #2
 80025d4:	76fb      	strb	r3, [r7, #27]
 80025d6:	e0ac      	b.n	8002732 <UART_SetConfig+0x29a>
 80025d8:	2304      	movs	r3, #4
 80025da:	76fb      	strb	r3, [r7, #27]
 80025dc:	e0a9      	b.n	8002732 <UART_SetConfig+0x29a>
 80025de:	2308      	movs	r3, #8
 80025e0:	76fb      	strb	r3, [r7, #27]
 80025e2:	e0a6      	b.n	8002732 <UART_SetConfig+0x29a>
 80025e4:	2310      	movs	r3, #16
 80025e6:	76fb      	strb	r3, [r7, #27]
 80025e8:	e0a3      	b.n	8002732 <UART_SetConfig+0x29a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6b      	ldr	r2, [pc, #428]	; (800279c <UART_SetConfig+0x304>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d120      	bne.n	8002636 <UART_SetConfig+0x19e>
 80025f4:	4b67      	ldr	r3, [pc, #412]	; (8002794 <UART_SetConfig+0x2fc>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025fe:	2b30      	cmp	r3, #48	; 0x30
 8002600:	d013      	beq.n	800262a <UART_SetConfig+0x192>
 8002602:	2b30      	cmp	r3, #48	; 0x30
 8002604:	d814      	bhi.n	8002630 <UART_SetConfig+0x198>
 8002606:	2b20      	cmp	r3, #32
 8002608:	d009      	beq.n	800261e <UART_SetConfig+0x186>
 800260a:	2b20      	cmp	r3, #32
 800260c:	d810      	bhi.n	8002630 <UART_SetConfig+0x198>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <UART_SetConfig+0x180>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d006      	beq.n	8002624 <UART_SetConfig+0x18c>
 8002616:	e00b      	b.n	8002630 <UART_SetConfig+0x198>
 8002618:	2300      	movs	r3, #0
 800261a:	76fb      	strb	r3, [r7, #27]
 800261c:	e089      	b.n	8002732 <UART_SetConfig+0x29a>
 800261e:	2302      	movs	r3, #2
 8002620:	76fb      	strb	r3, [r7, #27]
 8002622:	e086      	b.n	8002732 <UART_SetConfig+0x29a>
 8002624:	2304      	movs	r3, #4
 8002626:	76fb      	strb	r3, [r7, #27]
 8002628:	e083      	b.n	8002732 <UART_SetConfig+0x29a>
 800262a:	2308      	movs	r3, #8
 800262c:	76fb      	strb	r3, [r7, #27]
 800262e:	e080      	b.n	8002732 <UART_SetConfig+0x29a>
 8002630:	2310      	movs	r3, #16
 8002632:	76fb      	strb	r3, [r7, #27]
 8002634:	e07d      	b.n	8002732 <UART_SetConfig+0x29a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a59      	ldr	r2, [pc, #356]	; (80027a0 <UART_SetConfig+0x308>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d120      	bne.n	8002682 <UART_SetConfig+0x1ea>
 8002640:	4b54      	ldr	r3, [pc, #336]	; (8002794 <UART_SetConfig+0x2fc>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800264a:	2bc0      	cmp	r3, #192	; 0xc0
 800264c:	d013      	beq.n	8002676 <UART_SetConfig+0x1de>
 800264e:	2bc0      	cmp	r3, #192	; 0xc0
 8002650:	d814      	bhi.n	800267c <UART_SetConfig+0x1e4>
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	d009      	beq.n	800266a <UART_SetConfig+0x1d2>
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d810      	bhi.n	800267c <UART_SetConfig+0x1e4>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <UART_SetConfig+0x1cc>
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d006      	beq.n	8002670 <UART_SetConfig+0x1d8>
 8002662:	e00b      	b.n	800267c <UART_SetConfig+0x1e4>
 8002664:	2300      	movs	r3, #0
 8002666:	76fb      	strb	r3, [r7, #27]
 8002668:	e063      	b.n	8002732 <UART_SetConfig+0x29a>
 800266a:	2302      	movs	r3, #2
 800266c:	76fb      	strb	r3, [r7, #27]
 800266e:	e060      	b.n	8002732 <UART_SetConfig+0x29a>
 8002670:	2304      	movs	r3, #4
 8002672:	76fb      	strb	r3, [r7, #27]
 8002674:	e05d      	b.n	8002732 <UART_SetConfig+0x29a>
 8002676:	2308      	movs	r3, #8
 8002678:	76fb      	strb	r3, [r7, #27]
 800267a:	e05a      	b.n	8002732 <UART_SetConfig+0x29a>
 800267c:	2310      	movs	r3, #16
 800267e:	76fb      	strb	r3, [r7, #27]
 8002680:	e057      	b.n	8002732 <UART_SetConfig+0x29a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <UART_SetConfig+0x30c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d125      	bne.n	80026d8 <UART_SetConfig+0x240>
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <UART_SetConfig+0x2fc>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800269a:	d017      	beq.n	80026cc <UART_SetConfig+0x234>
 800269c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026a0:	d817      	bhi.n	80026d2 <UART_SetConfig+0x23a>
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a6:	d00b      	beq.n	80026c0 <UART_SetConfig+0x228>
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d811      	bhi.n	80026d2 <UART_SetConfig+0x23a>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <UART_SetConfig+0x222>
 80026b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b6:	d006      	beq.n	80026c6 <UART_SetConfig+0x22e>
 80026b8:	e00b      	b.n	80026d2 <UART_SetConfig+0x23a>
 80026ba:	2300      	movs	r3, #0
 80026bc:	76fb      	strb	r3, [r7, #27]
 80026be:	e038      	b.n	8002732 <UART_SetConfig+0x29a>
 80026c0:	2302      	movs	r3, #2
 80026c2:	76fb      	strb	r3, [r7, #27]
 80026c4:	e035      	b.n	8002732 <UART_SetConfig+0x29a>
 80026c6:	2304      	movs	r3, #4
 80026c8:	76fb      	strb	r3, [r7, #27]
 80026ca:	e032      	b.n	8002732 <UART_SetConfig+0x29a>
 80026cc:	2308      	movs	r3, #8
 80026ce:	76fb      	strb	r3, [r7, #27]
 80026d0:	e02f      	b.n	8002732 <UART_SetConfig+0x29a>
 80026d2:	2310      	movs	r3, #16
 80026d4:	76fb      	strb	r3, [r7, #27]
 80026d6:	e02c      	b.n	8002732 <UART_SetConfig+0x29a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <UART_SetConfig+0x2f4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d125      	bne.n	800272e <UART_SetConfig+0x296>
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <UART_SetConfig+0x2fc>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026f0:	d017      	beq.n	8002722 <UART_SetConfig+0x28a>
 80026f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026f6:	d817      	bhi.n	8002728 <UART_SetConfig+0x290>
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fc:	d00b      	beq.n	8002716 <UART_SetConfig+0x27e>
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d811      	bhi.n	8002728 <UART_SetConfig+0x290>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <UART_SetConfig+0x278>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d006      	beq.n	800271c <UART_SetConfig+0x284>
 800270e:	e00b      	b.n	8002728 <UART_SetConfig+0x290>
 8002710:	2300      	movs	r3, #0
 8002712:	76fb      	strb	r3, [r7, #27]
 8002714:	e00d      	b.n	8002732 <UART_SetConfig+0x29a>
 8002716:	2302      	movs	r3, #2
 8002718:	76fb      	strb	r3, [r7, #27]
 800271a:	e00a      	b.n	8002732 <UART_SetConfig+0x29a>
 800271c:	2304      	movs	r3, #4
 800271e:	76fb      	strb	r3, [r7, #27]
 8002720:	e007      	b.n	8002732 <UART_SetConfig+0x29a>
 8002722:	2308      	movs	r3, #8
 8002724:	76fb      	strb	r3, [r7, #27]
 8002726:	e004      	b.n	8002732 <UART_SetConfig+0x29a>
 8002728:	2310      	movs	r3, #16
 800272a:	76fb      	strb	r3, [r7, #27]
 800272c:	e001      	b.n	8002732 <UART_SetConfig+0x29a>
 800272e:	2310      	movs	r3, #16
 8002730:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <UART_SetConfig+0x2f4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f040 809f 	bne.w	800287c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800273e:	7efb      	ldrb	r3, [r7, #27]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d837      	bhi.n	80027b4 <UART_SetConfig+0x31c>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <UART_SetConfig+0x2b4>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	08002771 	.word	0x08002771
 8002750:	080027b5 	.word	0x080027b5
 8002754:	08002779 	.word	0x08002779
 8002758:	080027b5 	.word	0x080027b5
 800275c:	0800277f 	.word	0x0800277f
 8002760:	080027b5 	.word	0x080027b5
 8002764:	080027b5 	.word	0x080027b5
 8002768:	080027b5 	.word	0x080027b5
 800276c:	080027ad 	.word	0x080027ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002770:	f7ff fb84 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002774:	6178      	str	r0, [r7, #20]
        break;
 8002776:	e022      	b.n	80027be <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <UART_SetConfig+0x310>)
 800277a:	617b      	str	r3, [r7, #20]
        break;
 800277c:	e01f      	b.n	80027be <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277e:	f7ff fb0f 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8002782:	6178      	str	r0, [r7, #20]
        break;
 8002784:	e01b      	b.n	80027be <UART_SetConfig+0x326>
 8002786:	bf00      	nop
 8002788:	cfff69f3 	.word	0xcfff69f3
 800278c:	40008000 	.word	0x40008000
 8002790:	40013800 	.word	0x40013800
 8002794:	40021000 	.word	0x40021000
 8002798:	40004400 	.word	0x40004400
 800279c:	40004800 	.word	0x40004800
 80027a0:	40004c00 	.word	0x40004c00
 80027a4:	40005000 	.word	0x40005000
 80027a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b0:	617b      	str	r3, [r7, #20]
        break;
 80027b2:	e004      	b.n	80027be <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	76bb      	strb	r3, [r7, #26]
        break;
 80027bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 811b 	beq.w	80029fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	4a96      	ldr	r2, [pc, #600]	; (8002a24 <UART_SetConfig+0x58c>)
 80027cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d0:	461a      	mov	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d305      	bcc.n	80027f6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d902      	bls.n	80027fc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	76bb      	strb	r3, [r7, #26]
 80027fa:	e0ff      	b.n	80029fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4618      	mov	r0, r3
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	4a86      	ldr	r2, [pc, #536]	; (8002a24 <UART_SetConfig+0x58c>)
 800280a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280e:	b29a      	uxth	r2, r3
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f7fd fd00 	bl	8000218 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	020b      	lsls	r3, r1, #8
 800282a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800282e:	0202      	lsls	r2, r0, #8
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6849      	ldr	r1, [r1, #4]
 8002834:	0849      	lsrs	r1, r1, #1
 8002836:	4608      	mov	r0, r1
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	1814      	adds	r4, r2, r0
 800283e:	eb43 0501 	adc.w	r5, r3, r1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fce2 	bl	8000218 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002862:	d308      	bcc.n	8002876 <UART_SetConfig+0x3de>
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286a:	d204      	bcs.n	8002876 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	e0c2      	b.n	80029fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	76bb      	strb	r3, [r7, #26]
 800287a:	e0bf      	b.n	80029fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002884:	d165      	bne.n	8002952 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002886:	7efb      	ldrb	r3, [r7, #27]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d828      	bhi.n	80028de <UART_SetConfig+0x446>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <UART_SetConfig+0x3fc>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028b9 	.word	0x080028b9
 8002898:	080028c1 	.word	0x080028c1
 800289c:	080028c9 	.word	0x080028c9
 80028a0:	080028df 	.word	0x080028df
 80028a4:	080028cf 	.word	0x080028cf
 80028a8:	080028df 	.word	0x080028df
 80028ac:	080028df 	.word	0x080028df
 80028b0:	080028df 	.word	0x080028df
 80028b4:	080028d7 	.word	0x080028d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b8:	f7ff fae0 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 80028bc:	6178      	str	r0, [r7, #20]
        break;
 80028be:	e013      	b.n	80028e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c0:	f7ff faf2 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80028c4:	6178      	str	r0, [r7, #20]
        break;
 80028c6:	e00f      	b.n	80028e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <UART_SetConfig+0x590>)
 80028ca:	617b      	str	r3, [r7, #20]
        break;
 80028cc:	e00c      	b.n	80028e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ce:	f7ff fa67 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 80028d2:	6178      	str	r0, [r7, #20]
        break;
 80028d4:	e008      	b.n	80028e8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028da:	617b      	str	r3, [r7, #20]
        break;
 80028dc:	e004      	b.n	80028e8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	76bb      	strb	r3, [r7, #26]
        break;
 80028e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8086 	beq.w	80029fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <UART_SetConfig+0x58c>)
 80028f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028fa:	461a      	mov	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002902:	005a      	lsls	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	441a      	add	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	b29b      	uxth	r3, r3
 8002916:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	d916      	bls.n	800294c <UART_SetConfig+0x4b4>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d212      	bcs.n	800294c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f023 030f 	bic.w	r3, r3, #15
 800292e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	b29a      	uxth	r2, r3
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	4313      	orrs	r3, r2
 8002940:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	89fa      	ldrh	r2, [r7, #14]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e057      	b.n	80029fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	76bb      	strb	r3, [r7, #26]
 8002950:	e054      	b.n	80029fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002952:	7efb      	ldrb	r3, [r7, #27]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d828      	bhi.n	80029aa <UART_SetConfig+0x512>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <UART_SetConfig+0x4c8>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002985 	.word	0x08002985
 8002964:	0800298d 	.word	0x0800298d
 8002968:	08002995 	.word	0x08002995
 800296c:	080029ab 	.word	0x080029ab
 8002970:	0800299b 	.word	0x0800299b
 8002974:	080029ab 	.word	0x080029ab
 8002978:	080029ab 	.word	0x080029ab
 800297c:	080029ab 	.word	0x080029ab
 8002980:	080029a3 	.word	0x080029a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002984:	f7ff fa7a 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002988:	6178      	str	r0, [r7, #20]
        break;
 800298a:	e013      	b.n	80029b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800298c:	f7ff fa8c 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002990:	6178      	str	r0, [r7, #20]
        break;
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <UART_SetConfig+0x590>)
 8002996:	617b      	str	r3, [r7, #20]
        break;
 8002998:	e00c      	b.n	80029b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800299a:	f7ff fa01 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 800299e:	6178      	str	r0, [r7, #20]
        break;
 80029a0:	e008      	b.n	80029b4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a6:	617b      	str	r3, [r7, #20]
        break;
 80029a8:	e004      	b.n	80029b4 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	76bb      	strb	r3, [r7, #26]
        break;
 80029b2:	bf00      	nop
    }

    if (pclk != 0U)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <UART_SetConfig+0x58c>)
 80029c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	441a      	add	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	b29b      	uxth	r3, r3
 80029de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	d908      	bls.n	80029f8 <UART_SetConfig+0x560>
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d204      	bcs.n	80029f8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	e001      	b.n	80029fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002a18:	7ebb      	ldrb	r3, [r7, #26]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bdb0      	pop	{r4, r5, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	08002f94 	.word	0x08002f94
 8002a28:	00f42400 	.word	0x00f42400

08002a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01a      	beq.n	8002b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2a:	d10a      	bne.n	8002b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b80:	f7fe f90a 	bl	8000d98 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d10e      	bne.n	8002bb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f82f 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e025      	b.n	8002bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d10e      	bne.n	8002bde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f819 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e00f      	b.n	8002bfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	e062      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d05e      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe f8ba 	bl	8000d98 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11d      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e045      	b.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02e      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8e:	d126      	bne.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ca8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e00f      	b.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d08d      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_UARTEx_DisableFifoMode+0x16>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e027      	b.n	8002d6c <HAL_UARTEx_DisableFifoMode+0x66>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e02d      	b.n	8002dec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f84f 	bl	8002e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e02d      	b.n	8002e68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f811 	bl	8002e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e90:	e031      	b.n	8002ef6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e92:	2308      	movs	r3, #8
 8002e94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e96:	2308      	movs	r3, #8
 8002e98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	0e5b      	lsrs	r3, r3, #25
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	0f5b      	lsrs	r3, r3, #29
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	7b3a      	ldrb	r2, [r7, #12]
 8002ebe:	4911      	ldr	r1, [pc, #68]	; (8002f04 <UARTEx_SetNbDataToProcess+0x94>)
 8002ec0:	5c8a      	ldrb	r2, [r1, r2]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ec6:	7b3a      	ldrb	r2, [r7, #12]
 8002ec8:	490f      	ldr	r1, [pc, #60]	; (8002f08 <UARTEx_SetNbDataToProcess+0x98>)
 8002eca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	7b7a      	ldrb	r2, [r7, #13]
 8002edc:	4909      	ldr	r1, [pc, #36]	; (8002f04 <UARTEx_SetNbDataToProcess+0x94>)
 8002ede:	5c8a      	ldrb	r2, [r1, r2]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ee4:	7b7a      	ldrb	r2, [r7, #13]
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <UARTEx_SetNbDataToProcess+0x98>)
 8002ee8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	08002fac 	.word	0x08002fac
 8002f08:	08002fb4 	.word	0x08002fb4

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4d0d      	ldr	r5, [pc, #52]	; (8002f44 <__libc_init_array+0x38>)
 8002f10:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f12:	1b64      	subs	r4, r4, r5
 8002f14:	10a4      	asrs	r4, r4, #2
 8002f16:	2600      	movs	r6, #0
 8002f18:	42a6      	cmp	r6, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	4d0b      	ldr	r5, [pc, #44]	; (8002f4c <__libc_init_array+0x40>)
 8002f1e:	4c0c      	ldr	r4, [pc, #48]	; (8002f50 <__libc_init_array+0x44>)
 8002f20:	f000 f820 	bl	8002f64 <_init>
 8002f24:	1b64      	subs	r4, r4, r5
 8002f26:	10a4      	asrs	r4, r4, #2
 8002f28:	2600      	movs	r6, #0
 8002f2a:	42a6      	cmp	r6, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f34:	4798      	blx	r3
 8002f36:	3601      	adds	r6, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3e:	4798      	blx	r3
 8002f40:	3601      	adds	r6, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08002fc4 	.word	0x08002fc4
 8002f48:	08002fc4 	.word	0x08002fc4
 8002f4c:	08002fc4 	.word	0x08002fc4
 8002f50:	08002fc8 	.word	0x08002fc8

08002f54 <memset>:
 8002f54:	4402      	add	r2, r0
 8002f56:	4603      	mov	r3, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <_init>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr

08002f70 <_fini>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr
