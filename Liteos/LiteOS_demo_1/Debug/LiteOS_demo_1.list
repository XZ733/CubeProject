
LiteOS_demo_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004130  08004130  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004130  08004130  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  080041a8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080041a8  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c8  00000000  00000000  00038281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  0003c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029402  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178f5  00000000  00000000  00066a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb2dd  00000000  00000000  0007e31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001795fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae8  00000000  00000000  00179650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004044 	.word	0x08004044

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004044 	.word	0x08004044

08000220 <LOS_StartToRun>:
*        Start the first task, which is the highest priority task in the priority queue.
*        Other tasks are started by task scheduling.
****************************************************************************************/
    .type LOS_StartToRun, %function
LOS_StartToRun:
    CPSID   I
 8000220:	b672      	cpsid	i

    /**
     * Set PendSV and SysTick prority to the lowest.
     * read ---> modify ---> write-back.
     */
    LDR     R0, =OS_NVIC_SYSPRI2
 8000222:	4834      	ldr	r0, [pc, #208]	; (80002f4 <TaskSwitch+0x52>)
    LDR     R1, =OS_NVIC_PENDSV_SYSTICK_PRI
 8000224:	4934      	ldr	r1, [pc, #208]	; (80002f8 <TaskSwitch+0x56>)
    LDR     R2, [R0]
 8000226:	6802      	ldr	r2, [r0, #0]
    ORR     R1, R1, R2
 8000228:	ea41 0102 	orr.w	r1, r1, r2
    STR     R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

    /**
     * Set g_bTaskScheduled = 1.
     */
    LDR     R0, =g_bTaskScheduled
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <TaskSwitch+0x5a>)
    MOV     R1, #1
 8000230:	f04f 0101 	mov.w	r1, #1
    STR     R1, [R0]
 8000234:	6001      	str	r1, [r0, #0]

    /**
     * Set g_stLosTask.pstRunTask = g_stLosTask.pstNewTask.
     */
    LDR     R0, =g_stLosTask
 8000236:	4832      	ldr	r0, [pc, #200]	; (8000300 <TaskSwitch+0x5e>)
    LDR     R1, [R0, #4]
 8000238:	6841      	ldr	r1, [r0, #4]
    STR     R1, [R0]
 800023a:	6001      	str	r1, [r0, #0]

    /**
     * Set g_stLosTask.pstRunTask->usTaskStatus |= OS_TASK_STATUS_RUNNING.
     */
    LDR     R1, [R0]
 800023c:	6801      	ldr	r1, [r0, #0]
    LDRH    R2, [R1, #4]
 800023e:	888a      	ldrh	r2, [r1, #4]
    MOV     R3, #OS_TASK_STATUS_RUNNING
 8000240:	f04f 0310 	mov.w	r3, #16
    ORR     R2, R2, R3
 8000244:	ea42 0203 	orr.w	r2, r2, r3
    STRH    R2, [R1, #4]
 8000248:	808a      	strh	r2, [r1, #4]
     *           |<---Top of the stack, restored from g_stLosTask.pstRunTask->pStackPointer
     *           |<---           skip          --->|<---     copy to R0-R7      --->|
     *                                                                R12 to PSP--->|
     *                                        Stack pointer after LOS_StartToRun--->|
     */
    LDR     R12, [R1]
 800024a:	f8d1 c000 	ldr.w	ip, [r1]
    ADD     R12, R12, #36          /* skip R4-R11, PRIMASK. */
 800024e:	f10c 0c24 	add.w	ip, ip, #36	; 0x24
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    ADD     R12, R12, #4           /* if FPU exist, skip EXC_RETURN. */
 8000252:	f10c 0c04 	add.w	ip, ip, #4
#endif
    LDMFD   R12!, {R0-R7}
 8000256:	e8bc 00ff 	ldmia.w	ip!, {r0, r1, r2, r3, r4, r5, r6, r7}

    /**
     * Set the stack pointer of g_stLosTask.pstRunTask to PSP.
     */
    MSR     PSP, R12
 800025a:	f38c 8809 	msr	PSP, ip

    /**
     * Set the CONTROL register, after schedule start, privilege level and stack = PSP.
     */
    MOV     R12, #2
 800025e:	f04f 0c02 	mov.w	ip, #2
    MSR     CONTROL, R12
 8000262:	f38c 8814 	msr	CONTROL, ip

    /**
     * Enable interrupt. (The default PRIMASK value is 0, so enable directly)
     */
    MOV     LR, R5
 8000266:	46ae      	mov	lr, r5
    CPSIE   I
 8000268:	b662      	cpsie	i

    /**
     * Jump directly to the default PC of g_stLosTask.pstRunTask, the field information
     * of the main function will be destroyed and will never be returned.
     */
    BX      R6
 800026a:	4730      	bx	r6

0800026c <LOS_IntLock>:
*        Restore the locked interruption of LOS_IntLock.
*        The caller must pass in the value of interruption state previously saved.
****************************************************************************************/
    .type LOS_IntLock, %function
LOS_IntLock:
    MRS     R0, PRIMASK
 800026c:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 8000270:	b672      	cpsid	i
    BX      LR
 8000272:	4770      	bx	lr

08000274 <LOS_IntUnLock>:

    .type LOS_IntUnLock, %function
LOS_IntUnLock:
    MRS     R0, PRIMASK
 8000274:	f3ef 8010 	mrs	r0, PRIMASK
    CPSIE   I
 8000278:	b662      	cpsie	i
    BX      LR
 800027a:	4770      	bx	lr

0800027c <LOS_IntRestore>:

    .type LOS_IntRestore, %function
LOS_IntRestore:
    MSR     PRIMASK, R0
 800027c:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 8000280:	4770      	bx	lr

08000282 <osTaskSchedule>:
* Description:
*        Start the task swtich process by software trigger PendSV interrupt.
****************************************************************************************/
    .type osTaskSchedule, %function
osTaskSchedule:
    LDR     R0, =OS_NVIC_INT_CTRL
 8000282:	4820      	ldr	r0, [pc, #128]	; (8000304 <TaskSwitch+0x62>)
    LDR     R1, =OS_NVIC_PENDSVSET
 8000284:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000288:	6001      	str	r1, [r0, #0]
    BX      LR
 800028a:	4770      	bx	lr

0800028c <PendSV_Handler>:
PendSV_Handler:
    /**
     * R12: Save the interruption state of the current running task.
     * Disable all interrupts except Reset,NMI and HardFault
     */
    MRS     R12, PRIMASK
 800028c:	f3ef 8c10 	mrs	ip, PRIMASK
    CPSID   I
 8000290:	b672      	cpsid	i

    /**
     * Call task switch hook.
     */
    LDR     R2, =g_pfnTskSwitchHook
 8000292:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <TaskSwitch+0x66>)
    LDR     R2, [R2]
 8000294:	6812      	ldr	r2, [r2, #0]
    CBZ     R2, TaskSwitch
 8000296:	b122      	cbz	r2, 80002a2 <TaskSwitch>
    PUSH    {R12, LR}
 8000298:	e92d 5000 	stmdb	sp!, {ip, lr}
    BLX     R2
 800029c:	4790      	blx	r2
    POP     {R12, LR}
 800029e:	e8bd 5000 	ldmia.w	sp!, {ip, lr}

080002a2 <TaskSwitch>:

TaskSwitch:
    /**
     * R0 = now stack pointer of the current running task.
     */
    MRS     R0, PSP
 80002a2:	f3ef 8009 	mrs	r0, PSP
     *                                       |<---           cpu auto saved          --->|
     *                                       |<---PSP to R0
     *   |<---Top of the stack, save to g_stLosTask.pstRunTask->pStackPointer
     */
#if defined (__VFP_FP__) && !defined(__SOFTFP__)       /* if FPU exist. */
    TST     R14, #0x10             /* if the task using the FPU context, push s16-s31. */
 80002a6:	f01e 0f10 	tst.w	lr, #16
    IT      EQ
 80002aa:	bf08      	it	eq
    VSTMDBEQ  R0!, {D8-D15}
 80002ac:	ed20 8b10 	vstmdbeq	r0!, {d8-d15}
    STMFD   R0!, {R14}             /* save EXC_RETURN. */
 80002b0:	f840 ed04 	str.w	lr, [r0, #-4]!
#endif
    STMFD   R0!, {R4-R12}          /* save the core registers and PRIMASK. */
 80002b4:	e920 1ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /**
     * R5,R8.
     */
    LDR     R5, =g_stLosTask
 80002b8:	4d11      	ldr	r5, [pc, #68]	; (8000300 <TaskSwitch+0x5e>)
    MOV     R8, #OS_TASK_STATUS_RUNNING
 80002ba:	f04f 0810 	mov.w	r8, #16

    /**
     * Save the stack pointer of the current running task to TCB.
     * (g_stLosTask.pstRunTask->pStackPointer = R0)
     */
    LDR     R6, [R5]
 80002be:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]
 80002c0:	6030      	str	r0, [r6, #0]

    /**
     * Clear the RUNNING state of the current running task.
     * (g_stLosTask.pstRunTask->usTaskStatus &= ~OS_TASK_STATUS_RUNNING)
     */
    LDRH    R7, [R6, #4]
 80002c2:	88b7      	ldrh	r7, [r6, #4]
    BIC     R7, R7, R8
 80002c4:	ea27 0708 	bic.w	r7, r7, r8
    STRH    R7, [R6, #4]
 80002c8:	80b7      	strh	r7, [r6, #4]

    /**
     * Switch the current running task to the next running task.
     * (g_stLosTask.pstRunTask = g_stLosTask.pstNewTask)
     */
    LDR     R0, [R5, #4]
 80002ca:	6868      	ldr	r0, [r5, #4]
    STR     R0, [R5]
 80002cc:	6028      	str	r0, [r5, #0]

    /**
     * Set the RUNNING state of the next running task.
     * (g_stLosTask.pstNewTask->usTaskStatus |= OS_TASK_STATUS_RUNNING)
     */
    LDRH    R7, [R0, #4]
 80002ce:	8887      	ldrh	r7, [r0, #4]
    ORR     R7, R7, R8
 80002d0:	ea47 0708 	orr.w	r7, r7, r8
    STRH    R7, [R0, #4]
 80002d4:	8087      	strh	r7, [r0, #4]

    /**
     * Restore the stack pointer of the next running task from TCB.
     * (R1 = g_stLosTask.pstNewTask->pStackPointer)
     */
    LDR     R1, [R0]
 80002d6:	6801      	ldr	r1, [r0, #0]
     *           |<---Top of the stack, restored from g_stLosTask.pstNewTask->pStackPointer
     *                                R1 to PSP--->|
     *                                             |<---   cpu auto restoring   --->|
     *                                     Stack pointer after exiting exception--->|
     */
    LDMFD   R1!, {R4-R12}          /* restore the core registers and PRIMASK. */
 80002d8:	e8b1 1ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#if defined (__VFP_FP__) && !defined(__SOFTFP__)       /* if FPU exist. */
    LDMFD   R1!, {R14}             /* restore EXC_RETURN. */
 80002dc:	f851 eb04 	ldr.w	lr, [r1], #4
    TST     R14, #0x10             /* if the task using the FPU context, pop s16-s31. */
 80002e0:	f01e 0f10 	tst.w	lr, #16
    IT      EQ
 80002e4:	bf08      	it	eq
    VLDMIAEQ  R1!, {D8-D15}
 80002e6:	ecb1 8b10 	vldmiaeq	r1!, {d8-d15}
#endif

    /**
     * Set the stack pointer of the next running task to PSP.
     */
    MSR     PSP, R1
 80002ea:	f381 8809 	msr	PSP, r1

    /**
     * Restore the interruption state of the next running task.
     */
    MSR     PRIMASK, R12
 80002ee:	f38c 8810 	msr	PRIMASK, ip
    BX      LR
 80002f2:	4770      	bx	lr
    LDR     R0, =OS_NVIC_SYSPRI2
 80002f4:	e000ed20 	.word	0xe000ed20
    LDR     R1, =OS_NVIC_PENDSV_SYSTICK_PRI
 80002f8:	ffff0000 	.word	0xffff0000
    LDR     R0, =g_bTaskScheduled
 80002fc:	20000174 	.word	0x20000174
    LDR     R0, =g_stLosTask
 8000300:	2000016c 	.word	0x2000016c
    LDR     R0, =OS_NVIC_INT_CTRL
 8000304:	e000ed04 	.word	0xe000ed04
    LDR     R2, =g_pfnTskSwitchHook
 8000308:	200000d4 	.word	0x200000d4
 800030c:	00000000 	.word	0x00000000

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_GPIO_Init+0x90>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <MX_GPIO_Init+0x90>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x90>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0320 	and.w	r3, r3, #32
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x90>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_GPIO_Init+0x90>)
 80003e4:	f043 0308 	orr.w	r3, r3, #8
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x90>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x90>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <MX_GPIO_Init+0x90>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x90>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <MX_GPIO_Init+0x94>)
 8000416:	f000 fcb5 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800041a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042c:	f107 030c 	add.w	r3, r7, #12
 8000430:	4619      	mov	r1, r3
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_GPIO_Init+0x94>)
 8000434:	f000 fb24 	bl	8000a80 <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	48000c00 	.word	0x48000c00

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa01 	bl	8000852 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f803 	bl	800045a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f7ff ffac 	bl	80003b0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000458:	e7fe      	b.n	8000458 <main+0x10>

0800045a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b094      	sub	sp, #80	; 0x50
 800045e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	2238      	movs	r2, #56	; 0x38
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fe17 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800047c:	2000      	movs	r0, #0
 800047e:	f000 fc99 	bl	8000db4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000490:	2303      	movs	r3, #3
 8000492:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000494:	2302      	movs	r3, #2
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000498:	2355      	movs	r3, #85	; 0x55
 800049a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800049c:	2302      	movs	r3, #2
 800049e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fd35 	bl	8000f1c <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004b8:	f000 f82a 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2303      	movs	r3, #3
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2104      	movs	r1, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 f839 	bl	800154c <HAL_RCC_ClockConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004e0:	f000 f816 	bl	8000510 <Error_Handler>
  }
}
 80004e4:	bf00      	nop
 80004e6:	3750      	adds	r7, #80	; 0x50
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fe:	f000 f9c1 	bl	8000884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40000800 	.word	0x40000800

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6613      	str	r3, [r2, #96]	; 0x60
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	6593      	str	r3, [r2, #88]	; 0x58
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000552:	f000 fcd3 	bl	8000efc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <HAL_InitTick+0xcc>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <HAL_InitTick+0xcc>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6593      	str	r3, [r2, #88]	; 0x58
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <HAL_InitTick+0xcc>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000592:	f107 020c 	add.w	r2, r7, #12
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4611      	mov	r1, r2
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f995 	bl	80018cc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005a2:	f001 f97d 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 80005a6:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005aa:	4a22      	ldr	r2, [pc, #136]	; (8000634 <HAL_InitTick+0xd0>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	0c9b      	lsrs	r3, r3, #18
 80005b2:	3b01      	subs	r3, #1
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <HAL_InitTick+0xd4>)
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_InitTick+0xd8>)
 80005ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <HAL_InitTick+0xd4>)
 80005be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005c2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <HAL_InitTick+0xd4>)
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_InitTick+0xd4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_InitTick+0xd4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim4);
 80005d6:	4818      	ldr	r0, [pc, #96]	; (8000638 <HAL_InitTick+0xd4>)
 80005d8:	f001 f9f0 	bl	80019bc <HAL_TIM_Base_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80005e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d11b      	bne.n	8000622 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005ea:	4813      	ldr	r0, [pc, #76]	; (8000638 <HAL_InitTick+0xd4>)
 80005ec:	f001 fa48 	bl	8001a80 <HAL_TIM_Base_Start_IT>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80005f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d111      	bne.n	8000622 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005fe:	201e      	movs	r0, #30
 8000600:	f000 fa30 	bl	8000a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d808      	bhi.n	800061c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800060a:	2200      	movs	r2, #0
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	201e      	movs	r0, #30
 8000610:	f000 fa0e 	bl	8000a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <HAL_InitTick+0xdc>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e002      	b.n	8000622 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000626:	4618      	mov	r0, r3
 8000628:	3730      	adds	r7, #48	; 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	431bde83 	.word	0x431bde83
 8000638:	200000e4 	.word	0x200000e4
 800063c:	40000800 	.word	0x40000800
 8000640:	20000004 	.word	0x20000004

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <TIM4_IRQHandler+0x10>)
 8000686:	f001 fa73 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000e4 	.word	0x200000e4

08000694 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a6:	f3af 8000 	nop.w
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
	}

return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x12>
	}
	return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_close>:

int _close(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	return -1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072e:	605a      	str	r2, [r3, #4]
	return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <_isatty>:

int _isatty(int file)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	return 1;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f002 fc44 	bl	800302c <__errno>
 80007a4:	4603      	mov	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <_sbrk+0x64>)
 80007c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20020000 	.word	0x20020000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	20000320 	.word	0x20000320

080007dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000802:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 8000806:	490e      	ldr	r1, [pc, #56]	; (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800081c:	4c0b      	ldr	r4, [pc, #44]	; (800084c <LoopForever+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082a:	f7ff ffd7 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f002 fc03 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000832:	f7ff fe09 	bl	8000448 <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000844:	08004138 	.word	0x08004138
  ldr r2, =_sbss
 8000848:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800084c:	2000031c 	.word	0x2000031c

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>

08000852 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f8dc 	bl	8000a1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000862:	200f      	movs	r0, #15
 8000864:	f7ff fe7e 	bl	8000564 <HAL_InitTick>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e001      	b.n	8000878 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000874:	f7ff fe52 	bl	800051c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000878:	79fb      	ldrb	r3, [r7, #7]

}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4413      	add	r3, r2
 8000892:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x1c>)
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000130 	.word	0x20000130
 80008a4:	20000008 	.word	0x20000008

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000130 	.word	0x20000130

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <__NVIC_EnableIRQ+0x38>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff4c 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a3e:	f7ff ff63 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	6978      	ldr	r0, [r7, #20]
 8000a4a:	f7ff ffb3 	bl	80009b4 <NVIC_EncodePriority>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff82 	bl	8000960 <__NVIC_SetPriority>
}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff56 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a8e:	e15a      	b.n	8000d46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 814c 	beq.w	8000d40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d00b      	beq.n	8000ac8 <HAL_GPIO_Init+0x48>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000abc:	2b11      	cmp	r3, #17
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b12      	cmp	r3, #18
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2203      	movs	r2, #3
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0xea>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d123      	bne.n	8000bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3208      	adds	r2, #8
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	6939      	ldr	r1, [r7, #16]
 8000bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0203 	and.w	r2, r3, #3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80a6 	beq.w	8000d40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <HAL_GPIO_Init+0x2e4>)
 8000bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf8:	4a5a      	ldr	r2, [pc, #360]	; (8000d64 <HAL_GPIO_Init+0x2e4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8000c00:	4b58      	ldr	r3, [pc, #352]	; (8000d64 <HAL_GPIO_Init+0x2e4>)
 8000c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c0c:	4a56      	ldr	r2, [pc, #344]	; (8000d68 <HAL_GPIO_Init+0x2e8>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c36:	d01f      	beq.n	8000c78 <HAL_GPIO_Init+0x1f8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <HAL_GPIO_Init+0x2ec>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d019      	beq.n	8000c74 <HAL_GPIO_Init+0x1f4>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a4b      	ldr	r2, [pc, #300]	; (8000d70 <HAL_GPIO_Init+0x2f0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d013      	beq.n	8000c70 <HAL_GPIO_Init+0x1f0>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <HAL_GPIO_Init+0x2f4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00d      	beq.n	8000c6c <HAL_GPIO_Init+0x1ec>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a49      	ldr	r2, [pc, #292]	; (8000d78 <HAL_GPIO_Init+0x2f8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x1e8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <HAL_GPIO_Init+0x2fc>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d101      	bne.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c60:	2305      	movs	r3, #5
 8000c62:	e00a      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c64:	2306      	movs	r3, #6
 8000c66:	e008      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c8a:	4937      	ldr	r1, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x2e8>)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cbc:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_GPIO_Init+0x300>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f ae9d 	bne.w	8000a90 <HAL_GPIO_Init+0x10>
  }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	48001400 	.word	0x48001400
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d141      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dce:	d131      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd6:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de8:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2232      	movs	r2, #50	; 0x32
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e06:	e002      	b.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1a:	d102      	bne.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f2      	bne.n	8000e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2e:	d158      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e057      	b.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e34:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e44:	e04d      	b.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4c:	d141      	bne.n	8000ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5a:	d131      	bne.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2232      	movs	r2, #50	; 0x32
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0c9b      	lsrs	r3, r3, #18
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e92:	e002      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea6:	d102      	bne.n	8000eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f2      	bne.n	8000e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eba:	d112      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e011      	b.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ed0:	e007      	b.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40007000 	.word	0x40007000
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	431bde83 	.word	0x431bde83

08000efc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0a:	6093      	str	r3, [r2, #8]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40007000 	.word	0x40007000

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e308      	b.n	8001540 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d075      	beq.n	8001026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f3a:	4ba3      	ldr	r3, [pc, #652]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f44:	4ba0      	ldr	r3, [pc, #640]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x3e>
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d002      	beq.n	8000f60 <HAL_RCC_OscConfig+0x44>
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d10b      	bne.n	8000f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	4b99      	ldr	r3, [pc, #612]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d05b      	beq.n	8001024 <HAL_RCC_OscConfig+0x108>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d157      	bne.n	8001024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e2e3      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f80:	d106      	bne.n	8000f90 <HAL_RCC_OscConfig+0x74>
 8000f82:	4b91      	ldr	r3, [pc, #580]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a90      	ldr	r2, [pc, #576]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xb0>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x98>
 8000f9a:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a8a      	ldr	r2, [pc, #552]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a87      	ldr	r2, [pc, #540]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xb0>
 8000fb4:	4b84      	ldr	r3, [pc, #528]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a83      	ldr	r2, [pc, #524]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a80      	ldr	r2, [pc, #512]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc68 	bl	80008a8 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fc64 	bl	80008a8 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e2a8      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xc0>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc54 	bl	80008a8 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fc50 	bl	80008a8 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e294      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0xe8>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d075      	beq.n	800111e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800103c:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	d102      	bne.n	8001052 <HAL_RCC_OscConfig+0x136>
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d002      	beq.n	8001058 <HAL_RCC_OscConfig+0x13c>
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d11f      	bne.n	8001098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001058:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x154>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e267      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	4952      	ldr	r1, [pc, #328]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_RCC_OscConfig+0x2b0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa6b 	bl	8000564 <HAL_InitTick>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d043      	beq.n	800111c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e253      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d023      	beq.n	80010e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fbfc 	bl	80008a8 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbf8 	bl	80008a8 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e23c      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	061b      	lsls	r3, r3, #24
 80010e0:	4939      	ldr	r1, [pc, #228]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
 80010e6:	e01a      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fbd8 	bl	80008a8 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fbd4 	bl	80008a8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e218      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1e0>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01c      	beq.n	800116c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001142:	f7ff fbb1 	bl	80008a8 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff fbad 	bl	80008a8 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e1f1      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0ef      	beq.n	800114a <HAL_RCC_OscConfig+0x22e>
 800116a:	e01b      	b.n	80011a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fb94 	bl	80008a8 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fb90 	bl	80008a8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1d4      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ef      	bne.n	8001184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80ab 	beq.w	8001308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2b4>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e005      	b.n	80011d2 <HAL_RCC_OscConfig+0x2b6>
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2300      	movs	r3, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00d      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4baf      	ldr	r3, [pc, #700]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4aae      	ldr	r2, [pc, #696]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4bac      	ldr	r3, [pc, #688]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ee:	2301      	movs	r3, #1
 80011f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	4ba9      	ldr	r3, [pc, #676]	; (8001498 <HAL_RCC_OscConfig+0x57c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011fe:	4ba6      	ldr	r3, [pc, #664]	; (8001498 <HAL_RCC_OscConfig+0x57c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4aa5      	ldr	r2, [pc, #660]	; (8001498 <HAL_RCC_OscConfig+0x57c>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120a:	f7ff fb4d 	bl	80008a8 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001212:	f7ff fb49 	bl	80008a8 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e18d      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <HAL_RCC_OscConfig+0x57c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_RCC_OscConfig+0x32e>
 8001238:	4b96      	ldr	r3, [pc, #600]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123e:	4a95      	ldr	r2, [pc, #596]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001248:	e024      	b.n	8001294 <HAL_RCC_OscConfig+0x378>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d110      	bne.n	8001274 <HAL_RCC_OscConfig+0x358>
 8001252:	4b90      	ldr	r3, [pc, #576]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001258:	4a8e      	ldr	r2, [pc, #568]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001262:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001268:	4a8a      	ldr	r2, [pc, #552]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001272:	e00f      	b.n	8001294 <HAL_RCC_OscConfig+0x378>
 8001274:	4b87      	ldr	r3, [pc, #540]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4a86      	ldr	r2, [pc, #536]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001284:	4b83      	ldr	r3, [pc, #524]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128a:	4a82      	ldr	r2, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d016      	beq.n	80012ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fb04 	bl	80008a8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fb00 	bl	80008a8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e142      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ed      	beq.n	80012a4 <HAL_RCC_OscConfig+0x388>
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ca:	f7ff faed 	bl	80008a8 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fae9 	bl	80008a8 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e12b      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e8:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ed      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fc:	4b65      	ldr	r3, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	4a64      	ldr	r2, [pc, #400]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001306:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03c      	beq.n	800138e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01c      	beq.n	8001356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fabc 	bl	80008a8 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001334:	f7ff fab8 	bl	80008a8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e0fc      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x418>
 8001354:	e01b      	b.n	800138e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001356:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fa9f 	bl	80008a8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800136e:	f7ff fa9b 	bl	80008a8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0df      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001380:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80d3 	beq.w	800153e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	f000 808d 	beq.w	80014c0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d15a      	bne.n	8001464 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a38      	ldr	r2, [pc, #224]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80013b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa75 	bl	80008a8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fa71 	bl	80008a8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0b5      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x580>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6a11      	ldr	r1, [r2, #32]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013f0:	3a01      	subs	r2, #1
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80013fa:	0212      	lsls	r2, r2, #8
 80013fc:	4311      	orrs	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001402:	0852      	lsrs	r2, r2, #1
 8001404:	3a01      	subs	r2, #1
 8001406:	0552      	lsls	r2, r2, #21
 8001408:	4311      	orrs	r1, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800140e:	0852      	lsrs	r2, r2, #1
 8001410:	3a01      	subs	r2, #1
 8001412:	0652      	lsls	r2, r2, #25
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800141a:	06d2      	lsls	r2, r2, #27
 800141c:	430a      	orrs	r2, r1
 800141e:	491d      	ldr	r1, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fa34 	bl	80008a8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff fa30 	bl	80008a8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e074      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x528>
 8001462:	e06c      	b.n	800153e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800146a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800146e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_RCC_OscConfig+0x578>)
 8001482:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fa0c 	bl	80008a8 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001492:	e00e      	b.n	80014b2 <HAL_RCC_OscConfig+0x596>
 8001494:	40021000 	.word	0x40021000
 8001498:	40007000 	.word	0x40007000
 800149c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa02 	bl	80008a8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e046      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_RCC_OscConfig+0x62c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x584>
 80014be:	e03e      	b.n	800153e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e039      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_OscConfig+0x62c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d12c      	bne.n	800153a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	3b01      	subs	r3, #1
 80014ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d123      	bne.n	800153a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d11b      	bne.n	800153a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d113      	bne.n	800153a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d109      	bne.n	800153a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e11e      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b91      	ldr	r3, [pc, #580]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b8e      	ldr	r3, [pc, #568]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 020f 	bic.w	r2, r3, #15
 800157a:	498c      	ldr	r1, [pc, #560]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b8a      	ldr	r3, [pc, #552]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e106      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d073      	beq.n	8001688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d129      	bne.n	80015fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a8:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0f4      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015b8:	f000 f9ba 	bl	8001930 <RCC_GetSysClockFreqFromPLLSource>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_ClockConfig+0x268>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d93f      	bls.n	8001646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015c6:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d033      	beq.n	8001646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d12f      	bne.n	8001646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015e6:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ee:	4a70      	ldr	r2, [pc, #448]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e024      	b.n	8001646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0c6      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0be      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001624:	f000 f8ce 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4a61      	ldr	r2, [pc, #388]	; (80017b4 <HAL_RCC_ClockConfig+0x268>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d909      	bls.n	8001646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800163a:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4957      	ldr	r1, [pc, #348]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001658:	f7ff f926 	bl	80008a8 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff f922 	bl	80008a8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e095      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016b8:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016c0:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4936      	ldr	r1, [pc, #216]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
 80016da:	e008      	b.n	80016ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b80      	cmp	r3, #128	; 0x80
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80016e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d21d      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 020f 	bic.w	r2, r3, #15
 8001704:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800170c:	f7ff f8cc 	bl	80008a8 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	e00a      	b.n	800172a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff f8c8 	bl	80008a8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e03b      	b.n	80017a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d1ed      	bne.n	8001714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4917      	ldr	r1, [pc, #92]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001776:	f000 f825 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490c      	ldr	r1, [pc, #48]	; (80017b8 <HAL_RCC_ClockConfig+0x26c>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x270>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fee2 	bl	8000564 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	04c4b400 	.word	0x04c4b400
 80017b8:	08004080 	.word	0x08004080
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e047      	b.n	800186c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e03e      	b.n	800186c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d136      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3301      	adds	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001822:	68d2      	ldr	r2, [r2, #12]
 8001824:	0a12      	lsrs	r2, r2, #8
 8001826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
      break;
 8001830:	e00c      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 800183c:	68d2      	ldr	r2, [r2, #12]
 800183e:	0a12      	lsrs	r2, r2, #8
 8001840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
      break;
 800184a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_GetSysClockFreq+0xb8>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0e5b      	lsrs	r3, r3, #25
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e001      	b.n	800186c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800186c:	693b      	ldr	r3, [r7, #16]
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	00f42400 	.word	0x00f42400
 8001884:	007a1200 	.word	0x007a1200

08001888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_GetHCLKFreq+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018a4:	f7ff fff0 	bl	8001888 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4904      	ldr	r1, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08004090 	.word	0x08004090

080018cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	220f      	movs	r2, #15
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_RCC_GetClockConfig+0x60>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 020f 	and.w	r2, r3, #15
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40022000 	.word	0x40022000

08001930 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10c      	bne.n	800196e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800195e:	68d2      	ldr	r2, [r2, #12]
 8001960:	0a12      	lsrs	r2, r2, #8
 8001962:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
    break;
 800196c:	e00c      	b.n	8001988 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	0a12      	lsrs	r2, r2, #8
 800197c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
    break;
 8001986:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0e5b      	lsrs	r3, r3, #25
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	007a1200 	.word	0x007a1200
 80019b8:	00f42400 	.word	0x00f42400

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e049      	b.n	8001a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f841 	bl	8001a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 fa60 	bl	8001ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d001      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e054      	b.n	8001b42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d01d      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_TIM_Base_Start_IT+0xe0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_TIM_Base_Start_IT+0xe4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <HAL_TIM_Base_Start_IT+0xe8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d115      	bne.n	8001b2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_TIM_Base_Start_IT+0xec>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d015      	beq.n	8001b3e <HAL_TIM_Base_Start_IT+0xbe>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d011      	beq.n	8001b3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2a:	e008      	b.n	8001b3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e000      	b.n	8001b40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40000c00 	.word	0x40000c00
 8001b60:	40013400 	.word	0x40013400
 8001b64:	40014000 	.word	0x40014000
 8001b68:	40015000 	.word	0x40015000
 8001b6c:	00010007 	.word	0x00010007

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f965 	bl	8001e82 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f957 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f968 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0204 	mvn.w	r2, #4
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f93b 	bl	8001e82 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f92d 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f93e 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0208 	mvn.w	r2, #8
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f911 	bl	8001e82 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f903 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f914 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8e7 	bl	8001e82 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8d9 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8ea 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0201 	mvn.w	r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fbfc 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f982 	bl	8002024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2e:	d10e      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f975 	bl	8002038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d10e      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d107      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f898 	bl	8001eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d10e      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d107      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0220 	mvn.w	r2, #32
 8001d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f935 	bl	8002010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db4:	d10f      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f93b 	bl	800204c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de4:	d10f      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f92d 	bl	8002060 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e14:	d10f      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e24:	d107      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f91f 	bl	8002074 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f911 	bl	8002088 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a46      	ldr	r2, [pc, #280]	; (8001fec <TIM_Base_SetConfig+0x12c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d017      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d013      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00f      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <TIM_Base_SetConfig+0x134>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <TIM_Base_SetConfig+0x138>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <TIM_Base_SetConfig+0x13c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x48>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <TIM_Base_SetConfig+0x140>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a33      	ldr	r2, [pc, #204]	; (8001fec <TIM_Base_SetConfig+0x12c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d023      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d01f      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01b      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <TIM_Base_SetConfig+0x134>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d017      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <TIM_Base_SetConfig+0x138>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <TIM_Base_SetConfig+0x13c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00f      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <TIM_Base_SetConfig+0x144>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	; (8002008 <TIM_Base_SetConfig+0x148>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <TIM_Base_SetConfig+0x14c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0xaa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TIM_Base_SetConfig+0x140>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <TIM_Base_SetConfig+0x12c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <TIM_Base_SetConfig+0x110>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <TIM_Base_SetConfig+0x13c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x110>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <TIM_Base_SetConfig+0x144>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x110>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <TIM_Base_SetConfig+0x148>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x110>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <TIM_Base_SetConfig+0x14c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x110>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <TIM_Base_SetConfig+0x140>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40013400 	.word	0x40013400
 8002000:	40015000 	.word	0x40015000
 8002004:	40014000 	.word	0x40014000
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800

08002010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LOS_Schedule>:
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT VOID LOS_Schedule(VOID)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
    UINTPTR uvIntSave;

    uvIntSave = LOS_IntLock();
 80020a2:	f7fe f8e3 	bl	800026c <LOS_IntLock>
 80020a6:	6078      	str	r0, [r7, #4]

    /* Find the highest task */
    g_stLosTask.pstNewTask = LOS_DL_LIST_ENTRY(osPriqueueTop(), LOS_TASK_CB, stPendList);
 80020a8:	f000 f8ec 	bl	8002284 <osPriqueueTop>
 80020ac:	4603      	mov	r3, r0
 80020ae:	3b28      	subs	r3, #40	; 0x28
 80020b0:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <LOS_Schedule+0x44>)
 80020b2:	6053      	str	r3, [r2, #4]

    /* In case that running is not highest then reschedule */
    if (g_stLosTask.pstRunTask != g_stLosTask.pstNewTask)
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <LOS_Schedule+0x44>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <LOS_Schedule+0x44>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d009      	beq.n	80020d4 <LOS_Schedule+0x38>
    {
        if ((!g_usLosTaskLock))
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LOS_Schedule+0x48>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <LOS_Schedule+0x38>
        {
            (VOID)LOS_IntRestore(uvIntSave);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7fe f8d7 	bl	800027c <LOS_IntRestore>

            osTaskSchedule();
 80020ce:	f7fe f8d8 	bl	8000282 <osTaskSchedule>

            return;
 80020d2:	e002      	b.n	80020da <LOS_Schedule+0x3e>
        }
    }

    (VOID)LOS_IntRestore(uvIntSave);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe f8d1 	bl	800027c <LOS_IntRestore>
}
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000016c 	.word	0x2000016c
 80020e4:	20000168 	.word	0x20000168

080020e8 <osIntNumGet>:
 Input       : None
 Output      : None
 Return      : Interrupt Indexes number
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR UINT32 osIntNumGet(VOID)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ee:	f3ef 8305 	mrs	r3, IPSR
 80020f2:	607b      	str	r3, [r7, #4]
  return(result);
 80020f4:	687b      	ldr	r3, [r7, #4]
    return __get_IPSR();
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Handler>:
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    if (g_bSysTickStart)
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <SysTick_Handler+0x28>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <SysTick_Handler+0x12>
    {
        osTickHandler();
 8002110:	f000 fd56 	bl	8002bc0 <osTickHandler>
    }
    else
    {
        g_ullTickCount++;
    }
}
 8002114:	e008      	b.n	8002128 <SysTick_Handler+0x24>
        g_ullTickCount++;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <SysTick_Handler+0x2c>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	1c50      	adds	r0, r2, #1
 800211e:	f143 0100 	adc.w	r1, r3, #0
 8002122:	4b03      	ldr	r3, [pc, #12]	; (8002130 <SysTick_Handler+0x2c>)
 8002124:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200000d8 	.word	0x200000d8
 8002130:	200002e0 	.word	0x200002e0

08002134 <LOS_ListAdd>:
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see LOS_ListDelete
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE STATIC_INLINE VOID LOS_ListAdd(LOS_DL_LIST *pstList, LOS_DL_LIST *pstNode)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    pstNode->pstNext = pstList->pstNext;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	605a      	str	r2, [r3, #4]
    pstNode->pstPrev = pstList;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]
    pstList->pstNext->pstPrev = pstNode;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	601a      	str	r2, [r3, #0]
    pstList->pstNext = pstNode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	605a      	str	r2, [r3, #4]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LOS_ListTailInsert>:
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see LOS_ListAdd | LOS_ListHeadInsert
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE STATIC_INLINE VOID LOS_ListTailInsert(LOS_DL_LIST *pstList, LOS_DL_LIST *pstNode)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
    LOS_ListAdd(pstList->pstPrev, pstNode);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffdc 	bl	8002134 <LOS_ListAdd>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <LOS_ListDelete>:
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see LOS_ListAdd
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE STATIC_INLINE VOID LOS_ListDelete(LOS_DL_LIST *pstNode)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	601a      	str	r2, [r3, #0]
    pstNode->pstPrev->pstNext = pstNode->pstNext;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6852      	ldr	r2, [r2, #4]
 800219e:	605a      	str	r2, [r3, #4]
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LOS_ListEmpty>:
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE STATIC_INLINE BOOL LOS_ListEmpty(LOS_DL_LIST *pstNode)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    return (BOOL)(pstNode->pstNext == pstNode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <osPriqueueEnqueue>:
        LOS_ListInit(&g_pstLosPriorityQueueList[uwPri]);
    }
}

LITE_OS_SEC_TEXT VOID osPriqueueEnqueue(LOS_DL_LIST *ptrPQItem, UINT32 uwPri)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
    if (LOS_ListEmpty(&g_pstLosPriorityQueueList[uwPri]))
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <osPriqueueEnqueue+0x4c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ffe1 	bl	80021b8 <LOS_ListEmpty>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <osPriqueueEnqueue+0x32>
    {
        g_uwPriQueueBitmap |= (PRIQUEUE_PRIOR0_BIT >> uwPri);
 80021fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	40da      	lsrs	r2, r3
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <osPriqueueEnqueue+0x50>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <osPriqueueEnqueue+0x50>)
 800220c:	6013      	str	r3, [r2, #0]
    }

    LOS_ListTailInsert(&g_pstLosPriorityQueueList[uwPri], ptrPQItem);
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <osPriqueueEnqueue+0x4c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffa3 	bl	8002166 <LOS_ListTailInsert>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000134 	.word	0x20000134
 800222c:	20000090 	.word	0x20000090

08002230 <osPriqueueDequeue>:

LITE_OS_SEC_TEXT VOID osPriqueueDequeue(LOS_DL_LIST *ptrPQItem)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    LOS_TASK_CB *pstRunTsk;
    LOS_ListDelete(ptrPQItem);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffa3 	bl	8002184 <LOS_ListDelete>

    pstRunTsk = LOS_DL_LIST_ENTRY(ptrPQItem, LOS_TASK_CB, stPendList);  /*lint !e413*/
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3b28      	subs	r3, #40	; 0x28
 8002242:	60fb      	str	r3, [r7, #12]
    if (LOS_ListEmpty(&g_pstLosPriorityQueueList[pstRunTsk->usPriority]))
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <osPriqueueDequeue+0x4c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88db      	ldrh	r3, [r3, #6]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ffb1 	bl	80021b8 <LOS_ListEmpty>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <osPriqueueDequeue+0x44>
    {
        g_uwPriQueueBitmap &= (~(PRIQUEUE_PRIOR0_BIT >> pstRunTsk->usPriority));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88db      	ldrh	r3, [r3, #6]
 8002260:	461a      	mov	r2, r3
 8002262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002266:	40d3      	lsrs	r3, r2
 8002268:	43da      	mvns	r2, r3
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <osPriqueueDequeue+0x50>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4013      	ands	r3, r2
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <osPriqueueDequeue+0x50>)
 8002272:	6013      	str	r3, [r2, #0]
    }
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000134 	.word	0x20000134
 8002280:	20000090 	.word	0x20000090

08002284 <osPriqueueTop>:

LITE_OS_SEC_TEXT LOS_DL_LIST *osPriqueueTop(VOID)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
    UINT32 uwPri = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]

    if (0 != g_uwPriQueueBitmap)
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <osPriqueueTop+0x38>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <osPriqueueTop+0x2a>
    {
        uwPri = CLZ(g_uwPriQueueBitmap);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <osPriqueueTop+0x38>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	607b      	str	r3, [r7, #4]
        return LOS_DL_LIST_FIRST(&g_pstLosPriorityQueueList[uwPri]);
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <osPriqueueTop+0x3c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	e000      	b.n	80022b0 <osPriqueueTop+0x2c>
    }

    return (LOS_DL_LIST *)NULL;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	20000090 	.word	0x20000090
 80022c0:	20000134 	.word	0x20000134

080022c4 <osPriqueueSize>:

LITE_OS_SEC_TEXT UINT32 osPriqueueSize(UINT32 uwPri)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    UINT32      uwItemCnt = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
    LOS_DL_LIST *pstCurPQNode = (LOS_DL_LIST *)NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

    LOS_DL_LIST_FOR_EACH(pstCurPQNode, &g_pstLosPriorityQueueList[uwPri])
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <osPriqueueSize+0x4c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	e005      	b.n	80022f0 <osPriqueueSize+0x2c>
    {
        ++uwItemCnt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
    LOS_DL_LIST_FOR_EACH(pstCurPQNode, &g_pstLosPriorityQueueList[uwPri])
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <osPriqueueSize+0x4c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1f1      	bne.n	80022e4 <osPriqueueSize+0x20>
    }

    return uwItemCnt;
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000134 	.word	0x20000134

08002314 <osSwTmrStart>:
Input      : pstSwtmr ---------- Need to start Software Timer
Output     : None
Return     : None
*****************************************************************************/
LITE_OS_SEC_TEXT VOID osSwTmrStart(SWTMR_CTRL_S *pstSwtmr)
{
 8002314:	b480      	push	{r7}
 8002316:	b08f      	sub	sp, #60	; 0x3c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    SWTMR_CTRL_S *pstPrev = (SWTMR_CTRL_S *)NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
    SWTMR_CTRL_S *pstCur = (SWTMR_CTRL_S *)NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30

#if (LOSCFG_BASE_CORE_SWTMR_ALIGN == YES)
    UINT32 uwCurrSwtmrTimes, uwSwtmrTimes;
    UINT32 uwMinInLarge = 0xFFFFFFFF, uwMaxInLitte = 0xFFFFFFFF;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 uwMinInLargeID = LOSCFG_BASE_CORE_SWTMR_LIMIT;
 8002330:	2310      	movs	r3, #16
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    UINT32 uwMaxInLitteID = LOSCFG_BASE_CORE_SWTMR_LIMIT;
 8002334:	2310      	movs	r3, #16
 8002336:	623b      	str	r3, [r7, #32]
    UINT16 usSwTmrCBID;
    UINT16 usSwtmrIdIndex;
    UINT32 uwCount = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
#endif

    pstSwtmr->uwCount = pstSwtmr->uwInterval;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]

#if (LOSCFG_BASE_CORE_SWTMR_ALIGN == YES)
    usSwTmrCBID = pstSwtmr->usTimerID % LOSCFG_BASE_CORE_SWTMR_LIMIT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	891b      	ldrh	r3, [r3, #8]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	82fb      	strh	r3, [r7, #22]
    if(CHECK_ALIGN_SWTMR_CAN_MULTI_ALIGN(m_uwSwTmrAlignID[usSwTmrCBID]))
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	4a9a      	ldr	r2, [pc, #616]	; (80025bc <osSwTmrStart+0x2a8>)
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800235a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800235e:	f040 80b4 	bne.w	80024ca <osSwTmrStart+0x1b6>
    {
        SET_ALIGN_SWTMR_ALREADY_ALIGNED(m_uwSwTmrAlignID[usSwTmrCBID]);
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	4a95      	ldr	r2, [pc, #596]	; (80025bc <osSwTmrStart+0x2a8>)
 8002366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800236a:	8afb      	ldrh	r3, [r7, #22]
 800236c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002370:	4992      	ldr	r1, [pc, #584]	; (80025bc <osSwTmrStart+0x2a8>)
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        uwCurrSwtmrTimes = GET_ALIGN_SWTMR_DIVISOR_TIMERS(m_uwSwTmrAlignID[usSwTmrCBID]);
 8002376:	8afb      	ldrh	r3, [r7, #22]
 8002378:	4a90      	ldr	r2, [pc, #576]	; (80025bc <osSwTmrStart+0x2a8>)
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002382:	613b      	str	r3, [r7, #16]
        for(usSwtmrIdIndex = 0; usSwtmrIdIndex < LOSCFG_BASE_CORE_SWTMR_LIMIT; usSwtmrIdIndex++)
 8002384:	2300      	movs	r3, #0
 8002386:	83fb      	strh	r3, [r7, #30]
 8002388:	e054      	b.n	8002434 <osSwTmrStart+0x120>
        {
            uwSwtmrTimes = GET_ALIGN_SWTMR_DIVISOR_TIMERS(m_uwSwTmrAlignID[usSwtmrIdIndex]);
 800238a:	8bfb      	ldrh	r3, [r7, #30]
 800238c:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <osSwTmrStart+0x2a8>)
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002396:	60fb      	str	r3, [r7, #12]
            if(uwSwtmrTimes == 0 //swtmr not creat
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d046      	beq.n	800242c <osSwTmrStart+0x118>
                || usSwtmrIdIndex == usSwTmrCBID //swtmr is pstSwtmr
 800239e:	8bfa      	ldrh	r2, [r7, #30]
 80023a0:	8afb      	ldrh	r3, [r7, #22]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d042      	beq.n	800242c <osSwTmrStart+0x118>
                || !CHECK_ALIGN_SWTMR_ALREADY_ALIGN(m_uwSwTmrAlignID[usSwtmrIdIndex])) //swtmr not start
 80023a6:	8bfb      	ldrh	r3, [r7, #30]
 80023a8:	4a84      	ldr	r2, [pc, #528]	; (80025bc <osSwTmrStart+0x2a8>)
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80023b2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80023b6:	d139      	bne.n	800242c <osSwTmrStart+0x118>
            {
                continue;
            }
            if(uwSwtmrTimes >= uwCurrSwtmrTimes && uwSwtmrTimes % uwCurrSwtmrTimes == 0)
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d318      	bcc.n	80023f2 <osSwTmrStart+0xde>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	fb01 f202 	mul.w	r2, r1, r2
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <osSwTmrStart+0xde>
            {
                if(uwMinInLarge > uwSwtmrTimes / uwCurrSwtmrTimes)
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d925      	bls.n	800242e <osSwTmrStart+0x11a>
                {
                    uwMinInLarge = uwSwtmrTimes / uwCurrSwtmrTimes;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    uwMinInLargeID = usSwtmrIdIndex;
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
                if(uwMinInLarge > uwSwtmrTimes / uwCurrSwtmrTimes)
 80023f0:	e01d      	b.n	800242e <osSwTmrStart+0x11a>
                }
            }
            else if(uwSwtmrTimes < uwCurrSwtmrTimes && uwCurrSwtmrTimes % uwSwtmrTimes == 0)
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d219      	bcs.n	800242e <osSwTmrStart+0x11a>
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002402:	68f9      	ldr	r1, [r7, #12]
 8002404:	fb01 f202 	mul.w	r2, r1, r2
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <osSwTmrStart+0x11a>
            {
                if(uwMaxInLitte > uwCurrSwtmrTimes / uwSwtmrTimes)
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002418:	429a      	cmp	r2, r3
 800241a:	d908      	bls.n	800242e <osSwTmrStart+0x11a>
                {
                    uwMaxInLitte = uwCurrSwtmrTimes / uwSwtmrTimes;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
                    uwMaxInLitteID = usSwtmrIdIndex;
 8002426:	8bfb      	ldrh	r3, [r7, #30]
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	e000      	b.n	800242e <osSwTmrStart+0x11a>
                continue;
 800242c:	bf00      	nop
        for(usSwtmrIdIndex = 0; usSwtmrIdIndex < LOSCFG_BASE_CORE_SWTMR_LIMIT; usSwtmrIdIndex++)
 800242e:	8bfb      	ldrh	r3, [r7, #30]
 8002430:	3301      	adds	r3, #1
 8002432:	83fb      	strh	r3, [r7, #30]
 8002434:	8bfb      	ldrh	r3, [r7, #30]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	d9a7      	bls.n	800238a <osSwTmrStart+0x76>
                }
            }
        }
        if(uwMinInLargeID != LOSCFG_BASE_CORE_SWTMR_LIMIT)
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	2b10      	cmp	r3, #16
 800243e:	d031      	beq.n	80024a4 <osSwTmrStart+0x190>
        {
            pstCur = m_pstSwtmrSortList;
 8002440:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <osSwTmrStart+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
            while (pstCur != NULL)
 8002446:	e014      	b.n	8002472 <osSwTmrStart+0x15e>
            {
                uwCount += pstCur->uwCount;
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
                if (pstCur->usTimerID == ((SWTMR_CTRL_S  *)(m_pstSwtmrCBArray + uwMinInLargeID))->usTimerID)
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	8919      	ldrh	r1, [r3, #8]
 8002456:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <osSwTmrStart+0x2b0>)
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4403      	add	r3, r0
 8002466:	891b      	ldrh	r3, [r3, #8]
 8002468:	4299      	cmp	r1, r3
 800246a:	d006      	beq.n	800247a <osSwTmrStart+0x166>
                {
                    break;
                }
                pstCur = pstCur->pstNext;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
            while (pstCur != NULL)
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e7      	bne.n	8002448 <osSwTmrStart+0x134>
 8002478:	e000      	b.n	800247c <osSwTmrStart+0x168>
                    break;
 800247a:	bf00      	nop
            }
            if(pstCur != NULL)
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d060      	beq.n	8002544 <osSwTmrStart+0x230>
            {
                pstSwtmr->uwCount = pstSwtmr->uwInterval - (pstCur->uwInterval - uwCount)% pstSwtmr->uwInterval;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	fbb3 f0f2 	udiv	r0, r3, r2
 8002496:	fb02 f200 	mul.w	r2, r2, r0
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	1aca      	subs	r2, r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	e04f      	b.n	8002544 <osSwTmrStart+0x230>
            }
        }
        else if(uwMaxInLitteID != LOSCFG_BASE_CORE_SWTMR_LIMIT)
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d04c      	beq.n	8002544 <osSwTmrStart+0x230>
        {
            pstSwtmr->uwCount = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
            pstPrev = m_pstSwtmrCBArray + uwMaxInLitteID;
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <osSwTmrStart+0x2b0>)
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
            pstCur = pstPrev->pstNext;
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
            goto Inset_list;
 80024c8:	e057      	b.n	800257a <osSwTmrStart+0x266>
        }
    }
    else if(CHECK_ALIGN_SWTMR_CAN_PERIODIC_ALIGN(m_uwSwTmrAlignID[usSwTmrCBID]))
 80024ca:	8afb      	ldrh	r3, [r7, #22]
 80024cc:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <osSwTmrStart+0x2a8>)
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d133      	bne.n	8002544 <osSwTmrStart+0x230>
    {
        SET_ALIGN_SWTMR_ALREADY_ALIGNED(m_uwSwTmrAlignID[usSwTmrCBID]);
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	4a37      	ldr	r2, [pc, #220]	; (80025bc <osSwTmrStart+0x2a8>)
 80024e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024e4:	8afb      	ldrh	r3, [r7, #22]
 80024e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024ea:	4934      	ldr	r1, [pc, #208]	; (80025bc <osSwTmrStart+0x2a8>)
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pstCur = m_pstSwtmrSortList;
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <osSwTmrStart+0x2ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
        while (pstCur != NULL)
 80024f6:	e014      	b.n	8002522 <osSwTmrStart+0x20e>
        {
            if (pstCur->uwInterval ==  pstSwtmr->uwInterval
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d10b      	bne.n	800251c <osSwTmrStart+0x208>
                && CHECK_ALIGN_SWTMR_ALREADY_ALIGN(m_uwSwTmrAlignID[pstCur->usTimerID % LOSCFG_BASE_CORE_SWTMR_LIMIT]))
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	891b      	ldrh	r3, [r3, #8]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <osSwTmrStart+0x2a8>)
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002516:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800251a:	d006      	beq.n	800252a <osSwTmrStart+0x216>
            {
                break;
            }
            pstCur = pstCur->pstNext;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
        while (pstCur != NULL)
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e7      	bne.n	80024f8 <osSwTmrStart+0x1e4>
 8002528:	e000      	b.n	800252c <osSwTmrStart+0x218>
                break;
 800252a:	bf00      	nop
        }
        if(pstCur != NULL)
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <osSwTmrStart+0x230>
        {
            pstSwtmr->uwCount = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
            pstPrev = pstCur;
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
            pstCur = pstCur->pstNext;
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
            goto Inset_list;
 8002542:	e01a      	b.n	800257a <osSwTmrStart+0x266>
        }
    }
#endif

    pstCur = m_pstSwtmrSortList;
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <osSwTmrStart+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
    while (pstCur != NULL)
 800254a:	e011      	b.n	8002570 <osSwTmrStart+0x25c>
    {
        if (pstCur->uwCount > pstSwtmr->uwCount)
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d80f      	bhi.n	8002578 <osSwTmrStart+0x264>
        {
            break;
        }

        pstSwtmr->uwCount -= pstCur->uwCount;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]
        pstPrev = pstCur;
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
        pstCur = pstCur->pstNext;
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
    while (pstCur != NULL)
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ea      	bne.n	800254c <osSwTmrStart+0x238>
    }

#if (LOSCFG_BASE_CORE_SWTMR_ALIGN == YES)
Inset_list:
 8002576:	e000      	b.n	800257a <osSwTmrStart+0x266>
            break;
 8002578:	bf00      	nop
#endif

    pstSwtmr->pstNext = pstCur;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	601a      	str	r2, [r3, #0]

    if (pstCur != NULL)
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <osSwTmrStart+0x280>
    {
        pstCur->uwCount -= pstSwtmr->uwCount;
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	1ad2      	subs	r2, r2, r3
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	60da      	str	r2, [r3, #12]
    }

    if (pstPrev == NULL)
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <osSwTmrStart+0x28e>
    {
        m_pstSwtmrSortList = pstSwtmr;
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <osSwTmrStart+0x2ac>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e002      	b.n	80025a8 <osSwTmrStart+0x294>
    }
    else
    {
        pstPrev->pstNext = pstSwtmr;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
    }

    pstSwtmr->ucState = OS_SWTMR_STATUS_TICKING;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	711a      	strb	r2, [r3, #4]

    return;
 80025ae:	bf00      	nop
}
 80025b0:	373c      	adds	r7, #60	; 0x3c
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000094 	.word	0x20000094
 80025c0:	20000144 	.word	0x20000144
 80025c4:	2000013c 	.word	0x2000013c

080025c8 <osSwtmrDelete>:
Input      : pstSwtmr --- Need to delete Software Timer, When using, Ensure that it can't be NULL.
Output     : None
Return     : None
*****************************************************************************/
LITE_OS_SEC_TEXT STATIC_INLINE VOID osSwtmrDelete(SWTMR_CTRL_S *pstSwtmr)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    /**insert to free list **/
    pstSwtmr->pstNext = m_pstSwtmrFreeList;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <osSwtmrDelete+0x38>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
    m_pstSwtmrFreeList = pstSwtmr;
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <osSwtmrDelete+0x38>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
    pstSwtmr->ucState = OS_SWTMR_STATUS_UNUSED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	711a      	strb	r2, [r3, #4]

#if (LOSCFG_BASE_CORE_SWTMR_ALIGN == YES)
    m_uwSwTmrAlignID[pstSwtmr->usTimerID % LOSCFG_BASE_CORE_SWTMR_LIMIT] = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	891b      	ldrh	r3, [r3, #8]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <osSwtmrDelete+0x3c>)
 80025ee:	2100      	movs	r1, #0
 80025f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20000138 	.word	0x20000138
 8002604:	20000094 	.word	0x20000094

08002608 <osSwTmrTimeoutHandle>:
Input      : None
Output     : None
Return     : None
*****************************************************************************/
LITE_OS_SEC_TEXT static VOID osSwTmrTimeoutHandle(VOID)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
    SWTMR_CTRL_S *pstSwtmr = m_pstSwtmrSortList;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <osSwTmrTimeoutHandle+0xa4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]
    SWTMR_HANDLER_ITEM_S stSwtmrHandler;

    while (pstSwtmr != NULL && pstSwtmr->uwCount == 0)
 8002614:	e03e      	b.n	8002694 <osSwTmrTimeoutHandle+0x8c>
    {
        m_pstSwtmrSortList = pstSwtmr->pstNext;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a24      	ldr	r2, [pc, #144]	; (80026ac <osSwTmrTimeoutHandle+0xa4>)
 800261c:	6013      	str	r3, [r2, #0]
        stSwtmrHandler.pfnHandler = pstSwtmr->pfnHandler;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	607b      	str	r3, [r7, #4]
        stSwtmrHandler.uwArg = pstSwtmr->uwArg;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	60bb      	str	r3, [r7, #8]
        (VOID)LOS_QueueWriteCopy(m_uwSwTmrHandlerQueue, &stSwtmrHandler, sizeof(SWTMR_HANDLER_ITEM_S), LOS_NO_WAIT);
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <osSwTmrTimeoutHandle+0xa8>)
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	1d39      	adds	r1, r7, #4
 8002630:	2300      	movs	r3, #0
 8002632:	2208      	movs	r2, #8
 8002634:	f000 fcd6 	bl	8002fe4 <LOS_QueueWriteCopy>
        if (pstSwtmr->ucMode == LOS_SWTMR_MODE_ONCE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	795b      	ldrb	r3, [r3, #5]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d117      	bne.n	8002670 <osSwTmrTimeoutHandle+0x68>
        {
            osSwtmrDelete(pstSwtmr);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff ffc1 	bl	80025c8 <osSwtmrDelete>
            if (pstSwtmr->usTimerID < OS_SWTMR_MAX_TIMERID - LOSCFG_BASE_CORE_SWTMR_LIMIT)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	891b      	ldrh	r3, [r3, #8]
 800264a:	f64f 72df 	movw	r2, #65503	; 0xffdf
 800264e:	4293      	cmp	r3, r2
 8002650:	d806      	bhi.n	8002660 <osSwTmrTimeoutHandle+0x58>
                pstSwtmr->usTimerID += LOSCFG_BASE_CORE_SWTMR_LIMIT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	891b      	ldrh	r3, [r3, #8]
 8002656:	3310      	adds	r3, #16
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	811a      	strh	r2, [r3, #8]
 800265e:	e016      	b.n	800268e <osSwTmrTimeoutHandle+0x86>
            else
                pstSwtmr->usTimerID %= LOSCFG_BASE_CORE_SWTMR_LIMIT;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	891b      	ldrh	r3, [r3, #8]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	811a      	strh	r2, [r3, #8]
 800266e:	e00e      	b.n	800268e <osSwTmrTimeoutHandle+0x86>
        }
        else if ( pstSwtmr->ucMode == LOS_SWTMR_MODE_PERIOD)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	795b      	ldrb	r3, [r3, #5]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d103      	bne.n	8002680 <osSwTmrTimeoutHandle+0x78>
        {
            osSwTmrStart(pstSwtmr);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fe4b 	bl	8002314 <osSwTmrStart>
 800267e:	e006      	b.n	800268e <osSwTmrTimeoutHandle+0x86>
        }
        else if (pstSwtmr->ucMode == LOS_SWTMR_MODE_NO_SELFDELETE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	795b      	ldrb	r3, [r3, #5]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d102      	bne.n	800268e <osSwTmrTimeoutHandle+0x86>
        {
            pstSwtmr->ucState = OS_SWTMR_STATUS_CREATED;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	711a      	strb	r2, [r3, #4]
        }

        pstSwtmr = m_pstSwtmrSortList;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <osSwTmrTimeoutHandle+0xa4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
    while (pstSwtmr != NULL && pstSwtmr->uwCount == 0)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <osSwTmrTimeoutHandle+0x9a>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0b9      	beq.n	8002616 <osSwTmrTimeoutHandle+0xe>
    }
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000144 	.word	0x20000144
 80026b0:	20000140 	.word	0x20000140

080026b4 <osSwtmrScan>:
Input      : None
Output     : None
Return     : LOS_OK on success or error code on failure
*****************************************************************************/
LITE_OS_SEC_TEXT UINT32 osSwtmrScan(VOID)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
    if (m_pstSwtmrSortList != NULL)
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <osSwtmrScan+0x28>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <osSwtmrScan+0x20>
    {
        if (--(m_pstSwtmrSortList->uwCount) == 0)
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <osSwtmrScan+0x28>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	3a01      	subs	r2, #1
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <osSwtmrScan+0x20>
        {
            osSwTmrTimeoutHandle();
 80026d0:	f7ff ff9a 	bl	8002608 <osSwTmrTimeoutHandle>
        }
    }
    return LOS_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000144 	.word	0x20000144

080026e0 <LOS_ListAdd>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    pstNode->pstNext = pstList->pstNext;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	605a      	str	r2, [r3, #4]
    pstNode->pstPrev = pstList;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]
    pstList->pstNext->pstPrev = pstNode;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]
    pstList->pstNext = pstNode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	605a      	str	r2, [r3, #4]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LOS_ListTailInsert>:
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
    LOS_ListAdd(pstList->pstPrev, pstNode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ffdc 	bl	80026e0 <LOS_ListAdd>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <LOS_ListDelete>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	601a      	str	r2, [r3, #0]
    pstNode->pstPrev->pstNext = pstNode->pstNext;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6852      	ldr	r2, [r2, #4]
 800274a:	605a      	str	r2, [r3, #4]
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <osTaskAdd2TimerList>:
               uwTimeout    --- wait time, ticks
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT VOID osTaskAdd2TimerList(LOS_TASK_CB *pstTaskCB, UINT32 uwTimeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    LOS_TASK_CB *pstTskDelay;
    LOS_DL_LIST *pstListObject;
    UINT32 uwSortIndex;
    UINT32 uwRollNum;

    uwSortIndex = uwTimeout & OS_TSK_SORTLINK_MASK;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	60fb      	str	r3, [r7, #12]
    uwRollNum = (uwTimeout >> OS_TSK_SORTLINK_LOGLEN);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	613b      	str	r3, [r7, #16]
    (uwSortIndex > 0) ? 0 : (uwRollNum--);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <osTaskAdd2TimerList+0x24>
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3b01      	subs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
    EVALUATE_L(pstTaskCB->uwIdxRollNum, uwRollNum);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
    uwSortIndex = (uwSortIndex + g_stTskSortLink.usCursor);
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <osTaskAdd2TimerList+0x10c>)
 800279a:	889b      	ldrh	r3, [r3, #4]
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    uwSortIndex = uwSortIndex & OS_TSK_SORTLINK_MASK;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	60fb      	str	r3, [r7, #12]
    EVALUATE_H(pstTaskCB->uwIdxRollNum, uwSortIndex);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	06db      	lsls	r3, r3, #27
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
    pstListObject = g_stTskSortLink.pstSortLink + uwSortIndex;
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <osTaskAdd2TimerList+0x10c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	60bb      	str	r3, [r7, #8]
    if (pstListObject->pstNext == pstListObject)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d106      	bne.n	80027e2 <osTaskAdd2TimerList+0x7e>
    {
        LOS_ListTailInsert(pstListObject, &pstTaskCB->stTimerList);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3330      	adds	r3, #48	; 0x30
 80027d8:	4619      	mov	r1, r3
 80027da:	68b8      	ldr	r0, [r7, #8]
 80027dc:	f7ff ff99 	bl	8002712 <LOS_ListTailInsert>
            pstTskDelay = LOS_DL_LIST_ENTRY(pstTskDelay->stTimerList.pstNext, LOS_TASK_CB, stTimerList); /*lint !e413*/
        } while (&pstTskDelay->stTimerList != (pstListObject));

        LOS_ListTailInsert(&pstTskDelay->stTimerList, &pstTaskCB->stTimerList);
    }
}
 80027e0:	e041      	b.n	8002866 <osTaskAdd2TimerList+0x102>
        pstTskDelay = LOS_DL_LIST_ENTRY((pstListObject)->pstNext, LOS_TASK_CB, stTimerList); /*lint !e413*/
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	3b30      	subs	r3, #48	; 0x30
 80027e8:	617b      	str	r3, [r7, #20]
            if (UWROLLNUM(pstTskDelay->uwIdxRollNum) <= UWROLLNUM(pstTaskCB->uwIdxRollNum))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d810      	bhi.n	8002820 <osTaskAdd2TimerList+0xbc>
                UWROLLNUMSUB(pstTaskCB->uwIdxRollNum, pstTskDelay->uwIdxRollNum);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	f023 4178 	bic.w	r1, r3, #4160749568	; 0xf8000000
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002816:	1acb      	subs	r3, r1, r3
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
 800281e:	e010      	b.n	8002842 <osTaskAdd2TimerList+0xde>
                UWROLLNUMSUB(pstTskDelay->uwIdxRollNum, pstTaskCB->uwIdxRollNum);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	f023 4178 	bic.w	r1, r3, #4160749568	; 0xf8000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002838:	1acb      	subs	r3, r1, r3
 800283a:	431a      	orrs	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
                break;
 8002840:	e008      	b.n	8002854 <osTaskAdd2TimerList+0xf0>
            pstTskDelay = LOS_DL_LIST_ENTRY(pstTskDelay->stTimerList.pstNext, LOS_TASK_CB, stTimerList); /*lint !e413*/
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	3b30      	subs	r3, #48	; 0x30
 8002848:	617b      	str	r3, [r7, #20]
        } while (&pstTskDelay->stTimerList != (pstListObject));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3330      	adds	r3, #48	; 0x30
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d1ca      	bne.n	80027ea <osTaskAdd2TimerList+0x86>
        LOS_ListTailInsert(&pstTskDelay->stTimerList, &pstTaskCB->stTimerList);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3330      	adds	r3, #48	; 0x30
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7ff ff56 	bl	8002712 <LOS_ListTailInsert>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000158 	.word	0x20000158

08002874 <osTimerListDelete>:


LITE_OS_SEC_TEXT VOID osTimerListDelete(LOS_TASK_CB *pstTaskCB)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    LOS_DL_LIST  *pstListObject;
    LOS_TASK_CB  *pstNextTask;
    UINT32 uwSortIndex;

    uwSortIndex = UWSORTINDEX(pstTaskCB->uwIdxRollNum);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	0edb      	lsrs	r3, r3, #27
 8002882:	617b      	str	r3, [r7, #20]
    pstListObject = g_stTskSortLink.pstSortLink + uwSortIndex;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <osTimerListDelete+0x60>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if (pstListObject != pstTaskCB->stTimerList.pstNext)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	d013      	beq.n	80028c2 <osTimerListDelete+0x4e>
    {
        pstNextTask = LOS_DL_LIST_ENTRY(pstTaskCB->stTimerList.pstNext, LOS_TASK_CB, stTimerList); /*lint !e413*/
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289e:	3b30      	subs	r3, #48	; 0x30
 80028a0:	60fb      	str	r3, [r7, #12]
        UWROLLNUMADD(pstNextTask->uwIdxRollNum, pstTaskCB->uwIdxRollNum);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	f023 4178 	bic.w	r1, r3, #4160749568	; 0xf8000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028ba:	440b      	add	r3, r1
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
    }

    LOS_ListDelete(&pstTaskCB->stTimerList);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3330      	adds	r3, #48	; 0x30
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff32 	bl	8002730 <LOS_ListDelete>
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000158 	.word	0x20000158

080028d8 <osTaskScan>:

LITE_OS_SEC_TEXT VOID osTaskScan(VOID)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
    LOS_TASK_CB *pstTaskCB;
    BOOL bNeedSchedule = FALSE;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
    LOS_DL_LIST *pstListObject;
    UINT16 usTempStatus;

    g_stTskSortLink.usCursor = (g_stTskSortLink.usCursor + 1) % OS_TSK_SORTLINK_LEN;
 80028e2:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <osTaskScan+0x148>)
 80028e4:	889b      	ldrh	r3, [r3, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	425a      	negs	r2, r3
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	bf58      	it	pl
 80028f4:	4253      	negpl	r3, r2
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <osTaskScan+0x148>)
 80028fa:	809a      	strh	r2, [r3, #4]
    pstListObject = g_stTskSortLink.pstSortLink + g_stTskSortLink.usCursor;
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <osTaskScan+0x148>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <osTaskScan+0x148>)
 8002902:	889b      	ldrh	r3, [r3, #4]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	607b      	str	r3, [r7, #4]
    if (pstListObject->pstNext == pstListObject)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	f000 8081 	beq.w	8002a18 <osTaskScan+0x140>
    {
        return;
    }

    for (pstTaskCB = LOS_DL_LIST_ENTRY((pstListObject)->pstNext, LOS_TASK_CB, stTimerList);&pstTaskCB->stTimerList != (pstListObject);) /*lint !e413*/
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	3b30      	subs	r3, #48	; 0x30
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e070      	b.n	8002a02 <osTaskScan+0x12a>
    {
        usTempStatus = pstTaskCB->usTaskStatus;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	807b      	strh	r3, [r7, #2]
        if (UWROLLNUM(pstTaskCB->uwIdxRollNum) > 0)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <osTaskScan+0x66>
        {
            UWROLLNUMDEC(pstTaskCB->uwIdxRollNum);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800293c:	e066      	b.n	8002a0c <osTaskScan+0x134>
        }

        LOS_ListDelete(&pstTaskCB->stTimerList);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3330      	adds	r3, #48	; 0x30
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fef4 	bl	8002730 <LOS_ListDelete>
        if (OS_TASK_STATUS_PEND & usTempStatus)
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <osTaskScan+0xa2>
        {
            pstTaskCB->usTaskStatus &= ~(OS_TASK_STATUS_PEND);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	889b      	ldrh	r3, [r3, #4]
 8002958:	f023 0308 	bic.w	r3, r3, #8
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	809a      	strh	r2, [r3, #4]
            LOS_ListDelete(&pstTaskCB->stPendList);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3328      	adds	r3, #40	; 0x28
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fee2 	bl	8002730 <LOS_ListDelete>
            pstTaskCB->pTaskSem = NULL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
            pstTaskCB->pTaskMux = NULL;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
 8002978:	e027      	b.n	80029ca <osTaskScan+0xf2>
        }
        else if (OS_TASK_STATUS_EVENT & usTempStatus)
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <osTaskScan+0xbe>
        {
            pstTaskCB->usTaskStatus &= ~(OS_TASK_STATUS_EVENT);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	889b      	ldrh	r3, [r3, #4]
 800298a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	809a      	strh	r2, [r3, #4]
 8002994:	e019      	b.n	80029ca <osTaskScan+0xf2>
        }
        else if (OS_TASK_STATUS_PEND_QUEUE & usTempStatus)
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <osTaskScan+0xe4>
        {
            LOS_ListDelete(&pstTaskCB->stPendList);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3328      	adds	r3, #40	; 0x28
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fec2 	bl	8002730 <LOS_ListDelete>
            pstTaskCB->usTaskStatus &= ~(OS_TASK_STATUS_PEND_QUEUE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	889b      	ldrh	r3, [r3, #4]
 80029b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	809a      	strh	r2, [r3, #4]
 80029ba:	e006      	b.n	80029ca <osTaskScan+0xf2>
        }
        else
        {
            pstTaskCB->usTaskStatus &= ~(OS_TASK_STATUS_DELAY);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	889b      	ldrh	r3, [r3, #4]
 80029c0:	f023 0320 	bic.w	r3, r3, #32
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	809a      	strh	r2, [r3, #4]
        }

        if (!((OS_TASK_STATUS_SUSPEND) & usTempStatus))
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d111      	bne.n	80029fa <osTaskScan+0x122>
        {
            pstTaskCB->usTaskStatus |= OS_TASK_STATUS_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	889b      	ldrh	r3, [r3, #4]
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	809a      	strh	r2, [r3, #4]
            osPriqueueEnqueue(&pstTaskCB->stPendList, pstTaskCB->usPriority);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88db      	ldrh	r3, [r3, #6]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7ff fbf3 	bl	80021dc <osPriqueueEnqueue>
            bNeedSchedule = TRUE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
        }

        pstTaskCB = LOS_DL_LIST_ENTRY(pstListObject->pstNext, LOS_TASK_CB, stTimerList); /*lint !e413*/
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	3b30      	subs	r3, #48	; 0x30
 8002a00:	60fb      	str	r3, [r7, #12]
    for (pstTaskCB = LOS_DL_LIST_ENTRY((pstListObject)->pstNext, LOS_TASK_CB, stTimerList);&pstTaskCB->stTimerList != (pstListObject);) /*lint !e413*/
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3330      	adds	r3, #48	; 0x30
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d189      	bne.n	8002920 <osTaskScan+0x48>
    }

    if (bNeedSchedule)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <osTaskScan+0x142>
    {
        LOS_Schedule();
 8002a12:	f7ff fb43 	bl	800209c <LOS_Schedule>
 8002a16:	e000      	b.n	8002a1a <osTaskScan+0x142>
        return;
 8002a18:	bf00      	nop
    }
}
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000158 	.word	0x20000158

08002a24 <osTaskWait>:
               uwTimeOut -- Expiry time
 Output      : none
 Return      : LOS_OK on success or LOS_NOK on failure
**************************************************************************/
LITE_OS_SEC_TEXT VOID osTaskWait(LOS_DL_LIST *pstList, UINT32 uwTaskStatus, UINT32 uwTimeOut)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    LOS_TASK_CB *pstRunTsk;
    LOS_DL_LIST *pstPendObj;

    pstRunTsk = g_stLosTask.pstRunTask;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <osTaskWait+0x70>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
    osPriqueueDequeue(&pstRunTsk->stPendList);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3328      	adds	r3, #40	; 0x28
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fbf8 	bl	8002230 <osPriqueueDequeue>
    pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_READY);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	809a      	strh	r2, [r3, #4]
    pstPendObj = &pstRunTsk->stPendList;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3328      	adds	r3, #40	; 0x28
 8002a52:	613b      	str	r3, [r7, #16]
    pstRunTsk->usTaskStatus |= uwTaskStatus;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	889a      	ldrh	r2, [r3, #4]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	809a      	strh	r2, [r3, #4]
    LOS_ListTailInsert(pstList,pstPendObj);
 8002a64:	6939      	ldr	r1, [r7, #16]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fe53 	bl	8002712 <LOS_ListTailInsert>
    if (uwTimeOut != LOS_WAIT_FOREVER)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d00a      	beq.n	8002a8a <osTaskWait+0x66>
    {
        pstRunTsk->usTaskStatus |= OS_TASK_STATUS_TIMEOUT;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	809a      	strh	r2, [r3, #4]
        osTaskAdd2TimerList((LOS_TASK_CB *)pstRunTsk, uwTimeOut);
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff fe6d 	bl	8002764 <osTaskAdd2TimerList>
    }
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000016c 	.word	0x2000016c

08002a98 <osTaskWake>:
 Input       : pstResumedTask --> resumed task
 Output      : pstResumedTask
 Return      : none
**************************************************************************/
LITE_OS_SEC_TEXT VOID osTaskWake(LOS_TASK_CB *pstResumedTask, UINT32 uwTaskStatus)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    LOS_ListDelete(&pstResumedTask->stPendList);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3328      	adds	r3, #40	; 0x28
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fe42 	bl	8002730 <LOS_ListDelete>
    pstResumedTask->usTaskStatus &= (~uwTaskStatus);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	889a      	ldrh	r2, [r3, #4]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	809a      	strh	r2, [r3, #4]
    if (pstResumedTask->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	889b      	ldrh	r3, [r3, #4]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <osTaskWake+0x48>
    {
        osTimerListDelete(pstResumedTask);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fed1 	bl	8002874 <osTimerListDelete>
        pstResumedTask->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	889b      	ldrh	r3, [r3, #4]
 8002ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	809a      	strh	r2, [r3, #4]
    }
    if (!(pstResumedTask->usTaskStatus & OS_TASK_STATUS_SUSPEND))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	889b      	ldrh	r3, [r3, #4]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10f      	bne.n	8002b0c <osTaskWake+0x74>
    {
        pstResumedTask->usTaskStatus |= OS_TASK_STATUS_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	889b      	ldrh	r3, [r3, #4]
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	809a      	strh	r2, [r3, #4]
        osPriqueueEnqueue(&pstResumedTask->stPendList, pstResumedTask->usPriority);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	88db      	ldrh	r3, [r3, #6]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7ff fb68 	bl	80021dc <osPriqueueEnqueue>
    }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <LOS_TaskYield>:
               uwNextTask
 Output      : None
 Return      : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR UINT32 LOS_TaskYield(VOID)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
    UINT32 uwTskCount = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
    UINTPTR uvIntSave;

    if(g_stLosTask.pstRunTask->uwTaskID >= g_uwTskMaxNum)
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <LOS_TaskYield+0xa0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d301      	bcc.n	8002b30 <LOS_TaskYield+0x1c>
    {
        return LOS_ERRNO_TSK_ID_INVALID;
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <LOS_TaskYield+0xa4>)
 8002b2e:	e03a      	b.n	8002ba6 <LOS_TaskYield+0x92>
    }
    if(!(g_stLosTask.pstRunTask->usTaskStatus & OS_TASK_STATUS_READY))
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	889b      	ldrh	r3, [r3, #4]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <LOS_TaskYield+0x2e>
    {
        return LOS_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e031      	b.n	8002ba6 <LOS_TaskYield+0x92>
    }
    uvIntSave = LOS_IntLock();
 8002b42:	f7fd fb93 	bl	800026c <LOS_IntLock>
 8002b46:	6038      	str	r0, [r7, #0]
    uwTskCount = osPriqueueSize(g_stLosTask.pstRunTask->usPriority);
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	88db      	ldrh	r3, [r3, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fbb8 	bl	80022c4 <osPriqueueSize>
 8002b54:	6078      	str	r0, [r7, #4]
    if (uwTskCount > 1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d920      	bls.n	8002b9e <LOS_TaskYield+0x8a>
    {
        LOS_ListDelete(&(g_stLosTask.pstRunTask->stPendList));
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3328      	adds	r3, #40	; 0x28
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fde4 	bl	8002730 <LOS_ListDelete>
        g_stLosTask.pstRunTask->usTaskStatus |= OS_TASK_STATUS_READY;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	889a      	ldrh	r2, [r3, #4]
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0204 	orr.w	r2, r2, #4
 8002b76:	b292      	uxth	r2, r2
 8002b78:	809a      	strh	r2, [r3, #4]
        osPriqueueEnqueue(&(g_stLosTask.pstRunTask->stPendList), g_stLosTask.pstRunTask->usPriority);
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <LOS_TaskYield+0x9c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	88db      	ldrh	r3, [r3, #6]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7ff fb26 	bl	80021dc <osPriqueueEnqueue>
    {
        (VOID)LOS_IntRestore(uvIntSave);
        return LOS_ERRNO_TSK_YIELD_NOT_ENOUGH_TASK;
    }

    (VOID)LOS_IntRestore(uvIntSave);
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f7fd fb73 	bl	800027c <LOS_IntRestore>
    LOS_Schedule();
 8002b96:	f7ff fa81 	bl	800209c <LOS_Schedule>
    return LOS_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e003      	b.n	8002ba6 <LOS_TaskYield+0x92>
        (VOID)LOS_IntRestore(uvIntSave);
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f7fd fb6c 	bl	800027c <LOS_IntRestore>
        return LOS_ERRNO_TSK_YIELD_NOT_ENOUGH_TASK;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <LOS_TaskYield+0xa8>)
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000016c 	.word	0x2000016c
 8002bb4:	20000164 	.word	0x20000164
 8002bb8:	02000207 	.word	0x02000207
 8002bbc:	02000210 	.word	0x02000210

08002bc0 <osTickHandler>:
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT VOID osTickHandler(VOID)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

#if (LOSCFG_BASE_CORE_TICK_HW_TIME == YES)
    platform_tick_handler();
#endif

    g_ullTickCount ++;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <osTickHandler+0x28>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	1c50      	adds	r0, r2, #1
 8002bcc:	f143 0100 	adc.w	r1, r3, #0
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <osTickHandler+0x28>)
 8002bd2:	e9c3 0100 	strd	r0, r1, [r3]

#if(LOSCFG_BASE_CORE_TIMESLICE == YES)
    osTimesliceCheck();
 8002bd6:	f000 f809 	bl	8002bec <osTimesliceCheck>
#endif

    osTaskScan();   //task timeout scan
 8002bda:	f7ff fe7d 	bl	80028d8 <osTaskScan>

#if (LOSCFG_BASE_CORE_SWTMR == YES)
    (VOID)osSwtmrScan();
 8002bde:	f7ff fd69 	bl	80026b4 <osSwtmrScan>
#endif
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200002e0 	.word	0x200002e0

08002bec <osTimesliceCheck>:
 Input        : None
 Output       : None
 Return       : None
 *****************************************************************************/
LITE_OS_SEC_TEXT VOID osTimesliceCheck(VOID)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
    if (g_stTaskTimeSlice.pstTask != g_stLosTask.pstRunTask)
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <osTimesliceCheck+0x50>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <osTimesliceCheck+0x54>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d00f      	beq.n	8002c1c <osTimesliceCheck+0x30>
    {
        g_stTaskTimeSlice.pstTask = g_stLosTask.pstRunTask;
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <osTimesliceCheck+0x54>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <osTimesliceCheck+0x50>)
 8002c02:	6013      	str	r3, [r2, #0]
        g_stTaskTimeSlice.usTime = (UINT16)g_ullTickCount + g_stTaskTimeSlice.usTout - 1;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <osTimesliceCheck+0x58>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <osTimesliceCheck+0x50>)
 8002c0e:	88db      	ldrh	r3, [r3, #6]
 8002c10:	4413      	add	r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <osTimesliceCheck+0x50>)
 8002c1a:	809a      	strh	r2, [r3, #4]
    }

    if (g_stTaskTimeSlice.usTime == (UINT16)g_ullTickCount)
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <osTimesliceCheck+0x50>)
 8002c1e:	8899      	ldrh	r1, [r3, #4]
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <osTimesliceCheck+0x58>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	b293      	uxth	r3, r2
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	d104      	bne.n	8002c36 <osTimesliceCheck+0x4a>
    {
        g_stTaskTimeSlice.pstTask = (LOS_TASK_CB *)NULL;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <osTimesliceCheck+0x50>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
        if (LOS_TaskYield() != LOS_OK)
 8002c32:	f7ff ff6f 	bl	8002b14 <LOS_TaskYield>
        {
            PRINT_INFO("%s, %d\n", __FUNCTION__, __LINE__);
        }
    } /*lint !e548*/
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200002f8 	.word	0x200002f8
 8002c40:	2000016c 	.word	0x2000016c
 8002c44:	200002e0 	.word	0x200002e0

08002c48 <LOS_ListEmpty>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
    return (BOOL)(pstNode->pstNext == pstNode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <osQueueWriteParameterCheck>:
    return LOS_OK;
}


LITE_OS_SEC_TEXT static INLINE UINT32 osQueueWriteParameterCheck(UINT32 uwQueueID, VOID *pBufferAddr, UINT32 *puwBufferSize, UINT32 uwTimeOut)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
    if (uwQueueID >= LOSCFG_BASE_IPC_QUEUE_LIMIT)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d901      	bls.n	8002c84 <osQueueWriteParameterCheck+0x18>
    {
        return LOS_ERRNO_QUEUE_INVALID;
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <osQueueWriteParameterCheck+0x4c>)
 8002c82:	e015      	b.n	8002cb0 <osQueueWriteParameterCheck+0x44>
    }

    if (NULL == pBufferAddr)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <osQueueWriteParameterCheck+0x22>
    {
        return LOS_ERRNO_QUEUE_WRITE_PTR_NULL;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <osQueueWriteParameterCheck+0x50>)
 8002c8c:	e010      	b.n	8002cb0 <osQueueWriteParameterCheck+0x44>
    }

    if (0 == *puwBufferSize)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <osQueueWriteParameterCheck+0x2e>
    {
        return LOS_ERRNO_QUEUE_WRITESIZE_ISZERO;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <osQueueWriteParameterCheck+0x54>)
 8002c98:	e00a      	b.n	8002cb0 <osQueueWriteParameterCheck+0x44>
    }

    if (LOS_NO_WAIT != uwTimeOut)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <osQueueWriteParameterCheck+0x42>
    {
        if (OS_INT_ACTIVE)
 8002ca0:	f7ff fa22 	bl	80020e8 <osIntNumGet>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <osQueueWriteParameterCheck+0x42>
        {
            return LOS_ERRNO_QUEUE_WRITE_IN_INTERRUPT;
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <osQueueWriteParameterCheck+0x58>)
 8002cac:	e000      	b.n	8002cb0 <osQueueWriteParameterCheck+0x44>
        }
    }
    return LOS_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	0200060e 	.word	0x0200060e
 8002cbc:	02000612 	.word	0x02000612
 8002cc0:	02000613 	.word	0x02000613
 8002cc4:	02000609 	.word	0x02000609

08002cc8 <osQueueBufferOperate>:

LITE_OS_SEC_TEXT static INLINE VOID osQueueBufferOperate(QUEUE_CB_S *pstQueueCB, UINT32 uwOperateType, VOID *pBufferAddr, UINT32 *puwBufferSize)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
    UINT8        *pucQueueNode;
    UINT32       uwMsgDataSize = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
    UINT16      usQueuePosion = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	83fb      	strh	r3, [r7, #30]

    /* get the queue position */
    switch (OS_QUEUE_OPERATE_GET(uwOperateType))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d030      	beq.n	8002d4a <osQueueBufferOperate+0x82>
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d843      	bhi.n	8002d74 <osQueueBufferOperate+0xac>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <osQueueBufferOperate+0x2e>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d015      	beq.n	8002d20 <osQueueBufferOperate+0x58>
 8002cf4:	e03e      	b.n	8002d74 <osQueueBufferOperate+0xac>
    {
        case OS_QUEUE_READ_HEAD:
            usQueuePosion = pstQueueCB->usQueueHead;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	899b      	ldrh	r3, [r3, #12]
 8002cfa:	83fb      	strh	r3, [r7, #30]
            (pstQueueCB->usQueueHead + 1 == pstQueueCB->usQueueLen) ? (pstQueueCB->usQueueHead = 0) : (pstQueueCB->usQueueHead++);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	899b      	ldrh	r3, [r3, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	88d2      	ldrh	r2, [r2, #6]
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d103      	bne.n	8002d12 <osQueueBufferOperate+0x4a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	819a      	strh	r2, [r3, #12]
            break;
 8002d10:	e037      	b.n	8002d82 <osQueueBufferOperate+0xba>
            (pstQueueCB->usQueueHead + 1 == pstQueueCB->usQueueLen) ? (pstQueueCB->usQueueHead = 0) : (pstQueueCB->usQueueHead++);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	899b      	ldrh	r3, [r3, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	819a      	strh	r2, [r3, #12]
            break;
 8002d1e:	e030      	b.n	8002d82 <osQueueBufferOperate+0xba>

        case OS_QUEUE_WRITE_HEAD:
            (0 == pstQueueCB->usQueueHead) ? (pstQueueCB->usQueueHead = pstQueueCB->usQueueLen - 1) : (--pstQueueCB->usQueueHead);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	899b      	ldrh	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <osQueueBufferOperate+0x6e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	88db      	ldrh	r3, [r3, #6]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	819a      	strh	r2, [r3, #12]
 8002d34:	e005      	b.n	8002d42 <osQueueBufferOperate+0x7a>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	899b      	ldrh	r3, [r3, #12]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	819a      	strh	r2, [r3, #12]
            usQueuePosion = pstQueueCB->usQueueHead;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	899b      	ldrh	r3, [r3, #12]
 8002d46:	83fb      	strh	r3, [r7, #30]
            break;
 8002d48:	e01b      	b.n	8002d82 <osQueueBufferOperate+0xba>

        case OS_QUEUE_WRITE_TAIL :
            usQueuePosion = pstQueueCB->usQueueTail;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	89db      	ldrh	r3, [r3, #14]
 8002d4e:	83fb      	strh	r3, [r7, #30]
            (pstQueueCB->usQueueTail + 1 == pstQueueCB->usQueueLen) ? (pstQueueCB->usQueueTail = 0) : (pstQueueCB->usQueueTail++);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	89db      	ldrh	r3, [r3, #14]
 8002d54:	3301      	adds	r3, #1
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	88d2      	ldrh	r2, [r2, #6]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d103      	bne.n	8002d66 <osQueueBufferOperate+0x9e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	81da      	strh	r2, [r3, #14]
            break;
 8002d64:	e00d      	b.n	8002d82 <osQueueBufferOperate+0xba>
            (pstQueueCB->usQueueTail + 1 == pstQueueCB->usQueueLen) ? (pstQueueCB->usQueueTail = 0) : (pstQueueCB->usQueueTail++);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	89db      	ldrh	r3, [r3, #14]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	81da      	strh	r2, [r3, #14]
            break;
 8002d72:	e006      	b.n	8002d82 <osQueueBufferOperate+0xba>

        default: //read tail , reserved.
            PRINT_ERR("invalid queue operate type!\n");
 8002d74:	4825      	ldr	r0, [pc, #148]	; (8002e0c <osQueueBufferOperate+0x144>)
 8002d76:	f000 f999 	bl	80030ac <iprintf>
 8002d7a:	4825      	ldr	r0, [pc, #148]	; (8002e10 <osQueueBufferOperate+0x148>)
 8002d7c:	f000 fa1c 	bl	80031b8 <puts>
 8002d80:	e041      	b.n	8002e06 <osQueueBufferOperate+0x13e>
            return;
    }

    pucQueueNode = &(pstQueueCB->pucQueue[(usQueuePosion * (pstQueueCB->usQueueSize))]);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	8bfa      	ldrh	r2, [r7, #30]
 8002d88:	68f9      	ldr	r1, [r7, #12]
 8002d8a:	8909      	ldrh	r1, [r1, #8]
 8002d8c:	fb01 f202 	mul.w	r2, r1, r2
 8002d90:	4413      	add	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]

    if(OS_QUEUE_IS_POINT(uwOperateType))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <osQueueBufferOperate+0xf4>
    {
        if(OS_QUEUE_IS_READ(uwOperateType))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <osQueueBufferOperate+0xea>
        {
            *(UINT32 *)pBufferAddr = *(UINT32 *)pucQueueNode;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e029      	b.n	8002e06 <osQueueBufferOperate+0x13e>
        }
        else
        {
            *(UINT32 *)pucQueueNode = *(UINT32 *)pBufferAddr;//change to pp when calling osQueueOperate
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e024      	b.n	8002e06 <osQueueBufferOperate+0x13e>
        }
    }
    else
    {
        if(OS_QUEUE_IS_READ(uwOperateType))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d110      	bne.n	8002de8 <osQueueBufferOperate+0x120>
        {
            memcpy((VOID *)&uwMsgDataSize, (VOID *)(pucQueueNode + pstQueueCB->usQueueSize - sizeof(UINT32)), sizeof(UINT32));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	891b      	ldrh	r3, [r3, #8]
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]
            memcpy((VOID *)pBufferAddr, (VOID *)pucQueueNode, uwMsgDataSize);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	69b9      	ldr	r1, [r7, #24]
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f950 	bl	8003080 <memcpy>
            *puwBufferSize = uwMsgDataSize;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00e      	b.n	8002e06 <osQueueBufferOperate+0x13e>
        }
        else
        {
            memcpy((VOID *)pucQueueNode, (VOID *)pBufferAddr, *puwBufferSize);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f000 f945 	bl	8003080 <memcpy>
            memcpy((VOID *)(pucQueueNode + pstQueueCB->usQueueSize - sizeof(UINT32)), puwBufferSize, sizeof(UINT32));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	891b      	ldrh	r3, [r3, #8]
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	601a      	str	r2, [r3, #0]
        }
    }
}
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	0800405c 	.word	0x0800405c
 8002e10:	08004064 	.word	0x08004064

08002e14 <osQueueOperate>:


LITE_OS_SEC_TEXT UINT32 osQueueOperate(UINT32 uwQueueID, UINT32 uwOperateType, VOID *pBufferAddr, UINT32 *puwBufferSize, UINT32 uwTimeOut)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
    QUEUE_CB_S *pstQueueCB;
    LOS_TASK_CB  *pstRunTsk;
    UINTPTR      uvIntSave;
    LOS_TASK_CB  *pstResumedTask;
    UINT32       uwRet = LOS_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
    UINT32       uwReadWrite = OS_QUEUE_READ_WRITE_GET(uwOperateType);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]

    uvIntSave = LOS_IntLock();
 8002e2e:	f7fd fa1d 	bl	800026c <LOS_IntLock>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

    pstQueueCB = (QUEUE_CB_S *)GET_QUEUE_HANDLE(uwQueueID);
 8002e34:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <osQueueOperate+0x1a8>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
    if (OS_QUEUE_UNUSED == pstQueueCB->usQueueState)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <osQueueOperate+0x3e>
    {
        uwRet = LOS_ERRNO_QUEUE_NOT_CREATE;
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <osQueueOperate+0x1ac>)
 8002e4e:	623b      	str	r3, [r7, #32]
        goto QUEUE_END;
 8002e50:	e0ac      	b.n	8002fac <osQueueOperate+0x198>

    }

    if(OS_QUEUE_IS_READ(uwOperateType) && (*puwBufferSize < pstQueueCB->usQueueSize - sizeof(UINT32)))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <osQueueOperate+0x5c>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	891b      	ldrh	r3, [r3, #8]
 8002e64:	3b04      	subs	r3, #4
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d202      	bcs.n	8002e70 <osQueueOperate+0x5c>
    {
        uwRet = LOS_ERRNO_QUEUE_READ_SIZE_TOO_SMALL;
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <osQueueOperate+0x1b0>)
 8002e6c:	623b      	str	r3, [r7, #32]
        goto QUEUE_END;
 8002e6e:	e09d      	b.n	8002fac <osQueueOperate+0x198>
    }
    else if(OS_QUEUE_IS_WRITE(uwOperateType) && (*puwBufferSize > pstQueueCB->usQueueSize - sizeof(UINT32)))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <osQueueOperate+0x7a>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	891b      	ldrh	r3, [r3, #8]
 8002e82:	3b04      	subs	r3, #4
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d902      	bls.n	8002e8e <osQueueOperate+0x7a>
    {
        uwRet = LOS_ERRNO_QUEUE_WRITE_SIZE_TOO_BIG;
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <osQueueOperate+0x1b4>)
 8002e8a:	623b      	str	r3, [r7, #32]
        goto QUEUE_END;
 8002e8c:	e08e      	b.n	8002fac <osQueueOperate+0x198>
    }

    if (0 == pstQueueCB->usReadWriteableCnt[uwReadWrite])
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	3208      	adds	r2, #8
 8002e94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13a      	bne.n	8002f12 <osQueueOperate+0xfe>
    {
        if (LOS_NO_WAIT == uwTimeOut)
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <osQueueOperate+0xa2>
        {
            uwRet = OS_QUEUE_IS_READ(uwOperateType) ? LOS_ERRNO_QUEUE_ISEMPTY : LOS_ERRNO_QUEUE_ISFULL;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <osQueueOperate+0x9c>
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <osQueueOperate+0x1b8>)
 8002eae:	e000      	b.n	8002eb2 <osQueueOperate+0x9e>
 8002eb0:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <osQueueOperate+0x1bc>)
 8002eb2:	623b      	str	r3, [r7, #32]
            goto QUEUE_END;
 8002eb4:	e07a      	b.n	8002fac <osQueueOperate+0x198>
        }

        if (g_usLosTaskLock)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <osQueueOperate+0x1c0>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <osQueueOperate+0xb0>
        {
            uwRet = LOS_ERRNO_QUEUE_PEND_IN_LOCK;
 8002ebe:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <osQueueOperate+0x1c4>)
 8002ec0:	623b      	str	r3, [r7, #32]
            goto QUEUE_END;
 8002ec2:	e073      	b.n	8002fac <osQueueOperate+0x198>
        }

        pstRunTsk = (LOS_TASK_CB *)g_stLosTask.pstRunTask;
 8002ec4:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <osQueueOperate+0x1c8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
        osTaskWait(&pstQueueCB->stReadWriteList[uwReadWrite], OS_TASK_STATUS_PEND_QUEUE, uwTimeOut);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fda1 	bl	8002a24 <osTaskWait>
        LOS_IntRestore(uvIntSave);
 8002ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ee4:	f7fd f9ca 	bl	800027c <LOS_IntRestore>
        LOS_Schedule();
 8002ee8:	f7ff f8d8 	bl	800209c <LOS_Schedule>

        uvIntSave = LOS_IntLock();
 8002eec:	f7fd f9be 	bl	800026c <LOS_IntLock>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24

        if (pstRunTsk->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	889b      	ldrh	r3, [r3, #4]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <osQueueOperate+0x116>
        {
            pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	889b      	ldrh	r3, [r3, #4]
 8002f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	809a      	strh	r2, [r3, #4]
            uwRet = LOS_ERRNO_QUEUE_TIMEOUT;
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <osQueueOperate+0x1cc>)
 8002f0e:	623b      	str	r3, [r7, #32]
            goto QUEUE_END;
 8002f10:	e04c      	b.n	8002fac <osQueueOperate+0x198>
        }
    }
    else
    {
        pstQueueCB->usReadWriteableCnt[uwReadWrite]--;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b299      	uxth	r1, r3
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	3208      	adds	r2, #8
 8002f26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    }

    osQueueBufferOperate(pstQueueCB, uwOperateType, pBufferAddr, puwBufferSize);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	69b8      	ldr	r0, [r7, #24]
 8002f32:	f7ff fec9 	bl	8002cc8 <osQueueBufferOperate>

    if (!LOS_ListEmpty(&pstQueueCB->stReadWriteList[!uwReadWrite])) /*lint !e514*/
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3302      	adds	r3, #2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fe7b 	bl	8002c48 <LOS_ListEmpty>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d118      	bne.n	8002f8a <osQueueOperate+0x176>
    {
        pstResumedTask = OS_TCB_FROM_PENDLIST(LOS_DL_LIST_FIRST(&pstQueueCB->stReadWriteList[!uwReadWrite])); /*lint !e413 !e514*/
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	3302      	adds	r3, #2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	3b28      	subs	r3, #40	; 0x28
 8002f70:	613b      	str	r3, [r7, #16]
        osTaskWake(pstResumedTask, OS_TASK_STATUS_PEND_QUEUE);
 8002f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f76:	6938      	ldr	r0, [r7, #16]
 8002f78:	f7ff fd8e 	bl	8002a98 <osTaskWake>
        LOS_IntRestore(uvIntSave);
 8002f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f7e:	f7fd f97d 	bl	800027c <LOS_IntRestore>
        LOS_Schedule();
 8002f82:	f7ff f88b 	bl	800209c <LOS_Schedule>
        return LOS_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e014      	b.n	8002fb4 <osQueueOperate+0x1a0>
    }
    else
    {
        pstQueueCB->usReadWriteableCnt[!uwReadWrite]++; /*lint !e514*/
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	f103 0108 	add.w	r1, r3, #8
 8002f9c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	b291      	uxth	r1, r2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

QUEUE_END:
    LOS_IntRestore(uvIntSave);
 8002fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fae:	f7fd f965 	bl	800027c <LOS_IntRestore>
    return uwRet;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000308 	.word	0x20000308
 8002fc0:	0200060a 	.word	0x0200060a
 8002fc4:	0200061f 	.word	0x0200061f
 8002fc8:	02000615 	.word	0x02000615
 8002fcc:	0200061d 	.word	0x0200061d
 8002fd0:	02000616 	.word	0x02000616
 8002fd4:	20000168 	.word	0x20000168
 8002fd8:	02000606 	.word	0x02000606
 8002fdc:	2000016c 	.word	0x2000016c
 8002fe0:	02000607 	.word	0x02000607

08002fe4 <LOS_QueueWriteCopy>:
 *****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_QueueWriteCopy( UINT32 uwQueueID,
                                     VOID * pBufferAddr,
                                     UINT32 uwBufferSize,
                                     UINT32 uwTimeOut )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
    UINT32 uwRet;
    UINT32 uwOperateType;

    uwRet = osQueueWriteParameterCheck(uwQueueID, pBufferAddr, &uwBufferSize, uwTimeOut);
 8002ff2:	1d3a      	adds	r2, r7, #4
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fe37 	bl	8002c6c <osQueueWriteParameterCheck>
 8002ffe:	6178      	str	r0, [r7, #20]
    if(uwRet != LOS_OK)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <LOS_QueueWriteCopy+0x26>
    {
        return uwRet;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	e00b      	b.n	8003022 <LOS_QueueWriteCopy+0x3e>
    }

    uwOperateType = OS_QUEUE_OPERATE_TYPE(OS_QUEUE_WRITE, OS_QUEUE_TAIL, OS_QUEUE_NOT_POINT);
 800300a:	2303      	movs	r3, #3
 800300c:	613b      	str	r3, [r7, #16]
    return osQueueOperate(uwQueueID, uwOperateType, pBufferAddr, &uwBufferSize, uwTimeOut);
 800300e:	1d3a      	adds	r2, r7, #4
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff fefa 	bl	8002e14 <osQueueOperate>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <__errno>:
 800302c:	4b01      	ldr	r3, [pc, #4]	; (8003034 <__errno+0x8>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000000c 	.word	0x2000000c

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4d0d      	ldr	r5, [pc, #52]	; (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2600      	movs	r6, #0
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4d0b      	ldr	r5, [pc, #44]	; (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	; (800307c <__libc_init_array+0x44>)
 800304c:	f000 fffa 	bl	8004044 <_init>
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2600      	movs	r6, #0
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	08004130 	.word	0x08004130
 8003074:	08004130 	.word	0x08004130
 8003078:	08004130 	.word	0x08004130
 800307c:	08004134 	.word	0x08004134

08003080 <memcpy>:
 8003080:	440a      	add	r2, r1
 8003082:	4291      	cmp	r1, r2
 8003084:	f100 33ff 	add.w	r3, r0, #4294967295
 8003088:	d100      	bne.n	800308c <memcpy+0xc>
 800308a:	4770      	bx	lr
 800308c:	b510      	push	{r4, lr}
 800308e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003096:	4291      	cmp	r1, r2
 8003098:	d1f9      	bne.n	800308e <memcpy+0xe>
 800309a:	bd10      	pop	{r4, pc}

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <iprintf>:
 80030ac:	b40f      	push	{r0, r1, r2, r3}
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <iprintf+0x2c>)
 80030b0:	b513      	push	{r0, r1, r4, lr}
 80030b2:	681c      	ldr	r4, [r3, #0]
 80030b4:	b124      	cbz	r4, 80030c0 <iprintf+0x14>
 80030b6:	69a3      	ldr	r3, [r4, #24]
 80030b8:	b913      	cbnz	r3, 80030c0 <iprintf+0x14>
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 fa5e 	bl	800357c <__sinit>
 80030c0:	ab05      	add	r3, sp, #20
 80030c2:	9a04      	ldr	r2, [sp, #16]
 80030c4:	68a1      	ldr	r1, [r4, #8]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 fc2f 	bl	800392c <_vfiprintf_r>
 80030ce:	b002      	add	sp, #8
 80030d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d4:	b004      	add	sp, #16
 80030d6:	4770      	bx	lr
 80030d8:	2000000c 	.word	0x2000000c

080030dc <_puts_r>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	460e      	mov	r6, r1
 80030e0:	4605      	mov	r5, r0
 80030e2:	b118      	cbz	r0, 80030ec <_puts_r+0x10>
 80030e4:	6983      	ldr	r3, [r0, #24]
 80030e6:	b90b      	cbnz	r3, 80030ec <_puts_r+0x10>
 80030e8:	f000 fa48 	bl	800357c <__sinit>
 80030ec:	69ab      	ldr	r3, [r5, #24]
 80030ee:	68ac      	ldr	r4, [r5, #8]
 80030f0:	b913      	cbnz	r3, 80030f8 <_puts_r+0x1c>
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 fa42 	bl	800357c <__sinit>
 80030f8:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <_puts_r+0xd0>)
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d120      	bne.n	8003140 <_puts_r+0x64>
 80030fe:	686c      	ldr	r4, [r5, #4]
 8003100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003102:	07db      	lsls	r3, r3, #31
 8003104:	d405      	bmi.n	8003112 <_puts_r+0x36>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	0598      	lsls	r0, r3, #22
 800310a:	d402      	bmi.n	8003112 <_puts_r+0x36>
 800310c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310e:	f000 fad3 	bl	80036b8 <__retarget_lock_acquire_recursive>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	0719      	lsls	r1, r3, #28
 8003116:	d51d      	bpl.n	8003154 <_puts_r+0x78>
 8003118:	6923      	ldr	r3, [r4, #16]
 800311a:	b1db      	cbz	r3, 8003154 <_puts_r+0x78>
 800311c:	3e01      	subs	r6, #1
 800311e:	68a3      	ldr	r3, [r4, #8]
 8003120:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003124:	3b01      	subs	r3, #1
 8003126:	60a3      	str	r3, [r4, #8]
 8003128:	bb39      	cbnz	r1, 800317a <_puts_r+0x9e>
 800312a:	2b00      	cmp	r3, #0
 800312c:	da38      	bge.n	80031a0 <_puts_r+0xc4>
 800312e:	4622      	mov	r2, r4
 8003130:	210a      	movs	r1, #10
 8003132:	4628      	mov	r0, r5
 8003134:	f000 f848 	bl	80031c8 <__swbuf_r>
 8003138:	3001      	adds	r0, #1
 800313a:	d011      	beq.n	8003160 <_puts_r+0x84>
 800313c:	250a      	movs	r5, #10
 800313e:	e011      	b.n	8003164 <_puts_r+0x88>
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <_puts_r+0xd4>)
 8003142:	429c      	cmp	r4, r3
 8003144:	d101      	bne.n	800314a <_puts_r+0x6e>
 8003146:	68ac      	ldr	r4, [r5, #8]
 8003148:	e7da      	b.n	8003100 <_puts_r+0x24>
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <_puts_r+0xd8>)
 800314c:	429c      	cmp	r4, r3
 800314e:	bf08      	it	eq
 8003150:	68ec      	ldreq	r4, [r5, #12]
 8003152:	e7d5      	b.n	8003100 <_puts_r+0x24>
 8003154:	4621      	mov	r1, r4
 8003156:	4628      	mov	r0, r5
 8003158:	f000 f888 	bl	800326c <__swsetup_r>
 800315c:	2800      	cmp	r0, #0
 800315e:	d0dd      	beq.n	800311c <_puts_r+0x40>
 8003160:	f04f 35ff 	mov.w	r5, #4294967295
 8003164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003166:	07da      	lsls	r2, r3, #31
 8003168:	d405      	bmi.n	8003176 <_puts_r+0x9a>
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	059b      	lsls	r3, r3, #22
 800316e:	d402      	bmi.n	8003176 <_puts_r+0x9a>
 8003170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003172:	f000 faa2 	bl	80036ba <__retarget_lock_release_recursive>
 8003176:	4628      	mov	r0, r5
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	2b00      	cmp	r3, #0
 800317c:	da04      	bge.n	8003188 <_puts_r+0xac>
 800317e:	69a2      	ldr	r2, [r4, #24]
 8003180:	429a      	cmp	r2, r3
 8003182:	dc06      	bgt.n	8003192 <_puts_r+0xb6>
 8003184:	290a      	cmp	r1, #10
 8003186:	d004      	beq.n	8003192 <_puts_r+0xb6>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	6022      	str	r2, [r4, #0]
 800318e:	7019      	strb	r1, [r3, #0]
 8003190:	e7c5      	b.n	800311e <_puts_r+0x42>
 8003192:	4622      	mov	r2, r4
 8003194:	4628      	mov	r0, r5
 8003196:	f000 f817 	bl	80031c8 <__swbuf_r>
 800319a:	3001      	adds	r0, #1
 800319c:	d1bf      	bne.n	800311e <_puts_r+0x42>
 800319e:	e7df      	b.n	8003160 <_puts_r+0x84>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	250a      	movs	r5, #10
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	6022      	str	r2, [r4, #0]
 80031a8:	701d      	strb	r5, [r3, #0]
 80031aa:	e7db      	b.n	8003164 <_puts_r+0x88>
 80031ac:	080040bc 	.word	0x080040bc
 80031b0:	080040dc 	.word	0x080040dc
 80031b4:	0800409c 	.word	0x0800409c

080031b8 <puts>:
 80031b8:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <puts+0xc>)
 80031ba:	4601      	mov	r1, r0
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f7ff bf8d 	b.w	80030dc <_puts_r>
 80031c2:	bf00      	nop
 80031c4:	2000000c 	.word	0x2000000c

080031c8 <__swbuf_r>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	460e      	mov	r6, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	4605      	mov	r5, r0
 80031d0:	b118      	cbz	r0, 80031da <__swbuf_r+0x12>
 80031d2:	6983      	ldr	r3, [r0, #24]
 80031d4:	b90b      	cbnz	r3, 80031da <__swbuf_r+0x12>
 80031d6:	f000 f9d1 	bl	800357c <__sinit>
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <__swbuf_r+0x98>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d12b      	bne.n	8003238 <__swbuf_r+0x70>
 80031e0:	686c      	ldr	r4, [r5, #4]
 80031e2:	69a3      	ldr	r3, [r4, #24]
 80031e4:	60a3      	str	r3, [r4, #8]
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	071a      	lsls	r2, r3, #28
 80031ea:	d52f      	bpl.n	800324c <__swbuf_r+0x84>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	b36b      	cbz	r3, 800324c <__swbuf_r+0x84>
 80031f0:	6923      	ldr	r3, [r4, #16]
 80031f2:	6820      	ldr	r0, [r4, #0]
 80031f4:	1ac0      	subs	r0, r0, r3
 80031f6:	6963      	ldr	r3, [r4, #20]
 80031f8:	b2f6      	uxtb	r6, r6
 80031fa:	4283      	cmp	r3, r0
 80031fc:	4637      	mov	r7, r6
 80031fe:	dc04      	bgt.n	800320a <__swbuf_r+0x42>
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f926 	bl	8003454 <_fflush_r>
 8003208:	bb30      	cbnz	r0, 8003258 <__swbuf_r+0x90>
 800320a:	68a3      	ldr	r3, [r4, #8]
 800320c:	3b01      	subs	r3, #1
 800320e:	60a3      	str	r3, [r4, #8]
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	6022      	str	r2, [r4, #0]
 8003216:	701e      	strb	r6, [r3, #0]
 8003218:	6963      	ldr	r3, [r4, #20]
 800321a:	3001      	adds	r0, #1
 800321c:	4283      	cmp	r3, r0
 800321e:	d004      	beq.n	800322a <__swbuf_r+0x62>
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	07db      	lsls	r3, r3, #31
 8003224:	d506      	bpl.n	8003234 <__swbuf_r+0x6c>
 8003226:	2e0a      	cmp	r6, #10
 8003228:	d104      	bne.n	8003234 <__swbuf_r+0x6c>
 800322a:	4621      	mov	r1, r4
 800322c:	4628      	mov	r0, r5
 800322e:	f000 f911 	bl	8003454 <_fflush_r>
 8003232:	b988      	cbnz	r0, 8003258 <__swbuf_r+0x90>
 8003234:	4638      	mov	r0, r7
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <__swbuf_r+0x9c>)
 800323a:	429c      	cmp	r4, r3
 800323c:	d101      	bne.n	8003242 <__swbuf_r+0x7a>
 800323e:	68ac      	ldr	r4, [r5, #8]
 8003240:	e7cf      	b.n	80031e2 <__swbuf_r+0x1a>
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <__swbuf_r+0xa0>)
 8003244:	429c      	cmp	r4, r3
 8003246:	bf08      	it	eq
 8003248:	68ec      	ldreq	r4, [r5, #12]
 800324a:	e7ca      	b.n	80031e2 <__swbuf_r+0x1a>
 800324c:	4621      	mov	r1, r4
 800324e:	4628      	mov	r0, r5
 8003250:	f000 f80c 	bl	800326c <__swsetup_r>
 8003254:	2800      	cmp	r0, #0
 8003256:	d0cb      	beq.n	80031f0 <__swbuf_r+0x28>
 8003258:	f04f 37ff 	mov.w	r7, #4294967295
 800325c:	e7ea      	b.n	8003234 <__swbuf_r+0x6c>
 800325e:	bf00      	nop
 8003260:	080040bc 	.word	0x080040bc
 8003264:	080040dc 	.word	0x080040dc
 8003268:	0800409c 	.word	0x0800409c

0800326c <__swsetup_r>:
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <__swsetup_r+0xcc>)
 800326e:	b570      	push	{r4, r5, r6, lr}
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	4606      	mov	r6, r0
 8003274:	460c      	mov	r4, r1
 8003276:	b125      	cbz	r5, 8003282 <__swsetup_r+0x16>
 8003278:	69ab      	ldr	r3, [r5, #24]
 800327a:	b913      	cbnz	r3, 8003282 <__swsetup_r+0x16>
 800327c:	4628      	mov	r0, r5
 800327e:	f000 f97d 	bl	800357c <__sinit>
 8003282:	4b2e      	ldr	r3, [pc, #184]	; (800333c <__swsetup_r+0xd0>)
 8003284:	429c      	cmp	r4, r3
 8003286:	d10f      	bne.n	80032a8 <__swsetup_r+0x3c>
 8003288:	686c      	ldr	r4, [r5, #4]
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003290:	0719      	lsls	r1, r3, #28
 8003292:	d42c      	bmi.n	80032ee <__swsetup_r+0x82>
 8003294:	06dd      	lsls	r5, r3, #27
 8003296:	d411      	bmi.n	80032bc <__swsetup_r+0x50>
 8003298:	2309      	movs	r3, #9
 800329a:	6033      	str	r3, [r6, #0]
 800329c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295
 80032a6:	e03e      	b.n	8003326 <__swsetup_r+0xba>
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <__swsetup_r+0xd4>)
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d101      	bne.n	80032b2 <__swsetup_r+0x46>
 80032ae:	68ac      	ldr	r4, [r5, #8]
 80032b0:	e7eb      	b.n	800328a <__swsetup_r+0x1e>
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <__swsetup_r+0xd8>)
 80032b4:	429c      	cmp	r4, r3
 80032b6:	bf08      	it	eq
 80032b8:	68ec      	ldreq	r4, [r5, #12]
 80032ba:	e7e6      	b.n	800328a <__swsetup_r+0x1e>
 80032bc:	0758      	lsls	r0, r3, #29
 80032be:	d512      	bpl.n	80032e6 <__swsetup_r+0x7a>
 80032c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c2:	b141      	cbz	r1, 80032d6 <__swsetup_r+0x6a>
 80032c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032c8:	4299      	cmp	r1, r3
 80032ca:	d002      	beq.n	80032d2 <__swsetup_r+0x66>
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 fa59 	bl	8003784 <_free_r>
 80032d2:	2300      	movs	r3, #0
 80032d4:	6363      	str	r3, [r4, #52]	; 0x34
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	2300      	movs	r3, #0
 80032e0:	6063      	str	r3, [r4, #4]
 80032e2:	6923      	ldr	r3, [r4, #16]
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	b94b      	cbnz	r3, 8003306 <__swsetup_r+0x9a>
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fc:	d003      	beq.n	8003306 <__swsetup_r+0x9a>
 80032fe:	4621      	mov	r1, r4
 8003300:	4630      	mov	r0, r6
 8003302:	f000 f9ff 	bl	8003704 <__smakebuf_r>
 8003306:	89a0      	ldrh	r0, [r4, #12]
 8003308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800330c:	f010 0301 	ands.w	r3, r0, #1
 8003310:	d00a      	beq.n	8003328 <__swsetup_r+0xbc>
 8003312:	2300      	movs	r3, #0
 8003314:	60a3      	str	r3, [r4, #8]
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	425b      	negs	r3, r3
 800331a:	61a3      	str	r3, [r4, #24]
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	b943      	cbnz	r3, 8003332 <__swsetup_r+0xc6>
 8003320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003324:	d1ba      	bne.n	800329c <__swsetup_r+0x30>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	0781      	lsls	r1, r0, #30
 800332a:	bf58      	it	pl
 800332c:	6963      	ldrpl	r3, [r4, #20]
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	e7f4      	b.n	800331c <__swsetup_r+0xb0>
 8003332:	2000      	movs	r0, #0
 8003334:	e7f7      	b.n	8003326 <__swsetup_r+0xba>
 8003336:	bf00      	nop
 8003338:	2000000c 	.word	0x2000000c
 800333c:	080040bc 	.word	0x080040bc
 8003340:	080040dc 	.word	0x080040dc
 8003344:	0800409c 	.word	0x0800409c

08003348 <__sflush_r>:
 8003348:	898a      	ldrh	r2, [r1, #12]
 800334a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	0710      	lsls	r0, r2, #28
 8003352:	460c      	mov	r4, r1
 8003354:	d458      	bmi.n	8003408 <__sflush_r+0xc0>
 8003356:	684b      	ldr	r3, [r1, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dc05      	bgt.n	8003368 <__sflush_r+0x20>
 800335c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	dc02      	bgt.n	8003368 <__sflush_r+0x20>
 8003362:	2000      	movs	r0, #0
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800336a:	2e00      	cmp	r6, #0
 800336c:	d0f9      	beq.n	8003362 <__sflush_r+0x1a>
 800336e:	2300      	movs	r3, #0
 8003370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003374:	682f      	ldr	r7, [r5, #0]
 8003376:	602b      	str	r3, [r5, #0]
 8003378:	d032      	beq.n	80033e0 <__sflush_r+0x98>
 800337a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	075a      	lsls	r2, r3, #29
 8003380:	d505      	bpl.n	800338e <__sflush_r+0x46>
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	1ac0      	subs	r0, r0, r3
 8003386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003388:	b10b      	cbz	r3, 800338e <__sflush_r+0x46>
 800338a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800338c:	1ac0      	subs	r0, r0, r3
 800338e:	2300      	movs	r3, #0
 8003390:	4602      	mov	r2, r0
 8003392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003394:	6a21      	ldr	r1, [r4, #32]
 8003396:	4628      	mov	r0, r5
 8003398:	47b0      	blx	r6
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	d106      	bne.n	80033ae <__sflush_r+0x66>
 80033a0:	6829      	ldr	r1, [r5, #0]
 80033a2:	291d      	cmp	r1, #29
 80033a4:	d82c      	bhi.n	8003400 <__sflush_r+0xb8>
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <__sflush_r+0x108>)
 80033a8:	40ca      	lsrs	r2, r1
 80033aa:	07d6      	lsls	r6, r2, #31
 80033ac:	d528      	bpl.n	8003400 <__sflush_r+0xb8>
 80033ae:	2200      	movs	r2, #0
 80033b0:	6062      	str	r2, [r4, #4]
 80033b2:	04d9      	lsls	r1, r3, #19
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	6022      	str	r2, [r4, #0]
 80033b8:	d504      	bpl.n	80033c4 <__sflush_r+0x7c>
 80033ba:	1c42      	adds	r2, r0, #1
 80033bc:	d101      	bne.n	80033c2 <__sflush_r+0x7a>
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	b903      	cbnz	r3, 80033c4 <__sflush_r+0x7c>
 80033c2:	6560      	str	r0, [r4, #84]	; 0x54
 80033c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c6:	602f      	str	r7, [r5, #0]
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d0ca      	beq.n	8003362 <__sflush_r+0x1a>
 80033cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033d0:	4299      	cmp	r1, r3
 80033d2:	d002      	beq.n	80033da <__sflush_r+0x92>
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f9d5 	bl	8003784 <_free_r>
 80033da:	2000      	movs	r0, #0
 80033dc:	6360      	str	r0, [r4, #52]	; 0x34
 80033de:	e7c1      	b.n	8003364 <__sflush_r+0x1c>
 80033e0:	6a21      	ldr	r1, [r4, #32]
 80033e2:	2301      	movs	r3, #1
 80033e4:	4628      	mov	r0, r5
 80033e6:	47b0      	blx	r6
 80033e8:	1c41      	adds	r1, r0, #1
 80033ea:	d1c7      	bne.n	800337c <__sflush_r+0x34>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0c4      	beq.n	800337c <__sflush_r+0x34>
 80033f2:	2b1d      	cmp	r3, #29
 80033f4:	d001      	beq.n	80033fa <__sflush_r+0xb2>
 80033f6:	2b16      	cmp	r3, #22
 80033f8:	d101      	bne.n	80033fe <__sflush_r+0xb6>
 80033fa:	602f      	str	r7, [r5, #0]
 80033fc:	e7b1      	b.n	8003362 <__sflush_r+0x1a>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003404:	81a3      	strh	r3, [r4, #12]
 8003406:	e7ad      	b.n	8003364 <__sflush_r+0x1c>
 8003408:	690f      	ldr	r7, [r1, #16]
 800340a:	2f00      	cmp	r7, #0
 800340c:	d0a9      	beq.n	8003362 <__sflush_r+0x1a>
 800340e:	0793      	lsls	r3, r2, #30
 8003410:	680e      	ldr	r6, [r1, #0]
 8003412:	bf08      	it	eq
 8003414:	694b      	ldreq	r3, [r1, #20]
 8003416:	600f      	str	r7, [r1, #0]
 8003418:	bf18      	it	ne
 800341a:	2300      	movne	r3, #0
 800341c:	eba6 0807 	sub.w	r8, r6, r7
 8003420:	608b      	str	r3, [r1, #8]
 8003422:	f1b8 0f00 	cmp.w	r8, #0
 8003426:	dd9c      	ble.n	8003362 <__sflush_r+0x1a>
 8003428:	6a21      	ldr	r1, [r4, #32]
 800342a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800342c:	4643      	mov	r3, r8
 800342e:	463a      	mov	r2, r7
 8003430:	4628      	mov	r0, r5
 8003432:	47b0      	blx	r6
 8003434:	2800      	cmp	r0, #0
 8003436:	dc06      	bgt.n	8003446 <__sflush_r+0xfe>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	e78e      	b.n	8003364 <__sflush_r+0x1c>
 8003446:	4407      	add	r7, r0
 8003448:	eba8 0800 	sub.w	r8, r8, r0
 800344c:	e7e9      	b.n	8003422 <__sflush_r+0xda>
 800344e:	bf00      	nop
 8003450:	20400001 	.word	0x20400001

08003454 <_fflush_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	690b      	ldr	r3, [r1, #16]
 8003458:	4605      	mov	r5, r0
 800345a:	460c      	mov	r4, r1
 800345c:	b913      	cbnz	r3, 8003464 <_fflush_r+0x10>
 800345e:	2500      	movs	r5, #0
 8003460:	4628      	mov	r0, r5
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	b118      	cbz	r0, 800346e <_fflush_r+0x1a>
 8003466:	6983      	ldr	r3, [r0, #24]
 8003468:	b90b      	cbnz	r3, 800346e <_fflush_r+0x1a>
 800346a:	f000 f887 	bl	800357c <__sinit>
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <_fflush_r+0x6c>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d11b      	bne.n	80034ac <_fflush_r+0x58>
 8003474:	686c      	ldr	r4, [r5, #4]
 8003476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ef      	beq.n	800345e <_fflush_r+0xa>
 800347e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003480:	07d0      	lsls	r0, r2, #31
 8003482:	d404      	bmi.n	800348e <_fflush_r+0x3a>
 8003484:	0599      	lsls	r1, r3, #22
 8003486:	d402      	bmi.n	800348e <_fflush_r+0x3a>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f000 f915 	bl	80036b8 <__retarget_lock_acquire_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	4621      	mov	r1, r4
 8003492:	f7ff ff59 	bl	8003348 <__sflush_r>
 8003496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003498:	07da      	lsls	r2, r3, #31
 800349a:	4605      	mov	r5, r0
 800349c:	d4e0      	bmi.n	8003460 <_fflush_r+0xc>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	059b      	lsls	r3, r3, #22
 80034a2:	d4dd      	bmi.n	8003460 <_fflush_r+0xc>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f000 f908 	bl	80036ba <__retarget_lock_release_recursive>
 80034aa:	e7d9      	b.n	8003460 <_fflush_r+0xc>
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <_fflush_r+0x70>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d101      	bne.n	80034b6 <_fflush_r+0x62>
 80034b2:	68ac      	ldr	r4, [r5, #8]
 80034b4:	e7df      	b.n	8003476 <_fflush_r+0x22>
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <_fflush_r+0x74>)
 80034b8:	429c      	cmp	r4, r3
 80034ba:	bf08      	it	eq
 80034bc:	68ec      	ldreq	r4, [r5, #12]
 80034be:	e7da      	b.n	8003476 <_fflush_r+0x22>
 80034c0:	080040bc 	.word	0x080040bc
 80034c4:	080040dc 	.word	0x080040dc
 80034c8:	0800409c 	.word	0x0800409c

080034cc <std>:
 80034cc:	2300      	movs	r3, #0
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	e9c0 3300 	strd	r3, r3, [r0]
 80034d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034da:	6083      	str	r3, [r0, #8]
 80034dc:	8181      	strh	r1, [r0, #12]
 80034de:	6643      	str	r3, [r0, #100]	; 0x64
 80034e0:	81c2      	strh	r2, [r0, #14]
 80034e2:	6183      	str	r3, [r0, #24]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2208      	movs	r2, #8
 80034e8:	305c      	adds	r0, #92	; 0x5c
 80034ea:	f7ff fdd7 	bl	800309c <memset>
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <std+0x38>)
 80034f0:	6263      	str	r3, [r4, #36]	; 0x24
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <std+0x3c>)
 80034f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <std+0x40>)
 80034f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <std+0x44>)
 80034fc:	6224      	str	r4, [r4, #32]
 80034fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	08003ed5 	.word	0x08003ed5
 8003508:	08003ef7 	.word	0x08003ef7
 800350c:	08003f2f 	.word	0x08003f2f
 8003510:	08003f53 	.word	0x08003f53

08003514 <_cleanup_r>:
 8003514:	4901      	ldr	r1, [pc, #4]	; (800351c <_cleanup_r+0x8>)
 8003516:	f000 b8af 	b.w	8003678 <_fwalk_reent>
 800351a:	bf00      	nop
 800351c:	08003455 	.word	0x08003455

08003520 <__sfmoreglue>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	1e4a      	subs	r2, r1, #1
 8003524:	2568      	movs	r5, #104	; 0x68
 8003526:	4355      	muls	r5, r2
 8003528:	460e      	mov	r6, r1
 800352a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800352e:	f000 f979 	bl	8003824 <_malloc_r>
 8003532:	4604      	mov	r4, r0
 8003534:	b140      	cbz	r0, 8003548 <__sfmoreglue+0x28>
 8003536:	2100      	movs	r1, #0
 8003538:	e9c0 1600 	strd	r1, r6, [r0]
 800353c:	300c      	adds	r0, #12
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003544:	f7ff fdaa 	bl	800309c <memset>
 8003548:	4620      	mov	r0, r4
 800354a:	bd70      	pop	{r4, r5, r6, pc}

0800354c <__sfp_lock_acquire>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__sfp_lock_acquire+0x8>)
 800354e:	f000 b8b3 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 8003552:	bf00      	nop
 8003554:	20000314 	.word	0x20000314

08003558 <__sfp_lock_release>:
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <__sfp_lock_release+0x8>)
 800355a:	f000 b8ae 	b.w	80036ba <__retarget_lock_release_recursive>
 800355e:	bf00      	nop
 8003560:	20000314 	.word	0x20000314

08003564 <__sinit_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__sinit_lock_acquire+0x8>)
 8003566:	f000 b8a7 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	2000030f 	.word	0x2000030f

08003570 <__sinit_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__sinit_lock_release+0x8>)
 8003572:	f000 b8a2 	b.w	80036ba <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	2000030f 	.word	0x2000030f

0800357c <__sinit>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff0 	bl	8003564 <__sinit_lock_acquire>
 8003584:	69a3      	ldr	r3, [r4, #24]
 8003586:	b11b      	cbz	r3, 8003590 <__sinit+0x14>
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f7ff bff0 	b.w	8003570 <__sinit_lock_release>
 8003590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003594:	6523      	str	r3, [r4, #80]	; 0x50
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <__sinit+0x68>)
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <__sinit+0x6c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	62a2      	str	r2, [r4, #40]	; 0x28
 800359e:	42a3      	cmp	r3, r4
 80035a0:	bf04      	itt	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	61a3      	streq	r3, [r4, #24]
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 f820 	bl	80035ec <__sfp>
 80035ac:	6060      	str	r0, [r4, #4]
 80035ae:	4620      	mov	r0, r4
 80035b0:	f000 f81c 	bl	80035ec <__sfp>
 80035b4:	60a0      	str	r0, [r4, #8]
 80035b6:	4620      	mov	r0, r4
 80035b8:	f000 f818 	bl	80035ec <__sfp>
 80035bc:	2200      	movs	r2, #0
 80035be:	60e0      	str	r0, [r4, #12]
 80035c0:	2104      	movs	r1, #4
 80035c2:	6860      	ldr	r0, [r4, #4]
 80035c4:	f7ff ff82 	bl	80034cc <std>
 80035c8:	68a0      	ldr	r0, [r4, #8]
 80035ca:	2201      	movs	r2, #1
 80035cc:	2109      	movs	r1, #9
 80035ce:	f7ff ff7d 	bl	80034cc <std>
 80035d2:	68e0      	ldr	r0, [r4, #12]
 80035d4:	2202      	movs	r2, #2
 80035d6:	2112      	movs	r1, #18
 80035d8:	f7ff ff78 	bl	80034cc <std>
 80035dc:	2301      	movs	r3, #1
 80035de:	61a3      	str	r3, [r4, #24]
 80035e0:	e7d2      	b.n	8003588 <__sinit+0xc>
 80035e2:	bf00      	nop
 80035e4:	08004098 	.word	0x08004098
 80035e8:	08003515 	.word	0x08003515

080035ec <__sfp>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	4607      	mov	r7, r0
 80035f0:	f7ff ffac 	bl	800354c <__sfp_lock_acquire>
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <__sfp+0x84>)
 80035f6:	681e      	ldr	r6, [r3, #0]
 80035f8:	69b3      	ldr	r3, [r6, #24]
 80035fa:	b913      	cbnz	r3, 8003602 <__sfp+0x16>
 80035fc:	4630      	mov	r0, r6
 80035fe:	f7ff ffbd 	bl	800357c <__sinit>
 8003602:	3648      	adds	r6, #72	; 0x48
 8003604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003608:	3b01      	subs	r3, #1
 800360a:	d503      	bpl.n	8003614 <__sfp+0x28>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	b30b      	cbz	r3, 8003654 <__sfp+0x68>
 8003610:	6836      	ldr	r6, [r6, #0]
 8003612:	e7f7      	b.n	8003604 <__sfp+0x18>
 8003614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003618:	b9d5      	cbnz	r5, 8003650 <__sfp+0x64>
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <__sfp+0x88>)
 800361c:	60e3      	str	r3, [r4, #12]
 800361e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003622:	6665      	str	r5, [r4, #100]	; 0x64
 8003624:	f000 f847 	bl	80036b6 <__retarget_lock_init_recursive>
 8003628:	f7ff ff96 	bl	8003558 <__sfp_lock_release>
 800362c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003634:	6025      	str	r5, [r4, #0]
 8003636:	61a5      	str	r5, [r4, #24]
 8003638:	2208      	movs	r2, #8
 800363a:	4629      	mov	r1, r5
 800363c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003640:	f7ff fd2c 	bl	800309c <memset>
 8003644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800364c:	4620      	mov	r0, r4
 800364e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003650:	3468      	adds	r4, #104	; 0x68
 8003652:	e7d9      	b.n	8003608 <__sfp+0x1c>
 8003654:	2104      	movs	r1, #4
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff ff62 	bl	8003520 <__sfmoreglue>
 800365c:	4604      	mov	r4, r0
 800365e:	6030      	str	r0, [r6, #0]
 8003660:	2800      	cmp	r0, #0
 8003662:	d1d5      	bne.n	8003610 <__sfp+0x24>
 8003664:	f7ff ff78 	bl	8003558 <__sfp_lock_release>
 8003668:	230c      	movs	r3, #12
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	e7ee      	b.n	800364c <__sfp+0x60>
 800366e:	bf00      	nop
 8003670:	08004098 	.word	0x08004098
 8003674:	ffff0001 	.word	0xffff0001

08003678 <_fwalk_reent>:
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	4688      	mov	r8, r1
 8003680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003684:	2700      	movs	r7, #0
 8003686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368a:	f1b9 0901 	subs.w	r9, r9, #1
 800368e:	d505      	bpl.n	800369c <_fwalk_reent+0x24>
 8003690:	6824      	ldr	r4, [r4, #0]
 8003692:	2c00      	cmp	r4, #0
 8003694:	d1f7      	bne.n	8003686 <_fwalk_reent+0xe>
 8003696:	4638      	mov	r0, r7
 8003698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369c:	89ab      	ldrh	r3, [r5, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d907      	bls.n	80036b2 <_fwalk_reent+0x3a>
 80036a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a6:	3301      	adds	r3, #1
 80036a8:	d003      	beq.n	80036b2 <_fwalk_reent+0x3a>
 80036aa:	4629      	mov	r1, r5
 80036ac:	4630      	mov	r0, r6
 80036ae:	47c0      	blx	r8
 80036b0:	4307      	orrs	r7, r0
 80036b2:	3568      	adds	r5, #104	; 0x68
 80036b4:	e7e9      	b.n	800368a <_fwalk_reent+0x12>

080036b6 <__retarget_lock_init_recursive>:
 80036b6:	4770      	bx	lr

080036b8 <__retarget_lock_acquire_recursive>:
 80036b8:	4770      	bx	lr

080036ba <__retarget_lock_release_recursive>:
 80036ba:	4770      	bx	lr

080036bc <__swhatbuf_r>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	460e      	mov	r6, r1
 80036c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c4:	2900      	cmp	r1, #0
 80036c6:	b096      	sub	sp, #88	; 0x58
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	da07      	bge.n	80036de <__swhatbuf_r+0x22>
 80036ce:	2300      	movs	r3, #0
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	89b3      	ldrh	r3, [r6, #12]
 80036d4:	061a      	lsls	r2, r3, #24
 80036d6:	d410      	bmi.n	80036fa <__swhatbuf_r+0x3e>
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	e00e      	b.n	80036fc <__swhatbuf_r+0x40>
 80036de:	466a      	mov	r2, sp
 80036e0:	f000 fc5e 	bl	8003fa0 <_fstat_r>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	dbf2      	blt.n	80036ce <__swhatbuf_r+0x12>
 80036e8:	9a01      	ldr	r2, [sp, #4]
 80036ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036f2:	425a      	negs	r2, r3
 80036f4:	415a      	adcs	r2, r3
 80036f6:	602a      	str	r2, [r5, #0]
 80036f8:	e7ee      	b.n	80036d8 <__swhatbuf_r+0x1c>
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	2000      	movs	r0, #0
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	b016      	add	sp, #88	; 0x58
 8003702:	bd70      	pop	{r4, r5, r6, pc}

08003704 <__smakebuf_r>:
 8003704:	898b      	ldrh	r3, [r1, #12]
 8003706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003708:	079d      	lsls	r5, r3, #30
 800370a:	4606      	mov	r6, r0
 800370c:	460c      	mov	r4, r1
 800370e:	d507      	bpl.n	8003720 <__smakebuf_r+0x1c>
 8003710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	2301      	movs	r3, #1
 800371a:	6163      	str	r3, [r4, #20]
 800371c:	b002      	add	sp, #8
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	ab01      	add	r3, sp, #4
 8003722:	466a      	mov	r2, sp
 8003724:	f7ff ffca 	bl	80036bc <__swhatbuf_r>
 8003728:	9900      	ldr	r1, [sp, #0]
 800372a:	4605      	mov	r5, r0
 800372c:	4630      	mov	r0, r6
 800372e:	f000 f879 	bl	8003824 <_malloc_r>
 8003732:	b948      	cbnz	r0, 8003748 <__smakebuf_r+0x44>
 8003734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003738:	059a      	lsls	r2, r3, #22
 800373a:	d4ef      	bmi.n	800371c <__smakebuf_r+0x18>
 800373c:	f023 0303 	bic.w	r3, r3, #3
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	81a3      	strh	r3, [r4, #12]
 8003746:	e7e3      	b.n	8003710 <__smakebuf_r+0xc>
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <__smakebuf_r+0x7c>)
 800374a:	62b3      	str	r3, [r6, #40]	; 0x28
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	6020      	str	r0, [r4, #0]
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	6163      	str	r3, [r4, #20]
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b15b      	cbz	r3, 8003778 <__smakebuf_r+0x74>
 8003760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003764:	4630      	mov	r0, r6
 8003766:	f000 fc2d 	bl	8003fc4 <_isatty_r>
 800376a:	b128      	cbz	r0, 8003778 <__smakebuf_r+0x74>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	89a0      	ldrh	r0, [r4, #12]
 800377a:	4305      	orrs	r5, r0
 800377c:	81a5      	strh	r5, [r4, #12]
 800377e:	e7cd      	b.n	800371c <__smakebuf_r+0x18>
 8003780:	08003515 	.word	0x08003515

08003784 <_free_r>:
 8003784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003786:	2900      	cmp	r1, #0
 8003788:	d048      	beq.n	800381c <_free_r+0x98>
 800378a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800378e:	9001      	str	r0, [sp, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f1a1 0404 	sub.w	r4, r1, #4
 8003796:	bfb8      	it	lt
 8003798:	18e4      	addlt	r4, r4, r3
 800379a:	f000 fc35 	bl	8004008 <__malloc_lock>
 800379e:	4a20      	ldr	r2, [pc, #128]	; (8003820 <_free_r+0x9c>)
 80037a0:	9801      	ldr	r0, [sp, #4]
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	4615      	mov	r5, r2
 80037a6:	b933      	cbnz	r3, 80037b6 <_free_r+0x32>
 80037a8:	6063      	str	r3, [r4, #4]
 80037aa:	6014      	str	r4, [r2, #0]
 80037ac:	b003      	add	sp, #12
 80037ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037b2:	f000 bc2f 	b.w	8004014 <__malloc_unlock>
 80037b6:	42a3      	cmp	r3, r4
 80037b8:	d90b      	bls.n	80037d2 <_free_r+0x4e>
 80037ba:	6821      	ldr	r1, [r4, #0]
 80037bc:	1862      	adds	r2, r4, r1
 80037be:	4293      	cmp	r3, r2
 80037c0:	bf04      	itt	eq
 80037c2:	681a      	ldreq	r2, [r3, #0]
 80037c4:	685b      	ldreq	r3, [r3, #4]
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	bf04      	itt	eq
 80037ca:	1852      	addeq	r2, r2, r1
 80037cc:	6022      	streq	r2, [r4, #0]
 80037ce:	602c      	str	r4, [r5, #0]
 80037d0:	e7ec      	b.n	80037ac <_free_r+0x28>
 80037d2:	461a      	mov	r2, r3
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b10b      	cbz	r3, 80037dc <_free_r+0x58>
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d9fa      	bls.n	80037d2 <_free_r+0x4e>
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	1855      	adds	r5, r2, r1
 80037e0:	42a5      	cmp	r5, r4
 80037e2:	d10b      	bne.n	80037fc <_free_r+0x78>
 80037e4:	6824      	ldr	r4, [r4, #0]
 80037e6:	4421      	add	r1, r4
 80037e8:	1854      	adds	r4, r2, r1
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	6011      	str	r1, [r2, #0]
 80037ee:	d1dd      	bne.n	80037ac <_free_r+0x28>
 80037f0:	681c      	ldr	r4, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	6053      	str	r3, [r2, #4]
 80037f6:	4421      	add	r1, r4
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	e7d7      	b.n	80037ac <_free_r+0x28>
 80037fc:	d902      	bls.n	8003804 <_free_r+0x80>
 80037fe:	230c      	movs	r3, #12
 8003800:	6003      	str	r3, [r0, #0]
 8003802:	e7d3      	b.n	80037ac <_free_r+0x28>
 8003804:	6825      	ldr	r5, [r4, #0]
 8003806:	1961      	adds	r1, r4, r5
 8003808:	428b      	cmp	r3, r1
 800380a:	bf04      	itt	eq
 800380c:	6819      	ldreq	r1, [r3, #0]
 800380e:	685b      	ldreq	r3, [r3, #4]
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	bf04      	itt	eq
 8003814:	1949      	addeq	r1, r1, r5
 8003816:	6021      	streq	r1, [r4, #0]
 8003818:	6054      	str	r4, [r2, #4]
 800381a:	e7c7      	b.n	80037ac <_free_r+0x28>
 800381c:	b003      	add	sp, #12
 800381e:	bd30      	pop	{r4, r5, pc}
 8003820:	200000dc 	.word	0x200000dc

08003824 <_malloc_r>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	1ccd      	adds	r5, r1, #3
 8003828:	f025 0503 	bic.w	r5, r5, #3
 800382c:	3508      	adds	r5, #8
 800382e:	2d0c      	cmp	r5, #12
 8003830:	bf38      	it	cc
 8003832:	250c      	movcc	r5, #12
 8003834:	2d00      	cmp	r5, #0
 8003836:	4606      	mov	r6, r0
 8003838:	db01      	blt.n	800383e <_malloc_r+0x1a>
 800383a:	42a9      	cmp	r1, r5
 800383c:	d903      	bls.n	8003846 <_malloc_r+0x22>
 800383e:	230c      	movs	r3, #12
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	2000      	movs	r0, #0
 8003844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003846:	f000 fbdf 	bl	8004008 <__malloc_lock>
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <_malloc_r+0xac>)
 800384c:	680a      	ldr	r2, [r1, #0]
 800384e:	4614      	mov	r4, r2
 8003850:	b99c      	cbnz	r4, 800387a <_malloc_r+0x56>
 8003852:	4f20      	ldr	r7, [pc, #128]	; (80038d4 <_malloc_r+0xb0>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b923      	cbnz	r3, 8003862 <_malloc_r+0x3e>
 8003858:	4621      	mov	r1, r4
 800385a:	4630      	mov	r0, r6
 800385c:	f000 fb2a 	bl	8003eb4 <_sbrk_r>
 8003860:	6038      	str	r0, [r7, #0]
 8003862:	4629      	mov	r1, r5
 8003864:	4630      	mov	r0, r6
 8003866:	f000 fb25 	bl	8003eb4 <_sbrk_r>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	d123      	bne.n	80038b6 <_malloc_r+0x92>
 800386e:	230c      	movs	r3, #12
 8003870:	6033      	str	r3, [r6, #0]
 8003872:	4630      	mov	r0, r6
 8003874:	f000 fbce 	bl	8004014 <__malloc_unlock>
 8003878:	e7e3      	b.n	8003842 <_malloc_r+0x1e>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	1b5b      	subs	r3, r3, r5
 800387e:	d417      	bmi.n	80038b0 <_malloc_r+0x8c>
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d903      	bls.n	800388c <_malloc_r+0x68>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	441c      	add	r4, r3
 8003888:	6025      	str	r5, [r4, #0]
 800388a:	e004      	b.n	8003896 <_malloc_r+0x72>
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	42a2      	cmp	r2, r4
 8003890:	bf0c      	ite	eq
 8003892:	600b      	streq	r3, [r1, #0]
 8003894:	6053      	strne	r3, [r2, #4]
 8003896:	4630      	mov	r0, r6
 8003898:	f000 fbbc 	bl	8004014 <__malloc_unlock>
 800389c:	f104 000b 	add.w	r0, r4, #11
 80038a0:	1d23      	adds	r3, r4, #4
 80038a2:	f020 0007 	bic.w	r0, r0, #7
 80038a6:	1ac2      	subs	r2, r0, r3
 80038a8:	d0cc      	beq.n	8003844 <_malloc_r+0x20>
 80038aa:	1a1b      	subs	r3, r3, r0
 80038ac:	50a3      	str	r3, [r4, r2]
 80038ae:	e7c9      	b.n	8003844 <_malloc_r+0x20>
 80038b0:	4622      	mov	r2, r4
 80038b2:	6864      	ldr	r4, [r4, #4]
 80038b4:	e7cc      	b.n	8003850 <_malloc_r+0x2c>
 80038b6:	1cc4      	adds	r4, r0, #3
 80038b8:	f024 0403 	bic.w	r4, r4, #3
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d0e3      	beq.n	8003888 <_malloc_r+0x64>
 80038c0:	1a21      	subs	r1, r4, r0
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 faf6 	bl	8003eb4 <_sbrk_r>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d1dd      	bne.n	8003888 <_malloc_r+0x64>
 80038cc:	e7cf      	b.n	800386e <_malloc_r+0x4a>
 80038ce:	bf00      	nop
 80038d0:	200000dc 	.word	0x200000dc
 80038d4:	200000e0 	.word	0x200000e0

080038d8 <__sfputc_r>:
 80038d8:	6893      	ldr	r3, [r2, #8]
 80038da:	3b01      	subs	r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	b410      	push	{r4}
 80038e0:	6093      	str	r3, [r2, #8]
 80038e2:	da08      	bge.n	80038f6 <__sfputc_r+0x1e>
 80038e4:	6994      	ldr	r4, [r2, #24]
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	db01      	blt.n	80038ee <__sfputc_r+0x16>
 80038ea:	290a      	cmp	r1, #10
 80038ec:	d103      	bne.n	80038f6 <__sfputc_r+0x1e>
 80038ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f2:	f7ff bc69 	b.w	80031c8 <__swbuf_r>
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	1c58      	adds	r0, r3, #1
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	7019      	strb	r1, [r3, #0]
 80038fe:	4608      	mov	r0, r1
 8003900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003904:	4770      	bx	lr

08003906 <__sfputs_r>:
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	4606      	mov	r6, r0
 800390a:	460f      	mov	r7, r1
 800390c:	4614      	mov	r4, r2
 800390e:	18d5      	adds	r5, r2, r3
 8003910:	42ac      	cmp	r4, r5
 8003912:	d101      	bne.n	8003918 <__sfputs_r+0x12>
 8003914:	2000      	movs	r0, #0
 8003916:	e007      	b.n	8003928 <__sfputs_r+0x22>
 8003918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391c:	463a      	mov	r2, r7
 800391e:	4630      	mov	r0, r6
 8003920:	f7ff ffda 	bl	80038d8 <__sfputc_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d1f3      	bne.n	8003910 <__sfputs_r+0xa>
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800392c <_vfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	460d      	mov	r5, r1
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	4614      	mov	r4, r2
 8003936:	4698      	mov	r8, r3
 8003938:	4606      	mov	r6, r0
 800393a:	b118      	cbz	r0, 8003944 <_vfiprintf_r+0x18>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_vfiprintf_r+0x18>
 8003940:	f7ff fe1c 	bl	800357c <__sinit>
 8003944:	4b89      	ldr	r3, [pc, #548]	; (8003b6c <_vfiprintf_r+0x240>)
 8003946:	429d      	cmp	r5, r3
 8003948:	d11b      	bne.n	8003982 <_vfiprintf_r+0x56>
 800394a:	6875      	ldr	r5, [r6, #4]
 800394c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394e:	07d9      	lsls	r1, r3, #31
 8003950:	d405      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	059a      	lsls	r2, r3, #22
 8003956:	d402      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395a:	f7ff fead 	bl	80036b8 <__retarget_lock_acquire_recursive>
 800395e:	89ab      	ldrh	r3, [r5, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	d501      	bpl.n	8003968 <_vfiprintf_r+0x3c>
 8003964:	692b      	ldr	r3, [r5, #16]
 8003966:	b9eb      	cbnz	r3, 80039a4 <_vfiprintf_r+0x78>
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff fc7e 	bl	800326c <__swsetup_r>
 8003970:	b1c0      	cbz	r0, 80039a4 <_vfiprintf_r+0x78>
 8003972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003974:	07dc      	lsls	r4, r3, #31
 8003976:	d50e      	bpl.n	8003996 <_vfiprintf_r+0x6a>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	b01d      	add	sp, #116	; 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <_vfiprintf_r+0x244>)
 8003984:	429d      	cmp	r5, r3
 8003986:	d101      	bne.n	800398c <_vfiprintf_r+0x60>
 8003988:	68b5      	ldr	r5, [r6, #8]
 800398a:	e7df      	b.n	800394c <_vfiprintf_r+0x20>
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <_vfiprintf_r+0x248>)
 800398e:	429d      	cmp	r5, r3
 8003990:	bf08      	it	eq
 8003992:	68f5      	ldreq	r5, [r6, #12]
 8003994:	e7da      	b.n	800394c <_vfiprintf_r+0x20>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	0598      	lsls	r0, r3, #22
 800399a:	d4ed      	bmi.n	8003978 <_vfiprintf_r+0x4c>
 800399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399e:	f7ff fe8c 	bl	80036ba <__retarget_lock_release_recursive>
 80039a2:	e7e9      	b.n	8003978 <_vfiprintf_r+0x4c>
 80039a4:	2300      	movs	r3, #0
 80039a6:	9309      	str	r3, [sp, #36]	; 0x24
 80039a8:	2320      	movs	r3, #32
 80039aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b2:	2330      	movs	r3, #48	; 0x30
 80039b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b78 <_vfiprintf_r+0x24c>
 80039b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039bc:	f04f 0901 	mov.w	r9, #1
 80039c0:	4623      	mov	r3, r4
 80039c2:	469a      	mov	sl, r3
 80039c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c8:	b10a      	cbz	r2, 80039ce <_vfiprintf_r+0xa2>
 80039ca:	2a25      	cmp	r2, #37	; 0x25
 80039cc:	d1f9      	bne.n	80039c2 <_vfiprintf_r+0x96>
 80039ce:	ebba 0b04 	subs.w	fp, sl, r4
 80039d2:	d00b      	beq.n	80039ec <_vfiprintf_r+0xc0>
 80039d4:	465b      	mov	r3, fp
 80039d6:	4622      	mov	r2, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff ff93 	bl	8003906 <__sfputs_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	f000 80aa 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e8:	445a      	add	r2, fp
 80039ea:	9209      	str	r2, [sp, #36]	; 0x24
 80039ec:	f89a 3000 	ldrb.w	r3, [sl]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a2 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039f6:	2300      	movs	r3, #0
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a00:	f10a 0a01 	add.w	sl, sl, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	9307      	str	r3, [sp, #28]
 8003a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0e:	4654      	mov	r4, sl
 8003a10:	2205      	movs	r2, #5
 8003a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a16:	4858      	ldr	r0, [pc, #352]	; (8003b78 <_vfiprintf_r+0x24c>)
 8003a18:	f7fc fc7a 	bl	8000310 <memchr>
 8003a1c:	9a04      	ldr	r2, [sp, #16]
 8003a1e:	b9d8      	cbnz	r0, 8003a58 <_vfiprintf_r+0x12c>
 8003a20:	06d1      	lsls	r1, r2, #27
 8003a22:	bf44      	itt	mi
 8003a24:	2320      	movmi	r3, #32
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	0713      	lsls	r3, r2, #28
 8003a2c:	bf44      	itt	mi
 8003a2e:	232b      	movmi	r3, #43	; 0x2b
 8003a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a34:	f89a 3000 	ldrb.w	r3, [sl]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d015      	beq.n	8003a68 <_vfiprintf_r+0x13c>
 8003a3c:	9a07      	ldr	r2, [sp, #28]
 8003a3e:	4654      	mov	r4, sl
 8003a40:	2000      	movs	r0, #0
 8003a42:	f04f 0c0a 	mov.w	ip, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4c:	3b30      	subs	r3, #48	; 0x30
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d94e      	bls.n	8003af0 <_vfiprintf_r+0x1c4>
 8003a52:	b1b0      	cbz	r0, 8003a82 <_vfiprintf_r+0x156>
 8003a54:	9207      	str	r2, [sp, #28]
 8003a56:	e014      	b.n	8003a82 <_vfiprintf_r+0x156>
 8003a58:	eba0 0308 	sub.w	r3, r0, r8
 8003a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	46a2      	mov	sl, r4
 8003a66:	e7d2      	b.n	8003a0e <_vfiprintf_r+0xe2>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfbb      	ittet	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7a:	9307      	strge	r3, [sp, #28]
 8003a7c:	9307      	strlt	r3, [sp, #28]
 8003a7e:	bfb8      	it	lt
 8003a80:	9204      	strlt	r2, [sp, #16]
 8003a82:	7823      	ldrb	r3, [r4, #0]
 8003a84:	2b2e      	cmp	r3, #46	; 0x2e
 8003a86:	d10c      	bne.n	8003aa2 <_vfiprintf_r+0x176>
 8003a88:	7863      	ldrb	r3, [r4, #1]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d135      	bne.n	8003afa <_vfiprintf_r+0x1ce>
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a9e:	3402      	adds	r4, #2
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b88 <_vfiprintf_r+0x25c>
 8003aa6:	7821      	ldrb	r1, [r4, #0]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f7fc fc30 	bl	8000310 <memchr>
 8003ab0:	b140      	cbz	r0, 8003ac4 <_vfiprintf_r+0x198>
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	eba0 000a 	sub.w	r0, r0, sl
 8003ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	4303      	orrs	r3, r0
 8003ac0:	3401      	adds	r4, #1
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac8:	482c      	ldr	r0, [pc, #176]	; (8003b7c <_vfiprintf_r+0x250>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	2206      	movs	r2, #6
 8003ad0:	f7fc fc1e 	bl	8000310 <memchr>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d03f      	beq.n	8003b58 <_vfiprintf_r+0x22c>
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <_vfiprintf_r+0x254>)
 8003ada:	bb1b      	cbnz	r3, 8003b24 <_vfiprintf_r+0x1f8>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	3307      	adds	r3, #7
 8003ae0:	f023 0307 	bic.w	r3, r3, #7
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	443b      	add	r3, r7
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	e767      	b.n	80039c0 <_vfiprintf_r+0x94>
 8003af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af4:	460c      	mov	r4, r1
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7a5      	b.n	8003a46 <_vfiprintf_r+0x11a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	3401      	adds	r4, #1
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	4620      	mov	r0, r4
 8003b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0c:	3a30      	subs	r2, #48	; 0x30
 8003b0e:	2a09      	cmp	r2, #9
 8003b10:	d903      	bls.n	8003b1a <_vfiprintf_r+0x1ee>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0c5      	beq.n	8003aa2 <_vfiprintf_r+0x176>
 8003b16:	9105      	str	r1, [sp, #20]
 8003b18:	e7c3      	b.n	8003aa2 <_vfiprintf_r+0x176>
 8003b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2301      	movs	r3, #1
 8003b22:	e7f0      	b.n	8003b06 <_vfiprintf_r+0x1da>
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f3af 8000 	nop.w
 8003b34:	4607      	mov	r7, r0
 8003b36:	1c78      	adds	r0, r7, #1
 8003b38:	d1d6      	bne.n	8003ae8 <_vfiprintf_r+0x1bc>
 8003b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b3c:	07d9      	lsls	r1, r3, #31
 8003b3e:	d405      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	059a      	lsls	r2, r3, #22
 8003b44:	d402      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b48:	f7ff fdb7 	bl	80036ba <__retarget_lock_release_recursive>
 8003b4c:	89ab      	ldrh	r3, [r5, #12]
 8003b4e:	065b      	lsls	r3, r3, #25
 8003b50:	f53f af12 	bmi.w	8003978 <_vfiprintf_r+0x4c>
 8003b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b56:	e711      	b.n	800397c <_vfiprintf_r+0x50>
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 f880 	bl	8003c68 <_printf_i>
 8003b68:	e7e4      	b.n	8003b34 <_vfiprintf_r+0x208>
 8003b6a:	bf00      	nop
 8003b6c:	080040bc 	.word	0x080040bc
 8003b70:	080040dc 	.word	0x080040dc
 8003b74:	0800409c 	.word	0x0800409c
 8003b78:	080040fc 	.word	0x080040fc
 8003b7c:	08004106 	.word	0x08004106
 8003b80:	00000000 	.word	0x00000000
 8003b84:	08003907 	.word	0x08003907
 8003b88:	08004102 	.word	0x08004102

08003b8c <_printf_common>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	4616      	mov	r6, r2
 8003b92:	4699      	mov	r9, r3
 8003b94:	688a      	ldr	r2, [r1, #8]
 8003b96:	690b      	ldr	r3, [r1, #16]
 8003b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bfb8      	it	lt
 8003ba0:	4613      	movlt	r3, r2
 8003ba2:	6033      	str	r3, [r6, #0]
 8003ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba8:	4607      	mov	r7, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	b10a      	cbz	r2, 8003bb2 <_printf_common+0x26>
 8003bae:	3301      	adds	r3, #1
 8003bb0:	6033      	str	r3, [r6, #0]
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	0699      	lsls	r1, r3, #26
 8003bb6:	bf42      	ittt	mi
 8003bb8:	6833      	ldrmi	r3, [r6, #0]
 8003bba:	3302      	addmi	r3, #2
 8003bbc:	6033      	strmi	r3, [r6, #0]
 8003bbe:	6825      	ldr	r5, [r4, #0]
 8003bc0:	f015 0506 	ands.w	r5, r5, #6
 8003bc4:	d106      	bne.n	8003bd4 <_printf_common+0x48>
 8003bc6:	f104 0a19 	add.w	sl, r4, #25
 8003bca:	68e3      	ldr	r3, [r4, #12]
 8003bcc:	6832      	ldr	r2, [r6, #0]
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	dc26      	bgt.n	8003c22 <_printf_common+0x96>
 8003bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd8:	1e13      	subs	r3, r2, #0
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	bf18      	it	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	0692      	lsls	r2, r2, #26
 8003be2:	d42b      	bmi.n	8003c3c <_printf_common+0xb0>
 8003be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be8:	4649      	mov	r1, r9
 8003bea:	4638      	mov	r0, r7
 8003bec:	47c0      	blx	r8
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d01e      	beq.n	8003c30 <_printf_common+0xa4>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	68e5      	ldr	r5, [r4, #12]
 8003bf6:	6832      	ldr	r2, [r6, #0]
 8003bf8:	f003 0306 	and.w	r3, r3, #6
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	bf08      	it	eq
 8003c00:	1aad      	subeq	r5, r5, r2
 8003c02:	68a3      	ldr	r3, [r4, #8]
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	bf0c      	ite	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	2500      	movne	r5, #0
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bfc4      	itt	gt
 8003c12:	1a9b      	subgt	r3, r3, r2
 8003c14:	18ed      	addgt	r5, r5, r3
 8003c16:	2600      	movs	r6, #0
 8003c18:	341a      	adds	r4, #26
 8003c1a:	42b5      	cmp	r5, r6
 8003c1c:	d11a      	bne.n	8003c54 <_printf_common+0xc8>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e008      	b.n	8003c34 <_printf_common+0xa8>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4652      	mov	r2, sl
 8003c26:	4649      	mov	r1, r9
 8003c28:	4638      	mov	r0, r7
 8003c2a:	47c0      	blx	r8
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d103      	bne.n	8003c38 <_printf_common+0xac>
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	3501      	adds	r5, #1
 8003c3a:	e7c6      	b.n	8003bca <_printf_common+0x3e>
 8003c3c:	18e1      	adds	r1, r4, r3
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	2030      	movs	r0, #48	; 0x30
 8003c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c46:	4422      	add	r2, r4
 8003c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c50:	3302      	adds	r3, #2
 8003c52:	e7c7      	b.n	8003be4 <_printf_common+0x58>
 8003c54:	2301      	movs	r3, #1
 8003c56:	4622      	mov	r2, r4
 8003c58:	4649      	mov	r1, r9
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	47c0      	blx	r8
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d0e6      	beq.n	8003c30 <_printf_common+0xa4>
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7d9      	b.n	8003c1a <_printf_common+0x8e>
	...

08003c68 <_printf_i>:
 8003c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	4691      	mov	r9, r2
 8003c70:	7e27      	ldrb	r7, [r4, #24]
 8003c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c74:	2f78      	cmp	r7, #120	; 0x78
 8003c76:	4680      	mov	r8, r0
 8003c78:	469a      	mov	sl, r3
 8003c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c7e:	d807      	bhi.n	8003c90 <_printf_i+0x28>
 8003c80:	2f62      	cmp	r7, #98	; 0x62
 8003c82:	d80a      	bhi.n	8003c9a <_printf_i+0x32>
 8003c84:	2f00      	cmp	r7, #0
 8003c86:	f000 80d8 	beq.w	8003e3a <_printf_i+0x1d2>
 8003c8a:	2f58      	cmp	r7, #88	; 0x58
 8003c8c:	f000 80a3 	beq.w	8003dd6 <_printf_i+0x16e>
 8003c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c98:	e03a      	b.n	8003d10 <_printf_i+0xa8>
 8003c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c9e:	2b15      	cmp	r3, #21
 8003ca0:	d8f6      	bhi.n	8003c90 <_printf_i+0x28>
 8003ca2:	a001      	add	r0, pc, #4	; (adr r0, 8003ca8 <_printf_i+0x40>)
 8003ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003c91 	.word	0x08003c91
 8003cb4:	08003c91 	.word	0x08003c91
 8003cb8:	08003c91 	.word	0x08003c91
 8003cbc:	08003c91 	.word	0x08003c91
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003c91 	.word	0x08003c91
 8003cc8:	08003c91 	.word	0x08003c91
 8003ccc:	08003c91 	.word	0x08003c91
 8003cd0:	08003c91 	.word	0x08003c91
 8003cd4:	08003e21 	.word	0x08003e21
 8003cd8:	08003d45 	.word	0x08003d45
 8003cdc:	08003e03 	.word	0x08003e03
 8003ce0:	08003c91 	.word	0x08003c91
 8003ce4:	08003c91 	.word	0x08003c91
 8003ce8:	08003e43 	.word	0x08003e43
 8003cec:	08003c91 	.word	0x08003c91
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003c91 	.word	0x08003c91
 8003cf8:	08003c91 	.word	0x08003c91
 8003cfc:	08003e0b 	.word	0x08003e0b
 8003d00:	680b      	ldr	r3, [r1, #0]
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	600a      	str	r2, [r1, #0]
 8003d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0a3      	b.n	8003e5c <_printf_i+0x1f4>
 8003d14:	6825      	ldr	r5, [r4, #0]
 8003d16:	6808      	ldr	r0, [r1, #0]
 8003d18:	062e      	lsls	r6, r5, #24
 8003d1a:	f100 0304 	add.w	r3, r0, #4
 8003d1e:	d50a      	bpl.n	8003d36 <_printf_i+0xce>
 8003d20:	6805      	ldr	r5, [r0, #0]
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	da03      	bge.n	8003d30 <_printf_i+0xc8>
 8003d28:	232d      	movs	r3, #45	; 0x2d
 8003d2a:	426d      	negs	r5, r5
 8003d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d30:	485e      	ldr	r0, [pc, #376]	; (8003eac <_printf_i+0x244>)
 8003d32:	230a      	movs	r3, #10
 8003d34:	e019      	b.n	8003d6a <_printf_i+0x102>
 8003d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d3a:	6805      	ldr	r5, [r0, #0]
 8003d3c:	600b      	str	r3, [r1, #0]
 8003d3e:	bf18      	it	ne
 8003d40:	b22d      	sxthne	r5, r5
 8003d42:	e7ef      	b.n	8003d24 <_printf_i+0xbc>
 8003d44:	680b      	ldr	r3, [r1, #0]
 8003d46:	6825      	ldr	r5, [r4, #0]
 8003d48:	1d18      	adds	r0, r3, #4
 8003d4a:	6008      	str	r0, [r1, #0]
 8003d4c:	0628      	lsls	r0, r5, #24
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0xec>
 8003d50:	681d      	ldr	r5, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <_printf_i+0xf2>
 8003d54:	0669      	lsls	r1, r5, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0xe8>
 8003d58:	881d      	ldrh	r5, [r3, #0]
 8003d5a:	4854      	ldr	r0, [pc, #336]	; (8003eac <_printf_i+0x244>)
 8003d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d5e:	bf0c      	ite	eq
 8003d60:	2308      	moveq	r3, #8
 8003d62:	230a      	movne	r3, #10
 8003d64:	2100      	movs	r1, #0
 8003d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d6a:	6866      	ldr	r6, [r4, #4]
 8003d6c:	60a6      	str	r6, [r4, #8]
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	bfa2      	ittt	ge
 8003d72:	6821      	ldrge	r1, [r4, #0]
 8003d74:	f021 0104 	bicge.w	r1, r1, #4
 8003d78:	6021      	strge	r1, [r4, #0]
 8003d7a:	b90d      	cbnz	r5, 8003d80 <_printf_i+0x118>
 8003d7c:	2e00      	cmp	r6, #0
 8003d7e:	d04d      	beq.n	8003e1c <_printf_i+0x1b4>
 8003d80:	4616      	mov	r6, r2
 8003d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d86:	fb03 5711 	mls	r7, r3, r1, r5
 8003d8a:	5dc7      	ldrb	r7, [r0, r7]
 8003d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d90:	462f      	mov	r7, r5
 8003d92:	42bb      	cmp	r3, r7
 8003d94:	460d      	mov	r5, r1
 8003d96:	d9f4      	bls.n	8003d82 <_printf_i+0x11a>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10b      	bne.n	8003db4 <_printf_i+0x14c>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	07df      	lsls	r7, r3, #31
 8003da0:	d508      	bpl.n	8003db4 <_printf_i+0x14c>
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	6861      	ldr	r1, [r4, #4]
 8003da6:	4299      	cmp	r1, r3
 8003da8:	bfde      	ittt	le
 8003daa:	2330      	movle	r3, #48	; 0x30
 8003dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003db4:	1b92      	subs	r2, r2, r6
 8003db6:	6122      	str	r2, [r4, #16]
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	aa03      	add	r2, sp, #12
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f7ff fee2 	bl	8003b8c <_printf_common>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d14c      	bne.n	8003e66 <_printf_i+0x1fe>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	b004      	add	sp, #16
 8003dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd6:	4835      	ldr	r0, [pc, #212]	; (8003eac <_printf_i+0x244>)
 8003dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	680e      	ldr	r6, [r1, #0]
 8003de0:	061f      	lsls	r7, r3, #24
 8003de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003de6:	600e      	str	r6, [r1, #0]
 8003de8:	d514      	bpl.n	8003e14 <_printf_i+0x1ac>
 8003dea:	07d9      	lsls	r1, r3, #31
 8003dec:	bf44      	itt	mi
 8003dee:	f043 0320 	orrmi.w	r3, r3, #32
 8003df2:	6023      	strmi	r3, [r4, #0]
 8003df4:	b91d      	cbnz	r5, 8003dfe <_printf_i+0x196>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f023 0320 	bic.w	r3, r3, #32
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	2310      	movs	r3, #16
 8003e00:	e7b0      	b.n	8003d64 <_printf_i+0xfc>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	2378      	movs	r3, #120	; 0x78
 8003e0c:	4828      	ldr	r0, [pc, #160]	; (8003eb0 <_printf_i+0x248>)
 8003e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e12:	e7e3      	b.n	8003ddc <_printf_i+0x174>
 8003e14:	065e      	lsls	r6, r3, #25
 8003e16:	bf48      	it	mi
 8003e18:	b2ad      	uxthmi	r5, r5
 8003e1a:	e7e6      	b.n	8003dea <_printf_i+0x182>
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	e7bb      	b.n	8003d98 <_printf_i+0x130>
 8003e20:	680b      	ldr	r3, [r1, #0]
 8003e22:	6826      	ldr	r6, [r4, #0]
 8003e24:	6960      	ldr	r0, [r4, #20]
 8003e26:	1d1d      	adds	r5, r3, #4
 8003e28:	600d      	str	r5, [r1, #0]
 8003e2a:	0635      	lsls	r5, r6, #24
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0x1cc>
 8003e30:	6018      	str	r0, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <_printf_i+0x1d2>
 8003e34:	0671      	lsls	r1, r6, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0x1c8>
 8003e38:	8018      	strh	r0, [r3, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	4616      	mov	r6, r2
 8003e40:	e7ba      	b.n	8003db8 <_printf_i+0x150>
 8003e42:	680b      	ldr	r3, [r1, #0]
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	600a      	str	r2, [r1, #0]
 8003e48:	681e      	ldr	r6, [r3, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f7fc fa5e 	bl	8000310 <memchr>
 8003e54:	b108      	cbz	r0, 8003e5a <_printf_i+0x1f2>
 8003e56:	1b80      	subs	r0, r0, r6
 8003e58:	6060      	str	r0, [r4, #4]
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e64:	e7a8      	b.n	8003db8 <_printf_i+0x150>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	4632      	mov	r2, r6
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	47d0      	blx	sl
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0ab      	beq.n	8003dcc <_printf_i+0x164>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	d413      	bmi.n	8003ea2 <_printf_i+0x23a>
 8003e7a:	68e0      	ldr	r0, [r4, #12]
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	bfb8      	it	lt
 8003e82:	4618      	movlt	r0, r3
 8003e84:	e7a4      	b.n	8003dd0 <_printf_i+0x168>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d09b      	beq.n	8003dcc <_printf_i+0x164>
 8003e94:	3501      	adds	r5, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	9903      	ldr	r1, [sp, #12]
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	dcf2      	bgt.n	8003e86 <_printf_i+0x21e>
 8003ea0:	e7eb      	b.n	8003e7a <_printf_i+0x212>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	f104 0619 	add.w	r6, r4, #25
 8003ea8:	e7f5      	b.n	8003e96 <_printf_i+0x22e>
 8003eaa:	bf00      	nop
 8003eac:	0800410d 	.word	0x0800410d
 8003eb0:	0800411e 	.word	0x0800411e

08003eb4 <_sbrk_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d06      	ldr	r5, [pc, #24]	; (8003ed0 <_sbrk_r+0x1c>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fc fc56 	bl	8000770 <_sbrk>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_sbrk_r+0x1a>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_sbrk_r+0x1a>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	20000318 	.word	0x20000318

08003ed4 <__sread>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	f000 f8a0 	bl	8004020 <_read_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	bfab      	itete	ge
 8003ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee8:	181b      	addge	r3, r3, r0
 8003eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eee:	bfac      	ite	ge
 8003ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ef2:	81a3      	strhlt	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__swrite>:
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	05db      	lsls	r3, r3, #23
 8003f00:	4605      	mov	r5, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1e>
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f868 	bl	8003fe4 <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	4632      	mov	r2, r6
 8003f22:	463b      	mov	r3, r7
 8003f24:	4628      	mov	r0, r5
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 b817 	b.w	8003f5c <_write_r>

08003f2e <__sseek>:
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f36:	f000 f855 	bl	8003fe4 <_lseek_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	bf15      	itete	ne
 8003f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f4a:	81a3      	strheq	r3, [r4, #12]
 8003f4c:	bf18      	it	ne
 8003f4e:	81a3      	strhne	r3, [r4, #12]
 8003f50:	bd10      	pop	{r4, pc}

08003f52 <__sclose>:
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 b813 	b.w	8003f80 <_close_r>
	...

08003f5c <_write_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_write_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fc fbaf 	bl	80006ce <_write>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_write_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_write_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000318 	.word	0x20000318

08003f80 <_close_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_close_r+0x1c>)
 8003f84:	2300      	movs	r3, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fc fbbb 	bl	8000706 <_close>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_close_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_close_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	20000318 	.word	0x20000318

08003fa0 <_fstat_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4d07      	ldr	r5, [pc, #28]	; (8003fc0 <_fstat_r+0x20>)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	f7fc fbb6 	bl	800071e <_fstat>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d102      	bne.n	8003fbc <_fstat_r+0x1c>
 8003fb6:	682b      	ldr	r3, [r5, #0]
 8003fb8:	b103      	cbz	r3, 8003fbc <_fstat_r+0x1c>
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000318 	.word	0x20000318

08003fc4 <_isatty_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d06      	ldr	r5, [pc, #24]	; (8003fe0 <_isatty_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fc fbb5 	bl	800073e <_isatty>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_isatty_r+0x1a>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_isatty_r+0x1a>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000318 	.word	0x20000318

08003fe4 <_lseek_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_lseek_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc fbae 	bl	8000754 <_lseek>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_lseek_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_lseek_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20000318 	.word	0x20000318

08004008 <__malloc_lock>:
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <__malloc_lock+0x8>)
 800400a:	f7ff bb55 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 800400e:	bf00      	nop
 8004010:	20000310 	.word	0x20000310

08004014 <__malloc_unlock>:
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <__malloc_unlock+0x8>)
 8004016:	f7ff bb50 	b.w	80036ba <__retarget_lock_release_recursive>
 800401a:	bf00      	nop
 800401c:	20000310 	.word	0x20000310

08004020 <_read_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d07      	ldr	r5, [pc, #28]	; (8004040 <_read_r+0x20>)
 8004024:	4604      	mov	r4, r0
 8004026:	4608      	mov	r0, r1
 8004028:	4611      	mov	r1, r2
 800402a:	2200      	movs	r2, #0
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fc fb30 	bl	8000694 <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_read_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_read_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000318 	.word	0x20000318

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
