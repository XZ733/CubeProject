
UART_DMA_IDLE_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e40  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004060  08004060  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000010  08004078  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004078  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce29  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  0002ce69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f44  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8ae  00000000  00000000  00054064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2d70  00000000  00000000  00061912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  001446d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004000 	.word	0x08004000

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004000 	.word	0x08004000

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_DMA_Init+0x60>)
 8000518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <MX_DMA_Init+0x60>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6493      	str	r3, [r2, #72]	; 0x48
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_DMA_Init+0x60>)
 8000524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_DMA_Init+0x60>)
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <MX_DMA_Init+0x60>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6493      	str	r3, [r2, #72]	; 0x48
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_DMA_Init+0x60>)
 800053c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	200b      	movs	r0, #11
 800054c:	f000 fca7 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000550:	200b      	movs	r0, #11
 8000552:	f000 fcbe 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	200c      	movs	r0, #12
 800055c:	f000 fc9f 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000560:	200c      	movs	r0, #12
 8000562:	f000 fcb6 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <MX_GPIO_Init+0xd4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_GPIO_Init+0xd4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 f949 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_GPIO_Init+0xd8>)
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_GPIO_Init+0xdc>)
 800060c:	f000 ffba 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000610:	2320      	movs	r3, #32
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 ffab 	bl	8001584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f000 fc33 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000638:	2028      	movs	r0, #40	; 0x28
 800063a:	f000 fc4a 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	10110000 	.word	0x10110000
 8000650:	48000800 	.word	0x48000800

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fad5 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f81e 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff88 	bl	8000574 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f7ff ff54 	bl	8000510 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000668:	f000 f90c 	bl	8000884 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);          //�??串口空闲中断
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <main+0x3c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <main+0x3c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f042 0210 	orr.w	r2, r2, #16
 800067a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&hlpuart1,ReceiveBuff,BUFFERSIZE); //�??串口接收DMA
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <main+0x40>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <main+0x44>)
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <main+0x3c>)
 8000688:	f002 fa3e 	bl	8002b08 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x38>
 800068e:	bf00      	nop
 8000690:	2000012c 	.word	0x2000012c
 8000694:	20000000 	.word	0x20000000
 8000698:	2000002c 	.word	0x2000002c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a8      	sub	sp, #160	; 0xa0
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006a6:	2238      	movs	r2, #56	; 0x38
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fca0 	bl	8003ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2254      	movs	r2, #84	; 0x54
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fc92 	bl	8003ff0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 f917 	bl	8001900 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006f2:	2355      	movs	r3, #85	; 0x55
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f9aa 	bl	8001a68 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800071a:	f000 f826 	bl	800076a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fcad 	bl	8002098 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000744:	f000 f811 	bl	800076a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000748:	2320      	movs	r3, #32
 800074a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f001 febc 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800075e:	f000 f804 	bl	800076a <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	37a0      	adds	r7, #160	; 0xa0
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076e:	b672      	cpsid	i
}
 8000770:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000772:	e7fe      	b.n	8000772 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007aa:	f001 f94d 	bl	8001a48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 fa50 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel1_IRQHandler+0x10>)
 8000816:	f000 fd5a 	bl	80012ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000021c 	.word	0x2000021c

08000824 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel2_IRQHandler+0x10>)
 800082a:	f000 fd50 	bl	80012ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200001bc 	.word	0x200001bc

08000838 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800083c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000840:	f001 f83a 	bl	80018b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <LPUART1_IRQHandler+0x14>)
 800084e:	f002 fa11 	bl	8002c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  USER_UART_IRQHandler(&hlpuart1);
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <LPUART1_IRQHandler+0x14>)
 8000854:	f000 f906 	bl	8000a64 <USER_UART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000012c 	.word	0x2000012c

08000860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 800088c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008c6:	4812      	ldr	r0, [pc, #72]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008c8:	f002 f84e 	bl	8002968 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f7ff ff4a 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008da:	f003 fa9b 	bl	8003e14 <HAL_UARTEx_SetTxFifoThreshold>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008e4:	f7ff ff41 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008ec:	f003 fad0 	bl	8003e90 <HAL_UARTEx_SetRxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008f6:	f7ff ff38 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_LPUART1_UART_Init+0x8c>)
 80008fc:	f003 fa51 	bl	8003da2 <HAL_UARTEx_DisableFifoMode>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000906:	f7ff ff30 	bl	800076a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000012c 	.word	0x2000012c
 8000914:	40008000 	.word	0x40008000

08000918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a45      	ldr	r2, [pc, #276]	; (8000a4c <HAL_UART_MspInit+0x134>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 8083 	bne.w	8000a42 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800093c:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <HAL_UART_MspInit+0x138>)
 800093e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000940:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <HAL_UART_MspInit+0x138>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000948:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <HAL_UART_MspInit+0x138>)
 800094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <HAL_UART_MspInit+0x138>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <HAL_UART_MspInit+0x138>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <HAL_UART_MspInit+0x138>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800096c:	230c      	movs	r3, #12
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800097c:	230c      	movs	r3, #12
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 fdfb 	bl	8001584 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 8000990:	4a31      	ldr	r2, [pc, #196]	; (8000a58 <HAL_UART_MspInit+0x140>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 8000996:	2222      	movs	r2, #34	; 0x22
 8000998:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80009c4:	4823      	ldr	r0, [pc, #140]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009c6:	f000 fa9f 	bl	8000f08 <HAL_DMA_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 80009d0:	f7ff fecb 	bl	800076a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <HAL_UART_MspInit+0x13c>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_UART_MspInit+0x144>)
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <HAL_UART_MspInit+0x148>)
 80009e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <HAL_UART_MspInit+0x144>)
 80009e8:	2223      	movs	r2, #35	; 0x23
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x144>)
 80009ee:	2210      	movs	r2, #16
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_UART_MspInit+0x144>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x144>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a18:	f000 fa76 	bl	8000f08 <HAL_DMA_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000a22:	f7ff fea2 	bl	800076a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a2a:	679a      	str	r2, [r3, #120]	; 0x78
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_UART_MspInit+0x144>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	205b      	movs	r0, #91	; 0x5b
 8000a38:	f000 fa31 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a3c:	205b      	movs	r0, #91	; 0x5b
 8000a3e:	f000 fa48 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40008000 	.word	0x40008000
 8000a50:	40021000 	.word	0x40021000
 8000a54:	2000021c 	.word	0x2000021c
 8000a58:	40020008 	.word	0x40020008
 8000a5c:	200001bc 	.word	0x200001bc
 8000a60:	4002001c 	.word	0x4002001c

08000a64 <USER_UART_IRQHandler>:
  }
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == LPUART1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <USER_UART_IRQHandler+0xbc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d14f      	bne.n	8000b16 <USER_UART_IRQHandler+0xb2>
	  {
		  uint32_t temp;
		  if(RESET != __HAL_UART_GET_FLAG(&hlpuart1,UART_FLAG_IDLE))  //如果是空闲中�?
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d148      	bne.n	8000b16 <USER_UART_IRQHandler+0xb2>
			{
				__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);                   //清除中断标志
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2210      	movs	r2, #16
 8000a8a:	621a      	str	r2, [r3, #32]
				HAL_UART_DMAStop(&hlpuart1);                            //停止接收DMA
 8000a8c:	4825      	ldr	r0, [pc, #148]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000a8e:	f002 f881 	bl	8002b94 <HAL_UART_DMAStop>
				temp  = __HAL_DMA_GET_COUNTER(&hdma_lpuart1_rx);        //获取缓冲区空�?
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <USER_UART_IRQHandler+0xc4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	60fb      	str	r3, [r7, #12]
				Rx_len =  BUFFERSIZE - temp;                            //计算串口接收到的数据个数
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <USER_UART_IRQHandler+0xc8>)
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <USER_UART_IRQHandler+0xcc>)
 8000aa8:	701a      	strb	r2, [r3, #0]

				USAR_UART_IDLECallback(&hlpuart1);
 8000aaa:	481e      	ldr	r0, [pc, #120]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000aac:	f000 f844 	bl	8000b38 <USAR_UART_IDLECallback>

				HAL_UART_Transmit_DMA(&hlpuart1,ReceiveBuff,Rx_len);    //发�?�显�?
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <USER_UART_IRQHandler+0xcc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	491e      	ldr	r1, [pc, #120]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000aba:	481a      	ldr	r0, [pc, #104]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000abc:	f001 ffa4 	bl	8002a08 <HAL_UART_Transmit_DMA>
				if(ReceiveBuff[0] == 'O' && ReceiveBuff[1] == 'N') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b4f      	cmp	r3, #79	; 0x4f
 8000ac6:	d109      	bne.n	8000adc <USER_UART_IRQHandler+0x78>
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	2b4e      	cmp	r3, #78	; 0x4e
 8000ace:	d105      	bne.n	8000adc <USER_UART_IRQHandler+0x78>
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 fed6 	bl	8001888 <HAL_GPIO_WritePin>
				if(ReceiveBuff[0] == 'O' && ReceiveBuff[1] == 'F' && ReceiveBuff[2] == 'F') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b4f      	cmp	r3, #79	; 0x4f
 8000ae2:	d10d      	bne.n	8000b00 <USER_UART_IRQHandler+0x9c>
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	2b46      	cmp	r3, #70	; 0x46
 8000aea:	d109      	bne.n	8000b00 <USER_UART_IRQHandler+0x9c>
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000aee:	789b      	ldrb	r3, [r3, #2]
 8000af0:	2b46      	cmp	r3, #70	; 0x46
 8000af2:	d105      	bne.n	8000b00 <USER_UART_IRQHandler+0x9c>
 8000af4:	2200      	movs	r2, #0
 8000af6:	2120      	movs	r1, #32
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fec4 	bl	8001888 <HAL_GPIO_WritePin>




				Rx_len=0;                                               //接收数据个数清零
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <USER_UART_IRQHandler+0xcc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&hlpuart1,ReceiveBuff,BUFFERSIZE); //启动下次接收
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <USER_UART_IRQHandler+0xc8>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4909      	ldr	r1, [pc, #36]	; (8000b34 <USER_UART_IRQHandler+0xd0>)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <USER_UART_IRQHandler+0xc0>)
 8000b12:	f001 fff9 	bl	8002b08 <HAL_UART_Receive_DMA>
			}

	  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40008000 	.word	0x40008000
 8000b24:	2000012c 	.word	0x2000012c
 8000b28:	2000021c 	.word	0x2000021c
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	2000012b 	.word	0x2000012b
 8000b34:	2000002c 	.word	0x2000002c

08000b38 <USAR_UART_IDLECallback>:


void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == LPUART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <USAR_UART_IDLECallback+0x6c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d127      	bne.n	8000b9a <USAR_UART_IDLECallback+0x62>
	  {
			HAL_UART_Transmit_DMA(&hlpuart1,ReceiveBuff,Rx_len);    //发�?�显�?
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <USAR_UART_IDLECallback+0x70>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	4916      	ldr	r1, [pc, #88]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b54:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <USAR_UART_IDLECallback+0x78>)
 8000b56:	f001 ff57 	bl	8002a08 <HAL_UART_Transmit_DMA>
			if(ReceiveBuff[0] == 'O' && ReceiveBuff[1] == 'N') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b4f      	cmp	r3, #79	; 0x4f
 8000b60:	d109      	bne.n	8000b76 <USAR_UART_IDLECallback+0x3e>
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	2b4e      	cmp	r3, #78	; 0x4e
 8000b68:	d105      	bne.n	8000b76 <USAR_UART_IDLECallback+0x3e>
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fe89 	bl	8001888 <HAL_GPIO_WritePin>
			if(ReceiveBuff[0] == 'O' && ReceiveBuff[1] == 'F' && ReceiveBuff[2] == 'F') HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b4f      	cmp	r3, #79	; 0x4f
 8000b7c:	d10d      	bne.n	8000b9a <USAR_UART_IDLECallback+0x62>
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	2b46      	cmp	r3, #70	; 0x46
 8000b84:	d109      	bne.n	8000b9a <USAR_UART_IDLECallback+0x62>
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <USAR_UART_IDLECallback+0x74>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	2b46      	cmp	r3, #70	; 0x46
 8000b8c:	d105      	bne.n	8000b9a <USAR_UART_IDLECallback+0x62>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2120      	movs	r1, #32
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f000 fe77 	bl	8001888 <HAL_GPIO_WritePin>
	  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40008000 	.word	0x40008000
 8000ba8:	2000012b 	.word	0x2000012b
 8000bac:	2000002c 	.word	0x2000002c
 8000bb0:	2000012c 	.word	0x2000012c

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bde:	f7ff fe3f 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 f9e1 	bl	8003fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fd35 	bl	8000654 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf8:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000bfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c00:	20000280 	.word	0x20000280

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>

08000c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f939 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f80e 	bl	8000c38 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c28:	f7ff fda4 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d022      	beq.n	8000c92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_InitTick+0x6c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f944 	bl	8000eee <HAL_SYSTICK_Config>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10f      	bne.n	8000c8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d809      	bhi.n	8000c86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	f000 f910 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0x70>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e004      	b.n	8000c96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <HAL_IncTick+0x1c>)
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	2000027c 	.word	0x2000027c
 8000ccc:	2000000c 	.word	0x2000000c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000027c 	.word	0x2000027c

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff40 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa4 	bl	8000e44 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e08d      	b.n	8001036 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <HAL_DMA_Init+0x138>)
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d80f      	bhi.n	8000f46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b45      	ldr	r3, [pc, #276]	; (8001044 <HAL_DMA_Init+0x13c>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_DMA_Init+0x140>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	009a      	lsls	r2, r3, #2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a42      	ldr	r2, [pc, #264]	; (800104c <HAL_DMA_Init+0x144>)
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
 8000f44:	e00e      	b.n	8000f64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_DMA_Init+0x148>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <HAL_DMA_Init+0x140>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	009a      	lsls	r2, r3, #2
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <HAL_DMA_Init+0x14c>)
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fa82 	bl	80014c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fc4:	d102      	bne.n	8000fcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fe0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d010      	beq.n	800100c <HAL_DMA_Init+0x104>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d80c      	bhi.n	800100c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 faa2 	bl	800153c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	e008      	b.n	800101e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020407 	.word	0x40020407
 8001044:	bffdfff8 	.word	0xbffdfff8
 8001048:	cccccccd 	.word	0xcccccccd
 800104c:	40020000 	.word	0x40020000
 8001050:	bffdfbf8 	.word	0xbffdfbf8
 8001054:	40020400 	.word	0x40020400

08001058 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_DMA_Start_IT+0x20>
 8001074:	2302      	movs	r3, #2
 8001076:	e066      	b.n	8001146 <HAL_DMA_Start_IT+0xee>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d155      	bne.n	8001138 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f000 f9c7 	bl	8001444 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 020e 	orr.w	r2, r2, #14
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e00f      	b.n	80010f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0204 	bic.w	r2, r2, #4
 80010de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 020a 	orr.w	r2, r2, #10
 80010ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800110c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001124:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0201 	orr.w	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e005      	b.n	8001144 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001140:	2302      	movs	r3, #2
 8001142:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001144:	7dfb      	ldrb	r3, [r7, #23]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114e:	b480      	push	{r7}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d005      	beq.n	8001172 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e037      	b.n	80011e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 020e 	bic.w	r2, r2, #14
 8001180:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 021f 	and.w	r2, r3, #31
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d00d      	beq.n	8001234 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2204      	movs	r2, #4
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e047      	b.n	80012c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 020e 	bic.w	r2, r2, #14
 8001242:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001280:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001298:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
    }
  }
  return status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2204      	movs	r2, #4
 80012f0:	409a      	lsls	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d026      	beq.n	8001348 <HAL_DMA_IRQHandler+0x7a>
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d021      	beq.n	8001348 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0204 	bic.w	r2, r2, #4
 8001320:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f003 021f 	and.w	r2, r3, #31
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2104      	movs	r1, #4
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	2b00      	cmp	r3, #0
 800133c:	d071      	beq.n	8001422 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001346:	e06c      	b.n	8001422 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2202      	movs	r2, #2
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d02e      	beq.n	80013ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d029      	beq.n	80013ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10b      	bne.n	800138c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020a 	bic.w	r2, r2, #10
 8001382:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	2102      	movs	r1, #2
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d038      	beq.n	8001422 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013b8:	e033      	b.n	8001422 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2208      	movs	r2, #8
 80013c4:	409a      	lsls	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d02a      	beq.n	8001424 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d025      	beq.n	8001424 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001422:	bf00      	nop
 8001424:	bf00      	nop
}
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800145a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800146c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f003 021f 	and.w	r2, r3, #31
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d108      	bne.n	80014a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014a2:	e007      	b.n	80014b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d802      	bhi.n	80014da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e001      	b.n	80014de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3b08      	subs	r3, #8
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4413      	add	r3, r2
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2201      	movs	r2, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	651a      	str	r2, [r3, #80]	; 0x50
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40020407 	.word	0x40020407
 800152c:	40020800 	.word	0x40020800
 8001530:	40020820 	.word	0x40020820
 8001534:	cccccccd 	.word	0xcccccccd
 8001538:	40020880 	.word	0x40020880

0800153c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	461a      	mov	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800155e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3b01      	subs	r3, #1
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2201      	movs	r2, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	1000823f 	.word	0x1000823f
 8001580:	40020940 	.word	0x40020940

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001592:	e15a      	b.n	800184a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 814c 	beq.w	8001844 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d00b      	beq.n	80015cc <HAL_GPIO_Init+0x48>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c0:	2b11      	cmp	r3, #17
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0xea>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d123      	bne.n	80016b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	08da      	lsrs	r2, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3208      	adds	r2, #8
 80016b0:	6939      	ldr	r1, [r7, #16]
 80016b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0203 	and.w	r2, r3, #3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a6 	beq.w	8001844 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f8:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	4a5a      	ldr	r2, [pc, #360]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6613      	str	r3, [r2, #96]	; 0x60
 8001704:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001710:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800173a:	d01f      	beq.n	800177c <HAL_GPIO_Init+0x1f8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d019      	beq.n	8001778 <HAL_GPIO_Init+0x1f4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_Init+0x1f0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x2f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1ec>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a49      	ldr	r2, [pc, #292]	; (800187c <HAL_GPIO_Init+0x2f8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1e8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2fc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001764:	2305      	movs	r3, #5
 8001766:	e00a      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 8001768:	2306      	movs	r3, #6
 800176a:	e008      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 800176c:	2304      	movs	r3, #4
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 8001770:	2303      	movs	r3, #3
 8001772:	e004      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 8001774:	2302      	movs	r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x1fa>
 800177c:	2300      	movs	r3, #0
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178e:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_GPIO_Init+0x300>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c0:	4a30      	ldr	r2, [pc, #192]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ea:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001814:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_GPIO_Init+0x300>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_GPIO_Init+0x300>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_GPIO_Init+0x300>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f ae9d 	bne.w	8001594 <HAL_GPIO_Init+0x10>
  }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000800 	.word	0x48000800
 8001878:	48000c00 	.word	0x48000c00
 800187c:	48001000 	.word	0x48001000
 8001880:	48001400 	.word	0x48001400
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f806 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d141      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191a:	d131      	bne.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800191c:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001922:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001934:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2232      	movs	r2, #50	; 0x32
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	4a3f      	ldr	r2, [pc, #252]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001952:	e002      	b.n	800195a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3b01      	subs	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	d102      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f2      	bne.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d158      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e057      	b.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001986:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001990:	e04d      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001998:	d141      	bne.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d131      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2232      	movs	r2, #50	; 0x32
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019de:	e002      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d102      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f2      	bne.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d112      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e011      	b.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a1c:	e007      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	20000004 	.word	0x20000004
 8001a44:	431bde83 	.word	0x431bde83

08001a48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40007000 	.word	0x40007000

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e308      	b.n	800208c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d075      	beq.n	8001b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4ba0      	ldr	r3, [pc, #640]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3e>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_OscConfig+0x44>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4b99      	ldr	r3, [pc, #612]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x108>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d157      	bne.n	8001b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2e3      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x74>
 8001ace:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a8a      	ldr	r2, [pc, #552]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a87      	ldr	r2, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a83      	ldr	r2, [pc, #524]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b81      	ldr	r3, [pc, #516]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a80      	ldr	r2, [pc, #512]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8d6 	bl	8000cd0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f8d2 	bl	8000cd0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e2a8      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f8c2 	bl	8000cd0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f8be 	bl	8000cd0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e294      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b62:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0xe8>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d075      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x136>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x13c>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d11f      	bne.n	8001be4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_OscConfig+0x154>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e267      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	4952      	ldr	r1, [pc, #328]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bd0:	4b51      	ldr	r3, [pc, #324]	; (8001d18 <HAL_RCC_OscConfig+0x2b0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f82f 	bl	8000c38 <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d043      	beq.n	8001c68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e253      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a48      	ldr	r2, [pc, #288]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f86a 	bl	8000cd0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff f866 	bl	8000cd0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e23c      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	061b      	lsls	r3, r3, #24
 8001c2c:	4939      	ldr	r1, [pc, #228]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
 8001c32:	e01a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f846 	bl	8000cd0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f842 	bl	8000cd0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e218      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e0>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f81f 	bl	8000cd0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f81b 	bl	8000cd0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1f1      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ef      	beq.n	8001c96 <HAL_RCC_OscConfig+0x22e>
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f802 	bl	8000cd0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fffe 	bl	8000cd0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1d4      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ef      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80ab 	beq.w	8001e54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2b4>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_OscConfig+0x2b6>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00d      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4baf      	ldr	r3, [pc, #700]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4aae      	ldr	r2, [pc, #696]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2e:	4bac      	ldr	r3, [pc, #688]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	4ba9      	ldr	r3, [pc, #676]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4a:	4ba6      	ldr	r3, [pc, #664]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4aa5      	ldr	r2, [pc, #660]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7fe ffbb 	bl	8000cd0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe ffb7 	bl	8000cd0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e18d      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	4b9c      	ldr	r3, [pc, #624]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <HAL_RCC_OscConfig+0x32e>
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	4a95      	ldr	r2, [pc, #596]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d94:	e024      	b.n	8001de0 <HAL_RCC_OscConfig+0x378>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d110      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x358>
 8001d9e:	4b90      	ldr	r3, [pc, #576]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	4a8e      	ldr	r2, [pc, #568]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	4a8a      	ldr	r2, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x378>
 8001dc0:	4b87      	ldr	r3, [pc, #540]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	4a86      	ldr	r2, [pc, #536]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd0:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	4a82      	ldr	r2, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d016      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7fe ff72 	bl	8000cd0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7fe ff6e 	bl	8000cd0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e142      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ed      	beq.n	8001df0 <HAL_RCC_OscConfig+0x388>
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7fe ff5b 	bl	8000cd0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe ff57 	bl	8000cd0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e12b      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ed      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a64      	ldr	r2, [pc, #400]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03c      	beq.n	8001eda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e6e:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7fe ff2a 	bl	8000cd0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e80:	f7fe ff26 	bl	8000cd0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0fc      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ef      	beq.n	8001e80 <HAL_RCC_OscConfig+0x418>
 8001ea0:	e01b      	b.n	8001eda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7fe ff0d 	bl	8000cd0 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eba:	f7fe ff09 	bl	8000cd0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0df      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ef      	bne.n	8001eba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80d3 	beq.w	800208a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee4:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	f000 808d 	beq.w	800200c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d15a      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe fee3 	bl	8000cd0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fedf 	bl	8000cd0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0b5      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x580>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6a11      	ldr	r1, [r2, #32]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f46:	0212      	lsls	r2, r2, #8
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f4e:	0852      	lsrs	r2, r2, #1
 8001f50:	3a01      	subs	r2, #1
 8001f52:	0552      	lsls	r2, r2, #21
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f5a:	0852      	lsrs	r2, r2, #1
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	0652      	lsls	r2, r2, #25
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f66:	06d2      	lsls	r2, r2, #27
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	491d      	ldr	r1, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe fea2 	bl	8000cd0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fe9e 	bl	8000cd0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e074      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x528>
 8001fae:	e06c      	b.n	800208a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fe7a 	bl	8000cd0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	e00e      	b.n	8001ffe <HAL_RCC_OscConfig+0x596>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fe70 	bl	8000cd0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e046      	b.n	800208c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x62c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x584>
 800200a:	e03e      	b.n	800208a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e039      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x62c>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	429a      	cmp	r2, r3
 800202a:	d12c      	bne.n	8002086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	3b01      	subs	r3, #1
 8002038:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d123      	bne.n	8002086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d11b      	bne.n	8002086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d113      	bne.n	8002086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	3b01      	subs	r3, #1
 800206c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d109      	bne.n	8002086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e11e      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	498c      	ldr	r1, [pc, #560]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b8a      	ldr	r3, [pc, #552]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e106      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d073      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d129      	bne.n	8002148 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f4:	4b81      	ldr	r3, [pc, #516]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0f4      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002104:	f000 f99e 	bl	8002444 <RCC_GetSysClockFreqFromPLLSource>
 8002108:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4a7c      	ldr	r2, [pc, #496]	; (8002300 <HAL_RCC_ClockConfig+0x268>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d93f      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002112:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d033      	beq.n	8002192 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12f      	bne.n	8002192 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213a:	4a70      	ldr	r2, [pc, #448]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e024      	b.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0c6      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0be      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002170:	f000 f8ce 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8002174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4a61      	ldr	r2, [pc, #388]	; (8002300 <HAL_RCC_ClockConfig+0x268>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d909      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800217e:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002186:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4957      	ldr	r1, [pc, #348]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7fe fd94 	bl	8000cd0 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fd90 	bl	8000cd0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e095      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002204:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800220c:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
 8002226:	e008      	b.n	800223a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d105      	bne.n	800223a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002238:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d21d      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4929      	ldr	r1, [pc, #164]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002258:	f7fe fd3a 	bl	8000cd0 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7fe fd36 	bl	8000cd0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03b      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ed      	bne.n	8002260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4917      	ldr	r1, [pc, #92]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490f      	ldr	r1, [pc, #60]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c2:	f000 f825 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490c      	ldr	r1, [pc, #48]	; (8002304 <HAL_RCC_ClockConfig+0x26c>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x270>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fca6 	bl	8000c38 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	04c4b400 	.word	0x04c4b400
 8002304:	08004018 	.word	0x08004018
 8002308:	20000004 	.word	0x20000004
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d102      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e047      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e03e      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d136      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d10c      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68d2      	ldr	r2, [r2, #12]
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
      break;
 800237c:	e00c      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	0a12      	lsrs	r2, r2, #8
 800238c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0e5b      	lsrs	r3, r3, #25
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e001      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	016e3600 	.word	0x016e3600

080023d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08004028 	.word	0x08004028

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800241c:	f7ff ffda 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08004028 	.word	0x08004028

08002444 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d10c      	bne.n	8002482 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002468:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002472:	68d2      	ldr	r2, [r2, #12]
 8002474:	0a12      	lsrs	r2, r2, #8
 8002476:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	617b      	str	r3, [r7, #20]
    break;
 8002480:	e00c      	b.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	0a12      	lsrs	r2, r2, #8
 8002490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    break;
 800249a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0e5b      	lsrs	r3, r3, #25
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024b6:	687b      	ldr	r3, [r7, #4]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000
 80024c8:	016e3600 	.word	0x016e3600
 80024cc:	00f42400 	.word	0x00f42400

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d8:	2300      	movs	r3, #0
 80024da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8098 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f2:	4b43      	ldr	r3, [pc, #268]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a39      	ldr	r2, [pc, #228]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002526:	f7fe fbd3 	bl	8000cd0 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800252c:	e009      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe fbcf 	bl	8000cd0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d902      	bls.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	74fb      	strb	r3, [r7, #19]
        break;
 8002540:	e005      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0ef      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d159      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01e      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	d019      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fb8f 	bl	8000cd0 <HAL_GetTick>
 80025b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b4:	e00b      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fb8b 	bl	8000cd0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d902      	bls.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	74fb      	strb	r3, [r7, #19]
            break;
 80025cc:	e006      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ec      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	74bb      	strb	r3, [r7, #18]
 80025fe:	e005      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260c:	7c7b      	ldrb	r3, [r7, #17]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d105      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002612:	4baf      	ldr	r3, [pc, #700]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	4aae      	ldr	r2, [pc, #696]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262a:	4ba9      	ldr	r3, [pc, #676]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f023 0203 	bic.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	49a5      	ldr	r1, [pc, #660]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800264c:	4ba0      	ldr	r3, [pc, #640]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 020c 	bic.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	499d      	ldr	r1, [pc, #628]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800266e:	4b98      	ldr	r3, [pc, #608]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4994      	ldr	r1, [pc, #592]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002690:	4b8f      	ldr	r3, [pc, #572]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	498c      	ldr	r1, [pc, #560]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b2:	4b87      	ldr	r3, [pc, #540]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4983      	ldr	r1, [pc, #524]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026d4:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	497b      	ldr	r1, [pc, #492]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4972      	ldr	r1, [pc, #456]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	496a      	ldr	r1, [pc, #424]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	4961      	ldr	r1, [pc, #388]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800275c:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800275e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	4959      	ldr	r1, [pc, #356]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	4950      	ldr	r1, [pc, #320]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4948      	ldr	r1, [pc, #288]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a42      	ldr	r2, [pc, #264]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	493a      	ldr	r1, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	492c      	ldr	r1, [pc, #176]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	491e      	ldr	r1, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4910      	ldr	r1, [pc, #64]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4902      	ldr	r1, [pc, #8]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ce:	e001      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028d0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028dc:	d105      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	4917      	ldr	r1, [pc, #92]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d105      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	4909      	ldr	r1, [pc, #36]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800294c:	d105      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002958:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800295a:	7cbb      	ldrb	r3, [r7, #18]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e042      	b.n	8002a00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd ffc3 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2224      	movs	r2, #36	; 0x24
 8002996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fbd4 	bl	8003158 <UART_SetConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fe92 	bl	80036ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 ff19 	bl	8003830 <UART_CheckIdleState>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d168      	bne.n	8002af2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit_DMA+0x24>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e061      	b.n	8002af4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Transmit_DMA+0x36>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e05a      	b.n	8002af4 <HAL_UART_Transmit_DMA+0xec>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	; 0x21
 8002a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02c      	beq.n	8002ace <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_UART_Transmit_DMA+0xf4>)
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_UART_Transmit_DMA+0xf8>)
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a88:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_UART_Transmit_DMA+0xfc>)
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a90:	2200      	movs	r2, #0
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3328      	adds	r3, #40	; 0x28
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f7fe fad6 	bl	8001058 <HAL_DMA_Start_IT>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e012      	b.n	8002af4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2240      	movs	r2, #64	; 0x40
 8002ad4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aec:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	08003b45 	.word	0x08003b45
 8002b00:	08003b99 	.word	0x08003b99
 8002b04:	08003c87 	.word	0x08003c87

08002b08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d131      	bne.n	8002b84 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Receive_DMA+0x24>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e02a      	b.n	8002b86 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Receive_DMA+0x36>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e023      	b.n	8002b86 <HAL_UART_Receive_DMA+0x7e>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_UART_Receive_DMA+0x88>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b72:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 ff24 	bl	80039c8 <UART_Start_Receive_DMA>
 8002b80:	4603      	mov	r3, r0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40008000 	.word	0x40008000

08002b94 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba2:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d127      	bne.n	8002c0a <HAL_UART_DMAStop+0x76>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b21      	cmp	r3, #33	; 0x21
 8002bbe:	d124      	bne.n	8002c0a <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bce:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fab6 	bl	800114e <HAL_DMA_Abort>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fc1d 	bl	800142c <HAL_DMA_GetError>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d105      	bne.n	8002c04 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e032      	b.n	8002c6a <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 ff4d 	bl	8003aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d127      	bne.n	8002c68 <HAL_UART_DMAStop+0xd4>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b22      	cmp	r3, #34	; 0x22
 8002c1c:	d124      	bne.n	8002c68 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fa87 	bl	800114e <HAL_DMA_Abort>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fbee 	bl	800142c <HAL_DMA_GetError>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d105      	bne.n	8002c62 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e003      	b.n	8002c6a <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 ff3c 	bl	8003ae0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d013      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 81fb 	beq.w	80030c2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
      }
      return;
 8002cd4:	e1f5      	b.n	80030c2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80ef 	beq.w	8002ebc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_UART_IRQHandler+0x23c>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_UART_IRQHandler+0x240>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80e4 	beq.w	8002ebc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d010      	beq.n	8002d20 <HAL_UART_IRQHandler+0xac>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_UART_IRQHandler+0xd8>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_UART_IRQHandler+0x104>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_UART_IRQHandler+0x23c>)
 8002d90:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da4:	f043 0208 	orr.w	r2, r3, #8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d011      	beq.n	8002ddc <HAL_UART_IRQHandler+0x168>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 816f 	beq.w	80030c6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d011      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d004      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d031      	beq.n	8002e9a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fe52 	bl	8003ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d123      	bne.n	8002e92 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_UART_IRQHandler+0x244>)
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f9c6 	bl	8001200 <HAL_DMA_Abort_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	e00f      	b.n	8002eaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f94e 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00b      	b.n	8002eaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f94a 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e007      	b.n	8002eaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f946 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002ea8:	e10d      	b.n	80030c6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eaa:	bf00      	nop
    return;
 8002eac:	e10b      	b.n	80030c6 <HAL_UART_IRQHandler+0x452>
 8002eae:	bf00      	nop
 8002eb0:	10000001 	.word	0x10000001
 8002eb4:	04000120 	.word	0x04000120
 8002eb8:	08003d07 	.word	0x08003d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 80ab 	bne.w	800301c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a5 	beq.w	800301c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 809f 	beq.w	800301c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d155      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002efe:	893b      	ldrh	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80e2 	beq.w	80030ca <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f0c:	893a      	ldrh	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f080 80db 	bcs.w	80030ca <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	893a      	ldrh	r2, [r7, #8]
 8002f18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d12b      	bne.n	8002f84 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0210 	bic.w	r2, r2, #16
 8002f78:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f8e5 	bl	800114e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8d1 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f9e:	e094      	b.n	80030ca <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8083 	beq.w	80030ce <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0210 	bic.w	r2, r2, #16
 800300e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003010:	897b      	ldrh	r3, [r7, #10]
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f893 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800301a:	e058      	b.n	80030ce <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_UART_IRQHandler+0x3ce>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fe93 	bl	8003d66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003040:	e048      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	2b00      	cmp	r3, #0
 8003066:	d034      	beq.n	80030d2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
    }
    return;
 8003070:	e02f      	b.n	80030d2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x41a>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fe53 	bl	8003d32 <UART_EndTransmit_IT>
    return;
 800308c:	e022      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_UART_IRQHandler+0x436>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fe73 	bl	8003d8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a8:	e014      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00f      	beq.n	80030d4 <HAL_UART_IRQHandler+0x460>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0c      	bge.n	80030d4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fe5d 	bl	8003d7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030c0:	e008      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
      return;
 80030c2:	bf00      	nop
 80030c4:	e006      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
    return;
 80030c6:	bf00      	nop
 80030c8:	e004      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
      return;
 80030ca:	bf00      	nop
 80030cc:	e002      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
      return;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HAL_UART_IRQHandler+0x460>
    return;
 80030d2:	bf00      	nop
  }
}
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop

080030dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4bb1      	ldr	r3, [pc, #708]	; (8003448 <UART_SetConfig+0x2f0>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	69f9      	ldr	r1, [r7, #28]
 800318c:	430b      	orrs	r3, r1
 800318e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4aa6      	ldr	r2, [pc, #664]	; (800344c <UART_SetConfig+0x2f4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80031ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f023 010f 	bic.w	r1, r3, #15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a97      	ldr	r2, [pc, #604]	; (8003450 <UART_SetConfig+0x2f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d120      	bne.n	800323a <UART_SetConfig+0xe2>
 80031f8:	4b96      	ldr	r3, [pc, #600]	; (8003454 <UART_SetConfig+0x2fc>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b03      	cmp	r3, #3
 8003204:	d816      	bhi.n	8003234 <UART_SetConfig+0xdc>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <UART_SetConfig+0xb4>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003229 	.word	0x08003229
 8003214:	08003223 	.word	0x08003223
 8003218:	0800322f 	.word	0x0800322f
 800321c:	2301      	movs	r3, #1
 800321e:	76fb      	strb	r3, [r7, #27]
 8003220:	e0e7      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003222:	2302      	movs	r3, #2
 8003224:	76fb      	strb	r3, [r7, #27]
 8003226:	e0e4      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003228:	2304      	movs	r3, #4
 800322a:	76fb      	strb	r3, [r7, #27]
 800322c:	e0e1      	b.n	80033f2 <UART_SetConfig+0x29a>
 800322e:	2308      	movs	r3, #8
 8003230:	76fb      	strb	r3, [r7, #27]
 8003232:	e0de      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003234:	2310      	movs	r3, #16
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0db      	b.n	80033f2 <UART_SetConfig+0x29a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a86      	ldr	r2, [pc, #536]	; (8003458 <UART_SetConfig+0x300>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d132      	bne.n	80032aa <UART_SetConfig+0x152>
 8003244:	4b83      	ldr	r3, [pc, #524]	; (8003454 <UART_SetConfig+0x2fc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d828      	bhi.n	80032a4 <UART_SetConfig+0x14c>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <UART_SetConfig+0x100>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800328d 	.word	0x0800328d
 800325c:	080032a5 	.word	0x080032a5
 8003260:	080032a5 	.word	0x080032a5
 8003264:	080032a5 	.word	0x080032a5
 8003268:	08003299 	.word	0x08003299
 800326c:	080032a5 	.word	0x080032a5
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032a5 	.word	0x080032a5
 8003278:	08003293 	.word	0x08003293
 800327c:	080032a5 	.word	0x080032a5
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032a5 	.word	0x080032a5
 8003288:	0800329f 	.word	0x0800329f
 800328c:	2300      	movs	r3, #0
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e0af      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003292:	2302      	movs	r3, #2
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e0ac      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003298:	2304      	movs	r3, #4
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e0a9      	b.n	80033f2 <UART_SetConfig+0x29a>
 800329e:	2308      	movs	r3, #8
 80032a0:	76fb      	strb	r3, [r7, #27]
 80032a2:	e0a6      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032a4:	2310      	movs	r3, #16
 80032a6:	76fb      	strb	r3, [r7, #27]
 80032a8:	e0a3      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6b      	ldr	r2, [pc, #428]	; (800345c <UART_SetConfig+0x304>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d120      	bne.n	80032f6 <UART_SetConfig+0x19e>
 80032b4:	4b67      	ldr	r3, [pc, #412]	; (8003454 <UART_SetConfig+0x2fc>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032be:	2b30      	cmp	r3, #48	; 0x30
 80032c0:	d013      	beq.n	80032ea <UART_SetConfig+0x192>
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d814      	bhi.n	80032f0 <UART_SetConfig+0x198>
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d009      	beq.n	80032de <UART_SetConfig+0x186>
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d810      	bhi.n	80032f0 <UART_SetConfig+0x198>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <UART_SetConfig+0x180>
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d006      	beq.n	80032e4 <UART_SetConfig+0x18c>
 80032d6:	e00b      	b.n	80032f0 <UART_SetConfig+0x198>
 80032d8:	2300      	movs	r3, #0
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e089      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032de:	2302      	movs	r3, #2
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e086      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032e4:	2304      	movs	r3, #4
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e083      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032ea:	2308      	movs	r3, #8
 80032ec:	76fb      	strb	r3, [r7, #27]
 80032ee:	e080      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032f0:	2310      	movs	r3, #16
 80032f2:	76fb      	strb	r3, [r7, #27]
 80032f4:	e07d      	b.n	80033f2 <UART_SetConfig+0x29a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a59      	ldr	r2, [pc, #356]	; (8003460 <UART_SetConfig+0x308>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d120      	bne.n	8003342 <UART_SetConfig+0x1ea>
 8003300:	4b54      	ldr	r3, [pc, #336]	; (8003454 <UART_SetConfig+0x2fc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800330a:	2bc0      	cmp	r3, #192	; 0xc0
 800330c:	d013      	beq.n	8003336 <UART_SetConfig+0x1de>
 800330e:	2bc0      	cmp	r3, #192	; 0xc0
 8003310:	d814      	bhi.n	800333c <UART_SetConfig+0x1e4>
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d009      	beq.n	800332a <UART_SetConfig+0x1d2>
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d810      	bhi.n	800333c <UART_SetConfig+0x1e4>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <UART_SetConfig+0x1cc>
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d006      	beq.n	8003330 <UART_SetConfig+0x1d8>
 8003322:	e00b      	b.n	800333c <UART_SetConfig+0x1e4>
 8003324:	2300      	movs	r3, #0
 8003326:	76fb      	strb	r3, [r7, #27]
 8003328:	e063      	b.n	80033f2 <UART_SetConfig+0x29a>
 800332a:	2302      	movs	r3, #2
 800332c:	76fb      	strb	r3, [r7, #27]
 800332e:	e060      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003330:	2304      	movs	r3, #4
 8003332:	76fb      	strb	r3, [r7, #27]
 8003334:	e05d      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003336:	2308      	movs	r3, #8
 8003338:	76fb      	strb	r3, [r7, #27]
 800333a:	e05a      	b.n	80033f2 <UART_SetConfig+0x29a>
 800333c:	2310      	movs	r3, #16
 800333e:	76fb      	strb	r3, [r7, #27]
 8003340:	e057      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a47      	ldr	r2, [pc, #284]	; (8003464 <UART_SetConfig+0x30c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d125      	bne.n	8003398 <UART_SetConfig+0x240>
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <UART_SetConfig+0x2fc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335a:	d017      	beq.n	800338c <UART_SetConfig+0x234>
 800335c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003360:	d817      	bhi.n	8003392 <UART_SetConfig+0x23a>
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d00b      	beq.n	8003380 <UART_SetConfig+0x228>
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d811      	bhi.n	8003392 <UART_SetConfig+0x23a>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <UART_SetConfig+0x222>
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d006      	beq.n	8003386 <UART_SetConfig+0x22e>
 8003378:	e00b      	b.n	8003392 <UART_SetConfig+0x23a>
 800337a:	2300      	movs	r3, #0
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e038      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003380:	2302      	movs	r3, #2
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	e035      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003386:	2304      	movs	r3, #4
 8003388:	76fb      	strb	r3, [r7, #27]
 800338a:	e032      	b.n	80033f2 <UART_SetConfig+0x29a>
 800338c:	2308      	movs	r3, #8
 800338e:	76fb      	strb	r3, [r7, #27]
 8003390:	e02f      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003392:	2310      	movs	r3, #16
 8003394:	76fb      	strb	r3, [r7, #27]
 8003396:	e02c      	b.n	80033f2 <UART_SetConfig+0x29a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <UART_SetConfig+0x2f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d125      	bne.n	80033ee <UART_SetConfig+0x296>
 80033a2:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <UART_SetConfig+0x2fc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b0:	d017      	beq.n	80033e2 <UART_SetConfig+0x28a>
 80033b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b6:	d817      	bhi.n	80033e8 <UART_SetConfig+0x290>
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	d00b      	beq.n	80033d6 <UART_SetConfig+0x27e>
 80033be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c2:	d811      	bhi.n	80033e8 <UART_SetConfig+0x290>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <UART_SetConfig+0x278>
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d006      	beq.n	80033dc <UART_SetConfig+0x284>
 80033ce:	e00b      	b.n	80033e8 <UART_SetConfig+0x290>
 80033d0:	2300      	movs	r3, #0
 80033d2:	76fb      	strb	r3, [r7, #27]
 80033d4:	e00d      	b.n	80033f2 <UART_SetConfig+0x29a>
 80033d6:	2302      	movs	r3, #2
 80033d8:	76fb      	strb	r3, [r7, #27]
 80033da:	e00a      	b.n	80033f2 <UART_SetConfig+0x29a>
 80033dc:	2304      	movs	r3, #4
 80033de:	76fb      	strb	r3, [r7, #27]
 80033e0:	e007      	b.n	80033f2 <UART_SetConfig+0x29a>
 80033e2:	2308      	movs	r3, #8
 80033e4:	76fb      	strb	r3, [r7, #27]
 80033e6:	e004      	b.n	80033f2 <UART_SetConfig+0x29a>
 80033e8:	2310      	movs	r3, #16
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e001      	b.n	80033f2 <UART_SetConfig+0x29a>
 80033ee:	2310      	movs	r3, #16
 80033f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <UART_SetConfig+0x2f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f040 809f 	bne.w	800353c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033fe:	7efb      	ldrb	r3, [r7, #27]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d837      	bhi.n	8003474 <UART_SetConfig+0x31c>
 8003404:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0x2b4>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003431 	.word	0x08003431
 8003410:	08003475 	.word	0x08003475
 8003414:	08003439 	.word	0x08003439
 8003418:	08003475 	.word	0x08003475
 800341c:	0800343f 	.word	0x0800343f
 8003420:	08003475 	.word	0x08003475
 8003424:	08003475 	.word	0x08003475
 8003428:	08003475 	.word	0x08003475
 800342c:	0800346d 	.word	0x0800346d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7fe ffdc 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003434:	6178      	str	r0, [r7, #20]
        break;
 8003436:	e022      	b.n	800347e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <UART_SetConfig+0x310>)
 800343a:	617b      	str	r3, [r7, #20]
        break;
 800343c:	e01f      	b.n	800347e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343e:	f7fe ff67 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8003442:	6178      	str	r0, [r7, #20]
        break;
 8003444:	e01b      	b.n	800347e <UART_SetConfig+0x326>
 8003446:	bf00      	nop
 8003448:	cfff69f3 	.word	0xcfff69f3
 800344c:	40008000 	.word	0x40008000
 8003450:	40013800 	.word	0x40013800
 8003454:	40021000 	.word	0x40021000
 8003458:	40004400 	.word	0x40004400
 800345c:	40004800 	.word	0x40004800
 8003460:	40004c00 	.word	0x40004c00
 8003464:	40005000 	.word	0x40005000
 8003468:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003470:	617b      	str	r3, [r7, #20]
        break;
 8003472:	e004      	b.n	800347e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	76bb      	strb	r3, [r7, #26]
        break;
 800347c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 811b 	beq.w	80036bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	4a96      	ldr	r2, [pc, #600]	; (80036e4 <UART_SetConfig+0x58c>)
 800348c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003490:	461a      	mov	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fbb3 f3f2 	udiv	r3, r3, r2
 8003498:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d305      	bcc.n	80034b6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d902      	bls.n	80034bc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	76bb      	strb	r3, [r7, #26]
 80034ba:	e0ff      	b.n	80036bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	4618      	mov	r0, r3
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	4a86      	ldr	r2, [pc, #536]	; (80036e4 <UART_SetConfig+0x58c>)
 80034ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	f7fc fea0 	bl	8000218 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	020b      	lsls	r3, r1, #8
 80034ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034ee:	0202      	lsls	r2, r0, #8
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6849      	ldr	r1, [r1, #4]
 80034f4:	0849      	lsrs	r1, r1, #1
 80034f6:	4608      	mov	r0, r1
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	1814      	adds	r4, r2, r0
 80034fe:	eb43 0501 	adc.w	r5, r3, r1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	4620      	mov	r0, r4
 800350e:	4629      	mov	r1, r5
 8003510:	f7fc fe82 	bl	8000218 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003522:	d308      	bcc.n	8003536 <UART_SetConfig+0x3de>
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d204      	bcs.n	8003536 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e0c2      	b.n	80036bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	76bb      	strb	r3, [r7, #26]
 800353a:	e0bf      	b.n	80036bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d165      	bne.n	8003612 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003546:	7efb      	ldrb	r3, [r7, #27]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d828      	bhi.n	800359e <UART_SetConfig+0x446>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x3fc>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359f 	.word	0x0800359f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f
 8003570:	0800359f 	.word	0x0800359f
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7fe ff38 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 800357c:	6178      	str	r0, [r7, #20]
        break;
 800357e:	e013      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe ff4a 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003584:	6178      	str	r0, [r7, #20]
        break;
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <UART_SetConfig+0x590>)
 800358a:	617b      	str	r3, [r7, #20]
        break;
 800358c:	e00c      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe febf 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8003592:	6178      	str	r0, [r7, #20]
        break;
 8003594:	e008      	b.n	80035a8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359a:	617b      	str	r3, [r7, #20]
        break;
 800359c:	e004      	b.n	80035a8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	76bb      	strb	r3, [r7, #26]
        break;
 80035a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8086 	beq.w	80036bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <UART_SetConfig+0x58c>)
 80035b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ba:	461a      	mov	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c2:	005a      	lsls	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	441a      	add	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d916      	bls.n	800360c <UART_SetConfig+0x4b4>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d212      	bcs.n	800360c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f023 030f 	bic.w	r3, r3, #15
 80035ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	89fb      	ldrh	r3, [r7, #14]
 80035fe:	4313      	orrs	r3, r2
 8003600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	89fa      	ldrh	r2, [r7, #14]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e057      	b.n	80036bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	76bb      	strb	r3, [r7, #26]
 8003610:	e054      	b.n	80036bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003612:	7efb      	ldrb	r3, [r7, #27]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d828      	bhi.n	800366a <UART_SetConfig+0x512>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x4c8>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003645 	.word	0x08003645
 8003624:	0800364d 	.word	0x0800364d
 8003628:	08003655 	.word	0x08003655
 800362c:	0800366b 	.word	0x0800366b
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800366b 	.word	0x0800366b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7fe fed2 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003648:	6178      	str	r0, [r7, #20]
        break;
 800364a:	e013      	b.n	8003674 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7fe fee4 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003650:	6178      	str	r0, [r7, #20]
        break;
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <UART_SetConfig+0x590>)
 8003656:	617b      	str	r3, [r7, #20]
        break;
 8003658:	e00c      	b.n	8003674 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7fe fe59 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 800365e:	6178      	str	r0, [r7, #20]
        break;
 8003660:	e008      	b.n	8003674 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	617b      	str	r3, [r7, #20]
        break;
 8003668:	e004      	b.n	8003674 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	76bb      	strb	r3, [r7, #26]
        break;
 8003672:	bf00      	nop
    }

    if (pclk != 0U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d020      	beq.n	80036bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <UART_SetConfig+0x58c>)
 8003680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003684:	461a      	mov	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fbb3 f2f2 	udiv	r2, r3, r2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	441a      	add	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	b29b      	uxth	r3, r3
 800369e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	d908      	bls.n	80036b8 <UART_SetConfig+0x560>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d204      	bcs.n	80036b8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e001      	b.n	80036bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80036d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdb0      	pop	{r4, r5, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	08004030 	.word	0x08004030
 80036e8:	00f42400 	.word	0x00f42400

080036ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01a      	beq.n	8003802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ea:	d10a      	bne.n	8003802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003840:	f7fd fa46 	bl	8000cd0 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d10e      	bne.n	8003872 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f82f 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e025      	b.n	80038be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d10e      	bne.n	800389e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f819 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	e062      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d05e      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fd f9f6 	bl	8000cd0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003904:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02e      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d126      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003968:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e00f      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d08d      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2222      	movs	r2, #34	; 0x22
 80039f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02c      	beq.n	8003a56 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <UART_Start_Receive_DMA+0xd0>)
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a08:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <UART_Start_Receive_DMA+0xd4>)
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <UART_Start_Receive_DMA+0xd8>)
 8003a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	4619      	mov	r1, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f7fd fb12 	bl	8001058 <HAL_DMA_Start_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01c      	b.n	8003a90 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	08003bb5 	.word	0x08003bb5
 8003a9c:	08003c4f 	.word	0x08003c4f
 8003aa0:	08003c87 	.word	0x08003c87

08003aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003aba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003aca:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003af6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0210 	bic.w	r2, r2, #16
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d114      	bne.n	8003b8a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b76:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b88:	e002      	b.n	8003b90 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff faa6 	bl	80030dc <HAL_UART_TxCpltCallback>
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff faa2 	bl	80030f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12b      	bne.n	8003c28 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0210 	bic.w	r2, r2, #16
 8003c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c36:	4619      	mov	r1, r3
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fa81 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c3e:	e002      	b.n	8003c46 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff fa5f 	bl	8003104 <HAL_UART_RxCpltCallback>
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d109      	bne.n	8003c78 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fa65 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c76:	e002      	b.n	8003c7e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fa4d 	bl	8003118 <HAL_UART_RxHalfCpltCallback>
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d109      	bne.n	8003cc6 <UART_DMAError+0x40>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d106      	bne.n	8003cc6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f7ff feef 	bl	8003aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d109      	bne.n	8003ce8 <UART_DMAError+0x62>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	d106      	bne.n	8003ce8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f7ff fefc 	bl	8003ae0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cf8:	6978      	ldr	r0, [r7, #20]
 8003cfa:	f7ff fa17 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fa01 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d48:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff f9bf 	bl	80030dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e027      	b.n	8003e08 <HAL_UARTEx_DisableFifoMode+0x66>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003de6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e02d      	b.n	8003e88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f84f 	bl	8003f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e02d      	b.n	8003f04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f811 	bl	8003f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d108      	bne.n	8003f2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f2c:	e031      	b.n	8003f92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f2e:	2308      	movs	r3, #8
 8003f30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f32:	2308      	movs	r3, #8
 8003f34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	0e5b      	lsrs	r3, r3, #25
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	0f5b      	lsrs	r3, r3, #29
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f56:	7bbb      	ldrb	r3, [r7, #14]
 8003f58:	7b3a      	ldrb	r2, [r7, #12]
 8003f5a:	4911      	ldr	r1, [pc, #68]	; (8003fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8003f5c:	5c8a      	ldrb	r2, [r1, r2]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f62:	7b3a      	ldrb	r2, [r7, #12]
 8003f64:	490f      	ldr	r1, [pc, #60]	; (8003fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8003f66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	7b7a      	ldrb	r2, [r7, #13]
 8003f78:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8003f7a:	5c8a      	ldrb	r2, [r1, r2]
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f80:	7b7a      	ldrb	r2, [r7, #13]
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8003f84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08004048 	.word	0x08004048
 8003fa4:	08004050 	.word	0x08004050

08003fa8 <__libc_init_array>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4d0d      	ldr	r5, [pc, #52]	; (8003fe0 <__libc_init_array+0x38>)
 8003fac:	4c0d      	ldr	r4, [pc, #52]	; (8003fe4 <__libc_init_array+0x3c>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	42a6      	cmp	r6, r4
 8003fb6:	d109      	bne.n	8003fcc <__libc_init_array+0x24>
 8003fb8:	4d0b      	ldr	r5, [pc, #44]	; (8003fe8 <__libc_init_array+0x40>)
 8003fba:	4c0c      	ldr	r4, [pc, #48]	; (8003fec <__libc_init_array+0x44>)
 8003fbc:	f000 f820 	bl	8004000 <_init>
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	42a6      	cmp	r6, r4
 8003fc8:	d105      	bne.n	8003fd6 <__libc_init_array+0x2e>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd0:	4798      	blx	r3
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7ee      	b.n	8003fb4 <__libc_init_array+0xc>
 8003fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fda:	4798      	blx	r3
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7f2      	b.n	8003fc6 <__libc_init_array+0x1e>
 8003fe0:	08004060 	.word	0x08004060
 8003fe4:	08004060 	.word	0x08004060
 8003fe8:	08004060 	.word	0x08004060
 8003fec:	08004064 	.word	0x08004064

08003ff0 <memset>:
 8003ff0:	4402      	add	r2, r0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <memset+0xa>
 8003ff8:	4770      	bx	lr
 8003ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffe:	e7f9      	b.n	8003ff4 <memset+0x4>

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr
