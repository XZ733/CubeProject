
UART_RECIEVE_INTERRUPT_SEND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db8  08004db8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000078  08004e38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004e38  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002255  00000000  00000000  0002e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00030aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a1b  00000000  00000000  00031f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e41d  00000000  00000000  00057983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e84c6  00000000  00000000  00065da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000323c  00000000  00000000  0014e2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004cbc 	.word	0x08004cbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08004cbc 	.word	0x08004cbc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2e      	ldr	r2, [pc, #184]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_GPIO_Init+0xd4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_GPIO_Init+0xd4>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <MX_GPIO_Init+0xd4>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <MX_GPIO_Init+0xd4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <MX_GPIO_Init+0xd4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <MX_GPIO_Init+0xd4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_GPIO_Init+0xd4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_GPIO_Init+0xd4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_GPIO_Init+0xd4>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_GPIO_Init+0xd4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f000 fe73 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_GPIO_Init+0xd8>)
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_GPIO_Init+0xdc>)
 8000650:	f000 fce4 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fcd5 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2028      	movs	r0, #40	; 0x28
 8000678:	f000 fbdb 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fbf2 	bl	8000e66 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	10110000 	.word	0x10110000
 8000694:	48000800 	.word	0x48000800

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fa7d 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f80e 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff ff88 	bl	80005b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 f98a 	bl	80009c0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&hlpuart1,(uint8_t*)receiveBuffer,sizeof(receiveBuffer)/sizeof(receiveBuffer[0]));
 80006ac:	2205      	movs	r2, #5
 80006ae:	4902      	ldr	r1, [pc, #8]	; (80006b8 <main+0x20>)
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <main+0x24>)
 80006b2:	f001 ff8b 	bl	80025cc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x1e>
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a8      	sub	sp, #160	; 0xa0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006ca:	2238      	movs	r2, #56	; 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fb96 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2254      	movs	r2, #84	; 0x54
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fb88 	bl	8003e00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fe51 	bl	8001398 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	2303      	movs	r3, #3
 8000708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800070c:	2306      	movs	r3, #6
 800070e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000712:	2355      	movs	r3, #85	; 0x55
 8000714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fee6 	bl	8001500 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800073a:	f000 f826 	bl	800078a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2303      	movs	r3, #3
 8000744:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000752:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000756:	2104      	movs	r1, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f9e9 	bl	8001b30 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000764:	f000 f811 	bl	800078a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000768:	2320      	movs	r3, #32
 800076a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fbf8 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f804 	bl	800078a <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	37a0      	adds	r7, #160	; 0xa0
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078e:	b672      	cpsid	i
}
 8000790:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000792:	e7fe      	b.n	8000792 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	; 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ca:	f000 fe89 	bl	80014e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 fa0a 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000834:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000838:	f000 fd8a 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <LPUART1_IRQHandler+0x10>)
 8000846:	f001 ff07 	bl	8002658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000a0 	.word	0x200000a0

08000854 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e00a      	b.n	800087c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000866:	f3af 8000 	nop.w
 800086a:	4601      	mov	r1, r0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf0      	blt.n	8000866 <_read+0x12>
	}

return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e009      	b.n	80008b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	60ba      	str	r2, [r7, #8]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f91d 	bl	8000ae8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf1      	blt.n	80008a0 <_write+0x12>
	}
	return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_close>:

int _close(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ee:	605a      	str	r2, [r3, #4]
	return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_isatty>:

int _isatty(int file)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return 1;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f003 fa24 	bl	8003dac <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20020000 	.word	0x20020000
 8000990:	00000400 	.word	0x00000400
 8000994:	20000094 	.word	0x20000094
 8000998:	20000148 	.word	0x20000148

0800099c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_LPUART1_UART_Init+0x90>)
 80009c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a04:	f001 fcfc 	bl	8002400 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f7ff febc 	bl	800078a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a16:	f003 f8fe 	bl	8003c16 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a20:	f7ff feb3 	bl	800078a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a28:	f003 f933 	bl	8003c92 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a32:	f7ff feaa 	bl	800078a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_LPUART1_UART_Init+0x8c>)
 8000a38:	f003 f8b4 	bl	8003ba4 <HAL_UARTEx_DisableFifoMode>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a42:	f7ff fea2 	bl	800078a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000a0 	.word	0x200000a0
 8000a50:	40008000 	.word	0x40008000

08000a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d130      	bne.n	8000ad8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 faaa 	bl	800101c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	205b      	movs	r0, #91	; 0x5b
 8000ace:	f000 f9b0 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ad2:	205b      	movs	r0, #91	; 0x5b
 8000ad4:	f000 f9c7 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40008000 	.word	0x40008000
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8000af0:	1d39      	adds	r1, r7, #4
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	2201      	movs	r2, #1
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <__io_putchar+0x20>)
 8000afa:	f001 fcd1 	bl	80024a0 <HAL_UART_Transmit>
  return ch;
 8000afe:	687b      	ldr	r3, [r7, #4]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000a0 	.word	0x200000a0

08000b0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == LPUART1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_UART_RxCpltCallback+0x2c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d108      	bne.n	8000b30 <HAL_UART_RxCpltCallback+0x24>
	  {
		  printf("%s",receiveBuffer);
 8000b1e:	4907      	ldr	r1, [pc, #28]	; (8000b3c <HAL_UART_RxCpltCallback+0x30>)
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_UART_RxCpltCallback+0x34>)
 8000b22:	f003 f975 	bl	8003e10 <iprintf>

		  HAL_UART_Receive_IT(&hlpuart1,receiveBuffer,sizeof(receiveBuffer)/sizeof(receiveBuffer[0]));
 8000b26:	2205      	movs	r2, #5
 8000b28:	4904      	ldr	r1, [pc, #16]	; (8000b3c <HAL_UART_RxCpltCallback+0x30>)
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_UART_RxCpltCallback+0x38>)
 8000b2c:	f001 fd4e 	bl	80025cc <HAL_UART_Receive_IT>
	  }
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40008000 	.word	0x40008000
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08004cd4 	.word	0x08004cd4
 8000b44:	200000a0 	.word	0x200000a0

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b72:	f7ff ff13 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 f91f 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fd8d 	bl	8000698 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b8c:	08004dc0 	.word	0x08004dc0
  ldr r2, =_sbss
 8000b90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b94:	20000144 	.word	0x20000144

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>

08000b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f939 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f80e 	bl	8000bcc <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bbc:	f7ff fdea 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d022      	beq.n	8000c26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_InitTick+0x6c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_InitTick+0x68>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f944 	bl	8000e82 <HAL_SYSTICK_Config>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10f      	bne.n	8000c20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d809      	bhi.n	8000c1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0e:	f000 f910 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0x70>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e007      	b.n	8000c2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e004      	b.n	8000c2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e001      	b.n	8000c2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000010 	.word	0x20000010
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	2000000c 	.word	0x2000000c

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x1c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x20>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x1c>)
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000130 	.word	0x20000130
 8000c60:	20000010 	.word	0x20000010

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000130 	.word	0x20000130

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff40 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa4 	bl	8000dd8 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d005      	beq.n	8000ebe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e037      	b.n	8000f2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020e 	bic.w	r2, r2, #14
 8000ecc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000edc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f003 021f 	and.w	r2, r3, #31
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00c      	beq.n	8000f2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00d      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2204      	movs	r2, #4
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e047      	b.n	8001010 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 020e 	bic.w	r2, r2, #14
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00c      	beq.n	8000ff0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	4798      	blx	r3
    }
  }
  return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800102a:	e15a      	b.n	80012e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 814c 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00b      	beq.n	8001064 <HAL_GPIO_Init+0x48>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001058:	2b11      	cmp	r3, #17
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0xea>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d123      	bne.n	800114e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0203 	and.w	r2, r3, #3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a6 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6613      	str	r3, [r2, #96]	; 0x60
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a8:	4a56      	ldr	r2, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d2:	d01f      	beq.n	8001214 <HAL_GPIO_Init+0x1f8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x2ec>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d019      	beq.n	8001210 <HAL_GPIO_Init+0x1f4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x2f0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1f0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2f4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1e4>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e00a      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001200:	2306      	movs	r3, #6
 8001202:	e008      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001204:	2304      	movs	r3, #4
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001208:	2303      	movs	r3, #3
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001214:	2300      	movs	r3, #0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001226:	4937      	ldr	r1, [pc, #220]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x300>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_GPIO_Init+0x300>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_GPIO_Init+0x300>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001282:	4a26      	ldr	r2, [pc, #152]	; (800131c <HAL_GPIO_Init+0x300>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_GPIO_Init+0x300>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_GPIO_Init+0x300>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_GPIO_Init+0x300>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_GPIO_Init+0x300>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f ae9d 	bne.w	800102c <HAL_GPIO_Init+0x10>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800
 8001310:	48000c00 	.word	0x48000c00
 8001314:	48001000 	.word	0x48001000
 8001318:	48001400 	.word	0x48001400
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800133c:	e002      	b.n	8001344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f806 	bl	8001380 <HAL_GPIO_EXTI_Callback>
  }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d141      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d131      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ba:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013cc:	4a41      	ldr	r2, [pc, #260]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2232      	movs	r2, #50	; 0x32
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	e002      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d102      	bne.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f2      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d158      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e057      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001428:	e04d      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001430:	d141      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143e:	d131      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2232      	movs	r2, #50	; 0x32
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	e002      	b.n	800147e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3b01      	subs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148a:	d102      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f2      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d112      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e011      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014b4:	e007      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40007000 	.word	0x40007000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6093      	str	r3, [r2, #8]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007000 	.word	0x40007000

08001500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e308      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151e:	4ba3      	ldr	r3, [pc, #652]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001528:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x3e>
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d002      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b08      	cmp	r3, #8
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b99      	ldr	r3, [pc, #612]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d05b      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d157      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2e3      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x74>
 8001566:	4b91      	ldr	r3, [pc, #580]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a90      	ldr	r2, [pc, #576]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b8b      	ldr	r3, [pc, #556]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a8a      	ldr	r2, [pc, #552]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a87      	ldr	r2, [pc, #540]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001598:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a83      	ldr	r2, [pc, #524]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a80      	ldr	r2, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb54 	bl	8000c64 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb50 	bl	8000c64 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e2a8      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb40 	bl	8000c64 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb3c 	bl	8000c64 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e294      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fa:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x136>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d002      	beq.n	800163c <HAL_RCC_OscConfig+0x13c>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d11f      	bne.n	800167c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	4b5b      	ldr	r3, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x154>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e267      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	4952      	ldr	r1, [pc, #328]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x2b0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff faad 	bl	8000bcc <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d043      	beq.n	8001700 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e253      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a48      	ldr	r2, [pc, #288]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fae8 	bl	8000c64 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fae4 	bl	8000c64 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e23c      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	061b      	lsls	r3, r3, #24
 80016c4:	4939      	ldr	r1, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
 80016ca:	e01a      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016cc:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a36      	ldr	r2, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fac4 	bl	8000c64 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fac0 	bl	8000c64 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e218      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1e0>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03c      	beq.n	8001788 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fa9d 	bl	8000c64 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fa99 	bl	8000c64 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1f1      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ef      	beq.n	800172e <HAL_RCC_OscConfig+0x22e>
 800174e:	e01b      	b.n	8001788 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa80 	bl	8000c64 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fa7c 	bl	8000c64 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ef      	bne.n	8001768 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80ab 	beq.w	80018ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2b4>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_OscConfig+0x2b6>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4baf      	ldr	r3, [pc, #700]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	4aae      	ldr	r2, [pc, #696]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
 80017c6:	4bac      	ldr	r3, [pc, #688]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	4ba9      	ldr	r3, [pc, #676]	; (8001a7c <HAL_RCC_OscConfig+0x57c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e2:	4ba6      	ldr	r3, [pc, #664]	; (8001a7c <HAL_RCC_OscConfig+0x57c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4aa5      	ldr	r2, [pc, #660]	; (8001a7c <HAL_RCC_OscConfig+0x57c>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa39 	bl	8000c64 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fa35 	bl	8000c64 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e18d      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001808:	4b9c      	ldr	r3, [pc, #624]	; (8001a7c <HAL_RCC_OscConfig+0x57c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_RCC_OscConfig+0x32e>
 800181c:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	4a95      	ldr	r2, [pc, #596]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182c:	e024      	b.n	8001878 <HAL_RCC_OscConfig+0x378>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d110      	bne.n	8001858 <HAL_RCC_OscConfig+0x358>
 8001836:	4b90      	ldr	r3, [pc, #576]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183c:	4a8e      	ldr	r2, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001846:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	e00f      	b.n	8001878 <HAL_RCC_OscConfig+0x378>
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a86      	ldr	r2, [pc, #536]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d016      	beq.n	80018ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff f9f0 	bl	8000c64 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff f9ec 	bl	8000c64 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e142      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ed      	beq.n	8001888 <HAL_RCC_OscConfig+0x388>
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff f9d9 	bl	8000c64 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f9d5 	bl	8000c64 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e12b      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ed      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	4a64      	ldr	r2, [pc, #400]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03c      	beq.n	8001972 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001906:	4a5c      	ldr	r2, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff f9a8 	bl	8000c64 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001918:	f7ff f9a4 	bl	8000c64 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0fc      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800192c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ef      	beq.n	8001918 <HAL_RCC_OscConfig+0x418>
 8001938:	e01b      	b.n	8001972 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800193c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff f98b 	bl	8000c64 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001952:	f7ff f987 	bl	8000c64 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0df      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80d3 	beq.w	8001b22 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b0c      	cmp	r3, #12
 8001986:	f000 808d 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d15a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f961 	bl	8000c64 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f95d 	bl	8000c64 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0b5      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_RCC_OscConfig+0x580>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6a11      	ldr	r1, [r2, #32]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019de:	0212      	lsls	r2, r2, #8
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019e6:	0852      	lsrs	r2, r2, #1
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0552      	lsls	r2, r2, #21
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019f2:	0852      	lsrs	r2, r2, #1
 80019f4:	3a01      	subs	r2, #1
 80019f6:	0652      	lsls	r2, r2, #25
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019fe:	06d2      	lsls	r2, r2, #27
 8001a00:	430a      	orrs	r2, r1
 8001a02:	491d      	ldr	r1, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f920 	bl	8000c64 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f91c 	bl	8000c64 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e074      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x528>
 8001a46:	e06c      	b.n	8001b22 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_RCC_OscConfig+0x578>)
 8001a66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f8f8 	bl	8000c64 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a76:	e00e      	b.n	8001a96 <HAL_RCC_OscConfig+0x596>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f8ee 	bl	8000c64 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e046      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x62c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x584>
 8001aa2:	e03e      	b.n	8001b22 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e039      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x62c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d12c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d123      	bne.n	8001b1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d11b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d113      	bne.n	8001b1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e11e      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	498c      	ldr	r1, [pc, #560]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b8a      	ldr	r3, [pc, #552]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e106      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d073      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d129      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0f4      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b9c:	f000 f99e 	bl	8001edc <RCC_GetSysClockFreqFromPLLSource>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_RCC_ClockConfig+0x268>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d93f      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001baa:	4b7a      	ldr	r3, [pc, #488]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d033      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12f      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd2:	4a70      	ldr	r2, [pc, #448]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e024      	b.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0c6      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0be      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c08:	f000 f8ce 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4a61      	ldr	r2, [pc, #388]	; (8001d98 <HAL_RCC_ClockConfig+0x268>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d909      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c16:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4957      	ldr	r1, [pc, #348]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f812 	bl	8000c64 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f80e 	bl	8000c64 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e095      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4936      	ldr	r1, [pc, #216]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b80      	cmp	r3, #128	; 0x80
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d21d      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 020f 	bic.w	r2, r3, #15
 8001ce8:	4929      	ldr	r1, [pc, #164]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf0:	f7fe ffb8 	bl	8000c64 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7fe ffb4 	bl	8000c64 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e03b      	b.n	8001d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ed      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4917      	ldr	r1, [pc, #92]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490f      	ldr	r1, [pc, #60]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5a:	f000 f825 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	490c      	ldr	r1, [pc, #48]	; (8001d9c <HAL_RCC_ClockConfig+0x26c>)
 8001d6c:	5ccb      	ldrb	r3, [r1, r3]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ff24 	bl	8000bcc <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	04c4b400 	.word	0x04c4b400
 8001d9c:	08004cd8 	.word	0x08004cd8
 8001da0:	20000008 	.word	0x20000008
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e047      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e03e      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d136      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3301      	adds	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e06:	68d2      	ldr	r2, [r2, #12]
 8001e08:	0a12      	lsrs	r2, r2, #8
 8001e0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e00c      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e16:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	0a12      	lsrs	r2, r2, #8
 8001e24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0e5b      	lsrs	r3, r3, #25
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e001      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e50:	693b      	ldr	r3, [r7, #16]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	016e3600 	.word	0x016e3600

08001e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4904      	ldr	r1, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08004ce8 	.word	0x08004ce8

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb4:	f7ff ffda 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0adb      	lsrs	r3, r3, #11
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004ce8 	.word	0x08004ce8

08001edc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d10c      	bne.n	8001f1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0a:	68d2      	ldr	r2, [r2, #12]
 8001f0c:	0a12      	lsrs	r2, r2, #8
 8001f0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
    break;
 8001f18:	e00c      	b.n	8001f34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	0a12      	lsrs	r2, r2, #8
 8001f28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    break;
 8001f32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0e5b      	lsrs	r3, r3, #25
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	016e3600 	.word	0x016e3600
 8001f64:	00f42400 	.word	0x00f42400

08001f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f70:	2300      	movs	r3, #0
 8001f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8098 	beq.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a39      	ldr	r2, [pc, #228]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fbe:	f7fe fe51 	bl	8000c64 <HAL_GetTick>
 8001fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc4:	e009      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe fe4d 	bl	8000c64 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d902      	bls.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8001fd8:	e005      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ef      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d159      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01e      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	d019      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7fe fe0d 	bl	8000c64 <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204c:	e00b      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fe09 	bl	8000c64 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d902      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	74fb      	strb	r3, [r7, #19]
            break;
 8002064:	e006      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ec      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002090:	e008      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	74bb      	strb	r3, [r7, #18]
 8002096:	e005      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a4:	7c7b      	ldrb	r3, [r7, #17]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d105      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4baf      	ldr	r3, [pc, #700]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4aae      	ldr	r2, [pc, #696]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c2:	4ba9      	ldr	r3, [pc, #676]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f023 0203 	bic.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	49a5      	ldr	r1, [pc, #660]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e4:	4ba0      	ldr	r3, [pc, #640]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 020c 	bic.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	499d      	ldr	r1, [pc, #628]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002106:	4b98      	ldr	r3, [pc, #608]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4994      	ldr	r1, [pc, #592]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	498c      	ldr	r1, [pc, #560]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800214a:	4b87      	ldr	r3, [pc, #540]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	4983      	ldr	r1, [pc, #524]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	497b      	ldr	r1, [pc, #492]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4972      	ldr	r1, [pc, #456]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	496a      	ldr	r1, [pc, #424]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d2:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	4961      	ldr	r1, [pc, #388]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021f4:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	4959      	ldr	r1, [pc, #356]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	4950      	ldr	r1, [pc, #320]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4948      	ldr	r1, [pc, #288]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002256:	d105      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002262:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002270:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	493a      	ldr	r1, [pc, #232]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228e:	d105      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	492c      	ldr	r1, [pc, #176]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4910      	ldr	r1, [pc, #64]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d018      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4902      	ldr	r1, [pc, #8]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002368:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002374:	d105      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	4917      	ldr	r1, [pc, #92]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d105      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e4:	d105      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e042      	b.n	8002498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fb15 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2224      	movs	r2, #36	; 0x24
 800242e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb5c 	bl	8002b00 <UART_SetConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e022      	b.n	8002498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fe1a 	bl	8003094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800246e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fea1 	bl	80031d8 <UART_CheckIdleState>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 8083 	bne.w	80025c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_UART_Transmit+0x28>
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e07b      	b.n	80025c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_UART_Transmit+0x3a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e074      	b.n	80025c4 <HAL_UART_Transmit+0x124>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2221      	movs	r2, #33	; 0x21
 80024ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024f2:	f7fe fbb7 	bl	8000c64 <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002510:	d108      	bne.n	8002524 <HAL_UART_Transmit+0x84>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	e003      	b.n	800252c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002534:	e02c      	b.n	8002590 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fe94 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e039      	b.n	80025c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3302      	adds	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e007      	b.n	800257e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3301      	adds	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1cc      	bne.n	8002536 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fe61 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e006      	b.n	80025c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d131      	bne.n	8002648 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Receive_IT+0x24>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e02a      	b.n	800264a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Receive_IT+0x36>
 80025fe:	2302      	movs	r3, #2
 8002600:	e023      	b.n	800264a <HAL_UART_Receive_IT+0x7e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_UART_Receive_IT+0x88>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002636:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	461a      	mov	r2, r3
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fe96 	bl	8003370 <UART_Start_Receive_IT>
 8002644:	4603      	mov	r3, r0
 8002646:	e000      	b.n	800264a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40008000 	.word	0x40008000

08002658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f640 030f 	movw	r3, #2063	; 0x80f
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d118      	bne.n	80026ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d013      	beq.n	80026ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 81fb 	beq.w	8002aa6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
      }
      return;
 80026b8:	e1f5      	b.n	8002aa6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80ef 	beq.w	80028a0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_UART_IRQHandler+0x23c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4b72      	ldr	r3, [pc, #456]	; (8002898 <HAL_UART_IRQHandler+0x240>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80e4 	beq.w	80028a0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <HAL_UART_IRQHandler+0xac>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_UART_IRQHandler+0xd8>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_UART_IRQHandler+0x104>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2204      	movs	r2, #4
 800274a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_UART_IRQHandler+0x23c>)
 8002774:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2208      	movs	r2, #8
 8002780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002788:	f043 0208 	orr.w	r2, r3, #8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d011      	beq.n	80027c0 <HAL_UART_IRQHandler+0x168>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 816f 	beq.w	8002aaa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d004      	beq.n	800281a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d031      	beq.n	800287e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fe66 	bl	80034ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d123      	bne.n	8002876 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d013      	beq.n	800286e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_UART_IRQHandler+0x244>)
 800284c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fb7a 	bl	8000f4c <HAL_DMA_Abort_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d017      	beq.n	800288e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002868:	4610      	mov	r0, r2
 800286a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	e00f      	b.n	800288e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f930 	bl	8002ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	e00b      	b.n	800288e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f92c 	bl	8002ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	e007      	b.n	800288e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f928 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800288c:	e10d      	b.n	8002aaa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288e:	bf00      	nop
    return;
 8002890:	e10b      	b.n	8002aaa <HAL_UART_IRQHandler+0x452>
 8002892:	bf00      	nop
 8002894:	10000001 	.word	0x10000001
 8002898:	04000120 	.word	0x04000120
 800289c:	08003551 	.word	0x08003551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 80ab 	bne.w	8002a00 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a5 	beq.w	8002a00 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 809f 	beq.w	8002a00 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2210      	movs	r2, #16
 80028c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d155      	bne.n	8002984 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80e2 	beq.w	8002aae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	f080 80db 	bcs.w	8002aae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	893a      	ldrh	r2, [r7, #8]
 80028fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d12b      	bne.n	8002968 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0210 	bic.w	r2, r2, #16
 800295c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa99 	bl	8000e9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002974:	b29b      	uxth	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8b3 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002982:	e094      	b.n	8002aae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002990:	b29b      	uxth	r3, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8087 	beq.w	8002ab2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8083 	beq.w	8002ab2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0210 	bic.w	r2, r2, #16
 80029f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f875 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029fe:	e058      	b.n	8002ab2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_UART_IRQHandler+0x3ce>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f001 f8a2 	bl	8003b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a24:	e048      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d034      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
    }
    return;
 8002a54:	e02f      	b.n	8002ab6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_UART_IRQHandler+0x41a>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fd86 	bl	800357c <UART_EndTransmit_IT>
    return;
 8002a70:	e022      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_UART_IRQHandler+0x436>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f001 f882 	bl	8003b90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a8c:	e014      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00f      	beq.n	8002ab8 <HAL_UART_IRQHandler+0x460>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da0c      	bge.n	8002ab8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f001 f86c 	bl	8003b7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002aa4:	e008      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
      return;
 8002aa6:	bf00      	nop
 8002aa8:	e006      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
    return;
 8002aaa:	bf00      	nop
 8002aac:	e004      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
      return;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
      return;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_UART_IRQHandler+0x460>
    return;
 8002ab6:	bf00      	nop
  }
}
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop

08002ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b00:	b5b0      	push	{r4, r5, r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4bb1      	ldr	r3, [pc, #708]	; (8002df0 <UART_SetConfig+0x2f0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	69f9      	ldr	r1, [r7, #28]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4aa6      	ldr	r2, [pc, #664]	; (8002df4 <UART_SetConfig+0x2f4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002b72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	69f9      	ldr	r1, [r7, #28]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f023 010f 	bic.w	r1, r3, #15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a97      	ldr	r2, [pc, #604]	; (8002df8 <UART_SetConfig+0x2f8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d120      	bne.n	8002be2 <UART_SetConfig+0xe2>
 8002ba0:	4b96      	ldr	r3, [pc, #600]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d816      	bhi.n	8002bdc <UART_SetConfig+0xdc>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <UART_SetConfig+0xb4>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bd1 	.word	0x08002bd1
 8002bbc:	08002bcb 	.word	0x08002bcb
 8002bc0:	08002bd7 	.word	0x08002bd7
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	76fb      	strb	r3, [r7, #27]
 8002bc8:	e0e7      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	76fb      	strb	r3, [r7, #27]
 8002bce:	e0e4      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	76fb      	strb	r3, [r7, #27]
 8002bd4:	e0e1      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	76fb      	strb	r3, [r7, #27]
 8002bda:	e0de      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	76fb      	strb	r3, [r7, #27]
 8002be0:	e0db      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a86      	ldr	r2, [pc, #536]	; (8002e00 <UART_SetConfig+0x300>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d132      	bne.n	8002c52 <UART_SetConfig+0x152>
 8002bec:	4b83      	ldr	r3, [pc, #524]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d828      	bhi.n	8002c4c <UART_SetConfig+0x14c>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0x100>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c35 	.word	0x08002c35
 8002c04:	08002c4d 	.word	0x08002c4d
 8002c08:	08002c4d 	.word	0x08002c4d
 8002c0c:	08002c4d 	.word	0x08002c4d
 8002c10:	08002c41 	.word	0x08002c41
 8002c14:	08002c4d 	.word	0x08002c4d
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002c4d 	.word	0x08002c4d
 8002c20:	08002c3b 	.word	0x08002c3b
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c4d 	.word	0x08002c4d
 8002c2c:	08002c4d 	.word	0x08002c4d
 8002c30:	08002c47 	.word	0x08002c47
 8002c34:	2300      	movs	r3, #0
 8002c36:	76fb      	strb	r3, [r7, #27]
 8002c38:	e0af      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	76fb      	strb	r3, [r7, #27]
 8002c3e:	e0ac      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c40:	2304      	movs	r3, #4
 8002c42:	76fb      	strb	r3, [r7, #27]
 8002c44:	e0a9      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c46:	2308      	movs	r3, #8
 8002c48:	76fb      	strb	r3, [r7, #27]
 8002c4a:	e0a6      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	76fb      	strb	r3, [r7, #27]
 8002c50:	e0a3      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6b      	ldr	r2, [pc, #428]	; (8002e04 <UART_SetConfig+0x304>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d120      	bne.n	8002c9e <UART_SetConfig+0x19e>
 8002c5c:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c66:	2b30      	cmp	r3, #48	; 0x30
 8002c68:	d013      	beq.n	8002c92 <UART_SetConfig+0x192>
 8002c6a:	2b30      	cmp	r3, #48	; 0x30
 8002c6c:	d814      	bhi.n	8002c98 <UART_SetConfig+0x198>
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d009      	beq.n	8002c86 <UART_SetConfig+0x186>
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d810      	bhi.n	8002c98 <UART_SetConfig+0x198>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <UART_SetConfig+0x180>
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d006      	beq.n	8002c8c <UART_SetConfig+0x18c>
 8002c7e:	e00b      	b.n	8002c98 <UART_SetConfig+0x198>
 8002c80:	2300      	movs	r3, #0
 8002c82:	76fb      	strb	r3, [r7, #27]
 8002c84:	e089      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c86:	2302      	movs	r3, #2
 8002c88:	76fb      	strb	r3, [r7, #27]
 8002c8a:	e086      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	76fb      	strb	r3, [r7, #27]
 8002c90:	e083      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c92:	2308      	movs	r3, #8
 8002c94:	76fb      	strb	r3, [r7, #27]
 8002c96:	e080      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	76fb      	strb	r3, [r7, #27]
 8002c9c:	e07d      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a59      	ldr	r2, [pc, #356]	; (8002e08 <UART_SetConfig+0x308>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d120      	bne.n	8002cea <UART_SetConfig+0x1ea>
 8002ca8:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cb4:	d013      	beq.n	8002cde <UART_SetConfig+0x1de>
 8002cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002cb8:	d814      	bhi.n	8002ce4 <UART_SetConfig+0x1e4>
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d009      	beq.n	8002cd2 <UART_SetConfig+0x1d2>
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d810      	bhi.n	8002ce4 <UART_SetConfig+0x1e4>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <UART_SetConfig+0x1cc>
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d006      	beq.n	8002cd8 <UART_SetConfig+0x1d8>
 8002cca:	e00b      	b.n	8002ce4 <UART_SetConfig+0x1e4>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	76fb      	strb	r3, [r7, #27]
 8002cd0:	e063      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	76fb      	strb	r3, [r7, #27]
 8002cd6:	e060      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	76fb      	strb	r3, [r7, #27]
 8002cdc:	e05d      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	76fb      	strb	r3, [r7, #27]
 8002ce2:	e05a      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	76fb      	strb	r3, [r7, #27]
 8002ce8:	e057      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <UART_SetConfig+0x30c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d125      	bne.n	8002d40 <UART_SetConfig+0x240>
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d02:	d017      	beq.n	8002d34 <UART_SetConfig+0x234>
 8002d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d08:	d817      	bhi.n	8002d3a <UART_SetConfig+0x23a>
 8002d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0e:	d00b      	beq.n	8002d28 <UART_SetConfig+0x228>
 8002d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d14:	d811      	bhi.n	8002d3a <UART_SetConfig+0x23a>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <UART_SetConfig+0x222>
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d006      	beq.n	8002d2e <UART_SetConfig+0x22e>
 8002d20:	e00b      	b.n	8002d3a <UART_SetConfig+0x23a>
 8002d22:	2300      	movs	r3, #0
 8002d24:	76fb      	strb	r3, [r7, #27]
 8002d26:	e038      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	76fb      	strb	r3, [r7, #27]
 8002d2c:	e035      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	76fb      	strb	r3, [r7, #27]
 8002d32:	e032      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d34:	2308      	movs	r3, #8
 8002d36:	76fb      	strb	r3, [r7, #27]
 8002d38:	e02f      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	76fb      	strb	r3, [r7, #27]
 8002d3e:	e02c      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <UART_SetConfig+0x2f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d125      	bne.n	8002d96 <UART_SetConfig+0x296>
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <UART_SetConfig+0x2fc>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d58:	d017      	beq.n	8002d8a <UART_SetConfig+0x28a>
 8002d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d5e:	d817      	bhi.n	8002d90 <UART_SetConfig+0x290>
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d64:	d00b      	beq.n	8002d7e <UART_SetConfig+0x27e>
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6a:	d811      	bhi.n	8002d90 <UART_SetConfig+0x290>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <UART_SetConfig+0x278>
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d006      	beq.n	8002d84 <UART_SetConfig+0x284>
 8002d76:	e00b      	b.n	8002d90 <UART_SetConfig+0x290>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	76fb      	strb	r3, [r7, #27]
 8002d7c:	e00d      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	76fb      	strb	r3, [r7, #27]
 8002d82:	e00a      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d84:	2304      	movs	r3, #4
 8002d86:	76fb      	strb	r3, [r7, #27]
 8002d88:	e007      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	76fb      	strb	r3, [r7, #27]
 8002d8e:	e004      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d90:	2310      	movs	r3, #16
 8002d92:	76fb      	strb	r3, [r7, #27]
 8002d94:	e001      	b.n	8002d9a <UART_SetConfig+0x29a>
 8002d96:	2310      	movs	r3, #16
 8002d98:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <UART_SetConfig+0x2f4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	f040 809f 	bne.w	8002ee4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d837      	bhi.n	8002e1c <UART_SetConfig+0x31c>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <UART_SetConfig+0x2b4>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002e1d 	.word	0x08002e1d
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002e1d 	.word	0x08002e1d
 8002dc4:	08002de7 	.word	0x08002de7
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002e15 	.word	0x08002e15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff f854 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	6178      	str	r0, [r7, #20]
        break;
 8002dde:	e022      	b.n	8002e26 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <UART_SetConfig+0x310>)
 8002de2:	617b      	str	r3, [r7, #20]
        break;
 8002de4:	e01f      	b.n	8002e26 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de6:	f7fe ffdf 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002dea:	6178      	str	r0, [r7, #20]
        break;
 8002dec:	e01b      	b.n	8002e26 <UART_SetConfig+0x326>
 8002dee:	bf00      	nop
 8002df0:	cfff69f3 	.word	0xcfff69f3
 8002df4:	40008000 	.word	0x40008000
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40004400 	.word	0x40004400
 8002e04:	40004800 	.word	0x40004800
 8002e08:	40004c00 	.word	0x40004c00
 8002e0c:	40005000 	.word	0x40005000
 8002e10:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e18:	617b      	str	r3, [r7, #20]
        break;
 8002e1a:	e004      	b.n	8002e26 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	76bb      	strb	r3, [r7, #26]
        break;
 8002e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 811b 	beq.w	8003064 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	4a96      	ldr	r2, [pc, #600]	; (800308c <UART_SetConfig+0x58c>)
 8002e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d305      	bcc.n	8002e5e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d902      	bls.n	8002e64 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	76bb      	strb	r3, [r7, #26]
 8002e62:	e0ff      	b.n	8003064 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f04f 0100 	mov.w	r1, #0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	4a86      	ldr	r2, [pc, #536]	; (800308c <UART_SetConfig+0x58c>)
 8002e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f7fd fa20 	bl	80002c0 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	020b      	lsls	r3, r1, #8
 8002e92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e96:	0202      	lsls	r2, r0, #8
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6849      	ldr	r1, [r1, #4]
 8002e9c:	0849      	lsrs	r1, r1, #1
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	1814      	adds	r4, r2, r0
 8002ea6:	eb43 0501 	adc.w	r5, r3, r1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7fd fa02 	bl	80002c0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eca:	d308      	bcc.n	8002ede <UART_SetConfig+0x3de>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed2:	d204      	bcs.n	8002ede <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e0c2      	b.n	8003064 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	76bb      	strb	r3, [r7, #26]
 8002ee2:	e0bf      	b.n	8003064 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d165      	bne.n	8002fba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002eee:	7efb      	ldrb	r3, [r7, #27]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d828      	bhi.n	8002f46 <UART_SetConfig+0x446>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0x3fc>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f47 	.word	0x08002f47
 8002f0c:	08002f37 	.word	0x08002f37
 8002f10:	08002f47 	.word	0x08002f47
 8002f14:	08002f47 	.word	0x08002f47
 8002f18:	08002f47 	.word	0x08002f47
 8002f1c:	08002f3f 	.word	0x08002f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f20:	f7fe ffb0 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002f24:	6178      	str	r0, [r7, #20]
        break;
 8002f26:	e013      	b.n	8002f50 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7fe ffc2 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	6178      	str	r0, [r7, #20]
        break;
 8002f2e:	e00f      	b.n	8002f50 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f30:	4b57      	ldr	r3, [pc, #348]	; (8003090 <UART_SetConfig+0x590>)
 8002f32:	617b      	str	r3, [r7, #20]
        break;
 8002f34:	e00c      	b.n	8002f50 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f36:	f7fe ff37 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002f3a:	6178      	str	r0, [r7, #20]
        break;
 8002f3c:	e008      	b.n	8002f50 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f42:	617b      	str	r3, [r7, #20]
        break;
 8002f44:	e004      	b.n	8002f50 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	76bb      	strb	r3, [r7, #26]
        break;
 8002f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8086 	beq.w	8003064 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	; (800308c <UART_SetConfig+0x58c>)
 8002f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f62:	461a      	mov	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f6a:	005a      	lsls	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	d916      	bls.n	8002fb4 <UART_SetConfig+0x4b4>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d212      	bcs.n	8002fb4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f023 030f 	bic.w	r3, r3, #15
 8002f96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	89fb      	ldrh	r3, [r7, #14]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	89fa      	ldrh	r2, [r7, #14]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	e057      	b.n	8003064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	76bb      	strb	r3, [r7, #26]
 8002fb8:	e054      	b.n	8003064 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fba:	7efb      	ldrb	r3, [r7, #27]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d828      	bhi.n	8003012 <UART_SetConfig+0x512>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0x4c8>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002ffd 	.word	0x08002ffd
 8002fd4:	08003013 	.word	0x08003013
 8002fd8:	08003003 	.word	0x08003003
 8002fdc:	08003013 	.word	0x08003013
 8002fe0:	08003013 	.word	0x08003013
 8002fe4:	08003013 	.word	0x08003013
 8002fe8:	0800300b 	.word	0x0800300b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7fe ff4a 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	6178      	str	r0, [r7, #20]
        break;
 8002ff2:	e013      	b.n	800301c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7fe ff5c 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	6178      	str	r0, [r7, #20]
        break;
 8002ffa:	e00f      	b.n	800301c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <UART_SetConfig+0x590>)
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e00c      	b.n	800301c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7fe fed1 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8003006:	6178      	str	r0, [r7, #20]
        break;
 8003008:	e008      	b.n	800301c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300e:	617b      	str	r3, [r7, #20]
        break;
 8003010:	e004      	b.n	800301c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	76bb      	strb	r3, [r7, #26]
        break;
 800301a:	bf00      	nop
    }

    if (pclk != 0U)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <UART_SetConfig+0x58c>)
 8003028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302c:	461a      	mov	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fbb3 f2f2 	udiv	r2, r3, r2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	441a      	add	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	b29b      	uxth	r3, r3
 8003046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d908      	bls.n	8003060 <UART_SetConfig+0x560>
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d204      	bcs.n	8003060 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	e001      	b.n	8003064 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003080:	7ebb      	ldrb	r3, [r7, #26]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	bf00      	nop
 800308c:	08004cf0 	.word	0x08004cf0
 8003090:	00f42400 	.word	0x00f42400

08003094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003192:	d10a      	bne.n	80031aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e8:	f7fd fd3c 	bl	8000c64 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10e      	bne.n	800321a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f82f 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e025      	b.n	8003266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d10e      	bne.n	8003246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f819 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e00f      	b.n	8003266 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	e062      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d05e      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fd fcec 	bl	8000c64 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <UART_WaitOnFlagUntilTimeout+0x30>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e045      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02e      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d126      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003310:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d08d      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	d10e      	bne.n	80033c2 <UART_Start_Receive_IT+0x52>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <UART_Start_Receive_IT+0x48>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033b6:	e02d      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033c0:	e028      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <UART_Start_Receive_IT+0x76>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <UART_Start_Receive_IT+0x6c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033da:	e01b      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	227f      	movs	r2, #127	; 0x7f
 80033e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033e4:	e016      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ee:	d10d      	bne.n	800340c <UART_Start_Receive_IT+0x9c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <UART_Start_Receive_IT+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	227f      	movs	r2, #127	; 0x7f
 80033fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003400:	e008      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	223f      	movs	r2, #63	; 0x3f
 8003406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800340a:	e003      	b.n	8003414 <UART_Start_Receive_IT+0xa4>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2222      	movs	r2, #34	; 0x22
 8003420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343c:	d12a      	bne.n	8003494 <UART_Start_Receive_IT+0x124>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	429a      	cmp	r2, r3
 8003448:	d324      	bcc.n	8003494 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d107      	bne.n	8003464 <UART_Start_Receive_IT+0xf4>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <UART_Start_Receive_IT+0x16c>)
 8003460:	671a      	str	r2, [r3, #112]	; 0x70
 8003462:	e002      	b.n	800346a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <UART_Start_Receive_IT+0x170>)
 8003468:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003480:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	e01b      	b.n	80034cc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d107      	bne.n	80034ae <UART_Start_Receive_IT+0x13e>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <UART_Start_Receive_IT+0x174>)
 80034aa:	671a      	str	r2, [r3, #112]	; 0x70
 80034ac:	e002      	b.n	80034b4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <UART_Start_Receive_IT+0x178>)
 80034b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80034ca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	08003965 	.word	0x08003965
 80034e0:	08003761 	.word	0x08003761
 80034e4:	08003689 	.word	0x08003689
 80034e8:	080035b1 	.word	0x080035b1

080034ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003502:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fab0 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fa8c 	bl	8002ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80035be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	2b22      	cmp	r3, #34	; 0x22
 80035c8:	d152      	bne.n	8003670 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035d2:	89bb      	ldrh	r3, [r7, #12]
 80035d4:	b2d9      	uxtb	r1, r3
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	400a      	ands	r2, r1
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d139      	bne.n	8003680 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800361a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d10f      	bne.n	8003662 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0210 	bic.w	r2, r2, #16
 8003650:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fa44 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
 8003660:	e002      	b.n	8003668 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fa52 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800366e:	e007      	b.n	8003680 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003696:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	d152      	bne.n	8003748 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80036b0:	89ba      	ldrh	r2, [r7, #12]
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d139      	bne.n	8003758 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10f      	bne.n	800373a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0210 	bic.w	r2, r2, #16
 8003728:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff f9d8 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
 8003738:	e002      	b.n	8003740 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd f9e6 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003746:	e007      	b.n	8003758 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0208 	orr.w	r2, r2, #8
 8003756:	619a      	str	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800376e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	2b22      	cmp	r3, #34	; 0x22
 8003790:	f040 80da 	bne.w	8003948 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800379a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800379c:	e0aa      	b.n	80038f4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037a6:	89bb      	ldrh	r3, [r7, #12]
 80037a8:	b2d9      	uxtb	r1, r3
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	400a      	ands	r2, r1
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d04d      	beq.n	8003882 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <UART_RxISR_8BIT_FIFOEN+0xde>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2204      	movs	r2, #4
 8003858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d006      	beq.n	8003882 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff f92d 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d132      	bne.n	80038f4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10f      	bne.n	80038e8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0210 	bic.w	r2, r2, #16
 80038d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff f901 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
 80038e6:	e002      	b.n	80038ee <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fd f90f 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038f4:	89fb      	ldrh	r3, [r7, #14]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af4c 	bne.w	800379e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800390c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d021      	beq.n	8003958 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800391a:	897a      	ldrh	r2, [r7, #10]
 800391c:	429a      	cmp	r2, r3
 800391e:	d21b      	bcs.n	8003958 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800392e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8003934:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0220 	orr.w	r2, r2, #32
 8003944:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003946:	e007      	b.n	8003958 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0208 	orr.w	r2, r2, #8
 8003956:	619a      	str	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	080035b1 	.word	0x080035b1

08003964 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003972:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	f040 80da 	bne.w	8003b4c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800399e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80039a0:	e0aa      	b.n	8003af8 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80039b0:	8aba      	ldrh	r2, [r7, #20]
 80039b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04d      	beq.n	8003a86 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d010      	beq.n	8003a42 <UART_RxISR_16BIT_FIFOEN+0xde>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a64:	f043 0202 	orr.w	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff f82b 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d132      	bne.n	8003af8 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10f      	bne.n	8003aec <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0210 	bic.w	r2, r2, #16
 8003ada:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fe ffff 	bl	8002ae8 <HAL_UARTEx_RxEventCallback>
 8003aea:	e002      	b.n	8003af2 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fd f80d 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003af8:	8afb      	ldrh	r3, [r7, #22]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af4c 	bne.w	80039a2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b10:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003b12:	89fb      	ldrh	r3, [r7, #14]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d021      	beq.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b1e:	89fa      	ldrh	r2, [r7, #14]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d21b      	bcs.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b32:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8003b38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0220 	orr.w	r2, r2, #32
 8003b48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b4a:	e007      	b.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	619a      	str	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08003689 	.word	0x08003689

08003b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_UARTEx_DisableFifoMode+0x16>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e027      	b.n	8003c0a <HAL_UARTEx_DisableFifoMode+0x66>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2224      	movs	r2, #36	; 0x24
 8003bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003be8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e02d      	b.n	8003c8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f850 	bl	8003d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e02d      	b.n	8003d06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	; 0x24
 8003cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f812 	bl	8003d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d30:	e031      	b.n	8003d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d32:	2308      	movs	r3, #8
 8003d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d36:	2308      	movs	r3, #8
 8003d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	0e5b      	lsrs	r3, r3, #25
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	0f5b      	lsrs	r3, r3, #29
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	7b3a      	ldrb	r2, [r7, #12]
 8003d5e:	4911      	ldr	r1, [pc, #68]	; (8003da4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d60:	5c8a      	ldrb	r2, [r1, r2]
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d66:	7b3a      	ldrb	r2, [r7, #12]
 8003d68:	490f      	ldr	r1, [pc, #60]	; (8003da8 <UARTEx_SetNbDataToProcess+0x98>)
 8003d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	7b7a      	ldrb	r2, [r7, #13]
 8003d7c:	4909      	ldr	r1, [pc, #36]	; (8003da4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d7e:	5c8a      	ldrb	r2, [r1, r2]
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d84:	7b7a      	ldrb	r2, [r7, #13]
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <UARTEx_SetNbDataToProcess+0x98>)
 8003d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	08004d08 	.word	0x08004d08
 8003da8:	08004d10 	.word	0x08004d10

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000014 	.word	0x20000014

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	; (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	; (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 ff76 	bl	8004cbc <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004db8 	.word	0x08004db8
 8003df4:	08004db8 	.word	0x08004db8
 8003df8:	08004db8 	.word	0x08004db8
 8003dfc:	08004dbc 	.word	0x08004dbc

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <iprintf>:
 8003e10:	b40f      	push	{r0, r1, r2, r3}
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <iprintf+0x2c>)
 8003e14:	b513      	push	{r0, r1, r4, lr}
 8003e16:	681c      	ldr	r4, [r3, #0]
 8003e18:	b124      	cbz	r4, 8003e24 <iprintf+0x14>
 8003e1a:	69a3      	ldr	r3, [r4, #24]
 8003e1c:	b913      	cbnz	r3, 8003e24 <iprintf+0x14>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f000 f866 	bl	8003ef0 <__sinit>
 8003e24:	ab05      	add	r3, sp, #20
 8003e26:	9a04      	ldr	r2, [sp, #16]
 8003e28:	68a1      	ldr	r1, [r4, #8]
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 f983 	bl	8004138 <_vfiprintf_r>
 8003e32:	b002      	add	sp, #8
 8003e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e38:	b004      	add	sp, #16
 8003e3a:	4770      	bx	lr
 8003e3c:	20000014 	.word	0x20000014

08003e40 <std>:
 8003e40:	2300      	movs	r3, #0
 8003e42:	b510      	push	{r4, lr}
 8003e44:	4604      	mov	r4, r0
 8003e46:	e9c0 3300 	strd	r3, r3, [r0]
 8003e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e4e:	6083      	str	r3, [r0, #8]
 8003e50:	8181      	strh	r1, [r0, #12]
 8003e52:	6643      	str	r3, [r0, #100]	; 0x64
 8003e54:	81c2      	strh	r2, [r0, #14]
 8003e56:	6183      	str	r3, [r0, #24]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	305c      	adds	r0, #92	; 0x5c
 8003e5e:	f7ff ffcf 	bl	8003e00 <memset>
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <std+0x38>)
 8003e64:	6263      	str	r3, [r4, #36]	; 0x24
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <std+0x3c>)
 8003e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <std+0x40>)
 8003e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <std+0x44>)
 8003e70:	6224      	str	r4, [r4, #32]
 8003e72:	6323      	str	r3, [r4, #48]	; 0x30
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	bf00      	nop
 8003e78:	080046e1 	.word	0x080046e1
 8003e7c:	08004703 	.word	0x08004703
 8003e80:	0800473b 	.word	0x0800473b
 8003e84:	0800475f 	.word	0x0800475f

08003e88 <_cleanup_r>:
 8003e88:	4901      	ldr	r1, [pc, #4]	; (8003e90 <_cleanup_r+0x8>)
 8003e8a:	f000 b8af 	b.w	8003fec <_fwalk_reent>
 8003e8e:	bf00      	nop
 8003e90:	08004a39 	.word	0x08004a39

08003e94 <__sfmoreglue>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	1e4a      	subs	r2, r1, #1
 8003e98:	2568      	movs	r5, #104	; 0x68
 8003e9a:	4355      	muls	r5, r2
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ea2:	f000 f8c5 	bl	8004030 <_malloc_r>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	b140      	cbz	r0, 8003ebc <__sfmoreglue+0x28>
 8003eaa:	2100      	movs	r1, #0
 8003eac:	e9c0 1600 	strd	r1, r6, [r0]
 8003eb0:	300c      	adds	r0, #12
 8003eb2:	60a0      	str	r0, [r4, #8]
 8003eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003eb8:	f7ff ffa2 	bl	8003e00 <memset>
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}

08003ec0 <__sfp_lock_acquire>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__sfp_lock_acquire+0x8>)
 8003ec2:	f000 b8b3 	b.w	800402c <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	2000013c 	.word	0x2000013c

08003ecc <__sfp_lock_release>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__sfp_lock_release+0x8>)
 8003ece:	f000 b8ae 	b.w	800402e <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	2000013c 	.word	0x2000013c

08003ed8 <__sinit_lock_acquire>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__sinit_lock_acquire+0x8>)
 8003eda:	f000 b8a7 	b.w	800402c <__retarget_lock_acquire_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000137 	.word	0x20000137

08003ee4 <__sinit_lock_release>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__sinit_lock_release+0x8>)
 8003ee6:	f000 b8a2 	b.w	800402e <__retarget_lock_release_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000137 	.word	0x20000137

08003ef0 <__sinit>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	f7ff fff0 	bl	8003ed8 <__sinit_lock_acquire>
 8003ef8:	69a3      	ldr	r3, [r4, #24]
 8003efa:	b11b      	cbz	r3, 8003f04 <__sinit+0x14>
 8003efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f00:	f7ff bff0 	b.w	8003ee4 <__sinit_lock_release>
 8003f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f08:	6523      	str	r3, [r4, #80]	; 0x50
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <__sinit+0x68>)
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <__sinit+0x6c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f12:	42a3      	cmp	r3, r4
 8003f14:	bf04      	itt	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	61a3      	streq	r3, [r4, #24]
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f000 f820 	bl	8003f60 <__sfp>
 8003f20:	6060      	str	r0, [r4, #4]
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 f81c 	bl	8003f60 <__sfp>
 8003f28:	60a0      	str	r0, [r4, #8]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 f818 	bl	8003f60 <__sfp>
 8003f30:	2200      	movs	r2, #0
 8003f32:	60e0      	str	r0, [r4, #12]
 8003f34:	2104      	movs	r1, #4
 8003f36:	6860      	ldr	r0, [r4, #4]
 8003f38:	f7ff ff82 	bl	8003e40 <std>
 8003f3c:	68a0      	ldr	r0, [r4, #8]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2109      	movs	r1, #9
 8003f42:	f7ff ff7d 	bl	8003e40 <std>
 8003f46:	68e0      	ldr	r0, [r4, #12]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	2112      	movs	r1, #18
 8003f4c:	f7ff ff78 	bl	8003e40 <std>
 8003f50:	2301      	movs	r3, #1
 8003f52:	61a3      	str	r3, [r4, #24]
 8003f54:	e7d2      	b.n	8003efc <__sinit+0xc>
 8003f56:	bf00      	nop
 8003f58:	08004d18 	.word	0x08004d18
 8003f5c:	08003e89 	.word	0x08003e89

08003f60 <__sfp>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	4607      	mov	r7, r0
 8003f64:	f7ff ffac 	bl	8003ec0 <__sfp_lock_acquire>
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <__sfp+0x84>)
 8003f6a:	681e      	ldr	r6, [r3, #0]
 8003f6c:	69b3      	ldr	r3, [r6, #24]
 8003f6e:	b913      	cbnz	r3, 8003f76 <__sfp+0x16>
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ffbd 	bl	8003ef0 <__sinit>
 8003f76:	3648      	adds	r6, #72	; 0x48
 8003f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	d503      	bpl.n	8003f88 <__sfp+0x28>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	b30b      	cbz	r3, 8003fc8 <__sfp+0x68>
 8003f84:	6836      	ldr	r6, [r6, #0]
 8003f86:	e7f7      	b.n	8003f78 <__sfp+0x18>
 8003f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f8c:	b9d5      	cbnz	r5, 8003fc4 <__sfp+0x64>
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <__sfp+0x88>)
 8003f90:	60e3      	str	r3, [r4, #12]
 8003f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f96:	6665      	str	r5, [r4, #100]	; 0x64
 8003f98:	f000 f847 	bl	800402a <__retarget_lock_init_recursive>
 8003f9c:	f7ff ff96 	bl	8003ecc <__sfp_lock_release>
 8003fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fa8:	6025      	str	r5, [r4, #0]
 8003faa:	61a5      	str	r5, [r4, #24]
 8003fac:	2208      	movs	r2, #8
 8003fae:	4629      	mov	r1, r5
 8003fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fb4:	f7ff ff24 	bl	8003e00 <memset>
 8003fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc4:	3468      	adds	r4, #104	; 0x68
 8003fc6:	e7d9      	b.n	8003f7c <__sfp+0x1c>
 8003fc8:	2104      	movs	r1, #4
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ff62 	bl	8003e94 <__sfmoreglue>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	6030      	str	r0, [r6, #0]
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d1d5      	bne.n	8003f84 <__sfp+0x24>
 8003fd8:	f7ff ff78 	bl	8003ecc <__sfp_lock_release>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	e7ee      	b.n	8003fc0 <__sfp+0x60>
 8003fe2:	bf00      	nop
 8003fe4:	08004d18 	.word	0x08004d18
 8003fe8:	ffff0001 	.word	0xffff0001

08003fec <_fwalk_reent>:
 8003fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	4688      	mov	r8, r1
 8003ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ff8:	2700      	movs	r7, #0
 8003ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8004002:	d505      	bpl.n	8004010 <_fwalk_reent+0x24>
 8004004:	6824      	ldr	r4, [r4, #0]
 8004006:	2c00      	cmp	r4, #0
 8004008:	d1f7      	bne.n	8003ffa <_fwalk_reent+0xe>
 800400a:	4638      	mov	r0, r7
 800400c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004010:	89ab      	ldrh	r3, [r5, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d907      	bls.n	8004026 <_fwalk_reent+0x3a>
 8004016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800401a:	3301      	adds	r3, #1
 800401c:	d003      	beq.n	8004026 <_fwalk_reent+0x3a>
 800401e:	4629      	mov	r1, r5
 8004020:	4630      	mov	r0, r6
 8004022:	47c0      	blx	r8
 8004024:	4307      	orrs	r7, r0
 8004026:	3568      	adds	r5, #104	; 0x68
 8004028:	e7e9      	b.n	8003ffe <_fwalk_reent+0x12>

0800402a <__retarget_lock_init_recursive>:
 800402a:	4770      	bx	lr

0800402c <__retarget_lock_acquire_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_release_recursive>:
 800402e:	4770      	bx	lr

08004030 <_malloc_r>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	1ccd      	adds	r5, r1, #3
 8004034:	f025 0503 	bic.w	r5, r5, #3
 8004038:	3508      	adds	r5, #8
 800403a:	2d0c      	cmp	r5, #12
 800403c:	bf38      	it	cc
 800403e:	250c      	movcc	r5, #12
 8004040:	2d00      	cmp	r5, #0
 8004042:	4606      	mov	r6, r0
 8004044:	db01      	blt.n	800404a <_malloc_r+0x1a>
 8004046:	42a9      	cmp	r1, r5
 8004048:	d903      	bls.n	8004052 <_malloc_r+0x22>
 800404a:	230c      	movs	r3, #12
 800404c:	6033      	str	r3, [r6, #0]
 800404e:	2000      	movs	r0, #0
 8004050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004052:	f000 fda3 	bl	8004b9c <__malloc_lock>
 8004056:	4921      	ldr	r1, [pc, #132]	; (80040dc <_malloc_r+0xac>)
 8004058:	680a      	ldr	r2, [r1, #0]
 800405a:	4614      	mov	r4, r2
 800405c:	b99c      	cbnz	r4, 8004086 <_malloc_r+0x56>
 800405e:	4f20      	ldr	r7, [pc, #128]	; (80040e0 <_malloc_r+0xb0>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b923      	cbnz	r3, 800406e <_malloc_r+0x3e>
 8004064:	4621      	mov	r1, r4
 8004066:	4630      	mov	r0, r6
 8004068:	f000 fb2a 	bl	80046c0 <_sbrk_r>
 800406c:	6038      	str	r0, [r7, #0]
 800406e:	4629      	mov	r1, r5
 8004070:	4630      	mov	r0, r6
 8004072:	f000 fb25 	bl	80046c0 <_sbrk_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d123      	bne.n	80040c2 <_malloc_r+0x92>
 800407a:	230c      	movs	r3, #12
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	4630      	mov	r0, r6
 8004080:	f000 fd92 	bl	8004ba8 <__malloc_unlock>
 8004084:	e7e3      	b.n	800404e <_malloc_r+0x1e>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	1b5b      	subs	r3, r3, r5
 800408a:	d417      	bmi.n	80040bc <_malloc_r+0x8c>
 800408c:	2b0b      	cmp	r3, #11
 800408e:	d903      	bls.n	8004098 <_malloc_r+0x68>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	441c      	add	r4, r3
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	e004      	b.n	80040a2 <_malloc_r+0x72>
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	42a2      	cmp	r2, r4
 800409c:	bf0c      	ite	eq
 800409e:	600b      	streq	r3, [r1, #0]
 80040a0:	6053      	strne	r3, [r2, #4]
 80040a2:	4630      	mov	r0, r6
 80040a4:	f000 fd80 	bl	8004ba8 <__malloc_unlock>
 80040a8:	f104 000b 	add.w	r0, r4, #11
 80040ac:	1d23      	adds	r3, r4, #4
 80040ae:	f020 0007 	bic.w	r0, r0, #7
 80040b2:	1ac2      	subs	r2, r0, r3
 80040b4:	d0cc      	beq.n	8004050 <_malloc_r+0x20>
 80040b6:	1a1b      	subs	r3, r3, r0
 80040b8:	50a3      	str	r3, [r4, r2]
 80040ba:	e7c9      	b.n	8004050 <_malloc_r+0x20>
 80040bc:	4622      	mov	r2, r4
 80040be:	6864      	ldr	r4, [r4, #4]
 80040c0:	e7cc      	b.n	800405c <_malloc_r+0x2c>
 80040c2:	1cc4      	adds	r4, r0, #3
 80040c4:	f024 0403 	bic.w	r4, r4, #3
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d0e3      	beq.n	8004094 <_malloc_r+0x64>
 80040cc:	1a21      	subs	r1, r4, r0
 80040ce:	4630      	mov	r0, r6
 80040d0:	f000 faf6 	bl	80046c0 <_sbrk_r>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d1dd      	bne.n	8004094 <_malloc_r+0x64>
 80040d8:	e7cf      	b.n	800407a <_malloc_r+0x4a>
 80040da:	bf00      	nop
 80040dc:	20000098 	.word	0x20000098
 80040e0:	2000009c 	.word	0x2000009c

080040e4 <__sfputc_r>:
 80040e4:	6893      	ldr	r3, [r2, #8]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	b410      	push	{r4}
 80040ec:	6093      	str	r3, [r2, #8]
 80040ee:	da08      	bge.n	8004102 <__sfputc_r+0x1e>
 80040f0:	6994      	ldr	r4, [r2, #24]
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	db01      	blt.n	80040fa <__sfputc_r+0x16>
 80040f6:	290a      	cmp	r1, #10
 80040f8:	d103      	bne.n	8004102 <__sfputc_r+0x1e>
 80040fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040fe:	f000 bb33 	b.w	8004768 <__swbuf_r>
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	1c58      	adds	r0, r3, #1
 8004106:	6010      	str	r0, [r2, #0]
 8004108:	7019      	strb	r1, [r3, #0]
 800410a:	4608      	mov	r0, r1
 800410c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004110:	4770      	bx	lr

08004112 <__sfputs_r>:
 8004112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004114:	4606      	mov	r6, r0
 8004116:	460f      	mov	r7, r1
 8004118:	4614      	mov	r4, r2
 800411a:	18d5      	adds	r5, r2, r3
 800411c:	42ac      	cmp	r4, r5
 800411e:	d101      	bne.n	8004124 <__sfputs_r+0x12>
 8004120:	2000      	movs	r0, #0
 8004122:	e007      	b.n	8004134 <__sfputs_r+0x22>
 8004124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004128:	463a      	mov	r2, r7
 800412a:	4630      	mov	r0, r6
 800412c:	f7ff ffda 	bl	80040e4 <__sfputc_r>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d1f3      	bne.n	800411c <__sfputs_r+0xa>
 8004134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004138 <_vfiprintf_r>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	460d      	mov	r5, r1
 800413e:	b09d      	sub	sp, #116	; 0x74
 8004140:	4614      	mov	r4, r2
 8004142:	4698      	mov	r8, r3
 8004144:	4606      	mov	r6, r0
 8004146:	b118      	cbz	r0, 8004150 <_vfiprintf_r+0x18>
 8004148:	6983      	ldr	r3, [r0, #24]
 800414a:	b90b      	cbnz	r3, 8004150 <_vfiprintf_r+0x18>
 800414c:	f7ff fed0 	bl	8003ef0 <__sinit>
 8004150:	4b89      	ldr	r3, [pc, #548]	; (8004378 <_vfiprintf_r+0x240>)
 8004152:	429d      	cmp	r5, r3
 8004154:	d11b      	bne.n	800418e <_vfiprintf_r+0x56>
 8004156:	6875      	ldr	r5, [r6, #4]
 8004158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415a:	07d9      	lsls	r1, r3, #31
 800415c:	d405      	bmi.n	800416a <_vfiprintf_r+0x32>
 800415e:	89ab      	ldrh	r3, [r5, #12]
 8004160:	059a      	lsls	r2, r3, #22
 8004162:	d402      	bmi.n	800416a <_vfiprintf_r+0x32>
 8004164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004166:	f7ff ff61 	bl	800402c <__retarget_lock_acquire_recursive>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	d501      	bpl.n	8004174 <_vfiprintf_r+0x3c>
 8004170:	692b      	ldr	r3, [r5, #16]
 8004172:	b9eb      	cbnz	r3, 80041b0 <_vfiprintf_r+0x78>
 8004174:	4629      	mov	r1, r5
 8004176:	4630      	mov	r0, r6
 8004178:	f000 fb5a 	bl	8004830 <__swsetup_r>
 800417c:	b1c0      	cbz	r0, 80041b0 <_vfiprintf_r+0x78>
 800417e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004180:	07dc      	lsls	r4, r3, #31
 8004182:	d50e      	bpl.n	80041a2 <_vfiprintf_r+0x6a>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b01d      	add	sp, #116	; 0x74
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	4b7b      	ldr	r3, [pc, #492]	; (800437c <_vfiprintf_r+0x244>)
 8004190:	429d      	cmp	r5, r3
 8004192:	d101      	bne.n	8004198 <_vfiprintf_r+0x60>
 8004194:	68b5      	ldr	r5, [r6, #8]
 8004196:	e7df      	b.n	8004158 <_vfiprintf_r+0x20>
 8004198:	4b79      	ldr	r3, [pc, #484]	; (8004380 <_vfiprintf_r+0x248>)
 800419a:	429d      	cmp	r5, r3
 800419c:	bf08      	it	eq
 800419e:	68f5      	ldreq	r5, [r6, #12]
 80041a0:	e7da      	b.n	8004158 <_vfiprintf_r+0x20>
 80041a2:	89ab      	ldrh	r3, [r5, #12]
 80041a4:	0598      	lsls	r0, r3, #22
 80041a6:	d4ed      	bmi.n	8004184 <_vfiprintf_r+0x4c>
 80041a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041aa:	f7ff ff40 	bl	800402e <__retarget_lock_release_recursive>
 80041ae:	e7e9      	b.n	8004184 <_vfiprintf_r+0x4c>
 80041b0:	2300      	movs	r3, #0
 80041b2:	9309      	str	r3, [sp, #36]	; 0x24
 80041b4:	2320      	movs	r3, #32
 80041b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80041be:	2330      	movs	r3, #48	; 0x30
 80041c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004384 <_vfiprintf_r+0x24c>
 80041c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c8:	f04f 0901 	mov.w	r9, #1
 80041cc:	4623      	mov	r3, r4
 80041ce:	469a      	mov	sl, r3
 80041d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d4:	b10a      	cbz	r2, 80041da <_vfiprintf_r+0xa2>
 80041d6:	2a25      	cmp	r2, #37	; 0x25
 80041d8:	d1f9      	bne.n	80041ce <_vfiprintf_r+0x96>
 80041da:	ebba 0b04 	subs.w	fp, sl, r4
 80041de:	d00b      	beq.n	80041f8 <_vfiprintf_r+0xc0>
 80041e0:	465b      	mov	r3, fp
 80041e2:	4622      	mov	r2, r4
 80041e4:	4629      	mov	r1, r5
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff ff93 	bl	8004112 <__sfputs_r>
 80041ec:	3001      	adds	r0, #1
 80041ee:	f000 80aa 	beq.w	8004346 <_vfiprintf_r+0x20e>
 80041f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f4:	445a      	add	r2, fp
 80041f6:	9209      	str	r2, [sp, #36]	; 0x24
 80041f8:	f89a 3000 	ldrb.w	r3, [sl]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a2 	beq.w	8004346 <_vfiprintf_r+0x20e>
 8004202:	2300      	movs	r3, #0
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420c:	f10a 0a01 	add.w	sl, sl, #1
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	9307      	str	r3, [sp, #28]
 8004214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004218:	931a      	str	r3, [sp, #104]	; 0x68
 800421a:	4654      	mov	r4, sl
 800421c:	2205      	movs	r2, #5
 800421e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004222:	4858      	ldr	r0, [pc, #352]	; (8004384 <_vfiprintf_r+0x24c>)
 8004224:	f7fb fffc 	bl	8000220 <memchr>
 8004228:	9a04      	ldr	r2, [sp, #16]
 800422a:	b9d8      	cbnz	r0, 8004264 <_vfiprintf_r+0x12c>
 800422c:	06d1      	lsls	r1, r2, #27
 800422e:	bf44      	itt	mi
 8004230:	2320      	movmi	r3, #32
 8004232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004236:	0713      	lsls	r3, r2, #28
 8004238:	bf44      	itt	mi
 800423a:	232b      	movmi	r3, #43	; 0x2b
 800423c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004240:	f89a 3000 	ldrb.w	r3, [sl]
 8004244:	2b2a      	cmp	r3, #42	; 0x2a
 8004246:	d015      	beq.n	8004274 <_vfiprintf_r+0x13c>
 8004248:	9a07      	ldr	r2, [sp, #28]
 800424a:	4654      	mov	r4, sl
 800424c:	2000      	movs	r0, #0
 800424e:	f04f 0c0a 	mov.w	ip, #10
 8004252:	4621      	mov	r1, r4
 8004254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004258:	3b30      	subs	r3, #48	; 0x30
 800425a:	2b09      	cmp	r3, #9
 800425c:	d94e      	bls.n	80042fc <_vfiprintf_r+0x1c4>
 800425e:	b1b0      	cbz	r0, 800428e <_vfiprintf_r+0x156>
 8004260:	9207      	str	r2, [sp, #28]
 8004262:	e014      	b.n	800428e <_vfiprintf_r+0x156>
 8004264:	eba0 0308 	sub.w	r3, r0, r8
 8004268:	fa09 f303 	lsl.w	r3, r9, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	46a2      	mov	sl, r4
 8004272:	e7d2      	b.n	800421a <_vfiprintf_r+0xe2>
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	1d19      	adds	r1, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	9103      	str	r1, [sp, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfbb      	ittet	lt
 8004280:	425b      	neglt	r3, r3
 8004282:	f042 0202 	orrlt.w	r2, r2, #2
 8004286:	9307      	strge	r3, [sp, #28]
 8004288:	9307      	strlt	r3, [sp, #28]
 800428a:	bfb8      	it	lt
 800428c:	9204      	strlt	r2, [sp, #16]
 800428e:	7823      	ldrb	r3, [r4, #0]
 8004290:	2b2e      	cmp	r3, #46	; 0x2e
 8004292:	d10c      	bne.n	80042ae <_vfiprintf_r+0x176>
 8004294:	7863      	ldrb	r3, [r4, #1]
 8004296:	2b2a      	cmp	r3, #42	; 0x2a
 8004298:	d135      	bne.n	8004306 <_vfiprintf_r+0x1ce>
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	1d1a      	adds	r2, r3, #4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	9203      	str	r2, [sp, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfb8      	it	lt
 80042a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042aa:	3402      	adds	r4, #2
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004394 <_vfiprintf_r+0x25c>
 80042b2:	7821      	ldrb	r1, [r4, #0]
 80042b4:	2203      	movs	r2, #3
 80042b6:	4650      	mov	r0, sl
 80042b8:	f7fb ffb2 	bl	8000220 <memchr>
 80042bc:	b140      	cbz	r0, 80042d0 <_vfiprintf_r+0x198>
 80042be:	2340      	movs	r3, #64	; 0x40
 80042c0:	eba0 000a 	sub.w	r0, r0, sl
 80042c4:	fa03 f000 	lsl.w	r0, r3, r0
 80042c8:	9b04      	ldr	r3, [sp, #16]
 80042ca:	4303      	orrs	r3, r0
 80042cc:	3401      	adds	r4, #1
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d4:	482c      	ldr	r0, [pc, #176]	; (8004388 <_vfiprintf_r+0x250>)
 80042d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042da:	2206      	movs	r2, #6
 80042dc:	f7fb ffa0 	bl	8000220 <memchr>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d03f      	beq.n	8004364 <_vfiprintf_r+0x22c>
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <_vfiprintf_r+0x254>)
 80042e6:	bb1b      	cbnz	r3, 8004330 <_vfiprintf_r+0x1f8>
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	3307      	adds	r3, #7
 80042ec:	f023 0307 	bic.w	r3, r3, #7
 80042f0:	3308      	adds	r3, #8
 80042f2:	9303      	str	r3, [sp, #12]
 80042f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f6:	443b      	add	r3, r7
 80042f8:	9309      	str	r3, [sp, #36]	; 0x24
 80042fa:	e767      	b.n	80041cc <_vfiprintf_r+0x94>
 80042fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004300:	460c      	mov	r4, r1
 8004302:	2001      	movs	r0, #1
 8004304:	e7a5      	b.n	8004252 <_vfiprintf_r+0x11a>
 8004306:	2300      	movs	r3, #0
 8004308:	3401      	adds	r4, #1
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	4619      	mov	r1, r3
 800430e:	f04f 0c0a 	mov.w	ip, #10
 8004312:	4620      	mov	r0, r4
 8004314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004318:	3a30      	subs	r2, #48	; 0x30
 800431a:	2a09      	cmp	r2, #9
 800431c:	d903      	bls.n	8004326 <_vfiprintf_r+0x1ee>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0c5      	beq.n	80042ae <_vfiprintf_r+0x176>
 8004322:	9105      	str	r1, [sp, #20]
 8004324:	e7c3      	b.n	80042ae <_vfiprintf_r+0x176>
 8004326:	fb0c 2101 	mla	r1, ip, r1, r2
 800432a:	4604      	mov	r4, r0
 800432c:	2301      	movs	r3, #1
 800432e:	e7f0      	b.n	8004312 <_vfiprintf_r+0x1da>
 8004330:	ab03      	add	r3, sp, #12
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	462a      	mov	r2, r5
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <_vfiprintf_r+0x258>)
 8004338:	a904      	add	r1, sp, #16
 800433a:	4630      	mov	r0, r6
 800433c:	f3af 8000 	nop.w
 8004340:	4607      	mov	r7, r0
 8004342:	1c78      	adds	r0, r7, #1
 8004344:	d1d6      	bne.n	80042f4 <_vfiprintf_r+0x1bc>
 8004346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004348:	07d9      	lsls	r1, r3, #31
 800434a:	d405      	bmi.n	8004358 <_vfiprintf_r+0x220>
 800434c:	89ab      	ldrh	r3, [r5, #12]
 800434e:	059a      	lsls	r2, r3, #22
 8004350:	d402      	bmi.n	8004358 <_vfiprintf_r+0x220>
 8004352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004354:	f7ff fe6b 	bl	800402e <__retarget_lock_release_recursive>
 8004358:	89ab      	ldrh	r3, [r5, #12]
 800435a:	065b      	lsls	r3, r3, #25
 800435c:	f53f af12 	bmi.w	8004184 <_vfiprintf_r+0x4c>
 8004360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004362:	e711      	b.n	8004188 <_vfiprintf_r+0x50>
 8004364:	ab03      	add	r3, sp, #12
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	462a      	mov	r2, r5
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <_vfiprintf_r+0x258>)
 800436c:	a904      	add	r1, sp, #16
 800436e:	4630      	mov	r0, r6
 8004370:	f000 f880 	bl	8004474 <_printf_i>
 8004374:	e7e4      	b.n	8004340 <_vfiprintf_r+0x208>
 8004376:	bf00      	nop
 8004378:	08004d3c 	.word	0x08004d3c
 800437c:	08004d5c 	.word	0x08004d5c
 8004380:	08004d1c 	.word	0x08004d1c
 8004384:	08004d7c 	.word	0x08004d7c
 8004388:	08004d86 	.word	0x08004d86
 800438c:	00000000 	.word	0x00000000
 8004390:	08004113 	.word	0x08004113
 8004394:	08004d82 	.word	0x08004d82

08004398 <_printf_common>:
 8004398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	4616      	mov	r6, r2
 800439e:	4699      	mov	r9, r3
 80043a0:	688a      	ldr	r2, [r1, #8]
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bfb8      	it	lt
 80043ac:	4613      	movlt	r3, r2
 80043ae:	6033      	str	r3, [r6, #0]
 80043b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b4:	4607      	mov	r7, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	b10a      	cbz	r2, 80043be <_printf_common+0x26>
 80043ba:	3301      	adds	r3, #1
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	0699      	lsls	r1, r3, #26
 80043c2:	bf42      	ittt	mi
 80043c4:	6833      	ldrmi	r3, [r6, #0]
 80043c6:	3302      	addmi	r3, #2
 80043c8:	6033      	strmi	r3, [r6, #0]
 80043ca:	6825      	ldr	r5, [r4, #0]
 80043cc:	f015 0506 	ands.w	r5, r5, #6
 80043d0:	d106      	bne.n	80043e0 <_printf_common+0x48>
 80043d2:	f104 0a19 	add.w	sl, r4, #25
 80043d6:	68e3      	ldr	r3, [r4, #12]
 80043d8:	6832      	ldr	r2, [r6, #0]
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	42ab      	cmp	r3, r5
 80043de:	dc26      	bgt.n	800442e <_printf_common+0x96>
 80043e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e4:	1e13      	subs	r3, r2, #0
 80043e6:	6822      	ldr	r2, [r4, #0]
 80043e8:	bf18      	it	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	0692      	lsls	r2, r2, #26
 80043ee:	d42b      	bmi.n	8004448 <_printf_common+0xb0>
 80043f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c0      	blx	r8
 80043fa:	3001      	adds	r0, #1
 80043fc:	d01e      	beq.n	800443c <_printf_common+0xa4>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	68e5      	ldr	r5, [r4, #12]
 8004402:	6832      	ldr	r2, [r6, #0]
 8004404:	f003 0306 	and.w	r3, r3, #6
 8004408:	2b04      	cmp	r3, #4
 800440a:	bf08      	it	eq
 800440c:	1aad      	subeq	r5, r5, r2
 800440e:	68a3      	ldr	r3, [r4, #8]
 8004410:	6922      	ldr	r2, [r4, #16]
 8004412:	bf0c      	ite	eq
 8004414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004418:	2500      	movne	r5, #0
 800441a:	4293      	cmp	r3, r2
 800441c:	bfc4      	itt	gt
 800441e:	1a9b      	subgt	r3, r3, r2
 8004420:	18ed      	addgt	r5, r5, r3
 8004422:	2600      	movs	r6, #0
 8004424:	341a      	adds	r4, #26
 8004426:	42b5      	cmp	r5, r6
 8004428:	d11a      	bne.n	8004460 <_printf_common+0xc8>
 800442a:	2000      	movs	r0, #0
 800442c:	e008      	b.n	8004440 <_printf_common+0xa8>
 800442e:	2301      	movs	r3, #1
 8004430:	4652      	mov	r2, sl
 8004432:	4649      	mov	r1, r9
 8004434:	4638      	mov	r0, r7
 8004436:	47c0      	blx	r8
 8004438:	3001      	adds	r0, #1
 800443a:	d103      	bne.n	8004444 <_printf_common+0xac>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	3501      	adds	r5, #1
 8004446:	e7c6      	b.n	80043d6 <_printf_common+0x3e>
 8004448:	18e1      	adds	r1, r4, r3
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	2030      	movs	r0, #48	; 0x30
 800444e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004452:	4422      	add	r2, r4
 8004454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800445c:	3302      	adds	r3, #2
 800445e:	e7c7      	b.n	80043f0 <_printf_common+0x58>
 8004460:	2301      	movs	r3, #1
 8004462:	4622      	mov	r2, r4
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d0e6      	beq.n	800443c <_printf_common+0xa4>
 800446e:	3601      	adds	r6, #1
 8004470:	e7d9      	b.n	8004426 <_printf_common+0x8e>
	...

08004474 <_printf_i>:
 8004474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	460c      	mov	r4, r1
 800447a:	4691      	mov	r9, r2
 800447c:	7e27      	ldrb	r7, [r4, #24]
 800447e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004480:	2f78      	cmp	r7, #120	; 0x78
 8004482:	4680      	mov	r8, r0
 8004484:	469a      	mov	sl, r3
 8004486:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800448a:	d807      	bhi.n	800449c <_printf_i+0x28>
 800448c:	2f62      	cmp	r7, #98	; 0x62
 800448e:	d80a      	bhi.n	80044a6 <_printf_i+0x32>
 8004490:	2f00      	cmp	r7, #0
 8004492:	f000 80d8 	beq.w	8004646 <_printf_i+0x1d2>
 8004496:	2f58      	cmp	r7, #88	; 0x58
 8004498:	f000 80a3 	beq.w	80045e2 <_printf_i+0x16e>
 800449c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044a4:	e03a      	b.n	800451c <_printf_i+0xa8>
 80044a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044aa:	2b15      	cmp	r3, #21
 80044ac:	d8f6      	bhi.n	800449c <_printf_i+0x28>
 80044ae:	a001      	add	r0, pc, #4	; (adr r0, 80044b4 <_printf_i+0x40>)
 80044b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	08004521 	.word	0x08004521
 80044bc:	0800449d 	.word	0x0800449d
 80044c0:	0800449d 	.word	0x0800449d
 80044c4:	0800449d 	.word	0x0800449d
 80044c8:	0800449d 	.word	0x0800449d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800449d 	.word	0x0800449d
 80044d4:	0800449d 	.word	0x0800449d
 80044d8:	0800449d 	.word	0x0800449d
 80044dc:	0800449d 	.word	0x0800449d
 80044e0:	0800462d 	.word	0x0800462d
 80044e4:	08004551 	.word	0x08004551
 80044e8:	0800460f 	.word	0x0800460f
 80044ec:	0800449d 	.word	0x0800449d
 80044f0:	0800449d 	.word	0x0800449d
 80044f4:	0800464f 	.word	0x0800464f
 80044f8:	0800449d 	.word	0x0800449d
 80044fc:	08004551 	.word	0x08004551
 8004500:	0800449d 	.word	0x0800449d
 8004504:	0800449d 	.word	0x0800449d
 8004508:	08004617 	.word	0x08004617
 800450c:	680b      	ldr	r3, [r1, #0]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	600a      	str	r2, [r1, #0]
 8004514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451c:	2301      	movs	r3, #1
 800451e:	e0a3      	b.n	8004668 <_printf_i+0x1f4>
 8004520:	6825      	ldr	r5, [r4, #0]
 8004522:	6808      	ldr	r0, [r1, #0]
 8004524:	062e      	lsls	r6, r5, #24
 8004526:	f100 0304 	add.w	r3, r0, #4
 800452a:	d50a      	bpl.n	8004542 <_printf_i+0xce>
 800452c:	6805      	ldr	r5, [r0, #0]
 800452e:	600b      	str	r3, [r1, #0]
 8004530:	2d00      	cmp	r5, #0
 8004532:	da03      	bge.n	800453c <_printf_i+0xc8>
 8004534:	232d      	movs	r3, #45	; 0x2d
 8004536:	426d      	negs	r5, r5
 8004538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453c:	485e      	ldr	r0, [pc, #376]	; (80046b8 <_printf_i+0x244>)
 800453e:	230a      	movs	r3, #10
 8004540:	e019      	b.n	8004576 <_printf_i+0x102>
 8004542:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004546:	6805      	ldr	r5, [r0, #0]
 8004548:	600b      	str	r3, [r1, #0]
 800454a:	bf18      	it	ne
 800454c:	b22d      	sxthne	r5, r5
 800454e:	e7ef      	b.n	8004530 <_printf_i+0xbc>
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	1d18      	adds	r0, r3, #4
 8004556:	6008      	str	r0, [r1, #0]
 8004558:	0628      	lsls	r0, r5, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xec>
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	e002      	b.n	8004566 <_printf_i+0xf2>
 8004560:	0669      	lsls	r1, r5, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xe8>
 8004564:	881d      	ldrh	r5, [r3, #0]
 8004566:	4854      	ldr	r0, [pc, #336]	; (80046b8 <_printf_i+0x244>)
 8004568:	2f6f      	cmp	r7, #111	; 0x6f
 800456a:	bf0c      	ite	eq
 800456c:	2308      	moveq	r3, #8
 800456e:	230a      	movne	r3, #10
 8004570:	2100      	movs	r1, #0
 8004572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004576:	6866      	ldr	r6, [r4, #4]
 8004578:	60a6      	str	r6, [r4, #8]
 800457a:	2e00      	cmp	r6, #0
 800457c:	bfa2      	ittt	ge
 800457e:	6821      	ldrge	r1, [r4, #0]
 8004580:	f021 0104 	bicge.w	r1, r1, #4
 8004584:	6021      	strge	r1, [r4, #0]
 8004586:	b90d      	cbnz	r5, 800458c <_printf_i+0x118>
 8004588:	2e00      	cmp	r6, #0
 800458a:	d04d      	beq.n	8004628 <_printf_i+0x1b4>
 800458c:	4616      	mov	r6, r2
 800458e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004592:	fb03 5711 	mls	r7, r3, r1, r5
 8004596:	5dc7      	ldrb	r7, [r0, r7]
 8004598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800459c:	462f      	mov	r7, r5
 800459e:	42bb      	cmp	r3, r7
 80045a0:	460d      	mov	r5, r1
 80045a2:	d9f4      	bls.n	800458e <_printf_i+0x11a>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <_printf_i+0x14c>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07df      	lsls	r7, r3, #31
 80045ac:	d508      	bpl.n	80045c0 <_printf_i+0x14c>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	6861      	ldr	r1, [r4, #4]
 80045b2:	4299      	cmp	r1, r3
 80045b4:	bfde      	ittt	le
 80045b6:	2330      	movle	r3, #48	; 0x30
 80045b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c0:	1b92      	subs	r2, r2, r6
 80045c2:	6122      	str	r2, [r4, #16]
 80045c4:	f8cd a000 	str.w	sl, [sp]
 80045c8:	464b      	mov	r3, r9
 80045ca:	aa03      	add	r2, sp, #12
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f7ff fee2 	bl	8004398 <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d14c      	bne.n	8004672 <_printf_i+0x1fe>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	4835      	ldr	r0, [pc, #212]	; (80046b8 <_printf_i+0x244>)
 80045e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	680e      	ldr	r6, [r1, #0]
 80045ec:	061f      	lsls	r7, r3, #24
 80045ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80045f2:	600e      	str	r6, [r1, #0]
 80045f4:	d514      	bpl.n	8004620 <_printf_i+0x1ac>
 80045f6:	07d9      	lsls	r1, r3, #31
 80045f8:	bf44      	itt	mi
 80045fa:	f043 0320 	orrmi.w	r3, r3, #32
 80045fe:	6023      	strmi	r3, [r4, #0]
 8004600:	b91d      	cbnz	r5, 800460a <_printf_i+0x196>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f023 0320 	bic.w	r3, r3, #32
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	2310      	movs	r3, #16
 800460c:	e7b0      	b.n	8004570 <_printf_i+0xfc>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	2378      	movs	r3, #120	; 0x78
 8004618:	4828      	ldr	r0, [pc, #160]	; (80046bc <_printf_i+0x248>)
 800461a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800461e:	e7e3      	b.n	80045e8 <_printf_i+0x174>
 8004620:	065e      	lsls	r6, r3, #25
 8004622:	bf48      	it	mi
 8004624:	b2ad      	uxthmi	r5, r5
 8004626:	e7e6      	b.n	80045f6 <_printf_i+0x182>
 8004628:	4616      	mov	r6, r2
 800462a:	e7bb      	b.n	80045a4 <_printf_i+0x130>
 800462c:	680b      	ldr	r3, [r1, #0]
 800462e:	6826      	ldr	r6, [r4, #0]
 8004630:	6960      	ldr	r0, [r4, #20]
 8004632:	1d1d      	adds	r5, r3, #4
 8004634:	600d      	str	r5, [r1, #0]
 8004636:	0635      	lsls	r5, r6, #24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	d501      	bpl.n	8004640 <_printf_i+0x1cc>
 800463c:	6018      	str	r0, [r3, #0]
 800463e:	e002      	b.n	8004646 <_printf_i+0x1d2>
 8004640:	0671      	lsls	r1, r6, #25
 8004642:	d5fb      	bpl.n	800463c <_printf_i+0x1c8>
 8004644:	8018      	strh	r0, [r3, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	6123      	str	r3, [r4, #16]
 800464a:	4616      	mov	r6, r2
 800464c:	e7ba      	b.n	80045c4 <_printf_i+0x150>
 800464e:	680b      	ldr	r3, [r1, #0]
 8004650:	1d1a      	adds	r2, r3, #4
 8004652:	600a      	str	r2, [r1, #0]
 8004654:	681e      	ldr	r6, [r3, #0]
 8004656:	6862      	ldr	r2, [r4, #4]
 8004658:	2100      	movs	r1, #0
 800465a:	4630      	mov	r0, r6
 800465c:	f7fb fde0 	bl	8000220 <memchr>
 8004660:	b108      	cbz	r0, 8004666 <_printf_i+0x1f2>
 8004662:	1b80      	subs	r0, r0, r6
 8004664:	6060      	str	r0, [r4, #4]
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	e7a8      	b.n	80045c4 <_printf_i+0x150>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	4632      	mov	r2, r6
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	47d0      	blx	sl
 800467c:	3001      	adds	r0, #1
 800467e:	d0ab      	beq.n	80045d8 <_printf_i+0x164>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	079b      	lsls	r3, r3, #30
 8004684:	d413      	bmi.n	80046ae <_printf_i+0x23a>
 8004686:	68e0      	ldr	r0, [r4, #12]
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	4298      	cmp	r0, r3
 800468c:	bfb8      	it	lt
 800468e:	4618      	movlt	r0, r3
 8004690:	e7a4      	b.n	80045dc <_printf_i+0x168>
 8004692:	2301      	movs	r3, #1
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d09b      	beq.n	80045d8 <_printf_i+0x164>
 80046a0:	3501      	adds	r5, #1
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	9903      	ldr	r1, [sp, #12]
 80046a6:	1a5b      	subs	r3, r3, r1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	dcf2      	bgt.n	8004692 <_printf_i+0x21e>
 80046ac:	e7eb      	b.n	8004686 <_printf_i+0x212>
 80046ae:	2500      	movs	r5, #0
 80046b0:	f104 0619 	add.w	r6, r4, #25
 80046b4:	e7f5      	b.n	80046a2 <_printf_i+0x22e>
 80046b6:	bf00      	nop
 80046b8:	08004d8d 	.word	0x08004d8d
 80046bc:	08004d9e 	.word	0x08004d9e

080046c0 <_sbrk_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4d06      	ldr	r5, [pc, #24]	; (80046dc <_sbrk_r+0x1c>)
 80046c4:	2300      	movs	r3, #0
 80046c6:	4604      	mov	r4, r0
 80046c8:	4608      	mov	r0, r1
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc f930 	bl	8000930 <_sbrk>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_sbrk_r+0x1a>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_sbrk_r+0x1a>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	20000140 	.word	0x20000140

080046e0 <__sread>:
 80046e0:	b510      	push	{r4, lr}
 80046e2:	460c      	mov	r4, r1
 80046e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e8:	f000 fab4 	bl	8004c54 <_read_r>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	bfab      	itete	ge
 80046f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046f2:	89a3      	ldrhlt	r3, [r4, #12]
 80046f4:	181b      	addge	r3, r3, r0
 80046f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046fa:	bfac      	ite	ge
 80046fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046fe:	81a3      	strhlt	r3, [r4, #12]
 8004700:	bd10      	pop	{r4, pc}

08004702 <__swrite>:
 8004702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004706:	461f      	mov	r7, r3
 8004708:	898b      	ldrh	r3, [r1, #12]
 800470a:	05db      	lsls	r3, r3, #23
 800470c:	4605      	mov	r5, r0
 800470e:	460c      	mov	r4, r1
 8004710:	4616      	mov	r6, r2
 8004712:	d505      	bpl.n	8004720 <__swrite+0x1e>
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	2302      	movs	r3, #2
 800471a:	2200      	movs	r2, #0
 800471c:	f000 f9c8 	bl	8004ab0 <_lseek_r>
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	4632      	mov	r2, r6
 800472e:	463b      	mov	r3, r7
 8004730:	4628      	mov	r0, r5
 8004732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	f000 b869 	b.w	800480c <_write_r>

0800473a <__sseek>:
 800473a:	b510      	push	{r4, lr}
 800473c:	460c      	mov	r4, r1
 800473e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004742:	f000 f9b5 	bl	8004ab0 <_lseek_r>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	bf15      	itete	ne
 800474c:	6560      	strne	r0, [r4, #84]	; 0x54
 800474e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004756:	81a3      	strheq	r3, [r4, #12]
 8004758:	bf18      	it	ne
 800475a:	81a3      	strhne	r3, [r4, #12]
 800475c:	bd10      	pop	{r4, pc}

0800475e <__sclose>:
 800475e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004762:	f000 b8d3 	b.w	800490c <_close_r>
	...

08004768 <__swbuf_r>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	460e      	mov	r6, r1
 800476c:	4614      	mov	r4, r2
 800476e:	4605      	mov	r5, r0
 8004770:	b118      	cbz	r0, 800477a <__swbuf_r+0x12>
 8004772:	6983      	ldr	r3, [r0, #24]
 8004774:	b90b      	cbnz	r3, 800477a <__swbuf_r+0x12>
 8004776:	f7ff fbbb 	bl	8003ef0 <__sinit>
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <__swbuf_r+0x98>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d12b      	bne.n	80047d8 <__swbuf_r+0x70>
 8004780:	686c      	ldr	r4, [r5, #4]
 8004782:	69a3      	ldr	r3, [r4, #24]
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	071a      	lsls	r2, r3, #28
 800478a:	d52f      	bpl.n	80047ec <__swbuf_r+0x84>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	b36b      	cbz	r3, 80047ec <__swbuf_r+0x84>
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	6963      	ldr	r3, [r4, #20]
 8004798:	b2f6      	uxtb	r6, r6
 800479a:	4283      	cmp	r3, r0
 800479c:	4637      	mov	r7, r6
 800479e:	dc04      	bgt.n	80047aa <__swbuf_r+0x42>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f948 	bl	8004a38 <_fflush_r>
 80047a8:	bb30      	cbnz	r0, 80047f8 <__swbuf_r+0x90>
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	60a3      	str	r3, [r4, #8]
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	6022      	str	r2, [r4, #0]
 80047b6:	701e      	strb	r6, [r3, #0]
 80047b8:	6963      	ldr	r3, [r4, #20]
 80047ba:	3001      	adds	r0, #1
 80047bc:	4283      	cmp	r3, r0
 80047be:	d004      	beq.n	80047ca <__swbuf_r+0x62>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d506      	bpl.n	80047d4 <__swbuf_r+0x6c>
 80047c6:	2e0a      	cmp	r6, #10
 80047c8:	d104      	bne.n	80047d4 <__swbuf_r+0x6c>
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f933 	bl	8004a38 <_fflush_r>
 80047d2:	b988      	cbnz	r0, 80047f8 <__swbuf_r+0x90>
 80047d4:	4638      	mov	r0, r7
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <__swbuf_r+0x9c>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	d101      	bne.n	80047e2 <__swbuf_r+0x7a>
 80047de:	68ac      	ldr	r4, [r5, #8]
 80047e0:	e7cf      	b.n	8004782 <__swbuf_r+0x1a>
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <__swbuf_r+0xa0>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	bf08      	it	eq
 80047e8:	68ec      	ldreq	r4, [r5, #12]
 80047ea:	e7ca      	b.n	8004782 <__swbuf_r+0x1a>
 80047ec:	4621      	mov	r1, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 f81e 	bl	8004830 <__swsetup_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d0cb      	beq.n	8004790 <__swbuf_r+0x28>
 80047f8:	f04f 37ff 	mov.w	r7, #4294967295
 80047fc:	e7ea      	b.n	80047d4 <__swbuf_r+0x6c>
 80047fe:	bf00      	nop
 8004800:	08004d3c 	.word	0x08004d3c
 8004804:	08004d5c 	.word	0x08004d5c
 8004808:	08004d1c 	.word	0x08004d1c

0800480c <_write_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d07      	ldr	r5, [pc, #28]	; (800482c <_write_r+0x20>)
 8004810:	4604      	mov	r4, r0
 8004812:	4608      	mov	r0, r1
 8004814:	4611      	mov	r1, r2
 8004816:	2200      	movs	r2, #0
 8004818:	602a      	str	r2, [r5, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f7fc f837 	bl	800088e <_write>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_write_r+0x1e>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_write_r+0x1e>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	20000140 	.word	0x20000140

08004830 <__swsetup_r>:
 8004830:	4b32      	ldr	r3, [pc, #200]	; (80048fc <__swsetup_r+0xcc>)
 8004832:	b570      	push	{r4, r5, r6, lr}
 8004834:	681d      	ldr	r5, [r3, #0]
 8004836:	4606      	mov	r6, r0
 8004838:	460c      	mov	r4, r1
 800483a:	b125      	cbz	r5, 8004846 <__swsetup_r+0x16>
 800483c:	69ab      	ldr	r3, [r5, #24]
 800483e:	b913      	cbnz	r3, 8004846 <__swsetup_r+0x16>
 8004840:	4628      	mov	r0, r5
 8004842:	f7ff fb55 	bl	8003ef0 <__sinit>
 8004846:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <__swsetup_r+0xd0>)
 8004848:	429c      	cmp	r4, r3
 800484a:	d10f      	bne.n	800486c <__swsetup_r+0x3c>
 800484c:	686c      	ldr	r4, [r5, #4]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004854:	0719      	lsls	r1, r3, #28
 8004856:	d42c      	bmi.n	80048b2 <__swsetup_r+0x82>
 8004858:	06dd      	lsls	r5, r3, #27
 800485a:	d411      	bmi.n	8004880 <__swsetup_r+0x50>
 800485c:	2309      	movs	r3, #9
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	e03e      	b.n	80048ea <__swsetup_r+0xba>
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <__swsetup_r+0xd4>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d101      	bne.n	8004876 <__swsetup_r+0x46>
 8004872:	68ac      	ldr	r4, [r5, #8]
 8004874:	e7eb      	b.n	800484e <__swsetup_r+0x1e>
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <__swsetup_r+0xd8>)
 8004878:	429c      	cmp	r4, r3
 800487a:	bf08      	it	eq
 800487c:	68ec      	ldreq	r4, [r5, #12]
 800487e:	e7e6      	b.n	800484e <__swsetup_r+0x1e>
 8004880:	0758      	lsls	r0, r3, #29
 8004882:	d512      	bpl.n	80048aa <__swsetup_r+0x7a>
 8004884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004886:	b141      	cbz	r1, 800489a <__swsetup_r+0x6a>
 8004888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800488c:	4299      	cmp	r1, r3
 800488e:	d002      	beq.n	8004896 <__swsetup_r+0x66>
 8004890:	4630      	mov	r0, r6
 8004892:	f000 f98f 	bl	8004bb4 <_free_r>
 8004896:	2300      	movs	r3, #0
 8004898:	6363      	str	r3, [r4, #52]	; 0x34
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	2300      	movs	r3, #0
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	b94b      	cbnz	r3, 80048ca <__swsetup_r+0x9a>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d003      	beq.n	80048ca <__swsetup_r+0x9a>
 80048c2:	4621      	mov	r1, r4
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 f929 	bl	8004b1c <__smakebuf_r>
 80048ca:	89a0      	ldrh	r0, [r4, #12]
 80048cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048d0:	f010 0301 	ands.w	r3, r0, #1
 80048d4:	d00a      	beq.n	80048ec <__swsetup_r+0xbc>
 80048d6:	2300      	movs	r3, #0
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	6963      	ldr	r3, [r4, #20]
 80048dc:	425b      	negs	r3, r3
 80048de:	61a3      	str	r3, [r4, #24]
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	b943      	cbnz	r3, 80048f6 <__swsetup_r+0xc6>
 80048e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048e8:	d1ba      	bne.n	8004860 <__swsetup_r+0x30>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	0781      	lsls	r1, r0, #30
 80048ee:	bf58      	it	pl
 80048f0:	6963      	ldrpl	r3, [r4, #20]
 80048f2:	60a3      	str	r3, [r4, #8]
 80048f4:	e7f4      	b.n	80048e0 <__swsetup_r+0xb0>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e7f7      	b.n	80048ea <__swsetup_r+0xba>
 80048fa:	bf00      	nop
 80048fc:	20000014 	.word	0x20000014
 8004900:	08004d3c 	.word	0x08004d3c
 8004904:	08004d5c 	.word	0x08004d5c
 8004908:	08004d1c 	.word	0x08004d1c

0800490c <_close_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4d06      	ldr	r5, [pc, #24]	; (8004928 <_close_r+0x1c>)
 8004910:	2300      	movs	r3, #0
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	f7fb ffd5 	bl	80008c6 <_close>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_close_r+0x1a>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_close_r+0x1a>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000140 	.word	0x20000140

0800492c <__sflush_r>:
 800492c:	898a      	ldrh	r2, [r1, #12]
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	0710      	lsls	r0, r2, #28
 8004936:	460c      	mov	r4, r1
 8004938:	d458      	bmi.n	80049ec <__sflush_r+0xc0>
 800493a:	684b      	ldr	r3, [r1, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc05      	bgt.n	800494c <__sflush_r+0x20>
 8004940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc02      	bgt.n	800494c <__sflush_r+0x20>
 8004946:	2000      	movs	r0, #0
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800494e:	2e00      	cmp	r6, #0
 8004950:	d0f9      	beq.n	8004946 <__sflush_r+0x1a>
 8004952:	2300      	movs	r3, #0
 8004954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004958:	682f      	ldr	r7, [r5, #0]
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	d032      	beq.n	80049c4 <__sflush_r+0x98>
 800495e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	075a      	lsls	r2, r3, #29
 8004964:	d505      	bpl.n	8004972 <__sflush_r+0x46>
 8004966:	6863      	ldr	r3, [r4, #4]
 8004968:	1ac0      	subs	r0, r0, r3
 800496a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800496c:	b10b      	cbz	r3, 8004972 <__sflush_r+0x46>
 800496e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004970:	1ac0      	subs	r0, r0, r3
 8004972:	2300      	movs	r3, #0
 8004974:	4602      	mov	r2, r0
 8004976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	d106      	bne.n	8004992 <__sflush_r+0x66>
 8004984:	6829      	ldr	r1, [r5, #0]
 8004986:	291d      	cmp	r1, #29
 8004988:	d82c      	bhi.n	80049e4 <__sflush_r+0xb8>
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <__sflush_r+0x108>)
 800498c:	40ca      	lsrs	r2, r1
 800498e:	07d6      	lsls	r6, r2, #31
 8004990:	d528      	bpl.n	80049e4 <__sflush_r+0xb8>
 8004992:	2200      	movs	r2, #0
 8004994:	6062      	str	r2, [r4, #4]
 8004996:	04d9      	lsls	r1, r3, #19
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	d504      	bpl.n	80049a8 <__sflush_r+0x7c>
 800499e:	1c42      	adds	r2, r0, #1
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0x7a>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	b903      	cbnz	r3, 80049a8 <__sflush_r+0x7c>
 80049a6:	6560      	str	r0, [r4, #84]	; 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d0ca      	beq.n	8004946 <__sflush_r+0x1a>
 80049b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d002      	beq.n	80049be <__sflush_r+0x92>
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f8fb 	bl	8004bb4 <_free_r>
 80049be:	2000      	movs	r0, #0
 80049c0:	6360      	str	r0, [r4, #52]	; 0x34
 80049c2:	e7c1      	b.n	8004948 <__sflush_r+0x1c>
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	1c41      	adds	r1, r0, #1
 80049ce:	d1c7      	bne.n	8004960 <__sflush_r+0x34>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0c4      	beq.n	8004960 <__sflush_r+0x34>
 80049d6:	2b1d      	cmp	r3, #29
 80049d8:	d001      	beq.n	80049de <__sflush_r+0xb2>
 80049da:	2b16      	cmp	r3, #22
 80049dc:	d101      	bne.n	80049e2 <__sflush_r+0xb6>
 80049de:	602f      	str	r7, [r5, #0]
 80049e0:	e7b1      	b.n	8004946 <__sflush_r+0x1a>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	e7ad      	b.n	8004948 <__sflush_r+0x1c>
 80049ec:	690f      	ldr	r7, [r1, #16]
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d0a9      	beq.n	8004946 <__sflush_r+0x1a>
 80049f2:	0793      	lsls	r3, r2, #30
 80049f4:	680e      	ldr	r6, [r1, #0]
 80049f6:	bf08      	it	eq
 80049f8:	694b      	ldreq	r3, [r1, #20]
 80049fa:	600f      	str	r7, [r1, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2300      	movne	r3, #0
 8004a00:	eba6 0807 	sub.w	r8, r6, r7
 8004a04:	608b      	str	r3, [r1, #8]
 8004a06:	f1b8 0f00 	cmp.w	r8, #0
 8004a0a:	dd9c      	ble.n	8004946 <__sflush_r+0x1a>
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a10:	4643      	mov	r3, r8
 8004a12:	463a      	mov	r2, r7
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b0      	blx	r6
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	dc06      	bgt.n	8004a2a <__sflush_r+0xfe>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e78e      	b.n	8004948 <__sflush_r+0x1c>
 8004a2a:	4407      	add	r7, r0
 8004a2c:	eba8 0800 	sub.w	r8, r8, r0
 8004a30:	e7e9      	b.n	8004a06 <__sflush_r+0xda>
 8004a32:	bf00      	nop
 8004a34:	20400001 	.word	0x20400001

08004a38 <_fflush_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b913      	cbnz	r3, 8004a48 <_fflush_r+0x10>
 8004a42:	2500      	movs	r5, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	b118      	cbz	r0, 8004a52 <_fflush_r+0x1a>
 8004a4a:	6983      	ldr	r3, [r0, #24]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <_fflush_r+0x1a>
 8004a4e:	f7ff fa4f 	bl	8003ef0 <__sinit>
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <_fflush_r+0x6c>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	d11b      	bne.n	8004a90 <_fflush_r+0x58>
 8004a58:	686c      	ldr	r4, [r5, #4]
 8004a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <_fflush_r+0xa>
 8004a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a64:	07d0      	lsls	r0, r2, #31
 8004a66:	d404      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a68:	0599      	lsls	r1, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f7ff fadd 	bl	800402c <__retarget_lock_acquire_recursive>
 8004a72:	4628      	mov	r0, r5
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7ff ff59 	bl	800492c <__sflush_r>
 8004a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a7c:	07da      	lsls	r2, r3, #31
 8004a7e:	4605      	mov	r5, r0
 8004a80:	d4e0      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	059b      	lsls	r3, r3, #22
 8004a86:	d4dd      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8a:	f7ff fad0 	bl	800402e <__retarget_lock_release_recursive>
 8004a8e:	e7d9      	b.n	8004a44 <_fflush_r+0xc>
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <_fflush_r+0x70>)
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d101      	bne.n	8004a9a <_fflush_r+0x62>
 8004a96:	68ac      	ldr	r4, [r5, #8]
 8004a98:	e7df      	b.n	8004a5a <_fflush_r+0x22>
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <_fflush_r+0x74>)
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	bf08      	it	eq
 8004aa0:	68ec      	ldreq	r4, [r5, #12]
 8004aa2:	e7da      	b.n	8004a5a <_fflush_r+0x22>
 8004aa4:	08004d3c 	.word	0x08004d3c
 8004aa8:	08004d5c 	.word	0x08004d5c
 8004aac:	08004d1c 	.word	0x08004d1c

08004ab0 <_lseek_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d07      	ldr	r5, [pc, #28]	; (8004ad0 <_lseek_r+0x20>)
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4611      	mov	r1, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7fb ff28 	bl	8000914 <_lseek>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_lseek_r+0x1e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_lseek_r+0x1e>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000140 	.word	0x20000140

08004ad4 <__swhatbuf_r>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	2900      	cmp	r1, #0
 8004ade:	b096      	sub	sp, #88	; 0x58
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	da07      	bge.n	8004af6 <__swhatbuf_r+0x22>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	89b3      	ldrh	r3, [r6, #12]
 8004aec:	061a      	lsls	r2, r3, #24
 8004aee:	d410      	bmi.n	8004b12 <__swhatbuf_r+0x3e>
 8004af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af4:	e00e      	b.n	8004b14 <__swhatbuf_r+0x40>
 8004af6:	466a      	mov	r2, sp
 8004af8:	f000 f8be 	bl	8004c78 <_fstat_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	dbf2      	blt.n	8004ae6 <__swhatbuf_r+0x12>
 8004b00:	9a01      	ldr	r2, [sp, #4]
 8004b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b0a:	425a      	negs	r2, r3
 8004b0c:	415a      	adcs	r2, r3
 8004b0e:	602a      	str	r2, [r5, #0]
 8004b10:	e7ee      	b.n	8004af0 <__swhatbuf_r+0x1c>
 8004b12:	2340      	movs	r3, #64	; 0x40
 8004b14:	2000      	movs	r0, #0
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	b016      	add	sp, #88	; 0x58
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}

08004b1c <__smakebuf_r>:
 8004b1c:	898b      	ldrh	r3, [r1, #12]
 8004b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b20:	079d      	lsls	r5, r3, #30
 8004b22:	4606      	mov	r6, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	d507      	bpl.n	8004b38 <__smakebuf_r+0x1c>
 8004b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	6123      	str	r3, [r4, #16]
 8004b30:	2301      	movs	r3, #1
 8004b32:	6163      	str	r3, [r4, #20]
 8004b34:	b002      	add	sp, #8
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	ab01      	add	r3, sp, #4
 8004b3a:	466a      	mov	r2, sp
 8004b3c:	f7ff ffca 	bl	8004ad4 <__swhatbuf_r>
 8004b40:	9900      	ldr	r1, [sp, #0]
 8004b42:	4605      	mov	r5, r0
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff fa73 	bl	8004030 <_malloc_r>
 8004b4a:	b948      	cbnz	r0, 8004b60 <__smakebuf_r+0x44>
 8004b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b50:	059a      	lsls	r2, r3, #22
 8004b52:	d4ef      	bmi.n	8004b34 <__smakebuf_r+0x18>
 8004b54:	f023 0303 	bic.w	r3, r3, #3
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	e7e3      	b.n	8004b28 <__smakebuf_r+0xc>
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <__smakebuf_r+0x7c>)
 8004b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	9b00      	ldr	r3, [sp, #0]
 8004b70:	6163      	str	r3, [r4, #20]
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	6120      	str	r0, [r4, #16]
 8004b76:	b15b      	cbz	r3, 8004b90 <__smakebuf_r+0x74>
 8004b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 f88d 	bl	8004c9c <_isatty_r>
 8004b82:	b128      	cbz	r0, 8004b90 <__smakebuf_r+0x74>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	89a0      	ldrh	r0, [r4, #12]
 8004b92:	4305      	orrs	r5, r0
 8004b94:	81a5      	strh	r5, [r4, #12]
 8004b96:	e7cd      	b.n	8004b34 <__smakebuf_r+0x18>
 8004b98:	08003e89 	.word	0x08003e89

08004b9c <__malloc_lock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__malloc_lock+0x8>)
 8004b9e:	f7ff ba45 	b.w	800402c <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	20000138 	.word	0x20000138

08004ba8 <__malloc_unlock>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__malloc_unlock+0x8>)
 8004baa:	f7ff ba40 	b.w	800402e <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	20000138 	.word	0x20000138

08004bb4 <_free_r>:
 8004bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	d048      	beq.n	8004c4c <_free_r+0x98>
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	9001      	str	r0, [sp, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc6:	bfb8      	it	lt
 8004bc8:	18e4      	addlt	r4, r4, r3
 8004bca:	f7ff ffe7 	bl	8004b9c <__malloc_lock>
 8004bce:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <_free_r+0x9c>)
 8004bd0:	9801      	ldr	r0, [sp, #4]
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	4615      	mov	r5, r2
 8004bd6:	b933      	cbnz	r3, 8004be6 <_free_r+0x32>
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	6014      	str	r4, [r2, #0]
 8004bdc:	b003      	add	sp, #12
 8004bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be2:	f7ff bfe1 	b.w	8004ba8 <__malloc_unlock>
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	d90b      	bls.n	8004c02 <_free_r+0x4e>
 8004bea:	6821      	ldr	r1, [r4, #0]
 8004bec:	1862      	adds	r2, r4, r1
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bf04      	itt	eq
 8004bf2:	681a      	ldreq	r2, [r3, #0]
 8004bf4:	685b      	ldreq	r3, [r3, #4]
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	bf04      	itt	eq
 8004bfa:	1852      	addeq	r2, r2, r1
 8004bfc:	6022      	streq	r2, [r4, #0]
 8004bfe:	602c      	str	r4, [r5, #0]
 8004c00:	e7ec      	b.n	8004bdc <_free_r+0x28>
 8004c02:	461a      	mov	r2, r3
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b10b      	cbz	r3, 8004c0c <_free_r+0x58>
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d9fa      	bls.n	8004c02 <_free_r+0x4e>
 8004c0c:	6811      	ldr	r1, [r2, #0]
 8004c0e:	1855      	adds	r5, r2, r1
 8004c10:	42a5      	cmp	r5, r4
 8004c12:	d10b      	bne.n	8004c2c <_free_r+0x78>
 8004c14:	6824      	ldr	r4, [r4, #0]
 8004c16:	4421      	add	r1, r4
 8004c18:	1854      	adds	r4, r2, r1
 8004c1a:	42a3      	cmp	r3, r4
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	d1dd      	bne.n	8004bdc <_free_r+0x28>
 8004c20:	681c      	ldr	r4, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	4421      	add	r1, r4
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	e7d7      	b.n	8004bdc <_free_r+0x28>
 8004c2c:	d902      	bls.n	8004c34 <_free_r+0x80>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	6003      	str	r3, [r0, #0]
 8004c32:	e7d3      	b.n	8004bdc <_free_r+0x28>
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	1961      	adds	r1, r4, r5
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf04      	itt	eq
 8004c3c:	6819      	ldreq	r1, [r3, #0]
 8004c3e:	685b      	ldreq	r3, [r3, #4]
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	bf04      	itt	eq
 8004c44:	1949      	addeq	r1, r1, r5
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	6054      	str	r4, [r2, #4]
 8004c4a:	e7c7      	b.n	8004bdc <_free_r+0x28>
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bd30      	pop	{r4, r5, pc}
 8004c50:	20000098 	.word	0x20000098

08004c54 <_read_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d07      	ldr	r5, [pc, #28]	; (8004c74 <_read_r+0x20>)
 8004c58:	4604      	mov	r4, r0
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	602a      	str	r2, [r5, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7fb fdf6 	bl	8000854 <_read>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_read_r+0x1e>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_read_r+0x1e>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000140 	.word	0x20000140

08004c78 <_fstat_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	; (8004c98 <_fstat_r+0x20>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f7fb fe2a 	bl	80008de <_fstat>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d102      	bne.n	8004c94 <_fstat_r+0x1c>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	b103      	cbz	r3, 8004c94 <_fstat_r+0x1c>
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	20000140 	.word	0x20000140

08004c9c <_isatty_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_isatty_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb fe29 	bl	80008fe <_isatty>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_isatty_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_isatty_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20000140 	.word	0x20000140

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
