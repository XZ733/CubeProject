
ADS9226_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  08004d80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004d80  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c04b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310c  00000000  00000000  0003c0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  000404c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002874f  00000000  00000000  00041650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f71  00000000  00000000  00069d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca88  00000000  00000000  00082d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  0017f7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004be0 	.word	0x08004be0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004be0 	.word	0x08004be0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ADS9226_Read>:
#include "ADS9226.h"

HAL_StatusTypeDef ADS9226_Read(uint8_t *Data_H, uint8_t *Data_L,
		uint16_t Timeout) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef Error_Code = HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	75fb      	strb	r3, [r7, #23]

	uint32_t tickstart;
	tickstart = HAL_GetTick();
 80005ca:	f000 fdad 	bl	8001128 <HAL_GetTick>
 80005ce:	6138      	str	r0, [r7, #16]

	//SPI1主机配置
	hspi1.State = HAL_SPI_STATE_BUSY_RX;
 80005d0:	4b67      	ldr	r3, [pc, #412]	; (8000770 <ADS9226_Read+0x1b8>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi1.pRxBuffPtr = (uint8_t*) (Data_H);
 80005d8:	4a65      	ldr	r2, [pc, #404]	; (8000770 <ADS9226_Read+0x1b8>)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
	hspi1.RxXferCount = 1;
 80005de:	4b64      	ldr	r3, [pc, #400]	; (8000770 <ADS9226_Read+0x1b8>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi1.RxXferSize = 1;
 80005e6:	4b62      	ldr	r3, [pc, #392]	; (8000770 <ADS9226_Read+0x1b8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi1.pTxBuffPtr = (uint8_t*) (NULL);
 80005ee:	4b60      	ldr	r3, [pc, #384]	; (8000770 <ADS9226_Read+0x1b8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.TxXferCount = 1U;
 80005f4:	4b5e      	ldr	r3, [pc, #376]	; (8000770 <ADS9226_Read+0x1b8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi1.TxXferSize = 1U;
 80005fa:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <ADS9226_Read+0x1b8>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	879a      	strh	r2, [r3, #60]	; 0x3c

	//SPI1从机配置
	hspi2.State = HAL_SPI_STATE_BUSY_RX;
 8000600:	4b5c      	ldr	r3, [pc, #368]	; (8000774 <ADS9226_Read+0x1bc>)
 8000602:	2204      	movs	r2, #4
 8000604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi2.pRxBuffPtr = (uint8_t*) (Data_L);
 8000608:	4a5a      	ldr	r2, [pc, #360]	; (8000774 <ADS9226_Read+0x1bc>)
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
	hspi2.RxXferSize = 1;
 800060e:	4b59      	ldr	r3, [pc, #356]	; (8000774 <ADS9226_Read+0x1bc>)
 8000610:	2201      	movs	r2, #1
 8000612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi2.RxXferCount = 1;
 8000616:	4b57      	ldr	r3, [pc, #348]	; (8000774 <ADS9226_Read+0x1bc>)
 8000618:	2201      	movs	r2, #1
 800061a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi2.pTxBuffPtr = (uint8_t*) NULL;
 800061e:	4b55      	ldr	r3, [pc, #340]	; (8000774 <ADS9226_Read+0x1bc>)
 8000620:	2200      	movs	r2, #0
 8000622:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.TxXferSize = 0U;
 8000624:	4b53      	ldr	r3, [pc, #332]	; (8000774 <ADS9226_Read+0x1bc>)
 8000626:	2200      	movs	r2, #0
 8000628:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi2.TxXferCount = 0U;
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <ADS9226_Read+0x1bc>)
 800062c:	2200      	movs	r2, #0
 800062e:	87da      	strh	r2, [r3, #62]	; 0x3e

	//设置FIFO
	SET_BIT(hspi1.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <ADS9226_Read+0x1b8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <ADS9226_Read+0x1b8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800063e:	605a      	str	r2, [r3, #4]
	SET_BIT(hspi2.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000640:	4b4c      	ldr	r3, [pc, #304]	; (8000774 <ADS9226_Read+0x1bc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <ADS9226_Read+0x1bc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800064e:	605a      	str	r2, [r3, #4]

	//SPI1,SPI2使能
	if ((hspi1.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <ADS9226_Read+0x1b8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065a:	2b40      	cmp	r3, #64	; 0x40
 800065c:	d007      	beq.n	800066e <ADS9226_Read+0xb6>
		__HAL_SPI_ENABLE(&hspi1);
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <ADS9226_Read+0x1b8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b42      	ldr	r3, [pc, #264]	; (8000770 <ADS9226_Read+0x1b8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800066c:	601a      	str	r2, [r3, #0]
	}
	if ((hspi2.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <ADS9226_Read+0x1bc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000678:	2b40      	cmp	r3, #64	; 0x40
 800067a:	d007      	beq.n	800068c <ADS9226_Read+0xd4>
		__HAL_SPI_ENABLE(&hspi2);
 800067c:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <ADS9226_Read+0x1bc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <ADS9226_Read+0x1bc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800068a:	601a      	str	r2, [r3, #0]
	}

	//SPI1主机发送
	*(__IO uint8_t*) &hspi1.Instance->DR = (*(hspi1.pTxBuffPtr));
 800068c:	4b38      	ldr	r3, [pc, #224]	; (8000770 <ADS9226_Read+0x1b8>)
 800068e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000690:	4b37      	ldr	r3, [pc, #220]	; (8000770 <ADS9226_Read+0x1b8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	330c      	adds	r3, #12
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	701a      	strb	r2, [r3, #0]

	//SPI1主机接收
	while (hspi1.RxXferCount == 1U) {
 800069a:	e026      	b.n	80006ea <ADS9226_Read+0x132>

		if ((__HAL_SPI_GET_FLAG((&hspi1), SPI_FLAG_RXNE))) {
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <ADS9226_Read+0x1b8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d111      	bne.n	80006ce <ADS9226_Read+0x116>
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
					(*(__IO uint8_t*) &hspi1.Instance->DR);
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <ADS9226_Read+0x1b8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f103 020c 	add.w	r2, r3, #12
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <ADS9226_Read+0x1b8>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
					(*(__IO uint8_t*) &hspi1.Instance->DR);
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	b2d2      	uxtb	r2, r2
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
 80006ba:	701a      	strb	r2, [r3, #0]
			hspi1.RxXferCount--;
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <ADS9226_Read+0x1b8>)
 80006be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <ADS9226_Read+0x1b8>)
 80006ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		}

		if ((((HAL_GetTick() - tickstart) >= Timeout)
 80006ce:	f000 fd2b 	bl	8001128 <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	1ad2      	subs	r2, r2, r3
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d202      	bcs.n	80006e4 <ADS9226_Read+0x12c>
				&& ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <ADS9226_Read+0x132>
			Error_Code = HAL_TIMEOUT;
 80006e4:	2303      	movs	r3, #3
 80006e6:	75fb      	strb	r3, [r7, #23]
			goto Overtime;
 80006e8:	e034      	b.n	8000754 <ADS9226_Read+0x19c>
	while (hspi1.RxXferCount == 1U) {
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <ADS9226_Read+0x1b8>)
 80006ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d0d2      	beq.n	800069c <ADS9226_Read+0xe4>
		}
	}

	//SPI2从机接收
	while (hspi2.RxXferCount > 0U) {
 80006f6:	e026      	b.n	8000746 <ADS9226_Read+0x18e>

		if (__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_RXNE)) {
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <ADS9226_Read+0x1bc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <ADS9226_Read+0x172>
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
					(*(__IO uint8_t*) &hspi2.Instance->DR);
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <ADS9226_Read+0x1bc>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f103 020c 	add.w	r2, r3, #12
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <ADS9226_Read+0x1bc>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
					(*(__IO uint8_t*) &hspi2.Instance->DR);
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	b2d2      	uxtb	r2, r2
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
 8000716:	701a      	strb	r2, [r3, #0]
			hspi2.RxXferCount--;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <ADS9226_Read+0x1bc>)
 800071a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800071e:	b29b      	uxth	r3, r3
 8000720:	3b01      	subs	r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <ADS9226_Read+0x1bc>)
 8000726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		}

		if ((((HAL_GetTick() - tickstart) >= Timeout)
 800072a:	f000 fcfd 	bl	8001128 <HAL_GetTick>
 800072e:	4602      	mov	r2, r0
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	429a      	cmp	r2, r3
 8000738:	d202      	bcs.n	8000740 <ADS9226_Read+0x188>
				&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <ADS9226_Read+0x18e>
			Error_Code = HAL_TIMEOUT;
 8000740:	2303      	movs	r3, #3
 8000742:	75fb      	strb	r3, [r7, #23]
			goto Overtime;
 8000744:	e006      	b.n	8000754 <ADS9226_Read+0x19c>
	while (hspi2.RxXferCount > 0U) {
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <ADS9226_Read+0x1bc>)
 8000748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800074c:	b29b      	uxth	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1d2      	bne.n	80006f8 <ADS9226_Read+0x140>
		}
	}

	Overtime: hspi1.State = HAL_SPI_STATE_READY;
 8000752:	bf00      	nop
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <ADS9226_Read+0x1b8>)
 8000756:	2201      	movs	r2, #1
 8000758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		   	  hspi2.State = HAL_SPI_STATE_READY;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <ADS9226_Read+0x1bc>)
 800075e:	2201      	movs	r2, #1
 8000760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return Error_Code;
 8000764:	7dfb      	ldrb	r3, [r7, #23]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000104 	.word	0x20000104
 8000774:	200000a0 	.word	0x200000a0

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_GPIO_Init+0xd0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a27      	ldr	r2, [pc, #156]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_SPI1_CS_GPIO_Port, M_SPI1_CS_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0xd4>)
 80007f4:	f000 ff36 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_GPIO_Init+0xdc>)
 800080e:	f000 fda7 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_SPI1_CS_Pin;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_GPIO_Init+0xd4>)
 800082a:	f000 fd99 	bl	8001360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2028      	movs	r0, #40	; 0x28
 8000834:	f000 fd5f 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f000 fd76 	bl	800132a <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400
 8000850:	10110000 	.word	0x10110000
 8000854:	48000800 	.word	0x48000800

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef ADS9226_State = ADS9226_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fbfc 	bl	800105e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f837 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f7ff ff85 	bl	8000778 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800086e:	f000 fb2f 	bl	8000ed0 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000872:	f000 faa1 	bl	8000db8 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000876:	f000 f89b 	bl	80009b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800087a:	f000 f8d7 	bl	8000a2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);        //启动定时器TIM6,用做片选的时间
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <main+0x68>)
 8000880:	f002 f862 	bl	8002948 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (CS_EN_Flag == 1) {
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <main+0x6c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d1fb      	bne.n	8000884 <main+0x2c>

			//HAL_SPI_Receive(&hspi1,&data,1,100);

			ADS9226_State = ADS9226_Read(&data1,&data2,0xffff);
 800088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000890:	490d      	ldr	r1, [pc, #52]	; (80008c8 <main+0x70>)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <main+0x74>)
 8000894:	f7ff fe90 	bl	80005b8 <ADS9226_Read>
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]

			printf("data1: %d data2: %d ", data1, data2);
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <main+0x74>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <main+0x70>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <main+0x78>)
 80008aa:	f003 fa43 	bl	8003d34 <iprintf>
			printf("ADS9226 State: %d \r\n", ADS9226_State);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <main+0x7c>)
 80008b4:	f003 fa3e 	bl	8003d34 <iprintf>

			CS_EN_Flag = 0;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <main+0x6c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
		if (CS_EN_Flag == 1) {
 80008be:	e7e1      	b.n	8000884 <main+0x2c>
 80008c0:	20000168 	.word	0x20000168
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	2000008e 	.word	0x2000008e
 80008cc:	2000008d 	.word	0x2000008d
 80008d0:	08004bf8 	.word	0x08004bf8
 80008d4:	08004c10 	.word	0x08004c10

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a8      	sub	sp, #160	; 0xa0
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e2:	2238      	movs	r2, #56	; 0x38
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fa1c 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2254      	movs	r2, #84	; 0x54
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fa0e 	bl	8003d24 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	f44f 7000 	mov.w	r0, #512	; 0x200
 800090c:	f000 fee6 	bl	80016dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000920:	2303      	movs	r3, #3
 8000922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 25;
 800092c:	2319      	movs	r3, #25
 800092e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000948:	4618      	mov	r0, r3
 800094a:	f000 ff7b 	bl	8001844 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000954:	f000 f826 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2303      	movs	r3, #3
 800095e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fa7e 	bl	8001e74 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800097e:	f000 f811 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000982:	2320      	movs	r3, #32
 8000984:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fc8d 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000998:	f000 f804 	bl	80009a4 <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	37a0      	adds	r7, #160	; 0xa0
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_SPI1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI1_Init+0x74>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI1_Init+0x74>)
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_SPI1_Init+0x74>)
 8000a10:	f001 fe98 	bl	8002744 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f7ff ffc3 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000104 	.word	0x20000104
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <MX_SPI2_Init+0x70>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a84:	f001 fe5e 	bl	8002744 <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000a8e:	f7ff ff89 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000a0 	.word	0x200000a0
 8000a9c:	40003800 	.word	0x40003800

08000aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a2f      	ldr	r2, [pc, #188]	; (8000b7c <HAL_SPI_MspInit+0xdc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d129      	bne.n	8000b16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = M_SPI1_SCK_Pin|M_SPI1_IN_Pin|GPIO_PIN_7;
 8000af2:	23e0      	movs	r3, #224	; 0xe0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b02:	2305      	movs	r3, #5
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fc26 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b14:	e02d      	b.n	8000b72 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d128      	bne.n	8000b72 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_SPI2_CS_Pin|S_SPI2_SCK_Pin|S_SPI2_IN_Pin;
 8000b50:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b62:	2305      	movs	r3, #5
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_SPI_MspInit+0xe8>)
 8000b6e:	f000 fbf7 	bl	8001360 <HAL_GPIO_Init>
}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40013000 	.word	0x40013000
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40003800 	.word	0x40003800
 8000b88:	48000400 	.word	0x48000400

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc2:	f000 fe2f 	bl	8001824 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 fa70 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c30:	f000 fd30 	bl	8001694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f001 fefb 	bl	8002a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000168 	.word	0x20000168

08000c4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
	}

return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f9a1 	bl	8000fe8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
	}
	return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 ffba 	bl	8003cd0 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	20000258 	.word	0x20000258

08000d94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_TIM6_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dd0:	2263      	movs	r2, #99	; 0x63
 8000dd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000ddc:	2263      	movs	r2, #99	; 0x63
 8000dde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000de8:	f001 fd57 	bl	800289a <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000df2:	f7ff fdd7 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM6_Init+0x64>)
 8000e04:	f002 f868 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e0e:	f7ff fdc9 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000168 	.word	0x20000168
 8000e20:	40001000 	.word	0x40001000

08000e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2036      	movs	r0, #54	; 0x36
 8000e54:	f000 fa4f 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e58:	2036      	movs	r0, #54	; 0x36
 8000e5a:	f000 fa66 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40001000 	.word	0x40001000
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

	static uint8_t count = 0;
	count++;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e82:	701a      	strb	r2, [r3, #0]
	if(count == 3)
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d107      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		ADS9226_CS_LOW();
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e92:	f000 fbe7 	bl	8001664 <HAL_GPIO_WritePin>
		CS_EN_Flag = 1;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
	}

	if(count >= 8 && CS_EN_Flag == 0)
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d90b      	bls.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d107      	bne.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		count = 0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		ADS9226_CS_HIGH();
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000eb8:	f000 fbd4 	bl	8001664 <HAL_GPIO_WritePin>
	}

}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000094 	.word	0x20000094
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	2000008c 	.word	0x2000008c

08000ed0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_LPUART1_UART_Init+0x90>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f14:	f002 f8bc 	bl	8003090 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff fd41 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f26:	f002 fe09 	bl	8003b3c <HAL_UARTEx_SetTxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f30:	f7ff fd38 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f38:	f002 fe3e 	bl	8003bb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f42:	f7ff fd2f 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f48:	f002 fdbf 	bl	8003aca <HAL_UARTEx_DisableFifoMode>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f52:	f7ff fd27 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001b4 	.word	0x200001b4
 8000f60:	40008000 	.word	0x40008000

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_UART_MspInit+0x7c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d128      	bne.n	8000fd8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_UART_MspInit+0x80>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 f9c4 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40008000 	.word	0x40008000
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8000ff0:	1d39      	adds	r1, r7, #4
 8000ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <__io_putchar+0x20>)
 8000ffa:	f002 f899 	bl	8003130 <HAL_UART_Transmit>
  return ch;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001b4 	.word	0x200001b4

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001036:	f7ff fead 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f002 fe4f 	bl	8003cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fc0b 	bl	8000858 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   r0, =_estack
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001050:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8001054:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001058:	20000258 	.word	0x20000258

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>

0800105e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f939 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f80e 	bl	8001090 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e001      	b.n	8001084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001080:	f7ff fd84 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001084:	79fb      	ldrb	r3, [r7, #7]

}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d022      	beq.n	80010ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_InitTick+0x6c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_InitTick+0x68>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f944 	bl	8001346 <HAL_SYSTICK_Config>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10f      	bne.n	80010e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	d809      	bhi.n	80010de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ca:	2200      	movs	r2, #0
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	f04f 30ff 	mov.w	r0, #4294967295
 80010d2:	f000 f910 	bl	80012f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_InitTick+0x70>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e007      	b.n	80010ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e004      	b.n	80010ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x1c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x20>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4413      	add	r3, r2
 8001112:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x1c>)
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000244 	.word	0x20000244
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000244 	.word	0x20000244

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff40 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff33 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa4 	bl	800129c <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800136e:	e15a      	b.n	8001626 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 814c 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d00b      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800139c:	2b11      	cmp	r3, #17
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0xea>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b12      	cmp	r3, #18
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80a6 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001516:	d01f      	beq.n	8001558 <HAL_GPIO_Init+0x1f8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x2ec>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1f4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a49      	ldr	r2, [pc, #292]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2fc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001540:	2305      	movs	r3, #5
 8001542:	e00a      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001544:	2306      	movs	r3, #6
 8001546:	e008      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001548:	2304      	movs	r3, #4
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 800154c:	2303      	movs	r3, #3
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001558:	2300      	movs	r3, #0
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156a:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_GPIO_Init+0x300>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x300>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_GPIO_Init+0x300>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f ae9d 	bne.w	8001370 <HAL_GPIO_Init+0x10>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	48001400 	.word	0x48001400
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f806 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a46      	ldr	r2, [pc, #280]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b40      	ldr	r3, [pc, #256]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a3f      	ldr	r2, [pc, #252]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d158      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e057      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e04d      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001774:	d141      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001782:	d131      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178a:	4a23      	ldr	r2, [pc, #140]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2232      	movs	r2, #50	; 0x32
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ba:	e002      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d102      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f2      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d112      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e011      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017f8:	e007      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001808:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40007000 	.word	0x40007000
 800181c:	20000000 	.word	0x20000000
 8001820:	431bde83 	.word	0x431bde83

08001824 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001832:	6093      	str	r3, [r2, #8]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e308      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001862:	4ba3      	ldr	r3, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0x3e>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d002      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e2e3      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a90      	ldr	r2, [pc, #576]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a80      	ldr	r2, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc14 	bl	8001128 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc10 	bl	8001128 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e2a8      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fc00 	bl	8001128 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fbfc 	bl	8001128 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e294      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d075      	beq.n	8001a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195a:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d102      	bne.n	800197a <HAL_RCC_OscConfig+0x136>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d002      	beq.n	8001980 <HAL_RCC_OscConfig+0x13c>
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d11f      	bne.n	80019c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x154>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e267      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4952      	ldr	r1, [pc, #328]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ac:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <HAL_RCC_OscConfig+0x2b0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb6d 	bl	8001090 <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e253      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fba8 	bl	8001128 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fba4 	bl	8001128 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e23c      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	4939      	ldr	r1, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e01a      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb84 	bl	8001128 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb80 	bl	8001128 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e218      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03c      	beq.n	8001acc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb5d 	bl	8001128 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fb59 	bl	8001128 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1f1      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ef      	beq.n	8001a72 <HAL_RCC_OscConfig+0x22e>
 8001a92:	e01b      	b.n	8001acc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb40 	bl	8001128 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb3c 	bl	8001128 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1d4      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ef      	bne.n	8001aac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80ab 	beq.w	8001c30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2b4>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e005      	b.n	8001afa <HAL_RCC_OscConfig+0x2b6>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	20000004 	.word	0x20000004
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4baf      	ldr	r3, [pc, #700]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4aae      	ldr	r2, [pc, #696]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4bac      	ldr	r3, [pc, #688]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	4ba9      	ldr	r3, [pc, #676]	; (8001dc0 <HAL_RCC_OscConfig+0x57c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b26:	4ba6      	ldr	r3, [pc, #664]	; (8001dc0 <HAL_RCC_OscConfig+0x57c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4aa5      	ldr	r2, [pc, #660]	; (8001dc0 <HAL_RCC_OscConfig+0x57c>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff faf9 	bl	8001128 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff faf5 	bl	8001128 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e18d      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <HAL_RCC_OscConfig+0x57c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x32e>
 8001b60:	4b96      	ldr	r3, [pc, #600]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a95      	ldr	r2, [pc, #596]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e024      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d110      	bne.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b7a:	4b90      	ldr	r3, [pc, #576]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	4a8e      	ldr	r2, [pc, #568]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8a:	4b8c      	ldr	r3, [pc, #560]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b9c:	4b87      	ldr	r3, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a86      	ldr	r2, [pc, #536]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bac:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	4a82      	ldr	r2, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d016      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fab0 	bl	8001128 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff faac 	bl	8001128 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e142      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ed      	beq.n	8001bcc <HAL_RCC_OscConfig+0x388>
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fa99 	bl	8001128 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fa95 	bl	8001128 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e12b      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ed      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a64      	ldr	r2, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c44:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4a:	4a5c      	ldr	r2, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fa68 	bl	8001128 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7ff fa64 	bl	8001128 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0fc      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6e:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x418>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fa4b 	bl	8001128 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff fa47 	bl	8001128 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0df      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80d3 	beq.w	8001e66 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc0:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	f000 808d 	beq.w	8001de8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d15a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fa21 	bl	8001128 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fa1d 	bl	8001128 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b5      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x580>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6a11      	ldr	r1, [r2, #32]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d22:	0212      	lsls	r2, r2, #8
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	0552      	lsls	r2, r2, #21
 8001d30:	4311      	orrs	r1, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d36:	0852      	lsrs	r2, r2, #1
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	0652      	lsls	r2, r2, #25
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d42:	06d2      	lsls	r2, r2, #27
 8001d44:	430a      	orrs	r2, r1
 8001d46:	491d      	ldr	r1, [pc, #116]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f9e0 	bl	8001128 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f9dc 	bl	8001128 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e074      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x528>
 8001d8a:	e06c      	b.n	8001e66 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_RCC_OscConfig+0x578>)
 8001daa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f9b8 	bl	8001128 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	e00e      	b.n	8001dda <HAL_RCC_OscConfig+0x596>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f9ae 	bl	8001128 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e046      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x62c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x584>
 8001de6:	e03e      	b.n	8001e66 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e039      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_OscConfig+0x62c>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d12c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	3b01      	subs	r3, #1
 8001e14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d123      	bne.n	8001e62 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d11b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d113      	bne.n	8001e62 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e11e      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b91      	ldr	r3, [pc, #580]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	498c      	ldr	r1, [pc, #560]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b8a      	ldr	r3, [pc, #552]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e106      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d073      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d129      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0f4      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ee0:	f000 f99e 	bl	8002220 <RCC_GetSysClockFreqFromPLLSource>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4a7c      	ldr	r2, [pc, #496]	; (80020dc <HAL_RCC_ClockConfig+0x268>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d93f      	bls.n	8001f6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eee:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d033      	beq.n	8001f6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d12f      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f0e:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f16:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e024      	b.n	8001f6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0c6      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0be      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f4c:	f000 f8ce 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_RCC_ClockConfig+0x268>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d909      	bls.n	8001f6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f62:	4a5d      	ldr	r2, [pc, #372]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4957      	ldr	r1, [pc, #348]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f80:	f7ff f8d2 	bl	8001128 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f8ce 	bl	8001128 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e095      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fe8:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4936      	ldr	r1, [pc, #216]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
 8002002:	e008      	b.n	8002016 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d105      	bne.n	8002016 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8002010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002014:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d21d      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 020f 	bic.w	r2, r3, #15
 800202c:	4929      	ldr	r1, [pc, #164]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002034:	f7ff f878 	bl	8001128 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7ff f874 	bl	8001128 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e03b      	b.n	80020ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d1ed      	bne.n	800203c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4917      	ldr	r1, [pc, #92]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	490f      	ldr	r1, [pc, #60]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209e:	f000 f825 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	490c      	ldr	r1, [pc, #48]	; (80020e0 <HAL_RCC_ClockConfig+0x26c>)
 80020b0:	5ccb      	ldrb	r3, [r1, r3]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x270>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe ffe4 	bl	8001090 <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	04c4b400 	.word	0x04c4b400
 80020e0:	08004c28 	.word	0x08004c28
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e047      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d102      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e03e      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d136      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3301      	adds	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d10c      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002140:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	68d2      	ldr	r2, [r2, #12]
 800214c:	0a12      	lsrs	r2, r2, #8
 800214e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
      break;
 8002158:	e00c      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	0a12      	lsrs	r2, r2, #8
 8002168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0e5b      	lsrs	r3, r3, #25
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e001      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002194:	693b      	ldr	r3, [r7, #16]
}
 8002196:	4618      	mov	r0, r3
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	016e3600 	.word	0x016e3600

080021b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08004c38 	.word	0x08004c38

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f8:	f7ff ffda 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x28>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08004c38 	.word	0x08004c38

08002220 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d10c      	bne.n	800225e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800224e:	68d2      	ldr	r2, [r2, #12]
 8002250:	0a12      	lsrs	r2, r2, #8
 8002252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
    break;
 800225c:	e00c      	b.n	8002278 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002268:	68d2      	ldr	r2, [r2, #12]
 800226a:	0a12      	lsrs	r2, r2, #8
 800226c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    break;
 8002276:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0e5b      	lsrs	r3, r3, #25
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	016e3600 	.word	0x016e3600
 80022a8:	00f42400 	.word	0x00f42400

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8098 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a39      	ldr	r2, [pc, #228]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002302:	f7fe ff11 	bl	8001128 <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002308:	e009      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe ff0d 	bl	8001128 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
        break;
 800231c:	e005      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ef      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d159      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01e      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	d019      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fecd 	bl	8001128 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002390:	e00b      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fec9 	bl	8001128 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d902      	bls.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	74fb      	strb	r3, [r7, #19]
            break;
 80023a8:	e006      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ec      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023d4:	e008      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	74bb      	strb	r3, [r7, #18]
 80023da:	e005      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e8:	7c7b      	ldrb	r3, [r7, #17]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4baf      	ldr	r3, [pc, #700]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	4aae      	ldr	r2, [pc, #696]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002406:	4ba9      	ldr	r3, [pc, #676]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f023 0203 	bic.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	49a5      	ldr	r1, [pc, #660]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002428:	4ba0      	ldr	r3, [pc, #640]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 020c 	bic.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	499d      	ldr	r1, [pc, #628]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800244a:	4b98      	ldr	r3, [pc, #608]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4994      	ldr	r1, [pc, #592]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246c:	4b8f      	ldr	r3, [pc, #572]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	498c      	ldr	r1, [pc, #560]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800248e:	4b87      	ldr	r3, [pc, #540]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4983      	ldr	r1, [pc, #524]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	497b      	ldr	r1, [pc, #492]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4972      	ldr	r1, [pc, #456]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f4:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	496a      	ldr	r1, [pc, #424]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002516:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	4961      	ldr	r1, [pc, #388]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002538:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800253a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	4959      	ldr	r1, [pc, #356]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	4950      	ldr	r1, [pc, #320]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4948      	ldr	r1, [pc, #288]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259a:	d105      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259c:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	493a      	ldr	r1, [pc, #232]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d105      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a34      	ldr	r2, [pc, #208]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	492c      	ldr	r1, [pc, #176]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260a:	d105      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002616:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	491e      	ldr	r1, [pc, #120]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002642:	d105      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800264a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4910      	ldr	r1, [pc, #64]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4902      	ldr	r1, [pc, #8]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026aa:	e001      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80026ac:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b8:	d105      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	4917      	ldr	r1, [pc, #92]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d105      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800270c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4909      	ldr	r1, [pc, #36]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002728:	d105      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002734:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002736:	7cbb      	ldrb	r3, [r7, #18]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e09d      	b.n	8002892 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002766:	d009      	beq.n	800277c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
 800276e:	e005      	b.n	800277c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe f982 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027bc:	d902      	bls.n	80027c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e002      	b.n	80027ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027d2:	d007      	beq.n	80027e4 <HAL_SPI_Init+0xa0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027dc:	d002      	beq.n	80027e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	ea42 0103 	orr.w	r1, r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	f003 0204 	and.w	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002860:	ea42 0103 	orr.w	r1, r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e049      	b.n	8002940 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7fe faaf 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f000 fa55 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e054      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_TIM_Base_Start_IT+0xd0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d01d      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <HAL_TIM_Base_Start_IT+0xd8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_Base_Start_IT+0xe0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_TIM_Base_Start_IT+0xe4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x80>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_TIM_Base_Start_IT+0xe8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d115      	bne.n	80029f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_TIM_Base_Start_IT+0xec>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d015      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0xbe>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d011      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	e008      	b.n	8002a06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40013400 	.word	0x40013400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40015000 	.word	0x40015000
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0202 	mvn.w	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f965 	bl	8002d4a <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f957 	bl	8002d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f968 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0204 	mvn.w	r2, #4
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f93b 	bl	8002d4a <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f92d 	bl	8002d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f93e 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f911 	bl	8002d4a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f903 	bl	8002d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f914 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0210 	mvn.w	r2, #16
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2208      	movs	r2, #8
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8e7 	bl	8002d4a <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8d9 	bl	8002d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8ea 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0201 	mvn.w	r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f95a 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa18 	bl	8003018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d10e      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa0b 	bl	800302c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d10e      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f898 	bl	8002d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f06f 0220 	mvn.w	r2, #32
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f9cb 	bl	8003004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9d1 	bl	8003040 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d10f      	bne.n	8002cce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9c3 	bl	8003054 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cdc:	d10f      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f9b5 	bl	8003068 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d10f      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f9a7 	bl	800307c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a46      	ldr	r2, [pc, #280]	; (8002eb4 <TIM_Base_SetConfig+0x12c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d017      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d013      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <TIM_Base_SetConfig+0x130>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00f      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <TIM_Base_SetConfig+0x134>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a41      	ldr	r2, [pc, #260]	; (8002ec0 <TIM_Base_SetConfig+0x138>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a40      	ldr	r2, [pc, #256]	; (8002ec4 <TIM_Base_SetConfig+0x13c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x48>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <TIM_Base_SetConfig+0x140>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <TIM_Base_SetConfig+0x12c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d023      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d01f      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <TIM_Base_SetConfig+0x130>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01b      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <TIM_Base_SetConfig+0x134>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d017      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	; (8002ec0 <TIM_Base_SetConfig+0x138>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <TIM_Base_SetConfig+0x13c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00f      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <TIM_Base_SetConfig+0x144>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <TIM_Base_SetConfig+0x148>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <TIM_Base_SetConfig+0x14c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0xaa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <TIM_Base_SetConfig+0x140>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <TIM_Base_SetConfig+0x12c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <TIM_Base_SetConfig+0x110>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <TIM_Base_SetConfig+0x13c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00f      	beq.n	8002e98 <TIM_Base_SetConfig+0x110>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <TIM_Base_SetConfig+0x144>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <TIM_Base_SetConfig+0x110>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <TIM_Base_SetConfig+0x148>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0x110>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <TIM_Base_SetConfig+0x14c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0x110>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <TIM_Base_SetConfig+0x140>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40013400 	.word	0x40013400
 8002ec8:	40015000 	.word	0x40015000
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e074      	b.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a33      	ldr	r2, [pc, #204]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d01d      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10c      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40013400 	.word	0x40013400
 8002ff0:	40015000 	.word	0x40015000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40014000 	.word	0x40014000

08003004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e042      	b.n	8003128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7fd ff55 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2224      	movs	r2, #36	; 0x24
 80030be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8c2 	bl	800325c <UART_SetConfig>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e022      	b.n	8003128 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fb80 	bl	80037f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800310e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fc07 	bl	8003934 <UART_CheckIdleState>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	2b20      	cmp	r3, #32
 8003148:	f040 8083 	bne.w	8003252 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Transmit+0x28>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e07b      	b.n	8003254 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_UART_Transmit+0x3a>
 8003166:	2302      	movs	r3, #2
 8003168:	e074      	b.n	8003254 <HAL_UART_Transmit+0x124>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003182:	f7fd ffd1 	bl	8001128 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	d108      	bne.n	80031b4 <HAL_UART_Transmit+0x84>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e003      	b.n	80031bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80031c4:	e02c      	b.n	8003220 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fbfa 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e039      	b.n	8003254 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3302      	adds	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e007      	b.n	800320e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3301      	adds	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1cc      	bne.n	80031c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	2140      	movs	r1, #64	; 0x40
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fbc7 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e006      	b.n	8003254 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
  }
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	b5b0      	push	{r4, r5, r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4313      	orrs	r3, r2
 800327e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4bb1      	ldr	r3, [pc, #708]	; (800354c <UART_SetConfig+0x2f0>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	69f9      	ldr	r1, [r7, #28]
 8003290:	430b      	orrs	r3, r1
 8003292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4aa6      	ldr	r2, [pc, #664]	; (8003550 <UART_SetConfig+0x2f4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	69f9      	ldr	r1, [r7, #28]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f023 010f 	bic.w	r1, r3, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a97      	ldr	r2, [pc, #604]	; (8003554 <UART_SetConfig+0x2f8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d120      	bne.n	800333e <UART_SetConfig+0xe2>
 80032fc:	4b96      	ldr	r3, [pc, #600]	; (8003558 <UART_SetConfig+0x2fc>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d816      	bhi.n	8003338 <UART_SetConfig+0xdc>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0xb4>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003321 	.word	0x08003321
 8003314:	0800332d 	.word	0x0800332d
 8003318:	08003327 	.word	0x08003327
 800331c:	08003333 	.word	0x08003333
 8003320:	2301      	movs	r3, #1
 8003322:	76fb      	strb	r3, [r7, #27]
 8003324:	e0e7      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003326:	2302      	movs	r3, #2
 8003328:	76fb      	strb	r3, [r7, #27]
 800332a:	e0e4      	b.n	80034f6 <UART_SetConfig+0x29a>
 800332c:	2304      	movs	r3, #4
 800332e:	76fb      	strb	r3, [r7, #27]
 8003330:	e0e1      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003332:	2308      	movs	r3, #8
 8003334:	76fb      	strb	r3, [r7, #27]
 8003336:	e0de      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003338:	2310      	movs	r3, #16
 800333a:	76fb      	strb	r3, [r7, #27]
 800333c:	e0db      	b.n	80034f6 <UART_SetConfig+0x29a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a86      	ldr	r2, [pc, #536]	; (800355c <UART_SetConfig+0x300>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d132      	bne.n	80033ae <UART_SetConfig+0x152>
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <UART_SetConfig+0x2fc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d828      	bhi.n	80033a8 <UART_SetConfig+0x14c>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x100>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003391 	.word	0x08003391
 8003360:	080033a9 	.word	0x080033a9
 8003364:	080033a9 	.word	0x080033a9
 8003368:	080033a9 	.word	0x080033a9
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033a9 	.word	0x080033a9
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033a9 	.word	0x080033a9
 800337c:	08003397 	.word	0x08003397
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033a9 	.word	0x080033a9
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2300      	movs	r3, #0
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e0af      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003396:	2302      	movs	r3, #2
 8003398:	76fb      	strb	r3, [r7, #27]
 800339a:	e0ac      	b.n	80034f6 <UART_SetConfig+0x29a>
 800339c:	2304      	movs	r3, #4
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e0a9      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033a2:	2308      	movs	r3, #8
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e0a6      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033a8:	2310      	movs	r3, #16
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e0a3      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6b      	ldr	r2, [pc, #428]	; (8003560 <UART_SetConfig+0x304>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d120      	bne.n	80033fa <UART_SetConfig+0x19e>
 80033b8:	4b67      	ldr	r3, [pc, #412]	; (8003558 <UART_SetConfig+0x2fc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033c2:	2b30      	cmp	r3, #48	; 0x30
 80033c4:	d013      	beq.n	80033ee <UART_SetConfig+0x192>
 80033c6:	2b30      	cmp	r3, #48	; 0x30
 80033c8:	d814      	bhi.n	80033f4 <UART_SetConfig+0x198>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d009      	beq.n	80033e2 <UART_SetConfig+0x186>
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d810      	bhi.n	80033f4 <UART_SetConfig+0x198>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <UART_SetConfig+0x180>
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d006      	beq.n	80033e8 <UART_SetConfig+0x18c>
 80033da:	e00b      	b.n	80033f4 <UART_SetConfig+0x198>
 80033dc:	2300      	movs	r3, #0
 80033de:	76fb      	strb	r3, [r7, #27]
 80033e0:	e089      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033e2:	2302      	movs	r3, #2
 80033e4:	76fb      	strb	r3, [r7, #27]
 80033e6:	e086      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033e8:	2304      	movs	r3, #4
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e083      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033ee:	2308      	movs	r3, #8
 80033f0:	76fb      	strb	r3, [r7, #27]
 80033f2:	e080      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033f4:	2310      	movs	r3, #16
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	e07d      	b.n	80034f6 <UART_SetConfig+0x29a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a59      	ldr	r2, [pc, #356]	; (8003564 <UART_SetConfig+0x308>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d120      	bne.n	8003446 <UART_SetConfig+0x1ea>
 8003404:	4b54      	ldr	r3, [pc, #336]	; (8003558 <UART_SetConfig+0x2fc>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800340e:	2bc0      	cmp	r3, #192	; 0xc0
 8003410:	d013      	beq.n	800343a <UART_SetConfig+0x1de>
 8003412:	2bc0      	cmp	r3, #192	; 0xc0
 8003414:	d814      	bhi.n	8003440 <UART_SetConfig+0x1e4>
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d009      	beq.n	800342e <UART_SetConfig+0x1d2>
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d810      	bhi.n	8003440 <UART_SetConfig+0x1e4>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <UART_SetConfig+0x1cc>
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d006      	beq.n	8003434 <UART_SetConfig+0x1d8>
 8003426:	e00b      	b.n	8003440 <UART_SetConfig+0x1e4>
 8003428:	2300      	movs	r3, #0
 800342a:	76fb      	strb	r3, [r7, #27]
 800342c:	e063      	b.n	80034f6 <UART_SetConfig+0x29a>
 800342e:	2302      	movs	r3, #2
 8003430:	76fb      	strb	r3, [r7, #27]
 8003432:	e060      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003434:	2304      	movs	r3, #4
 8003436:	76fb      	strb	r3, [r7, #27]
 8003438:	e05d      	b.n	80034f6 <UART_SetConfig+0x29a>
 800343a:	2308      	movs	r3, #8
 800343c:	76fb      	strb	r3, [r7, #27]
 800343e:	e05a      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003440:	2310      	movs	r3, #16
 8003442:	76fb      	strb	r3, [r7, #27]
 8003444:	e057      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a47      	ldr	r2, [pc, #284]	; (8003568 <UART_SetConfig+0x30c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d125      	bne.n	800349c <UART_SetConfig+0x240>
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <UART_SetConfig+0x2fc>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345e:	d017      	beq.n	8003490 <UART_SetConfig+0x234>
 8003460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003464:	d817      	bhi.n	8003496 <UART_SetConfig+0x23a>
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d00b      	beq.n	8003484 <UART_SetConfig+0x228>
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d811      	bhi.n	8003496 <UART_SetConfig+0x23a>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <UART_SetConfig+0x222>
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d006      	beq.n	800348a <UART_SetConfig+0x22e>
 800347c:	e00b      	b.n	8003496 <UART_SetConfig+0x23a>
 800347e:	2300      	movs	r3, #0
 8003480:	76fb      	strb	r3, [r7, #27]
 8003482:	e038      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003484:	2302      	movs	r3, #2
 8003486:	76fb      	strb	r3, [r7, #27]
 8003488:	e035      	b.n	80034f6 <UART_SetConfig+0x29a>
 800348a:	2304      	movs	r3, #4
 800348c:	76fb      	strb	r3, [r7, #27]
 800348e:	e032      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003490:	2308      	movs	r3, #8
 8003492:	76fb      	strb	r3, [r7, #27]
 8003494:	e02f      	b.n	80034f6 <UART_SetConfig+0x29a>
 8003496:	2310      	movs	r3, #16
 8003498:	76fb      	strb	r3, [r7, #27]
 800349a:	e02c      	b.n	80034f6 <UART_SetConfig+0x29a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <UART_SetConfig+0x2f4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d125      	bne.n	80034f2 <UART_SetConfig+0x296>
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <UART_SetConfig+0x2fc>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b4:	d017      	beq.n	80034e6 <UART_SetConfig+0x28a>
 80034b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ba:	d817      	bhi.n	80034ec <UART_SetConfig+0x290>
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d00b      	beq.n	80034da <UART_SetConfig+0x27e>
 80034c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c6:	d811      	bhi.n	80034ec <UART_SetConfig+0x290>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <UART_SetConfig+0x278>
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d006      	beq.n	80034e0 <UART_SetConfig+0x284>
 80034d2:	e00b      	b.n	80034ec <UART_SetConfig+0x290>
 80034d4:	2300      	movs	r3, #0
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x29a>
 80034da:	2302      	movs	r3, #2
 80034dc:	76fb      	strb	r3, [r7, #27]
 80034de:	e00a      	b.n	80034f6 <UART_SetConfig+0x29a>
 80034e0:	2304      	movs	r3, #4
 80034e2:	76fb      	strb	r3, [r7, #27]
 80034e4:	e007      	b.n	80034f6 <UART_SetConfig+0x29a>
 80034e6:	2308      	movs	r3, #8
 80034e8:	76fb      	strb	r3, [r7, #27]
 80034ea:	e004      	b.n	80034f6 <UART_SetConfig+0x29a>
 80034ec:	2310      	movs	r3, #16
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	e001      	b.n	80034f6 <UART_SetConfig+0x29a>
 80034f2:	2310      	movs	r3, #16
 80034f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <UART_SetConfig+0x2f4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	f040 809f 	bne.w	8003640 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003502:	7efb      	ldrb	r3, [r7, #27]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d837      	bhi.n	8003578 <UART_SetConfig+0x31c>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x2b4>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003535 	.word	0x08003535
 8003514:	08003579 	.word	0x08003579
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003579 	.word	0x08003579
 8003520:	08003543 	.word	0x08003543
 8003524:	08003579 	.word	0x08003579
 8003528:	08003579 	.word	0x08003579
 800352c:	08003579 	.word	0x08003579
 8003530:	08003571 	.word	0x08003571
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7fe fe48 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003538:	6178      	str	r0, [r7, #20]
        break;
 800353a:	e022      	b.n	8003582 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <UART_SetConfig+0x310>)
 800353e:	617b      	str	r3, [r7, #20]
        break;
 8003540:	e01f      	b.n	8003582 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fdd3 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8003546:	6178      	str	r0, [r7, #20]
        break;
 8003548:	e01b      	b.n	8003582 <UART_SetConfig+0x326>
 800354a:	bf00      	nop
 800354c:	cfff69f3 	.word	0xcfff69f3
 8003550:	40008000 	.word	0x40008000
 8003554:	40013800 	.word	0x40013800
 8003558:	40021000 	.word	0x40021000
 800355c:	40004400 	.word	0x40004400
 8003560:	40004800 	.word	0x40004800
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40005000 	.word	0x40005000
 800356c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003574:	617b      	str	r3, [r7, #20]
        break;
 8003576:	e004      	b.n	8003582 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	76bb      	strb	r3, [r7, #26]
        break;
 8003580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 811b 	beq.w	80037c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	4a96      	ldr	r2, [pc, #600]	; (80037e8 <UART_SetConfig+0x58c>)
 8003590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003594:	461a      	mov	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fbb3 f3f2 	udiv	r3, r3, r2
 800359c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d305      	bcc.n	80035ba <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	76bb      	strb	r3, [r7, #26]
 80035be:	e0ff      	b.n	80037c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4a86      	ldr	r2, [pc, #536]	; (80037e8 <UART_SetConfig+0x58c>)
 80035ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f7fc fe72 	bl	80002c0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	020b      	lsls	r3, r1, #8
 80035ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035f2:	0202      	lsls	r2, r0, #8
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	6849      	ldr	r1, [r1, #4]
 80035f8:	0849      	lsrs	r1, r1, #1
 80035fa:	4608      	mov	r0, r1
 80035fc:	f04f 0100 	mov.w	r1, #0
 8003600:	1814      	adds	r4, r2, r0
 8003602:	eb43 0501 	adc.w	r5, r3, r1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	4620      	mov	r0, r4
 8003612:	4629      	mov	r1, r5
 8003614:	f7fc fe54 	bl	80002c0 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003626:	d308      	bcc.n	800363a <UART_SetConfig+0x3de>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362e:	d204      	bcs.n	800363a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	60da      	str	r2, [r3, #12]
 8003638:	e0c2      	b.n	80037c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	76bb      	strb	r3, [r7, #26]
 800363e:	e0bf      	b.n	80037c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	d165      	bne.n	8003716 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800364a:	7efb      	ldrb	r3, [r7, #27]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d828      	bhi.n	80036a2 <UART_SetConfig+0x446>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0x3fc>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003685 	.word	0x08003685
 8003660:	0800368d 	.word	0x0800368d
 8003664:	080036a3 	.word	0x080036a3
 8003668:	08003693 	.word	0x08003693
 800366c:	080036a3 	.word	0x080036a3
 8003670:	080036a3 	.word	0x080036a3
 8003674:	080036a3 	.word	0x080036a3
 8003678:	0800369b 	.word	0x0800369b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7fe fda4 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003680:	6178      	str	r0, [r7, #20]
        break;
 8003682:	e013      	b.n	80036ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7fe fdb6 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003688:	6178      	str	r0, [r7, #20]
        break;
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800368c:	4b57      	ldr	r3, [pc, #348]	; (80037ec <UART_SetConfig+0x590>)
 800368e:	617b      	str	r3, [r7, #20]
        break;
 8003690:	e00c      	b.n	80036ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003692:	f7fe fd2b 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8003696:	6178      	str	r0, [r7, #20]
        break;
 8003698:	e008      	b.n	80036ac <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	617b      	str	r3, [r7, #20]
        break;
 80036a0:	e004      	b.n	80036ac <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	76bb      	strb	r3, [r7, #26]
        break;
 80036aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8086 	beq.w	80037c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <UART_SetConfig+0x58c>)
 80036ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036be:	461a      	mov	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c6:	005a      	lsls	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	d916      	bls.n	8003710 <UART_SetConfig+0x4b4>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d212      	bcs.n	8003710 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f023 030f 	bic.w	r3, r3, #15
 80036f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	b29a      	uxth	r2, r3
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	4313      	orrs	r3, r2
 8003704:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	89fa      	ldrh	r2, [r7, #14]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e057      	b.n	80037c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	76bb      	strb	r3, [r7, #26]
 8003714:	e054      	b.n	80037c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003716:	7efb      	ldrb	r3, [r7, #27]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d828      	bhi.n	800376e <UART_SetConfig+0x512>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0x4c8>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003749 	.word	0x08003749
 8003728:	08003751 	.word	0x08003751
 800372c:	08003759 	.word	0x08003759
 8003730:	0800376f 	.word	0x0800376f
 8003734:	0800375f 	.word	0x0800375f
 8003738:	0800376f 	.word	0x0800376f
 800373c:	0800376f 	.word	0x0800376f
 8003740:	0800376f 	.word	0x0800376f
 8003744:	08003767 	.word	0x08003767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fd3e 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 800374c:	6178      	str	r0, [r7, #20]
        break;
 800374e:	e013      	b.n	8003778 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003750:	f7fe fd50 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003754:	6178      	str	r0, [r7, #20]
        break;
 8003756:	e00f      	b.n	8003778 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <UART_SetConfig+0x590>)
 800375a:	617b      	str	r3, [r7, #20]
        break;
 800375c:	e00c      	b.n	8003778 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe fcc5 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8003762:	6178      	str	r0, [r7, #20]
        break;
 8003764:	e008      	b.n	8003778 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	617b      	str	r3, [r7, #20]
        break;
 800376c:	e004      	b.n	8003778 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	76bb      	strb	r3, [r7, #26]
        break;
 8003776:	bf00      	nop
    }

    if (pclk != 0U)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <UART_SetConfig+0x58c>)
 8003784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003788:	461a      	mov	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	441a      	add	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d908      	bls.n	80037bc <UART_SetConfig+0x560>
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d204      	bcs.n	80037bc <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	e001      	b.n	80037c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bdb0      	pop	{r4, r5, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08004c40 	.word	0x08004c40
 80037ec:	00f42400 	.word	0x00f42400

080037f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d10a      	bne.n	8003906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003944:	f7fd fbf0 	bl	8001128 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d10e      	bne.n	8003976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f82f 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e025      	b.n	80039c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d10e      	bne.n	80039a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f819 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00f      	b.n	80039c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	e062      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d05e      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd fba0 	bl	8001128 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <UART_WaitOnFlagUntilTimeout+0x30>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11d      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e045      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02e      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d126      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d08d      	beq.n	80039dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e027      	b.n	8003b30 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e02d      	b.n	8003bb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	; 0x24
 8003b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f84f 	bl	8003c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e02d      	b.n	8003c2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f811 	bl	8003c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d108      	bne.n	8003c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c54:	e031      	b.n	8003cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c56:	2308      	movs	r3, #8
 8003c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	0e5b      	lsrs	r3, r3, #25
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	0f5b      	lsrs	r3, r3, #29
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c7e:	7bbb      	ldrb	r3, [r7, #14]
 8003c80:	7b3a      	ldrb	r2, [r7, #12]
 8003c82:	4911      	ldr	r1, [pc, #68]	; (8003cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003c84:	5c8a      	ldrb	r2, [r1, r2]
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c8a:	7b3a      	ldrb	r2, [r7, #12]
 8003c8c:	490f      	ldr	r1, [pc, #60]	; (8003ccc <UARTEx_SetNbDataToProcess+0x98>)
 8003c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	7b7a      	ldrb	r2, [r7, #13]
 8003ca0:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003ca2:	5c8a      	ldrb	r2, [r1, r2]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ca8:	7b7a      	ldrb	r2, [r7, #13]
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <UARTEx_SetNbDataToProcess+0x98>)
 8003cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	08004c58 	.word	0x08004c58
 8003ccc:	08004c60 	.word	0x08004c60

08003cd0 <__errno>:
 8003cd0:	4b01      	ldr	r3, [pc, #4]	; (8003cd8 <__errno+0x8>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4d0d      	ldr	r5, [pc, #52]	; (8003d14 <__libc_init_array+0x38>)
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <__libc_init_array+0x3c>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	42a6      	cmp	r6, r4
 8003cea:	d109      	bne.n	8003d00 <__libc_init_array+0x24>
 8003cec:	4d0b      	ldr	r5, [pc, #44]	; (8003d1c <__libc_init_array+0x40>)
 8003cee:	4c0c      	ldr	r4, [pc, #48]	; (8003d20 <__libc_init_array+0x44>)
 8003cf0:	f000 ff76 	bl	8004be0 <_init>
 8003cf4:	1b64      	subs	r4, r4, r5
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	42a6      	cmp	r6, r4
 8003cfc:	d105      	bne.n	8003d0a <__libc_init_array+0x2e>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d04:	4798      	blx	r3
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7ee      	b.n	8003ce8 <__libc_init_array+0xc>
 8003d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0e:	4798      	blx	r3
 8003d10:	3601      	adds	r6, #1
 8003d12:	e7f2      	b.n	8003cfa <__libc_init_array+0x1e>
 8003d14:	08004d08 	.word	0x08004d08
 8003d18:	08004d08 	.word	0x08004d08
 8003d1c:	08004d08 	.word	0x08004d08
 8003d20:	08004d0c 	.word	0x08004d0c

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <iprintf>:
 8003d34:	b40f      	push	{r0, r1, r2, r3}
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <iprintf+0x2c>)
 8003d38:	b513      	push	{r0, r1, r4, lr}
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	b124      	cbz	r4, 8003d48 <iprintf+0x14>
 8003d3e:	69a3      	ldr	r3, [r4, #24]
 8003d40:	b913      	cbnz	r3, 8003d48 <iprintf+0x14>
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 f866 	bl	8003e14 <__sinit>
 8003d48:	ab05      	add	r3, sp, #20
 8003d4a:	9a04      	ldr	r2, [sp, #16]
 8003d4c:	68a1      	ldr	r1, [r4, #8]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 f983 	bl	800405c <_vfiprintf_r>
 8003d56:	b002      	add	sp, #8
 8003d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5c:	b004      	add	sp, #16
 8003d5e:	4770      	bx	lr
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <std>:
 8003d64:	2300      	movs	r3, #0
 8003d66:	b510      	push	{r4, lr}
 8003d68:	4604      	mov	r4, r0
 8003d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d72:	6083      	str	r3, [r0, #8]
 8003d74:	8181      	strh	r1, [r0, #12]
 8003d76:	6643      	str	r3, [r0, #100]	; 0x64
 8003d78:	81c2      	strh	r2, [r0, #14]
 8003d7a:	6183      	str	r3, [r0, #24]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	2208      	movs	r2, #8
 8003d80:	305c      	adds	r0, #92	; 0x5c
 8003d82:	f7ff ffcf 	bl	8003d24 <memset>
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <std+0x38>)
 8003d88:	6263      	str	r3, [r4, #36]	; 0x24
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <std+0x3c>)
 8003d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <std+0x40>)
 8003d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <std+0x44>)
 8003d94:	6224      	str	r4, [r4, #32]
 8003d96:	6323      	str	r3, [r4, #48]	; 0x30
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08004605 	.word	0x08004605
 8003da0:	08004627 	.word	0x08004627
 8003da4:	0800465f 	.word	0x0800465f
 8003da8:	08004683 	.word	0x08004683

08003dac <_cleanup_r>:
 8003dac:	4901      	ldr	r1, [pc, #4]	; (8003db4 <_cleanup_r+0x8>)
 8003dae:	f000 b8af 	b.w	8003f10 <_fwalk_reent>
 8003db2:	bf00      	nop
 8003db4:	0800495d 	.word	0x0800495d

08003db8 <__sfmoreglue>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	1e4a      	subs	r2, r1, #1
 8003dbc:	2568      	movs	r5, #104	; 0x68
 8003dbe:	4355      	muls	r5, r2
 8003dc0:	460e      	mov	r6, r1
 8003dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dc6:	f000 f8c5 	bl	8003f54 <_malloc_r>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	b140      	cbz	r0, 8003de0 <__sfmoreglue+0x28>
 8003dce:	2100      	movs	r1, #0
 8003dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8003dd4:	300c      	adds	r0, #12
 8003dd6:	60a0      	str	r0, [r4, #8]
 8003dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ddc:	f7ff ffa2 	bl	8003d24 <memset>
 8003de0:	4620      	mov	r0, r4
 8003de2:	bd70      	pop	{r4, r5, r6, pc}

08003de4 <__sfp_lock_acquire>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__sfp_lock_acquire+0x8>)
 8003de6:	f000 b8b3 	b.w	8003f50 <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	20000250 	.word	0x20000250

08003df0 <__sfp_lock_release>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__sfp_lock_release+0x8>)
 8003df2:	f000 b8ae 	b.w	8003f52 <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000250 	.word	0x20000250

08003dfc <__sinit_lock_acquire>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__sinit_lock_acquire+0x8>)
 8003dfe:	f000 b8a7 	b.w	8003f50 <__retarget_lock_acquire_recursive>
 8003e02:	bf00      	nop
 8003e04:	2000024b 	.word	0x2000024b

08003e08 <__sinit_lock_release>:
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <__sinit_lock_release+0x8>)
 8003e0a:	f000 b8a2 	b.w	8003f52 <__retarget_lock_release_recursive>
 8003e0e:	bf00      	nop
 8003e10:	2000024b 	.word	0x2000024b

08003e14 <__sinit>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	4604      	mov	r4, r0
 8003e18:	f7ff fff0 	bl	8003dfc <__sinit_lock_acquire>
 8003e1c:	69a3      	ldr	r3, [r4, #24]
 8003e1e:	b11b      	cbz	r3, 8003e28 <__sinit+0x14>
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f7ff bff0 	b.w	8003e08 <__sinit_lock_release>
 8003e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <__sinit+0x68>)
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <__sinit+0x6c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	bf04      	itt	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	61a3      	streq	r3, [r4, #24]
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 f820 	bl	8003e84 <__sfp>
 8003e44:	6060      	str	r0, [r4, #4]
 8003e46:	4620      	mov	r0, r4
 8003e48:	f000 f81c 	bl	8003e84 <__sfp>
 8003e4c:	60a0      	str	r0, [r4, #8]
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 f818 	bl	8003e84 <__sfp>
 8003e54:	2200      	movs	r2, #0
 8003e56:	60e0      	str	r0, [r4, #12]
 8003e58:	2104      	movs	r1, #4
 8003e5a:	6860      	ldr	r0, [r4, #4]
 8003e5c:	f7ff ff82 	bl	8003d64 <std>
 8003e60:	68a0      	ldr	r0, [r4, #8]
 8003e62:	2201      	movs	r2, #1
 8003e64:	2109      	movs	r1, #9
 8003e66:	f7ff ff7d 	bl	8003d64 <std>
 8003e6a:	68e0      	ldr	r0, [r4, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	2112      	movs	r1, #18
 8003e70:	f7ff ff78 	bl	8003d64 <std>
 8003e74:	2301      	movs	r3, #1
 8003e76:	61a3      	str	r3, [r4, #24]
 8003e78:	e7d2      	b.n	8003e20 <__sinit+0xc>
 8003e7a:	bf00      	nop
 8003e7c:	08004c68 	.word	0x08004c68
 8003e80:	08003dad 	.word	0x08003dad

08003e84 <__sfp>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	4607      	mov	r7, r0
 8003e88:	f7ff ffac 	bl	8003de4 <__sfp_lock_acquire>
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <__sfp+0x84>)
 8003e8e:	681e      	ldr	r6, [r3, #0]
 8003e90:	69b3      	ldr	r3, [r6, #24]
 8003e92:	b913      	cbnz	r3, 8003e9a <__sfp+0x16>
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff ffbd 	bl	8003e14 <__sinit>
 8003e9a:	3648      	adds	r6, #72	; 0x48
 8003e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	d503      	bpl.n	8003eac <__sfp+0x28>
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	b30b      	cbz	r3, 8003eec <__sfp+0x68>
 8003ea8:	6836      	ldr	r6, [r6, #0]
 8003eaa:	e7f7      	b.n	8003e9c <__sfp+0x18>
 8003eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003eb0:	b9d5      	cbnz	r5, 8003ee8 <__sfp+0x64>
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <__sfp+0x88>)
 8003eb4:	60e3      	str	r3, [r4, #12]
 8003eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eba:	6665      	str	r5, [r4, #100]	; 0x64
 8003ebc:	f000 f847 	bl	8003f4e <__retarget_lock_init_recursive>
 8003ec0:	f7ff ff96 	bl	8003df0 <__sfp_lock_release>
 8003ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ecc:	6025      	str	r5, [r4, #0]
 8003ece:	61a5      	str	r5, [r4, #24]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ed8:	f7ff ff24 	bl	8003d24 <memset>
 8003edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee8:	3468      	adds	r4, #104	; 0x68
 8003eea:	e7d9      	b.n	8003ea0 <__sfp+0x1c>
 8003eec:	2104      	movs	r1, #4
 8003eee:	4638      	mov	r0, r7
 8003ef0:	f7ff ff62 	bl	8003db8 <__sfmoreglue>
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	6030      	str	r0, [r6, #0]
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d1d5      	bne.n	8003ea8 <__sfp+0x24>
 8003efc:	f7ff ff78 	bl	8003df0 <__sfp_lock_release>
 8003f00:	230c      	movs	r3, #12
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	e7ee      	b.n	8003ee4 <__sfp+0x60>
 8003f06:	bf00      	nop
 8003f08:	08004c68 	.word	0x08004c68
 8003f0c:	ffff0001 	.word	0xffff0001

08003f10 <_fwalk_reent>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	4606      	mov	r6, r0
 8003f16:	4688      	mov	r8, r1
 8003f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f1c:	2700      	movs	r7, #0
 8003f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f22:	f1b9 0901 	subs.w	r9, r9, #1
 8003f26:	d505      	bpl.n	8003f34 <_fwalk_reent+0x24>
 8003f28:	6824      	ldr	r4, [r4, #0]
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d1f7      	bne.n	8003f1e <_fwalk_reent+0xe>
 8003f2e:	4638      	mov	r0, r7
 8003f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d907      	bls.n	8003f4a <_fwalk_reent+0x3a>
 8003f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	d003      	beq.n	8003f4a <_fwalk_reent+0x3a>
 8003f42:	4629      	mov	r1, r5
 8003f44:	4630      	mov	r0, r6
 8003f46:	47c0      	blx	r8
 8003f48:	4307      	orrs	r7, r0
 8003f4a:	3568      	adds	r5, #104	; 0x68
 8003f4c:	e7e9      	b.n	8003f22 <_fwalk_reent+0x12>

08003f4e <__retarget_lock_init_recursive>:
 8003f4e:	4770      	bx	lr

08003f50 <__retarget_lock_acquire_recursive>:
 8003f50:	4770      	bx	lr

08003f52 <__retarget_lock_release_recursive>:
 8003f52:	4770      	bx	lr

08003f54 <_malloc_r>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	1ccd      	adds	r5, r1, #3
 8003f58:	f025 0503 	bic.w	r5, r5, #3
 8003f5c:	3508      	adds	r5, #8
 8003f5e:	2d0c      	cmp	r5, #12
 8003f60:	bf38      	it	cc
 8003f62:	250c      	movcc	r5, #12
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	4606      	mov	r6, r0
 8003f68:	db01      	blt.n	8003f6e <_malloc_r+0x1a>
 8003f6a:	42a9      	cmp	r1, r5
 8003f6c:	d903      	bls.n	8003f76 <_malloc_r+0x22>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	2000      	movs	r0, #0
 8003f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f76:	f000 fda3 	bl	8004ac0 <__malloc_lock>
 8003f7a:	4921      	ldr	r1, [pc, #132]	; (8004000 <_malloc_r+0xac>)
 8003f7c:	680a      	ldr	r2, [r1, #0]
 8003f7e:	4614      	mov	r4, r2
 8003f80:	b99c      	cbnz	r4, 8003faa <_malloc_r+0x56>
 8003f82:	4f20      	ldr	r7, [pc, #128]	; (8004004 <_malloc_r+0xb0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	b923      	cbnz	r3, 8003f92 <_malloc_r+0x3e>
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f000 fb2a 	bl	80045e4 <_sbrk_r>
 8003f90:	6038      	str	r0, [r7, #0]
 8003f92:	4629      	mov	r1, r5
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 fb25 	bl	80045e4 <_sbrk_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	d123      	bne.n	8003fe6 <_malloc_r+0x92>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f000 fd92 	bl	8004acc <__malloc_unlock>
 8003fa8:	e7e3      	b.n	8003f72 <_malloc_r+0x1e>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	1b5b      	subs	r3, r3, r5
 8003fae:	d417      	bmi.n	8003fe0 <_malloc_r+0x8c>
 8003fb0:	2b0b      	cmp	r3, #11
 8003fb2:	d903      	bls.n	8003fbc <_malloc_r+0x68>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	441c      	add	r4, r3
 8003fb8:	6025      	str	r5, [r4, #0]
 8003fba:	e004      	b.n	8003fc6 <_malloc_r+0x72>
 8003fbc:	6863      	ldr	r3, [r4, #4]
 8003fbe:	42a2      	cmp	r2, r4
 8003fc0:	bf0c      	ite	eq
 8003fc2:	600b      	streq	r3, [r1, #0]
 8003fc4:	6053      	strne	r3, [r2, #4]
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f000 fd80 	bl	8004acc <__malloc_unlock>
 8003fcc:	f104 000b 	add.w	r0, r4, #11
 8003fd0:	1d23      	adds	r3, r4, #4
 8003fd2:	f020 0007 	bic.w	r0, r0, #7
 8003fd6:	1ac2      	subs	r2, r0, r3
 8003fd8:	d0cc      	beq.n	8003f74 <_malloc_r+0x20>
 8003fda:	1a1b      	subs	r3, r3, r0
 8003fdc:	50a3      	str	r3, [r4, r2]
 8003fde:	e7c9      	b.n	8003f74 <_malloc_r+0x20>
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	6864      	ldr	r4, [r4, #4]
 8003fe4:	e7cc      	b.n	8003f80 <_malloc_r+0x2c>
 8003fe6:	1cc4      	adds	r4, r0, #3
 8003fe8:	f024 0403 	bic.w	r4, r4, #3
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	d0e3      	beq.n	8003fb8 <_malloc_r+0x64>
 8003ff0:	1a21      	subs	r1, r4, r0
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 faf6 	bl	80045e4 <_sbrk_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d1dd      	bne.n	8003fb8 <_malloc_r+0x64>
 8003ffc:	e7cf      	b.n	8003f9e <_malloc_r+0x4a>
 8003ffe:	bf00      	nop
 8004000:	20000098 	.word	0x20000098
 8004004:	2000009c 	.word	0x2000009c

08004008 <__sfputc_r>:
 8004008:	6893      	ldr	r3, [r2, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	b410      	push	{r4}
 8004010:	6093      	str	r3, [r2, #8]
 8004012:	da08      	bge.n	8004026 <__sfputc_r+0x1e>
 8004014:	6994      	ldr	r4, [r2, #24]
 8004016:	42a3      	cmp	r3, r4
 8004018:	db01      	blt.n	800401e <__sfputc_r+0x16>
 800401a:	290a      	cmp	r1, #10
 800401c:	d103      	bne.n	8004026 <__sfputc_r+0x1e>
 800401e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004022:	f000 bb33 	b.w	800468c <__swbuf_r>
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	1c58      	adds	r0, r3, #1
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	7019      	strb	r1, [r3, #0]
 800402e:	4608      	mov	r0, r1
 8004030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004034:	4770      	bx	lr

08004036 <__sfputs_r>:
 8004036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004038:	4606      	mov	r6, r0
 800403a:	460f      	mov	r7, r1
 800403c:	4614      	mov	r4, r2
 800403e:	18d5      	adds	r5, r2, r3
 8004040:	42ac      	cmp	r4, r5
 8004042:	d101      	bne.n	8004048 <__sfputs_r+0x12>
 8004044:	2000      	movs	r0, #0
 8004046:	e007      	b.n	8004058 <__sfputs_r+0x22>
 8004048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404c:	463a      	mov	r2, r7
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff ffda 	bl	8004008 <__sfputc_r>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d1f3      	bne.n	8004040 <__sfputs_r+0xa>
 8004058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800405c <_vfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	460d      	mov	r5, r1
 8004062:	b09d      	sub	sp, #116	; 0x74
 8004064:	4614      	mov	r4, r2
 8004066:	4698      	mov	r8, r3
 8004068:	4606      	mov	r6, r0
 800406a:	b118      	cbz	r0, 8004074 <_vfiprintf_r+0x18>
 800406c:	6983      	ldr	r3, [r0, #24]
 800406e:	b90b      	cbnz	r3, 8004074 <_vfiprintf_r+0x18>
 8004070:	f7ff fed0 	bl	8003e14 <__sinit>
 8004074:	4b89      	ldr	r3, [pc, #548]	; (800429c <_vfiprintf_r+0x240>)
 8004076:	429d      	cmp	r5, r3
 8004078:	d11b      	bne.n	80040b2 <_vfiprintf_r+0x56>
 800407a:	6875      	ldr	r5, [r6, #4]
 800407c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800407e:	07d9      	lsls	r1, r3, #31
 8004080:	d405      	bmi.n	800408e <_vfiprintf_r+0x32>
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	059a      	lsls	r2, r3, #22
 8004086:	d402      	bmi.n	800408e <_vfiprintf_r+0x32>
 8004088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800408a:	f7ff ff61 	bl	8003f50 <__retarget_lock_acquire_recursive>
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	071b      	lsls	r3, r3, #28
 8004092:	d501      	bpl.n	8004098 <_vfiprintf_r+0x3c>
 8004094:	692b      	ldr	r3, [r5, #16]
 8004096:	b9eb      	cbnz	r3, 80040d4 <_vfiprintf_r+0x78>
 8004098:	4629      	mov	r1, r5
 800409a:	4630      	mov	r0, r6
 800409c:	f000 fb5a 	bl	8004754 <__swsetup_r>
 80040a0:	b1c0      	cbz	r0, 80040d4 <_vfiprintf_r+0x78>
 80040a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040a4:	07dc      	lsls	r4, r3, #31
 80040a6:	d50e      	bpl.n	80040c6 <_vfiprintf_r+0x6a>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	b01d      	add	sp, #116	; 0x74
 80040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b2:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <_vfiprintf_r+0x244>)
 80040b4:	429d      	cmp	r5, r3
 80040b6:	d101      	bne.n	80040bc <_vfiprintf_r+0x60>
 80040b8:	68b5      	ldr	r5, [r6, #8]
 80040ba:	e7df      	b.n	800407c <_vfiprintf_r+0x20>
 80040bc:	4b79      	ldr	r3, [pc, #484]	; (80042a4 <_vfiprintf_r+0x248>)
 80040be:	429d      	cmp	r5, r3
 80040c0:	bf08      	it	eq
 80040c2:	68f5      	ldreq	r5, [r6, #12]
 80040c4:	e7da      	b.n	800407c <_vfiprintf_r+0x20>
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d4ed      	bmi.n	80040a8 <_vfiprintf_r+0x4c>
 80040cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ce:	f7ff ff40 	bl	8003f52 <__retarget_lock_release_recursive>
 80040d2:	e7e9      	b.n	80040a8 <_vfiprintf_r+0x4c>
 80040d4:	2300      	movs	r3, #0
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
 80040d8:	2320      	movs	r3, #32
 80040da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040de:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e2:	2330      	movs	r3, #48	; 0x30
 80040e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042a8 <_vfiprintf_r+0x24c>
 80040e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ec:	f04f 0901 	mov.w	r9, #1
 80040f0:	4623      	mov	r3, r4
 80040f2:	469a      	mov	sl, r3
 80040f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f8:	b10a      	cbz	r2, 80040fe <_vfiprintf_r+0xa2>
 80040fa:	2a25      	cmp	r2, #37	; 0x25
 80040fc:	d1f9      	bne.n	80040f2 <_vfiprintf_r+0x96>
 80040fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004102:	d00b      	beq.n	800411c <_vfiprintf_r+0xc0>
 8004104:	465b      	mov	r3, fp
 8004106:	4622      	mov	r2, r4
 8004108:	4629      	mov	r1, r5
 800410a:	4630      	mov	r0, r6
 800410c:	f7ff ff93 	bl	8004036 <__sfputs_r>
 8004110:	3001      	adds	r0, #1
 8004112:	f000 80aa 	beq.w	800426a <_vfiprintf_r+0x20e>
 8004116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004118:	445a      	add	r2, fp
 800411a:	9209      	str	r2, [sp, #36]	; 0x24
 800411c:	f89a 3000 	ldrb.w	r3, [sl]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80a2 	beq.w	800426a <_vfiprintf_r+0x20e>
 8004126:	2300      	movs	r3, #0
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004130:	f10a 0a01 	add.w	sl, sl, #1
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800413c:	931a      	str	r3, [sp, #104]	; 0x68
 800413e:	4654      	mov	r4, sl
 8004140:	2205      	movs	r2, #5
 8004142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004146:	4858      	ldr	r0, [pc, #352]	; (80042a8 <_vfiprintf_r+0x24c>)
 8004148:	f7fc f86a 	bl	8000220 <memchr>
 800414c:	9a04      	ldr	r2, [sp, #16]
 800414e:	b9d8      	cbnz	r0, 8004188 <_vfiprintf_r+0x12c>
 8004150:	06d1      	lsls	r1, r2, #27
 8004152:	bf44      	itt	mi
 8004154:	2320      	movmi	r3, #32
 8004156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415a:	0713      	lsls	r3, r2, #28
 800415c:	bf44      	itt	mi
 800415e:	232b      	movmi	r3, #43	; 0x2b
 8004160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004164:	f89a 3000 	ldrb.w	r3, [sl]
 8004168:	2b2a      	cmp	r3, #42	; 0x2a
 800416a:	d015      	beq.n	8004198 <_vfiprintf_r+0x13c>
 800416c:	9a07      	ldr	r2, [sp, #28]
 800416e:	4654      	mov	r4, sl
 8004170:	2000      	movs	r0, #0
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	4621      	mov	r1, r4
 8004178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800417c:	3b30      	subs	r3, #48	; 0x30
 800417e:	2b09      	cmp	r3, #9
 8004180:	d94e      	bls.n	8004220 <_vfiprintf_r+0x1c4>
 8004182:	b1b0      	cbz	r0, 80041b2 <_vfiprintf_r+0x156>
 8004184:	9207      	str	r2, [sp, #28]
 8004186:	e014      	b.n	80041b2 <_vfiprintf_r+0x156>
 8004188:	eba0 0308 	sub.w	r3, r0, r8
 800418c:	fa09 f303 	lsl.w	r3, r9, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	46a2      	mov	sl, r4
 8004196:	e7d2      	b.n	800413e <_vfiprintf_r+0xe2>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	1d19      	adds	r1, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9103      	str	r1, [sp, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bfbb      	ittet	lt
 80041a4:	425b      	neglt	r3, r3
 80041a6:	f042 0202 	orrlt.w	r2, r2, #2
 80041aa:	9307      	strge	r3, [sp, #28]
 80041ac:	9307      	strlt	r3, [sp, #28]
 80041ae:	bfb8      	it	lt
 80041b0:	9204      	strlt	r2, [sp, #16]
 80041b2:	7823      	ldrb	r3, [r4, #0]
 80041b4:	2b2e      	cmp	r3, #46	; 0x2e
 80041b6:	d10c      	bne.n	80041d2 <_vfiprintf_r+0x176>
 80041b8:	7863      	ldrb	r3, [r4, #1]
 80041ba:	2b2a      	cmp	r3, #42	; 0x2a
 80041bc:	d135      	bne.n	800422a <_vfiprintf_r+0x1ce>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	9203      	str	r2, [sp, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfb8      	it	lt
 80041ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ce:	3402      	adds	r4, #2
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042b8 <_vfiprintf_r+0x25c>
 80041d6:	7821      	ldrb	r1, [r4, #0]
 80041d8:	2203      	movs	r2, #3
 80041da:	4650      	mov	r0, sl
 80041dc:	f7fc f820 	bl	8000220 <memchr>
 80041e0:	b140      	cbz	r0, 80041f4 <_vfiprintf_r+0x198>
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	eba0 000a 	sub.w	r0, r0, sl
 80041e8:	fa03 f000 	lsl.w	r0, r3, r0
 80041ec:	9b04      	ldr	r3, [sp, #16]
 80041ee:	4303      	orrs	r3, r0
 80041f0:	3401      	adds	r4, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f8:	482c      	ldr	r0, [pc, #176]	; (80042ac <_vfiprintf_r+0x250>)
 80041fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041fe:	2206      	movs	r2, #6
 8004200:	f7fc f80e 	bl	8000220 <memchr>
 8004204:	2800      	cmp	r0, #0
 8004206:	d03f      	beq.n	8004288 <_vfiprintf_r+0x22c>
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <_vfiprintf_r+0x254>)
 800420a:	bb1b      	cbnz	r3, 8004254 <_vfiprintf_r+0x1f8>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	3307      	adds	r3, #7
 8004210:	f023 0307 	bic.w	r3, r3, #7
 8004214:	3308      	adds	r3, #8
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421a:	443b      	add	r3, r7
 800421c:	9309      	str	r3, [sp, #36]	; 0x24
 800421e:	e767      	b.n	80040f0 <_vfiprintf_r+0x94>
 8004220:	fb0c 3202 	mla	r2, ip, r2, r3
 8004224:	460c      	mov	r4, r1
 8004226:	2001      	movs	r0, #1
 8004228:	e7a5      	b.n	8004176 <_vfiprintf_r+0x11a>
 800422a:	2300      	movs	r3, #0
 800422c:	3401      	adds	r4, #1
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	4619      	mov	r1, r3
 8004232:	f04f 0c0a 	mov.w	ip, #10
 8004236:	4620      	mov	r0, r4
 8004238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423c:	3a30      	subs	r2, #48	; 0x30
 800423e:	2a09      	cmp	r2, #9
 8004240:	d903      	bls.n	800424a <_vfiprintf_r+0x1ee>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c5      	beq.n	80041d2 <_vfiprintf_r+0x176>
 8004246:	9105      	str	r1, [sp, #20]
 8004248:	e7c3      	b.n	80041d2 <_vfiprintf_r+0x176>
 800424a:	fb0c 2101 	mla	r1, ip, r1, r2
 800424e:	4604      	mov	r4, r0
 8004250:	2301      	movs	r3, #1
 8004252:	e7f0      	b.n	8004236 <_vfiprintf_r+0x1da>
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	462a      	mov	r2, r5
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <_vfiprintf_r+0x258>)
 800425c:	a904      	add	r1, sp, #16
 800425e:	4630      	mov	r0, r6
 8004260:	f3af 8000 	nop.w
 8004264:	4607      	mov	r7, r0
 8004266:	1c78      	adds	r0, r7, #1
 8004268:	d1d6      	bne.n	8004218 <_vfiprintf_r+0x1bc>
 800426a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800426c:	07d9      	lsls	r1, r3, #31
 800426e:	d405      	bmi.n	800427c <_vfiprintf_r+0x220>
 8004270:	89ab      	ldrh	r3, [r5, #12]
 8004272:	059a      	lsls	r2, r3, #22
 8004274:	d402      	bmi.n	800427c <_vfiprintf_r+0x220>
 8004276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004278:	f7ff fe6b 	bl	8003f52 <__retarget_lock_release_recursive>
 800427c:	89ab      	ldrh	r3, [r5, #12]
 800427e:	065b      	lsls	r3, r3, #25
 8004280:	f53f af12 	bmi.w	80040a8 <_vfiprintf_r+0x4c>
 8004284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004286:	e711      	b.n	80040ac <_vfiprintf_r+0x50>
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	462a      	mov	r2, r5
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <_vfiprintf_r+0x258>)
 8004290:	a904      	add	r1, sp, #16
 8004292:	4630      	mov	r0, r6
 8004294:	f000 f880 	bl	8004398 <_printf_i>
 8004298:	e7e4      	b.n	8004264 <_vfiprintf_r+0x208>
 800429a:	bf00      	nop
 800429c:	08004c8c 	.word	0x08004c8c
 80042a0:	08004cac 	.word	0x08004cac
 80042a4:	08004c6c 	.word	0x08004c6c
 80042a8:	08004ccc 	.word	0x08004ccc
 80042ac:	08004cd6 	.word	0x08004cd6
 80042b0:	00000000 	.word	0x00000000
 80042b4:	08004037 	.word	0x08004037
 80042b8:	08004cd2 	.word	0x08004cd2

080042bc <_printf_common>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	4616      	mov	r6, r2
 80042c2:	4699      	mov	r9, r3
 80042c4:	688a      	ldr	r2, [r1, #8]
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bfb8      	it	lt
 80042d0:	4613      	movlt	r3, r2
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d8:	4607      	mov	r7, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	b10a      	cbz	r2, 80042e2 <_printf_common+0x26>
 80042de:	3301      	adds	r3, #1
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	0699      	lsls	r1, r3, #26
 80042e6:	bf42      	ittt	mi
 80042e8:	6833      	ldrmi	r3, [r6, #0]
 80042ea:	3302      	addmi	r3, #2
 80042ec:	6033      	strmi	r3, [r6, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	f015 0506 	ands.w	r5, r5, #6
 80042f4:	d106      	bne.n	8004304 <_printf_common+0x48>
 80042f6:	f104 0a19 	add.w	sl, r4, #25
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	6832      	ldr	r2, [r6, #0]
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	42ab      	cmp	r3, r5
 8004302:	dc26      	bgt.n	8004352 <_printf_common+0x96>
 8004304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004308:	1e13      	subs	r3, r2, #0
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	bf18      	it	ne
 800430e:	2301      	movne	r3, #1
 8004310:	0692      	lsls	r2, r2, #26
 8004312:	d42b      	bmi.n	800436c <_printf_common+0xb0>
 8004314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d01e      	beq.n	8004360 <_printf_common+0xa4>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	68e5      	ldr	r5, [r4, #12]
 8004326:	6832      	ldr	r2, [r6, #0]
 8004328:	f003 0306 	and.w	r3, r3, #6
 800432c:	2b04      	cmp	r3, #4
 800432e:	bf08      	it	eq
 8004330:	1aad      	subeq	r5, r5, r2
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	bf0c      	ite	eq
 8004338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800433c:	2500      	movne	r5, #0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfc4      	itt	gt
 8004342:	1a9b      	subgt	r3, r3, r2
 8004344:	18ed      	addgt	r5, r5, r3
 8004346:	2600      	movs	r6, #0
 8004348:	341a      	adds	r4, #26
 800434a:	42b5      	cmp	r5, r6
 800434c:	d11a      	bne.n	8004384 <_printf_common+0xc8>
 800434e:	2000      	movs	r0, #0
 8004350:	e008      	b.n	8004364 <_printf_common+0xa8>
 8004352:	2301      	movs	r3, #1
 8004354:	4652      	mov	r2, sl
 8004356:	4649      	mov	r1, r9
 8004358:	4638      	mov	r0, r7
 800435a:	47c0      	blx	r8
 800435c:	3001      	adds	r0, #1
 800435e:	d103      	bne.n	8004368 <_printf_common+0xac>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	3501      	adds	r5, #1
 800436a:	e7c6      	b.n	80042fa <_printf_common+0x3e>
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	2030      	movs	r0, #48	; 0x30
 8004372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004376:	4422      	add	r2, r4
 8004378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800437c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004380:	3302      	adds	r3, #2
 8004382:	e7c7      	b.n	8004314 <_printf_common+0x58>
 8004384:	2301      	movs	r3, #1
 8004386:	4622      	mov	r2, r4
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d0e6      	beq.n	8004360 <_printf_common+0xa4>
 8004392:	3601      	adds	r6, #1
 8004394:	e7d9      	b.n	800434a <_printf_common+0x8e>
	...

08004398 <_printf_i>:
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	460c      	mov	r4, r1
 800439e:	4691      	mov	r9, r2
 80043a0:	7e27      	ldrb	r7, [r4, #24]
 80043a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043a4:	2f78      	cmp	r7, #120	; 0x78
 80043a6:	4680      	mov	r8, r0
 80043a8:	469a      	mov	sl, r3
 80043aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ae:	d807      	bhi.n	80043c0 <_printf_i+0x28>
 80043b0:	2f62      	cmp	r7, #98	; 0x62
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x32>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	f000 80d8 	beq.w	800456a <_printf_i+0x1d2>
 80043ba:	2f58      	cmp	r7, #88	; 0x58
 80043bc:	f000 80a3 	beq.w	8004506 <_printf_i+0x16e>
 80043c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c8:	e03a      	b.n	8004440 <_printf_i+0xa8>
 80043ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ce:	2b15      	cmp	r3, #21
 80043d0:	d8f6      	bhi.n	80043c0 <_printf_i+0x28>
 80043d2:	a001      	add	r0, pc, #4	; (adr r0, 80043d8 <_printf_i+0x40>)
 80043d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004445 	.word	0x08004445
 80043e0:	080043c1 	.word	0x080043c1
 80043e4:	080043c1 	.word	0x080043c1
 80043e8:	080043c1 	.word	0x080043c1
 80043ec:	080043c1 	.word	0x080043c1
 80043f0:	08004445 	.word	0x08004445
 80043f4:	080043c1 	.word	0x080043c1
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	080043c1 	.word	0x080043c1
 8004400:	080043c1 	.word	0x080043c1
 8004404:	08004551 	.word	0x08004551
 8004408:	08004475 	.word	0x08004475
 800440c:	08004533 	.word	0x08004533
 8004410:	080043c1 	.word	0x080043c1
 8004414:	080043c1 	.word	0x080043c1
 8004418:	08004573 	.word	0x08004573
 800441c:	080043c1 	.word	0x080043c1
 8004420:	08004475 	.word	0x08004475
 8004424:	080043c1 	.word	0x080043c1
 8004428:	080043c1 	.word	0x080043c1
 800442c:	0800453b 	.word	0x0800453b
 8004430:	680b      	ldr	r3, [r1, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	600a      	str	r2, [r1, #0]
 8004438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800443c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004440:	2301      	movs	r3, #1
 8004442:	e0a3      	b.n	800458c <_printf_i+0x1f4>
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	6808      	ldr	r0, [r1, #0]
 8004448:	062e      	lsls	r6, r5, #24
 800444a:	f100 0304 	add.w	r3, r0, #4
 800444e:	d50a      	bpl.n	8004466 <_printf_i+0xce>
 8004450:	6805      	ldr	r5, [r0, #0]
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	2d00      	cmp	r5, #0
 8004456:	da03      	bge.n	8004460 <_printf_i+0xc8>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	426d      	negs	r5, r5
 800445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004460:	485e      	ldr	r0, [pc, #376]	; (80045dc <_printf_i+0x244>)
 8004462:	230a      	movs	r3, #10
 8004464:	e019      	b.n	800449a <_printf_i+0x102>
 8004466:	f015 0f40 	tst.w	r5, #64	; 0x40
 800446a:	6805      	ldr	r5, [r0, #0]
 800446c:	600b      	str	r3, [r1, #0]
 800446e:	bf18      	it	ne
 8004470:	b22d      	sxthne	r5, r5
 8004472:	e7ef      	b.n	8004454 <_printf_i+0xbc>
 8004474:	680b      	ldr	r3, [r1, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	1d18      	adds	r0, r3, #4
 800447a:	6008      	str	r0, [r1, #0]
 800447c:	0628      	lsls	r0, r5, #24
 800447e:	d501      	bpl.n	8004484 <_printf_i+0xec>
 8004480:	681d      	ldr	r5, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0xf2>
 8004484:	0669      	lsls	r1, r5, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0xe8>
 8004488:	881d      	ldrh	r5, [r3, #0]
 800448a:	4854      	ldr	r0, [pc, #336]	; (80045dc <_printf_i+0x244>)
 800448c:	2f6f      	cmp	r7, #111	; 0x6f
 800448e:	bf0c      	ite	eq
 8004490:	2308      	moveq	r3, #8
 8004492:	230a      	movne	r3, #10
 8004494:	2100      	movs	r1, #0
 8004496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800449a:	6866      	ldr	r6, [r4, #4]
 800449c:	60a6      	str	r6, [r4, #8]
 800449e:	2e00      	cmp	r6, #0
 80044a0:	bfa2      	ittt	ge
 80044a2:	6821      	ldrge	r1, [r4, #0]
 80044a4:	f021 0104 	bicge.w	r1, r1, #4
 80044a8:	6021      	strge	r1, [r4, #0]
 80044aa:	b90d      	cbnz	r5, 80044b0 <_printf_i+0x118>
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	d04d      	beq.n	800454c <_printf_i+0x1b4>
 80044b0:	4616      	mov	r6, r2
 80044b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80044b6:	fb03 5711 	mls	r7, r3, r1, r5
 80044ba:	5dc7      	ldrb	r7, [r0, r7]
 80044bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044c0:	462f      	mov	r7, r5
 80044c2:	42bb      	cmp	r3, r7
 80044c4:	460d      	mov	r5, r1
 80044c6:	d9f4      	bls.n	80044b2 <_printf_i+0x11a>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d10b      	bne.n	80044e4 <_printf_i+0x14c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07df      	lsls	r7, r3, #31
 80044d0:	d508      	bpl.n	80044e4 <_printf_i+0x14c>
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4299      	cmp	r1, r3
 80044d8:	bfde      	ittt	le
 80044da:	2330      	movle	r3, #48	; 0x30
 80044dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044e4:	1b92      	subs	r2, r2, r6
 80044e6:	6122      	str	r2, [r4, #16]
 80044e8:	f8cd a000 	str.w	sl, [sp]
 80044ec:	464b      	mov	r3, r9
 80044ee:	aa03      	add	r2, sp, #12
 80044f0:	4621      	mov	r1, r4
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff fee2 	bl	80042bc <_printf_common>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d14c      	bne.n	8004596 <_printf_i+0x1fe>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	b004      	add	sp, #16
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	4835      	ldr	r0, [pc, #212]	; (80045dc <_printf_i+0x244>)
 8004508:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	680e      	ldr	r6, [r1, #0]
 8004510:	061f      	lsls	r7, r3, #24
 8004512:	f856 5b04 	ldr.w	r5, [r6], #4
 8004516:	600e      	str	r6, [r1, #0]
 8004518:	d514      	bpl.n	8004544 <_printf_i+0x1ac>
 800451a:	07d9      	lsls	r1, r3, #31
 800451c:	bf44      	itt	mi
 800451e:	f043 0320 	orrmi.w	r3, r3, #32
 8004522:	6023      	strmi	r3, [r4, #0]
 8004524:	b91d      	cbnz	r5, 800452e <_printf_i+0x196>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f023 0320 	bic.w	r3, r3, #32
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	2310      	movs	r3, #16
 8004530:	e7b0      	b.n	8004494 <_printf_i+0xfc>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	2378      	movs	r3, #120	; 0x78
 800453c:	4828      	ldr	r0, [pc, #160]	; (80045e0 <_printf_i+0x248>)
 800453e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004542:	e7e3      	b.n	800450c <_printf_i+0x174>
 8004544:	065e      	lsls	r6, r3, #25
 8004546:	bf48      	it	mi
 8004548:	b2ad      	uxthmi	r5, r5
 800454a:	e7e6      	b.n	800451a <_printf_i+0x182>
 800454c:	4616      	mov	r6, r2
 800454e:	e7bb      	b.n	80044c8 <_printf_i+0x130>
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	6826      	ldr	r6, [r4, #0]
 8004554:	6960      	ldr	r0, [r4, #20]
 8004556:	1d1d      	adds	r5, r3, #4
 8004558:	600d      	str	r5, [r1, #0]
 800455a:	0635      	lsls	r5, r6, #24
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	d501      	bpl.n	8004564 <_printf_i+0x1cc>
 8004560:	6018      	str	r0, [r3, #0]
 8004562:	e002      	b.n	800456a <_printf_i+0x1d2>
 8004564:	0671      	lsls	r1, r6, #25
 8004566:	d5fb      	bpl.n	8004560 <_printf_i+0x1c8>
 8004568:	8018      	strh	r0, [r3, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	4616      	mov	r6, r2
 8004570:	e7ba      	b.n	80044e8 <_printf_i+0x150>
 8004572:	680b      	ldr	r3, [r1, #0]
 8004574:	1d1a      	adds	r2, r3, #4
 8004576:	600a      	str	r2, [r1, #0]
 8004578:	681e      	ldr	r6, [r3, #0]
 800457a:	6862      	ldr	r2, [r4, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	4630      	mov	r0, r6
 8004580:	f7fb fe4e 	bl	8000220 <memchr>
 8004584:	b108      	cbz	r0, 800458a <_printf_i+0x1f2>
 8004586:	1b80      	subs	r0, r0, r6
 8004588:	6060      	str	r0, [r4, #4]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	2300      	movs	r3, #0
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	e7a8      	b.n	80044e8 <_printf_i+0x150>
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	4632      	mov	r2, r6
 800459a:	4649      	mov	r1, r9
 800459c:	4640      	mov	r0, r8
 800459e:	47d0      	blx	sl
 80045a0:	3001      	adds	r0, #1
 80045a2:	d0ab      	beq.n	80044fc <_printf_i+0x164>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	d413      	bmi.n	80045d2 <_printf_i+0x23a>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	4298      	cmp	r0, r3
 80045b0:	bfb8      	it	lt
 80045b2:	4618      	movlt	r0, r3
 80045b4:	e7a4      	b.n	8004500 <_printf_i+0x168>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4632      	mov	r2, r6
 80045ba:	4649      	mov	r1, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	47d0      	blx	sl
 80045c0:	3001      	adds	r0, #1
 80045c2:	d09b      	beq.n	80044fc <_printf_i+0x164>
 80045c4:	3501      	adds	r5, #1
 80045c6:	68e3      	ldr	r3, [r4, #12]
 80045c8:	9903      	ldr	r1, [sp, #12]
 80045ca:	1a5b      	subs	r3, r3, r1
 80045cc:	42ab      	cmp	r3, r5
 80045ce:	dcf2      	bgt.n	80045b6 <_printf_i+0x21e>
 80045d0:	e7eb      	b.n	80045aa <_printf_i+0x212>
 80045d2:	2500      	movs	r5, #0
 80045d4:	f104 0619 	add.w	r6, r4, #25
 80045d8:	e7f5      	b.n	80045c6 <_printf_i+0x22e>
 80045da:	bf00      	nop
 80045dc:	08004cdd 	.word	0x08004cdd
 80045e0:	08004cee 	.word	0x08004cee

080045e4 <_sbrk_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	; (8004600 <_sbrk_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fc fb9a 	bl	8000d28 <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_sbrk_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_sbrk_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20000254 	.word	0x20000254

08004604 <__sread>:
 8004604:	b510      	push	{r4, lr}
 8004606:	460c      	mov	r4, r1
 8004608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460c:	f000 fab4 	bl	8004b78 <_read_r>
 8004610:	2800      	cmp	r0, #0
 8004612:	bfab      	itete	ge
 8004614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004616:	89a3      	ldrhlt	r3, [r4, #12]
 8004618:	181b      	addge	r3, r3, r0
 800461a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800461e:	bfac      	ite	ge
 8004620:	6563      	strge	r3, [r4, #84]	; 0x54
 8004622:	81a3      	strhlt	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__swrite>:
 8004626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462a:	461f      	mov	r7, r3
 800462c:	898b      	ldrh	r3, [r1, #12]
 800462e:	05db      	lsls	r3, r3, #23
 8004630:	4605      	mov	r5, r0
 8004632:	460c      	mov	r4, r1
 8004634:	4616      	mov	r6, r2
 8004636:	d505      	bpl.n	8004644 <__swrite+0x1e>
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	2302      	movs	r3, #2
 800463e:	2200      	movs	r2, #0
 8004640:	f000 f9c8 	bl	80049d4 <_lseek_r>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800464a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	4632      	mov	r2, r6
 8004652:	463b      	mov	r3, r7
 8004654:	4628      	mov	r0, r5
 8004656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	f000 b869 	b.w	8004730 <_write_r>

0800465e <__sseek>:
 800465e:	b510      	push	{r4, lr}
 8004660:	460c      	mov	r4, r1
 8004662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004666:	f000 f9b5 	bl	80049d4 <_lseek_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	bf15      	itete	ne
 8004670:	6560      	strne	r0, [r4, #84]	; 0x54
 8004672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800467a:	81a3      	strheq	r3, [r4, #12]
 800467c:	bf18      	it	ne
 800467e:	81a3      	strhne	r3, [r4, #12]
 8004680:	bd10      	pop	{r4, pc}

08004682 <__sclose>:
 8004682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004686:	f000 b8d3 	b.w	8004830 <_close_r>
	...

0800468c <__swbuf_r>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	460e      	mov	r6, r1
 8004690:	4614      	mov	r4, r2
 8004692:	4605      	mov	r5, r0
 8004694:	b118      	cbz	r0, 800469e <__swbuf_r+0x12>
 8004696:	6983      	ldr	r3, [r0, #24]
 8004698:	b90b      	cbnz	r3, 800469e <__swbuf_r+0x12>
 800469a:	f7ff fbbb 	bl	8003e14 <__sinit>
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <__swbuf_r+0x98>)
 80046a0:	429c      	cmp	r4, r3
 80046a2:	d12b      	bne.n	80046fc <__swbuf_r+0x70>
 80046a4:	686c      	ldr	r4, [r5, #4]
 80046a6:	69a3      	ldr	r3, [r4, #24]
 80046a8:	60a3      	str	r3, [r4, #8]
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	071a      	lsls	r2, r3, #28
 80046ae:	d52f      	bpl.n	8004710 <__swbuf_r+0x84>
 80046b0:	6923      	ldr	r3, [r4, #16]
 80046b2:	b36b      	cbz	r3, 8004710 <__swbuf_r+0x84>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1ac0      	subs	r0, r0, r3
 80046ba:	6963      	ldr	r3, [r4, #20]
 80046bc:	b2f6      	uxtb	r6, r6
 80046be:	4283      	cmp	r3, r0
 80046c0:	4637      	mov	r7, r6
 80046c2:	dc04      	bgt.n	80046ce <__swbuf_r+0x42>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 f948 	bl	800495c <_fflush_r>
 80046cc:	bb30      	cbnz	r0, 800471c <__swbuf_r+0x90>
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60a3      	str	r3, [r4, #8]
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	6022      	str	r2, [r4, #0]
 80046da:	701e      	strb	r6, [r3, #0]
 80046dc:	6963      	ldr	r3, [r4, #20]
 80046de:	3001      	adds	r0, #1
 80046e0:	4283      	cmp	r3, r0
 80046e2:	d004      	beq.n	80046ee <__swbuf_r+0x62>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	07db      	lsls	r3, r3, #31
 80046e8:	d506      	bpl.n	80046f8 <__swbuf_r+0x6c>
 80046ea:	2e0a      	cmp	r6, #10
 80046ec:	d104      	bne.n	80046f8 <__swbuf_r+0x6c>
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f933 	bl	800495c <_fflush_r>
 80046f6:	b988      	cbnz	r0, 800471c <__swbuf_r+0x90>
 80046f8:	4638      	mov	r0, r7
 80046fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <__swbuf_r+0x9c>)
 80046fe:	429c      	cmp	r4, r3
 8004700:	d101      	bne.n	8004706 <__swbuf_r+0x7a>
 8004702:	68ac      	ldr	r4, [r5, #8]
 8004704:	e7cf      	b.n	80046a6 <__swbuf_r+0x1a>
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <__swbuf_r+0xa0>)
 8004708:	429c      	cmp	r4, r3
 800470a:	bf08      	it	eq
 800470c:	68ec      	ldreq	r4, [r5, #12]
 800470e:	e7ca      	b.n	80046a6 <__swbuf_r+0x1a>
 8004710:	4621      	mov	r1, r4
 8004712:	4628      	mov	r0, r5
 8004714:	f000 f81e 	bl	8004754 <__swsetup_r>
 8004718:	2800      	cmp	r0, #0
 800471a:	d0cb      	beq.n	80046b4 <__swbuf_r+0x28>
 800471c:	f04f 37ff 	mov.w	r7, #4294967295
 8004720:	e7ea      	b.n	80046f8 <__swbuf_r+0x6c>
 8004722:	bf00      	nop
 8004724:	08004c8c 	.word	0x08004c8c
 8004728:	08004cac 	.word	0x08004cac
 800472c:	08004c6c 	.word	0x08004c6c

08004730 <_write_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	; (8004750 <_write_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc faa1 	bl	8000c86 <_write>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_write_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_write_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	20000254 	.word	0x20000254

08004754 <__swsetup_r>:
 8004754:	4b32      	ldr	r3, [pc, #200]	; (8004820 <__swsetup_r+0xcc>)
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	4606      	mov	r6, r0
 800475c:	460c      	mov	r4, r1
 800475e:	b125      	cbz	r5, 800476a <__swsetup_r+0x16>
 8004760:	69ab      	ldr	r3, [r5, #24]
 8004762:	b913      	cbnz	r3, 800476a <__swsetup_r+0x16>
 8004764:	4628      	mov	r0, r5
 8004766:	f7ff fb55 	bl	8003e14 <__sinit>
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <__swsetup_r+0xd0>)
 800476c:	429c      	cmp	r4, r3
 800476e:	d10f      	bne.n	8004790 <__swsetup_r+0x3c>
 8004770:	686c      	ldr	r4, [r5, #4]
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004778:	0719      	lsls	r1, r3, #28
 800477a:	d42c      	bmi.n	80047d6 <__swsetup_r+0x82>
 800477c:	06dd      	lsls	r5, r3, #27
 800477e:	d411      	bmi.n	80047a4 <__swsetup_r+0x50>
 8004780:	2309      	movs	r3, #9
 8004782:	6033      	str	r3, [r6, #0]
 8004784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	f04f 30ff 	mov.w	r0, #4294967295
 800478e:	e03e      	b.n	800480e <__swsetup_r+0xba>
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <__swsetup_r+0xd4>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d101      	bne.n	800479a <__swsetup_r+0x46>
 8004796:	68ac      	ldr	r4, [r5, #8]
 8004798:	e7eb      	b.n	8004772 <__swsetup_r+0x1e>
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <__swsetup_r+0xd8>)
 800479c:	429c      	cmp	r4, r3
 800479e:	bf08      	it	eq
 80047a0:	68ec      	ldreq	r4, [r5, #12]
 80047a2:	e7e6      	b.n	8004772 <__swsetup_r+0x1e>
 80047a4:	0758      	lsls	r0, r3, #29
 80047a6:	d512      	bpl.n	80047ce <__swsetup_r+0x7a>
 80047a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047aa:	b141      	cbz	r1, 80047be <__swsetup_r+0x6a>
 80047ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <__swsetup_r+0x66>
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f98f 	bl	8004ad8 <_free_r>
 80047ba:	2300      	movs	r3, #0
 80047bc:	6363      	str	r3, [r4, #52]	; 0x34
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	2300      	movs	r3, #0
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f043 0308 	orr.w	r3, r3, #8
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	b94b      	cbnz	r3, 80047ee <__swsetup_r+0x9a>
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e4:	d003      	beq.n	80047ee <__swsetup_r+0x9a>
 80047e6:	4621      	mov	r1, r4
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f929 	bl	8004a40 <__smakebuf_r>
 80047ee:	89a0      	ldrh	r0, [r4, #12]
 80047f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f4:	f010 0301 	ands.w	r3, r0, #1
 80047f8:	d00a      	beq.n	8004810 <__swsetup_r+0xbc>
 80047fa:	2300      	movs	r3, #0
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	6963      	ldr	r3, [r4, #20]
 8004800:	425b      	negs	r3, r3
 8004802:	61a3      	str	r3, [r4, #24]
 8004804:	6923      	ldr	r3, [r4, #16]
 8004806:	b943      	cbnz	r3, 800481a <__swsetup_r+0xc6>
 8004808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800480c:	d1ba      	bne.n	8004784 <__swsetup_r+0x30>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	0781      	lsls	r1, r0, #30
 8004812:	bf58      	it	pl
 8004814:	6963      	ldrpl	r3, [r4, #20]
 8004816:	60a3      	str	r3, [r4, #8]
 8004818:	e7f4      	b.n	8004804 <__swsetup_r+0xb0>
 800481a:	2000      	movs	r0, #0
 800481c:	e7f7      	b.n	800480e <__swsetup_r+0xba>
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c
 8004824:	08004c8c 	.word	0x08004c8c
 8004828:	08004cac 	.word	0x08004cac
 800482c:	08004c6c 	.word	0x08004c6c

08004830 <_close_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d06      	ldr	r5, [pc, #24]	; (800484c <_close_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc fa3f 	bl	8000cbe <_close>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_close_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_close_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000254 	.word	0x20000254

08004850 <__sflush_r>:
 8004850:	898a      	ldrh	r2, [r1, #12]
 8004852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	4605      	mov	r5, r0
 8004858:	0710      	lsls	r0, r2, #28
 800485a:	460c      	mov	r4, r1
 800485c:	d458      	bmi.n	8004910 <__sflush_r+0xc0>
 800485e:	684b      	ldr	r3, [r1, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	dc05      	bgt.n	8004870 <__sflush_r+0x20>
 8004864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	dc02      	bgt.n	8004870 <__sflush_r+0x20>
 800486a:	2000      	movs	r0, #0
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004872:	2e00      	cmp	r6, #0
 8004874:	d0f9      	beq.n	800486a <__sflush_r+0x1a>
 8004876:	2300      	movs	r3, #0
 8004878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800487c:	682f      	ldr	r7, [r5, #0]
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	d032      	beq.n	80048e8 <__sflush_r+0x98>
 8004882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	075a      	lsls	r2, r3, #29
 8004888:	d505      	bpl.n	8004896 <__sflush_r+0x46>
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	1ac0      	subs	r0, r0, r3
 800488e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004890:	b10b      	cbz	r3, 8004896 <__sflush_r+0x46>
 8004892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004894:	1ac0      	subs	r0, r0, r3
 8004896:	2300      	movs	r3, #0
 8004898:	4602      	mov	r2, r0
 800489a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489c:	6a21      	ldr	r1, [r4, #32]
 800489e:	4628      	mov	r0, r5
 80048a0:	47b0      	blx	r6
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	d106      	bne.n	80048b6 <__sflush_r+0x66>
 80048a8:	6829      	ldr	r1, [r5, #0]
 80048aa:	291d      	cmp	r1, #29
 80048ac:	d82c      	bhi.n	8004908 <__sflush_r+0xb8>
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <__sflush_r+0x108>)
 80048b0:	40ca      	lsrs	r2, r1
 80048b2:	07d6      	lsls	r6, r2, #31
 80048b4:	d528      	bpl.n	8004908 <__sflush_r+0xb8>
 80048b6:	2200      	movs	r2, #0
 80048b8:	6062      	str	r2, [r4, #4]
 80048ba:	04d9      	lsls	r1, r3, #19
 80048bc:	6922      	ldr	r2, [r4, #16]
 80048be:	6022      	str	r2, [r4, #0]
 80048c0:	d504      	bpl.n	80048cc <__sflush_r+0x7c>
 80048c2:	1c42      	adds	r2, r0, #1
 80048c4:	d101      	bne.n	80048ca <__sflush_r+0x7a>
 80048c6:	682b      	ldr	r3, [r5, #0]
 80048c8:	b903      	cbnz	r3, 80048cc <__sflush_r+0x7c>
 80048ca:	6560      	str	r0, [r4, #84]	; 0x54
 80048cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ce:	602f      	str	r7, [r5, #0]
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d0ca      	beq.n	800486a <__sflush_r+0x1a>
 80048d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d8:	4299      	cmp	r1, r3
 80048da:	d002      	beq.n	80048e2 <__sflush_r+0x92>
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 f8fb 	bl	8004ad8 <_free_r>
 80048e2:	2000      	movs	r0, #0
 80048e4:	6360      	str	r0, [r4, #52]	; 0x34
 80048e6:	e7c1      	b.n	800486c <__sflush_r+0x1c>
 80048e8:	6a21      	ldr	r1, [r4, #32]
 80048ea:	2301      	movs	r3, #1
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b0      	blx	r6
 80048f0:	1c41      	adds	r1, r0, #1
 80048f2:	d1c7      	bne.n	8004884 <__sflush_r+0x34>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c4      	beq.n	8004884 <__sflush_r+0x34>
 80048fa:	2b1d      	cmp	r3, #29
 80048fc:	d001      	beq.n	8004902 <__sflush_r+0xb2>
 80048fe:	2b16      	cmp	r3, #22
 8004900:	d101      	bne.n	8004906 <__sflush_r+0xb6>
 8004902:	602f      	str	r7, [r5, #0]
 8004904:	e7b1      	b.n	800486a <__sflush_r+0x1a>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	e7ad      	b.n	800486c <__sflush_r+0x1c>
 8004910:	690f      	ldr	r7, [r1, #16]
 8004912:	2f00      	cmp	r7, #0
 8004914:	d0a9      	beq.n	800486a <__sflush_r+0x1a>
 8004916:	0793      	lsls	r3, r2, #30
 8004918:	680e      	ldr	r6, [r1, #0]
 800491a:	bf08      	it	eq
 800491c:	694b      	ldreq	r3, [r1, #20]
 800491e:	600f      	str	r7, [r1, #0]
 8004920:	bf18      	it	ne
 8004922:	2300      	movne	r3, #0
 8004924:	eba6 0807 	sub.w	r8, r6, r7
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	f1b8 0f00 	cmp.w	r8, #0
 800492e:	dd9c      	ble.n	800486a <__sflush_r+0x1a>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004934:	4643      	mov	r3, r8
 8004936:	463a      	mov	r2, r7
 8004938:	4628      	mov	r0, r5
 800493a:	47b0      	blx	r6
 800493c:	2800      	cmp	r0, #0
 800493e:	dc06      	bgt.n	800494e <__sflush_r+0xfe>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004946:	81a3      	strh	r3, [r4, #12]
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	e78e      	b.n	800486c <__sflush_r+0x1c>
 800494e:	4407      	add	r7, r0
 8004950:	eba8 0800 	sub.w	r8, r8, r0
 8004954:	e7e9      	b.n	800492a <__sflush_r+0xda>
 8004956:	bf00      	nop
 8004958:	20400001 	.word	0x20400001

0800495c <_fflush_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	690b      	ldr	r3, [r1, #16]
 8004960:	4605      	mov	r5, r0
 8004962:	460c      	mov	r4, r1
 8004964:	b913      	cbnz	r3, 800496c <_fflush_r+0x10>
 8004966:	2500      	movs	r5, #0
 8004968:	4628      	mov	r0, r5
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	b118      	cbz	r0, 8004976 <_fflush_r+0x1a>
 800496e:	6983      	ldr	r3, [r0, #24]
 8004970:	b90b      	cbnz	r3, 8004976 <_fflush_r+0x1a>
 8004972:	f7ff fa4f 	bl	8003e14 <__sinit>
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <_fflush_r+0x6c>)
 8004978:	429c      	cmp	r4, r3
 800497a:	d11b      	bne.n	80049b4 <_fflush_r+0x58>
 800497c:	686c      	ldr	r4, [r5, #4]
 800497e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ef      	beq.n	8004966 <_fflush_r+0xa>
 8004986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004988:	07d0      	lsls	r0, r2, #31
 800498a:	d404      	bmi.n	8004996 <_fflush_r+0x3a>
 800498c:	0599      	lsls	r1, r3, #22
 800498e:	d402      	bmi.n	8004996 <_fflush_r+0x3a>
 8004990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004992:	f7ff fadd 	bl	8003f50 <__retarget_lock_acquire_recursive>
 8004996:	4628      	mov	r0, r5
 8004998:	4621      	mov	r1, r4
 800499a:	f7ff ff59 	bl	8004850 <__sflush_r>
 800499e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a0:	07da      	lsls	r2, r3, #31
 80049a2:	4605      	mov	r5, r0
 80049a4:	d4e0      	bmi.n	8004968 <_fflush_r+0xc>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	059b      	lsls	r3, r3, #22
 80049aa:	d4dd      	bmi.n	8004968 <_fflush_r+0xc>
 80049ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ae:	f7ff fad0 	bl	8003f52 <__retarget_lock_release_recursive>
 80049b2:	e7d9      	b.n	8004968 <_fflush_r+0xc>
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <_fflush_r+0x70>)
 80049b6:	429c      	cmp	r4, r3
 80049b8:	d101      	bne.n	80049be <_fflush_r+0x62>
 80049ba:	68ac      	ldr	r4, [r5, #8]
 80049bc:	e7df      	b.n	800497e <_fflush_r+0x22>
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <_fflush_r+0x74>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	bf08      	it	eq
 80049c4:	68ec      	ldreq	r4, [r5, #12]
 80049c6:	e7da      	b.n	800497e <_fflush_r+0x22>
 80049c8:	08004c8c 	.word	0x08004c8c
 80049cc:	08004cac 	.word	0x08004cac
 80049d0:	08004c6c 	.word	0x08004c6c

080049d4 <_lseek_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	; (80049f4 <_lseek_r+0x20>)
 80049d8:	4604      	mov	r4, r0
 80049da:	4608      	mov	r0, r1
 80049dc:	4611      	mov	r1, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fc f992 	bl	8000d0c <_lseek>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_lseek_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_lseek_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000254 	.word	0x20000254

080049f8 <__swhatbuf_r>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	460e      	mov	r6, r1
 80049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a00:	2900      	cmp	r1, #0
 8004a02:	b096      	sub	sp, #88	; 0x58
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	da07      	bge.n	8004a1a <__swhatbuf_r+0x22>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	89b3      	ldrh	r3, [r6, #12]
 8004a10:	061a      	lsls	r2, r3, #24
 8004a12:	d410      	bmi.n	8004a36 <__swhatbuf_r+0x3e>
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	e00e      	b.n	8004a38 <__swhatbuf_r+0x40>
 8004a1a:	466a      	mov	r2, sp
 8004a1c:	f000 f8be 	bl	8004b9c <_fstat_r>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	dbf2      	blt.n	8004a0a <__swhatbuf_r+0x12>
 8004a24:	9a01      	ldr	r2, [sp, #4]
 8004a26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a2e:	425a      	negs	r2, r3
 8004a30:	415a      	adcs	r2, r3
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	e7ee      	b.n	8004a14 <__swhatbuf_r+0x1c>
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	2000      	movs	r0, #0
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	b016      	add	sp, #88	; 0x58
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}

08004a40 <__smakebuf_r>:
 8004a40:	898b      	ldrh	r3, [r1, #12]
 8004a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a44:	079d      	lsls	r5, r3, #30
 8004a46:	4606      	mov	r6, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	d507      	bpl.n	8004a5c <__smakebuf_r+0x1c>
 8004a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	2301      	movs	r3, #1
 8004a56:	6163      	str	r3, [r4, #20]
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	ab01      	add	r3, sp, #4
 8004a5e:	466a      	mov	r2, sp
 8004a60:	f7ff ffca 	bl	80049f8 <__swhatbuf_r>
 8004a64:	9900      	ldr	r1, [sp, #0]
 8004a66:	4605      	mov	r5, r0
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f7ff fa73 	bl	8003f54 <_malloc_r>
 8004a6e:	b948      	cbnz	r0, 8004a84 <__smakebuf_r+0x44>
 8004a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a74:	059a      	lsls	r2, r3, #22
 8004a76:	d4ef      	bmi.n	8004a58 <__smakebuf_r+0x18>
 8004a78:	f023 0303 	bic.w	r3, r3, #3
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	e7e3      	b.n	8004a4c <__smakebuf_r+0xc>
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <__smakebuf_r+0x7c>)
 8004a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	6020      	str	r0, [r4, #0]
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	9b00      	ldr	r3, [sp, #0]
 8004a94:	6163      	str	r3, [r4, #20]
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	6120      	str	r0, [r4, #16]
 8004a9a:	b15b      	cbz	r3, 8004ab4 <__smakebuf_r+0x74>
 8004a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f88d 	bl	8004bc0 <_isatty_r>
 8004aa6:	b128      	cbz	r0, 8004ab4 <__smakebuf_r+0x74>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	89a0      	ldrh	r0, [r4, #12]
 8004ab6:	4305      	orrs	r5, r0
 8004ab8:	81a5      	strh	r5, [r4, #12]
 8004aba:	e7cd      	b.n	8004a58 <__smakebuf_r+0x18>
 8004abc:	08003dad 	.word	0x08003dad

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f7ff ba45 	b.w	8003f50 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	2000024c 	.word	0x2000024c

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f7ff ba40 	b.w	8003f52 <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	2000024c 	.word	0x2000024c

08004ad8 <_free_r>:
 8004ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d048      	beq.n	8004b70 <_free_r+0x98>
 8004ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae2:	9001      	str	r0, [sp, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8004aea:	bfb8      	it	lt
 8004aec:	18e4      	addlt	r4, r4, r3
 8004aee:	f7ff ffe7 	bl	8004ac0 <__malloc_lock>
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <_free_r+0x9c>)
 8004af4:	9801      	ldr	r0, [sp, #4]
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	4615      	mov	r5, r2
 8004afa:	b933      	cbnz	r3, 8004b0a <_free_r+0x32>
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6014      	str	r4, [r2, #0]
 8004b00:	b003      	add	sp, #12
 8004b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b06:	f7ff bfe1 	b.w	8004acc <__malloc_unlock>
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	d90b      	bls.n	8004b26 <_free_r+0x4e>
 8004b0e:	6821      	ldr	r1, [r4, #0]
 8004b10:	1862      	adds	r2, r4, r1
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bf04      	itt	eq
 8004b16:	681a      	ldreq	r2, [r3, #0]
 8004b18:	685b      	ldreq	r3, [r3, #4]
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	bf04      	itt	eq
 8004b1e:	1852      	addeq	r2, r2, r1
 8004b20:	6022      	streq	r2, [r4, #0]
 8004b22:	602c      	str	r4, [r5, #0]
 8004b24:	e7ec      	b.n	8004b00 <_free_r+0x28>
 8004b26:	461a      	mov	r2, r3
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b10b      	cbz	r3, 8004b30 <_free_r+0x58>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d9fa      	bls.n	8004b26 <_free_r+0x4e>
 8004b30:	6811      	ldr	r1, [r2, #0]
 8004b32:	1855      	adds	r5, r2, r1
 8004b34:	42a5      	cmp	r5, r4
 8004b36:	d10b      	bne.n	8004b50 <_free_r+0x78>
 8004b38:	6824      	ldr	r4, [r4, #0]
 8004b3a:	4421      	add	r1, r4
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	d1dd      	bne.n	8004b00 <_free_r+0x28>
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6053      	str	r3, [r2, #4]
 8004b4a:	4421      	add	r1, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7d7      	b.n	8004b00 <_free_r+0x28>
 8004b50:	d902      	bls.n	8004b58 <_free_r+0x80>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6003      	str	r3, [r0, #0]
 8004b56:	e7d3      	b.n	8004b00 <_free_r+0x28>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf04      	itt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	bf04      	itt	eq
 8004b68:	1949      	addeq	r1, r1, r5
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	6054      	str	r4, [r2, #4]
 8004b6e:	e7c7      	b.n	8004b00 <_free_r+0x28>
 8004b70:	b003      	add	sp, #12
 8004b72:	bd30      	pop	{r4, r5, pc}
 8004b74:	20000098 	.word	0x20000098

08004b78 <_read_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d07      	ldr	r5, [pc, #28]	; (8004b98 <_read_r+0x20>)
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fc f860 	bl	8000c4c <_read>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_read_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_read_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000254 	.word	0x20000254

08004b9c <_fstat_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d07      	ldr	r5, [pc, #28]	; (8004bbc <_fstat_r+0x20>)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	f7fc f894 	bl	8000cd6 <_fstat>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d102      	bne.n	8004bb8 <_fstat_r+0x1c>
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	b103      	cbz	r3, 8004bb8 <_fstat_r+0x1c>
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	bd38      	pop	{r3, r4, r5, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000254 	.word	0x20000254

08004bc0 <_isatty_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d06      	ldr	r5, [pc, #24]	; (8004bdc <_isatty_r+0x1c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fc f893 	bl	8000cf6 <_isatty>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_isatty_r+0x1a>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_isatty_r+0x1a>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	20000254 	.word	0x20000254

08004be0 <_init>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr

08004bec <_fini>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr
