
AD7606_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08009110  08009110  00019110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800967c  0800967c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001e0  08009864  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08009864  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dffb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  0003e20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00041570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00042860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028df5  00000000  00000000  00043a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab23  00000000  00000000  0006c80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffbe6  00000000  00000000  00087330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00186f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000653c  00000000  00000000  00186f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090f4 	.word	0x080090f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080090f4 	.word	0x080090f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <bsp_AD7606_Read>:
void AD7606_StartConvst(void);
void AD7606_Reset(void);



HAL_StatusTypeDef bsp_AD7606_Read(double *Data,uint8_t Size,uint16_t Timeout) {
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
 8001048:	4613      	mov	r3, r2
 800104a:	803b      	strh	r3, [r7, #0]
 800104c:	466b      	mov	r3, sp
 800104e:	461d      	mov	r5, r3

	uint16_t Raw_Data[Size];
 8001050:	78fc      	ldrb	r4, [r7, #3]
 8001052:	4623      	mov	r3, r4
 8001054:	3b01      	subs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	b2e0      	uxtb	r0, r4
 800105a:	f04f 0100 	mov.w	r1, #0
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	010b      	lsls	r3, r1, #4
 8001068:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800106c:	0102      	lsls	r2, r0, #4
 800106e:	b2e0      	uxtb	r0, r4
 8001070:	f04f 0100 	mov.w	r1, #0
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	010b      	lsls	r3, r1, #4
 800107e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001082:	0102      	lsls	r2, r0, #4
 8001084:	4623      	mov	r3, r4
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	3307      	adds	r3, #7
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	ebad 0d03 	sub.w	sp, sp, r3
 8001092:	466b      	mov	r3, sp
 8001094:	3301      	adds	r3, #1
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]

	int i;

	HAL_StatusTypeDef Error_Code = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	77bb      	strb	r3, [r7, #30]

	uint8_t  txallowed = 1U;
 80010a0:	2301      	movs	r3, #1
 80010a2:	77fb      	strb	r3, [r7, #31]

	AD7606_StartConvst();
 80010a4:	f000 f909 	bl	80012ba <AD7606_StartConvst>

	while(BUSY_Flag == 0) {}
 80010a8:	bf00      	nop
 80010aa:	4b6c      	ldr	r3, [pc, #432]	; (800125c <bsp_AD7606_Read+0x220>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0fb      	beq.n	80010aa <bsp_AD7606_Read+0x6e>

	CS_0();
 80010b2:	2200      	movs	r2, #0
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	486a      	ldr	r0, [pc, #424]	; (8001260 <bsp_AD7606_Read+0x224>)
 80010b8:	f001 f8d0 	bl	800225c <HAL_GPIO_WritePin>

	uint32_t tickstart;
	tickstart = HAL_GetTick();
 80010bc:	f000 fe0e 	bl	8001cdc <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

	//SPI1主机配置
	hspi1.State = HAL_SPI_STATE_BUSY_RX;
 80010c2:	4b68      	ldr	r3, [pc, #416]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010c4:	2204      	movs	r2, #4
 80010c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi1.pRxBuffPtr = (uint8_t*) (Raw_Data);
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
	hspi1.RxXferCount = Size;
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b63      	ldr	r3, [pc, #396]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi1.RxXferSize = Size;
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b61      	ldr	r3, [pc, #388]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi1.pTxBuffPtr = (uint8_t*) (NULL);
 80010e4:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.TxXferCount = Size;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010f0:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi1.TxXferSize = Size;
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010f8:	879a      	strh	r2, [r3, #60]	; 0x3c

	//设置FIFO
	CLEAR_BIT(hspi1.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80010fa:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <bsp_AD7606_Read+0x228>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4b58      	ldr	r3, [pc, #352]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001108:	605a      	str	r2, [r3, #4]

	//SPI1
	if ((hspi1.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <bsp_AD7606_Read+0x228>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001114:	2b40      	cmp	r3, #64	; 0x40
 8001116:	d05d      	beq.n	80011d4 <bsp_AD7606_Read+0x198>
		__HAL_SPI_ENABLE(&hspi1);
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <bsp_AD7606_Read+0x228>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b51      	ldr	r3, [pc, #324]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001126:	601a      	str	r2, [r3, #0]
	}

    while ((hspi1.TxXferCount > 0U) || (hspi1.RxXferCount > 0U))
 8001128:	e054      	b.n	80011d4 <bsp_AD7606_Read+0x198>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE)) && (hspi1.TxXferCount > 0U) && (txallowed == 1U))
 800112a:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <bsp_AD7606_Read+0x228>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b02      	cmp	r3, #2
 8001136:	d11c      	bne.n	8001172 <bsp_AD7606_Read+0x136>
 8001138:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <bsp_AD7606_Read+0x228>)
 800113a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800113c:	b29b      	uxth	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d017      	beq.n	8001172 <bsp_AD7606_Read+0x136>
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d114      	bne.n	8001172 <bsp_AD7606_Read+0x136>
      {
    	*(__IO uint16_t *)&hspi1.Instance->DR = *((uint16_t *)(hspi1.pTxBuffPtr));
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <bsp_AD7606_Read+0x228>)
 800114a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <bsp_AD7606_Read+0x228>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	330c      	adds	r3, #12
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	801a      	strh	r2, [r3, #0]
        hspi1.pTxBuffPtr += sizeof(uint16_t);
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	3302      	adds	r3, #2
 800115c:	4a41      	ldr	r2, [pc, #260]	; (8001264 <bsp_AD7606_Read+0x228>)
 800115e:	6393      	str	r3, [r2, #56]	; 0x38
        hspi1.TxXferCount--;
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <bsp_AD7606_Read+0x228>)
 800116c:	87da      	strh	r2, [r3, #62]	; 0x3e

        txallowed = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	77fb      	strb	r3, [r7, #31]

      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE)) && (hspi1.RxXferCount > 0U))
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d11e      	bne.n	80011be <bsp_AD7606_Read+0x182>
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001186:	b29b      	uxth	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d018      	beq.n	80011be <bsp_AD7606_Read+0x182>
      {
        *((uint16_t *)hspi1.pRxBuffPtr) = *(__IO uint16_t *)&hspi1.Instance->DR;
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <bsp_AD7606_Read+0x228>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f103 020c 	add.w	r2, r3, #12
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	b292      	uxth	r2, r2
 800119c:	801a      	strh	r2, [r3, #0]
        hspi1.pRxBuffPtr += sizeof(uint16_t);
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	3302      	adds	r3, #2
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
        hspi1.RxXferCount--;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80011ba:	2301      	movs	r3, #1
 80011bc:	77fb      	strb	r3, [r7, #31]
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80011be:	f000 fd8d 	bl	8001cdc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	883b      	ldrh	r3, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d302      	bcc.n	80011d4 <bsp_AD7606_Read+0x198>
      {
    	Error_Code = HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	77bb      	strb	r3, [r7, #30]
        goto Overtime;
 80011d2:	e038      	b.n	8001246 <bsp_AD7606_Read+0x20a>
    while ((hspi1.TxXferCount > 0U) || (hspi1.RxXferCount > 0U))
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1a5      	bne.n	800112a <bsp_AD7606_Read+0xee>
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <bsp_AD7606_Read+0x228>)
 80011e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d19f      	bne.n	800112a <bsp_AD7606_Read+0xee>
      }
    }

	CS_1();
 80011ea:	2201      	movs	r2, #1
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	481c      	ldr	r0, [pc, #112]	; (8001260 <bsp_AD7606_Read+0x224>)
 80011f0:	f001 f834 	bl	800225c <HAL_GPIO_WritePin>

	for(i = 0;i <= Size-1;i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	e020      	b.n	800123c <bsp_AD7606_Read+0x200>
	{
		Data[i] = ((int16_t)Raw_Data[i])*10.0/65536.0;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9b5 	bl	8000574 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <bsp_AD7606_Read+0x22c>)
 8001210:	f7ff fa1a 	bl	8000648 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	18d4      	adds	r4, r2, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <bsp_AD7606_Read+0x230>)
 800122a:	f7ff fb37 	bl	800089c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9c4 2300 	strd	r2, r3, [r4]
	for(i = 0;i <= Size-1;i++)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	3301      	adds	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbda      	blt.n	80011fa <bsp_AD7606_Read+0x1be>
	}


	Overtime: hspi1.State = HAL_SPI_STATE_READY;
 8001244:	bf00      	nop
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <bsp_AD7606_Read+0x228>)
 8001248:	2201      	movs	r2, #1
 800124a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return Error_Code;
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	46ad      	mov	sp, r5
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bdb0      	pop	{r4, r5, r7, pc}
 800125a:	bf00      	nop
 800125c:	200001fd 	.word	0x200001fd
 8001260:	48000400 	.word	0x48000400
 8001264:	20000250 	.word	0x20000250
 8001268:	40240000 	.word	0x40240000
 800126c:	40f00000 	.word	0x40f00000

08001270 <bsp_AD7606_Init>:

void bsp_AD7606_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0


	//AD7606_SetOS(AD_OS_NO);		/* 无过采样 */
	//AD7606_SetInputRange(0);	/* 0表示输入量程为正负5V, 1表示正负10V */
	AD7606_Reset();				/* 复位 */
 8001274:	f000 f808 	bl	8001288 <AD7606_Reset>
	CONVST_1();					/* 启动转换的GPIO，平时设置为高 */
 8001278:	2201      	movs	r2, #1
 800127a:	2101      	movs	r1, #1
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f000 ffec 	bl	800225c <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <AD7606_Reset>:



void AD7606_Reset(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	RESET_0();	/* 退出复位状态 */
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 ffe2 	bl	800225c <HAL_GPIO_WritePin>

	RESET_1();	/* 进入复位状态 */
 8001298:	2201      	movs	r2, #1
 800129a:	2102      	movs	r1, #2
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f000 ffdc 	bl	800225c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f000 fd25 	bl	8001cf4 <HAL_Delay>

	RESET_0();	/* 退出复位状态 */
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f000 ffd3 	bl	800225c <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <AD7606_StartConvst>:

void AD7606_StartConvst(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
	/* page 7：  CONVST 高电平脉冲宽度和低电平脉冲宽度最短 25ns */
	/* CONVST平时为高 */
	CONVST_0();
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f000 ffc9 	bl	800225c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012ca:	20c8      	movs	r0, #200	; 0xc8
 80012cc:	f000 fd12 	bl	8001cf4 <HAL_Delay>

	CONVST_1();
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f000 ffc0 	bl	800225c <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <MX_GPIO_Init+0x134>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a46      	ldr	r2, [pc, #280]	; (8001414 <MX_GPIO_Init+0x134>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <MX_GPIO_Init+0x134>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <MX_GPIO_Init+0x134>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a40      	ldr	r2, [pc, #256]	; (8001414 <MX_GPIO_Init+0x134>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_GPIO_Init+0x134>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_GPIO_Init+0x134>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <MX_GPIO_Init+0x134>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_GPIO_Init+0x134>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <MX_GPIO_Init+0x134>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a34      	ldr	r2, [pc, #208]	; (8001414 <MX_GPIO_Init+0x134>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <MX_GPIO_Init+0x134>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONVET_GPIO_Port, CONVET_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 ff7d 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2102      	movs	r1, #2
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f000 ff77 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	4829      	ldr	r0, [pc, #164]	; (8001418 <MX_GPIO_Init+0x138>)
 8001374:	f000 ff72 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <MX_GPIO_Init+0x13c>)
 8001390:	f000 fde2 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CONVET_Pin|RST_Pin;
 8001394:	2303      	movs	r3, #3
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f000 fdd3 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80013b2:	2310      	movs	r3, #16
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f000 fdc5 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0x138>)
 80013e6:	f000 fdb7 	bl	8001f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200a      	movs	r0, #10
 80013f0:	f000 fd7d 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013f4:	200a      	movs	r0, #10
 80013f6:	f000 fd94 	bl	8001f22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2028      	movs	r0, #40	; 0x28
 8001400:	f000 fd75 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001404:	2028      	movs	r0, #40	; 0x28
 8001406:	f000 fd8c 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800

08001420 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]

    	BUSY_Flag = 1;;
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_GPIO_EXTI_Callback+0x1c>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]

}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200001fd 	.word	0x200001fd

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b092      	sub	sp, #72	; 0x48
 8001446:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */

  //读取状�??
  HAL_StatusTypeDef AD7606_State = AD7606_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fbe1 	bl	8001c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f85a 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f7ff ff44 	bl	80012e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001458:	f000 faf2 	bl	8001a40 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800145c:	f000 fa46 	bl	80018ec <MX_TIM6_Init>
  MX_SPI1_Init();
 8001460:	f000 f8a0 	bl	80015a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  bsp_AD7606_Init();
 8001464:	f7ff ff04 	bl	8001270 <bsp_AD7606_Init>
  HAL_TIM_Base_Start_IT(&htim6);        //启动定时器TIM6,用做片�?�的时间
 8001468:	4822      	ldr	r0, [pc, #136]	; (80014f4 <main+0xb4>)
 800146a:	f002 f85d 	bl	8003528 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (START_Flag == 1) {
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <main+0xb8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d1fb      	bne.n	800146e <main+0x2e>


			AD7606_State =  bsp_AD7606_Read((double*)Data,8,500);
 8001476:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800147a:	2108      	movs	r1, #8
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <main+0xbc>)
 800147e:	f7ff fddd 	bl	800103c <bsp_AD7606_Read>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]


			printf("data1: %f data2: %f \r\ndata3: %f data4: %f \r\ndata5: %f data6: %f \r\ndata7: %f data8: %f\r\n",
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <main+0xbc>)
 8001488:	ed93 7b00 	vldr	d7, [r3]
 800148c:	ed87 7b00 	vstr	d7, [r7]
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <main+0xbc>)
 8001492:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <main+0xbc>)
 8001498:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <main+0xbc>)
 800149e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <main+0xbc>)
 80014a4:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <main+0xbc>)
 80014aa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <main+0xbc>)
 80014b0:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <main+0xbc>)
 80014b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80014ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80014be:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 80014c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80014c6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80014ca:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80014ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80014d2:	e9cd 0100 	strd	r0, r1, [sp]
 80014d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <main+0xc0>)
 80014dc:	f004 f844 	bl	8005568 <iprintf>
					Data[0], Data[1],Data[2], Data[3],Data[4], Data[5],Data[6], Data[7]);
			printf("AD7606 State: %d \r\n", AD7606_State);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <main+0xc4>)
 80014e6:	f004 f83f 	bl	8005568 <iprintf>


			START_Flag = 0;
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <main+0xb8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
		if (START_Flag == 1) {
 80014f0:	e7bd      	b.n	800146e <main+0x2e>
 80014f2:	bf00      	nop
 80014f4:	200002b4 	.word	0x200002b4
 80014f8:	200001fc 	.word	0x200001fc
 80014fc:	20000210 	.word	0x20000210
 8001500:	08009110 	.word	0x08009110
 8001504:	08009168 	.word	0x08009168

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2238      	movs	r2, #56	; 0x38
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f9a4 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 fec6 	bl	80022bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	2303      	movs	r3, #3
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001542:	2306      	movs	r3, #6
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001546:	2355      	movs	r3, #85	; 0x55
 8001548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ff62 	bl	8002424 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001566:	f000 f818 	bl	800159a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2104      	movs	r1, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fa66 	bl	8002a54 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800158e:	f000 f804 	bl	800159a <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	; 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159e:	b672      	cpsid	i
}
 80015a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a2:	e7fe      	b.n	80015a2 <Error_Handler+0x8>

080015a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_SPI1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_SPI1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x74>)
 80015be:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80015c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x74>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x74>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x74>)
 80015da:	2238      	movs	r2, #56	; 0x38
 80015dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI1_Init+0x74>)
 8001604:	f001 fe8e 	bl	8003324 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f7ff ffc4 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000250 	.word	0x20000250
 800161c:	40013000 	.word	0x40013000

08001620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x7c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d128      	bne.n	8001694 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164c:	6613      	str	r3, [r2, #96]	; 0x60
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_SPI_MspInit+0x80>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = M_SPI1_SCK_Pin|M_SPI1_IN_Pin|GPIO_PIN_7;
 8001672:	23e0      	movs	r3, #224	; 0xe0
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001682:	2305      	movs	r3, #5
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f000 fc62 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013000 	.word	0x40013000
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_MspInit+0x44>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6613      	str	r3, [r2, #96]	; 0x60
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_MspInit+0x44>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x44>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016da:	f000 fe93 	bl	8002404 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 fabe 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUSY_Pin);
 8001744:	2010      	movs	r0, #16
 8001746:	f000 fda1 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001752:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001756:	f000 fd99 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM6_DAC_IRQHandler+0x10>)
 8001766:	f001 ff57 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002b4 	.word	0x200002b4

08001774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_kill>:

int _kill(int pid, int sig)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800178e:	f003 f83f 	bl	8004810 <__errno>
 8001792:	4603      	mov	r3, r0
 8001794:	2216      	movs	r2, #22
 8001796:	601a      	str	r2, [r3, #0]
	return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_exit>:

void _exit (int status)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ffe7 	bl	8001784 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017b6:	e7fe      	b.n	80017b6 <_exit+0x12>

080017b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
	}

return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181a:	605a      	str	r2, [r3, #4]
	return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f002 ffc0 	bl	8004810 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20020000 	.word	0x20020000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000200 	.word	0x20000200
 80018c4:	200003a8 	.word	0x200003a8

080018c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_TIM6_Init+0x64>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_TIM6_Init+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_TIM6_Init+0x64>)
 8001904:	2263      	movs	r2, #99	; 0x63
 8001906:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_TIM6_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_TIM6_Init+0x64>)
 8001910:	2263      	movs	r2, #99	; 0x63
 8001912:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_TIM6_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM6_Init+0x64>)
 800191c:	f001 fdad 	bl	800347a <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001926:	f7ff fe38 	bl	800159a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_TIM6_Init+0x64>)
 8001938:	f002 f8be 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001942:	f7ff fe2a 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002b4 	.word	0x200002b4
 8001954:	40001000 	.word	0x40001000

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_TIM_Base_MspInit+0x44>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d113      	bne.n	8001992 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_TIM_Base_MspInit+0x48>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_TIM_Base_MspInit+0x48>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_TIM_Base_MspInit+0x48>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2101      	movs	r1, #1
 8001986:	2036      	movs	r0, #54	; 0x36
 8001988:	f000 fab1 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800198c:	2036      	movs	r0, #54	; 0x36
 800198e:	f000 fac8 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40001000 	.word	0x40001000
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

	static uint8_t count = 0;

	count++;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019b6:	701a      	strb	r2, [r3, #0]

	if(count == 2)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d102      	bne.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		START_Flag = 1;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
	}

	if(count >= 4 && START_Flag == 0)
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d906      	bls.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x38>
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		count = 0;
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
	}

}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000204 	.word	0x20000204
 80019ec:	200001fc 	.word	0x200001fc

080019f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a18:	e000      	b.n	8001a1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f9      	beq.n	8001a1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a46:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <MX_LPUART1_UART_Init+0x90>)
 8001a48:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a82:	4812      	ldr	r0, [pc, #72]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a84:	f002 f8f4 	bl	8003c70 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a8e:	f7ff fd84 	bl	800159a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a92:	2100      	movs	r1, #0
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001a96:	f002 fdf1 	bl	800467c <HAL_UARTEx_SetTxFifoThreshold>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001aa0:	f7ff fd7b 	bl	800159a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001aa8:	f002 fe26 	bl	80046f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001ab2:	f7ff fd72 	bl	800159a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_LPUART1_UART_Init+0x8c>)
 8001ab8:	f002 fda7 	bl	800460a <HAL_UARTEx_DisableFifoMode>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f7ff fd6a 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000300 	.word	0x20000300
 8001ad0:	40008000 	.word	0x40008000

08001ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b09e      	sub	sp, #120	; 0x78
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2254      	movs	r2, #84	; 0x54
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 feb5 	bl	8004864 <memset>
  if(uartHandle->Instance==LPUART1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_UART_MspInit+0xa8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d136      	bne.n	8001b72 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b04:	2320      	movs	r3, #32
 8001b06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f9bb 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b1c:	f7ff fd3d 	bl	800159a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_UART_MspInit+0xac>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b50:	230c      	movs	r3, #12
 8001b52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b60:	230c      	movs	r3, #12
 8001b62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f000 f9f3 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b72:	bf00      	nop
 8001b74:	3778      	adds	r7, #120	; 0x78
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40008000 	.word	0x40008000
 8001b80:	40021000 	.word	0x40021000

08001b84 <_write>:
//  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
//  return ch;
//}

int _write(int file , char *ptr,int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    for(i = 0;i<len;i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e009      	b.n	8001bae <_write+0x2a>
        ITM_SendChar((*ptr++));
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff24 	bl	80019f0 <ITM_SendChar>
    for(i = 0;i<len;i++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf1      	blt.n	8001b9a <_write+0x16>
    return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bea:	f7ff fe6d 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f002 fe15 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf2:	f7ff fc25 	bl	8001440 <main>

08001bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf6:	e7fe      	b.n	8001bf6 <LoopForever>
  ldr   r0, =_estack
 8001bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c04:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 8001c08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c0c:	200003a4 	.word	0x200003a4

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>

08001c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f95b 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f80e 	bl	8001c44 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e001      	b.n	8001c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c34:	f7ff fd36 	bl	80016a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c38:	79fb      	ldrb	r3, [r7, #7]

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_InitTick+0x68>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d022      	beq.n	8001c9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_InitTick+0x6c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_InitTick+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f966 	bl	8001f3e <HAL_SYSTICK_Config>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10f      	bne.n	8001c98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d809      	bhi.n	8001c92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	f000 f932 	bl	8001eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_InitTick+0x70>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e007      	b.n	8001ca2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e004      	b.n	8001ca2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x1c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x1c>)
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20000390 	.word	0x20000390
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000390 	.word	0x20000390

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d004      	beq.n	8001d18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_Delay+0x40>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d18:	bf00      	nop
 8001d1a:	f7ff ffdf 	bl	8001cdc <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d8f7      	bhi.n	8001d1a <HAL_Delay+0x26>
  {
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000008 	.word	0x20000008

08001d38 <__NVIC_SetPriorityGrouping>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff29 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff40 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff90 	bl	8001e2c <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5f 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff33 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa4 	bl	8001e94 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f66:	e15a      	b.n	800221e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 814c 	beq.w	8002218 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d005      	beq.n	8001f98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d130      	bne.n	8001ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d017      	beq.n	8002036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d123      	bne.n	800208a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	6939      	ldr	r1, [r7, #16]
 8002086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80a6 	beq.w	8002218 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020cc:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_GPIO_Init+0x2e4>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_GPIO_Init+0x2e4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6613      	str	r3, [r2, #96]	; 0x60
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_GPIO_Init+0x2e4>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e4:	4a56      	ldr	r2, [pc, #344]	; (8002240 <HAL_GPIO_Init+0x2e8>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210e:	d01f      	beq.n	8002150 <HAL_GPIO_Init+0x1f8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_GPIO_Init+0x2ec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d019      	beq.n	800214c <HAL_GPIO_Init+0x1f4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <HAL_GPIO_Init+0x2f0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <HAL_GPIO_Init+0x1f0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4a      	ldr	r2, [pc, #296]	; (800224c <HAL_GPIO_Init+0x2f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00d      	beq.n	8002144 <HAL_GPIO_Init+0x1ec>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_GPIO_Init+0x2f8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x1e8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a48      	ldr	r2, [pc, #288]	; (8002254 <HAL_GPIO_Init+0x2fc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_GPIO_Init+0x1e4>
 8002138:	2305      	movs	r3, #5
 800213a:	e00a      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 800213c:	2306      	movs	r3, #6
 800213e:	e008      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002140:	2304      	movs	r3, #4
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002144:	2303      	movs	r3, #3
 8002146:	e004      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002148:	2302      	movs	r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002150:	2300      	movs	r3, #0
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	f002 0203 	and.w	r2, r2, #3
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	4093      	lsls	r3, r2
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002162:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_GPIO_Init+0x2e8>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_GPIO_Init+0x300>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002194:	4a30      	ldr	r2, [pc, #192]	; (8002258 <HAL_GPIO_Init+0x300>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_GPIO_Init+0x300>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x300>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_GPIO_Init+0x300>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_GPIO_Init+0x300>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_GPIO_Init+0x300>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002212:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_GPIO_Init+0x300>)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	f47f ae9d 	bne.w	8001f68 <HAL_GPIO_Init+0x10>
  }
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	48000c00 	.word	0x48000c00
 8002250:	48001000 	.word	0x48001000
 8002254:	48001400 	.word	0x48001400
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f8b8 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d141      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d131      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022de:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f0:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2232      	movs	r2, #50	; 0x32
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a3f      	ldr	r2, [pc, #252]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	3301      	adds	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230e:	e002      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d102      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d158      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e057      	b.n	80023ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800234c:	e04d      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	d141      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002356:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d131      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236a:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237c:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2232      	movs	r2, #50	; 0x32
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239a:	e002      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d102      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f2      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d112      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e011      	b.n	80023ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d8:	e007      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40007000 	.word	0x40007000
 80023fc:	20000000 	.word	0x20000000
 8002400:	431bde83 	.word	0x431bde83

08002404 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800240e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002412:	6093      	str	r3, [r2, #8]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000

08002424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e308      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d075      	beq.n	800252e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4ba3      	ldr	r3, [pc, #652]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4ba0      	ldr	r3, [pc, #640]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0x3e>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d002      	beq.n	8002468 <HAL_RCC_OscConfig+0x44>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d10b      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	4b99      	ldr	r3, [pc, #612]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05b      	beq.n	800252c <HAL_RCC_OscConfig+0x108>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d157      	bne.n	800252c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e2e3      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d106      	bne.n	8002498 <HAL_RCC_OscConfig+0x74>
 800248a:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a90      	ldr	r2, [pc, #576]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a8a      	ldr	r2, [pc, #552]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 80024bc:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fbfe 	bl	8001cdc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fbfa 	bl	8001cdc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e2a8      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xc0>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fbea 	bl	8001cdc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff fbe6 	bl	8001cdc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e294      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0xe8>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002544:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0x136>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d002      	beq.n	8002560 <HAL_RCC_OscConfig+0x13c>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002560:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x154>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e267      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4952      	ldr	r1, [pc, #328]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800258c:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x2b0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fb57 	bl	8001c44 <HAL_InitTick>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d043      	beq.n	8002624 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e253      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fb92 	bl	8001cdc <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff fb8e 	bl	8001cdc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e23c      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ce:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4939      	ldr	r1, [pc, #228]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e01a      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff fb6e 	bl	8001cdc <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002604:	f7ff fb6a 	bl	8001cdc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e218      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1e0>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03c      	beq.n	80026ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01c      	beq.n	8002674 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002640:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7ff fb47 	bl	8001cdc <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002652:	f7ff fb43 	bl	8001cdc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1f1      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ef      	beq.n	8002652 <HAL_RCC_OscConfig+0x22e>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff fb2a 	bl	8001cdc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7ff fb26 	bl	8001cdc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1d4      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ef      	bne.n	800268c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80ab 	beq.w	8002810 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2b4>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e005      	b.n	80026da <HAL_RCC_OscConfig+0x2b6>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	20000004 	.word	0x20000004
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	4aae      	ldr	r2, [pc, #696]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ea:	4bac      	ldr	r3, [pc, #688]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4ba9      	ldr	r3, [pc, #676]	; (80029a0 <HAL_RCC_OscConfig+0x57c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002706:	4ba6      	ldr	r3, [pc, #664]	; (80029a0 <HAL_RCC_OscConfig+0x57c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4aa5      	ldr	r2, [pc, #660]	; (80029a0 <HAL_RCC_OscConfig+0x57c>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff fae3 	bl	8001cdc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7ff fadf 	bl	8001cdc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e18d      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272c:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <HAL_RCC_OscConfig+0x57c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_RCC_OscConfig+0x32e>
 8002740:	4b96      	ldr	r3, [pc, #600]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a95      	ldr	r2, [pc, #596]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002750:	e024      	b.n	800279c <HAL_RCC_OscConfig+0x378>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d110      	bne.n	800277c <HAL_RCC_OscConfig+0x358>
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	4a8e      	ldr	r2, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	4a8a      	ldr	r2, [pc, #552]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277a:	e00f      	b.n	800279c <HAL_RCC_OscConfig+0x378>
 800277c:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a86      	ldr	r2, [pc, #536]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278c:	4b83      	ldr	r3, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	4a82      	ldr	r2, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d016      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa9a 	bl	8001cdc <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ac:	f7ff fa96 	bl	8001cdc <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e142      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ed      	beq.n	80027ac <HAL_RCC_OscConfig+0x388>
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7ff fa83 	bl	8001cdc <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7ff fa7f 	bl	8001cdc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e12b      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1ed      	bne.n	80027da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002804:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a64      	ldr	r2, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800280a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03c      	beq.n	8002896 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01c      	beq.n	800285e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002824:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282a:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff fa52 	bl	8001cdc <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283c:	f7ff fa4e 	bl	8001cdc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0fc      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800284e:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCC_OscConfig+0x418>
 800285c:	e01b      	b.n	8002896 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285e:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002864:	4a4d      	ldr	r2, [pc, #308]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff fa35 	bl	8001cdc <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002876:	f7ff fa31 	bl	8001cdc <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0df      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800288a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ef      	bne.n	8002876 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80d3 	beq.w	8002a46 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	f000 808d 	beq.w	80029c8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d15a      	bne.n	800296c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a38      	ldr	r2, [pc, #224]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80028bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff fa0b 	bl	8001cdc <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7ff fa07 	bl	8001cdc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0b5      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x578>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_OscConfig+0x580>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a11      	ldr	r1, [r2, #32]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002902:	0212      	lsls	r2, r2, #8
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800290a:	0852      	lsrs	r2, r2, #1
 800290c:	3a01      	subs	r2, #1
 800290e:	0552      	lsls	r2, r2, #21
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0652      	lsls	r2, r2, #25
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002922:	06d2      	lsls	r2, r2, #27
 8002924:	430a      	orrs	r2, r1
 8002926:	491d      	ldr	r1, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f9ca 	bl	8001cdc <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff f9c6 	bl	8001cdc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e074      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x528>
 800296a:	e06c      	b.n	8002a46 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_OscConfig+0x578>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCC_OscConfig+0x578>)
 800298a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff f9a2 	bl	8001cdc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299a:	e00e      	b.n	80029ba <HAL_RCC_OscConfig+0x596>
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f998 	bl	8001cdc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e046      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_OscConfig+0x62c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x584>
 80029c6:	e03e      	b.n	8002a46 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e039      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x62c>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d12c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d123      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11b      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d113      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e11e      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b8e      	ldr	r3, [pc, #568]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	498c      	ldr	r1, [pc, #560]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b8a      	ldr	r3, [pc, #552]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e106      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d073      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d129      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab0:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0f4      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ac0:	f000 f99e 	bl	8002e00 <RCC_GetSysClockFreqFromPLLSource>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4a7c      	ldr	r2, [pc, #496]	; (8002cbc <HAL_RCC_ClockConfig+0x268>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d93f      	bls.n	8002b4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d033      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d12f      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aee:	4b72      	ldr	r3, [pc, #456]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	4a70      	ldr	r2, [pc, #448]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e024      	b.n	8002b4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0c6      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0be      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b2c:	f000 f8ce 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4a61      	ldr	r2, [pc, #388]	; (8002cbc <HAL_RCC_ClockConfig+0x268>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d909      	bls.n	8002b4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4957      	ldr	r1, [pc, #348]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7ff f8bc 	bl	8001cdc <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7ff f8b8 	bl	8001cdc <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e095      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 020c 	and.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1eb      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a42      	ldr	r2, [pc, #264]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bea:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d21d      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	4929      	ldr	r1, [pc, #164]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c14:	f7ff f862 	bl	8001cdc <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff f85e 	bl	8001cdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e03b      	b.n	8002caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1ed      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490f      	ldr	r1, [pc, #60]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7e:	f000 f825 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <HAL_RCC_ClockConfig+0x26c>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x270>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ffce 	bl	8001c44 <HAL_InitTick>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	04c4b400 	.word	0x04c4b400
 8002cc0:	0800917c 	.word	0x0800917c
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e047      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e03e      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d136      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3301      	adds	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2a:	68d2      	ldr	r2, [r2, #12]
 8002d2c:	0a12      	lsrs	r2, r2, #8
 8002d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e00c      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	0a12      	lsrs	r2, r2, #8
 8002d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
      break;
 8002d52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0e5b      	lsrs	r3, r3, #25
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e001      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d74:	693b      	ldr	r3, [r7, #16]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	016e3600 	.word	0x016e3600

08002d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	0800918c 	.word	0x0800918c

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dd8:	f7ff ffda 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0adb      	lsrs	r3, r3, #11
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800918c 	.word	0x0800918c

08002e00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d10c      	bne.n	8002e3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e24:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e2e:	68d2      	ldr	r2, [r2, #12]
 8002e30:	0a12      	lsrs	r2, r2, #8
 8002e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	617b      	str	r3, [r7, #20]
    break;
 8002e3c:	e00c      	b.n	8002e58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	0a12      	lsrs	r2, r2, #8
 8002e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    break;
 8002e56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0e5b      	lsrs	r3, r3, #25
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	3301      	adds	r3, #1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e72:	687b      	ldr	r3, [r7, #4]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40021000 	.word	0x40021000
 8002e84:	016e3600 	.word	0x016e3600
 8002e88:	00f42400 	.word	0x00f42400

08002e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e94:	2300      	movs	r3, #0
 8002e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8098 	beq.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	4a3f      	ldr	r2, [pc, #252]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a39      	ldr	r2, [pc, #228]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe fefb 	bl	8001cdc <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee8:	e009      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe fef7 	bl	8001cdc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	74fb      	strb	r3, [r7, #19]
        break;
 8002efc:	e005      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ef      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d159      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01e      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d019      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f2c:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f48:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f58:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe feb7 	bl	8001cdc <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f70:	e00b      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe feb3 	bl	8001cdc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d902      	bls.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	74fb      	strb	r3, [r7, #19]
            break;
 8002f88:	e006      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ec      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	74bb      	strb	r3, [r7, #18]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc8:	7c7b      	ldrb	r3, [r7, #17]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4baf      	ldr	r3, [pc, #700]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	4aae      	ldr	r2, [pc, #696]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe6:	4ba9      	ldr	r3, [pc, #676]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 0203 	bic.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	49a5      	ldr	r1, [pc, #660]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003008:	4ba0      	ldr	r3, [pc, #640]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 020c 	bic.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	499d      	ldr	r1, [pc, #628]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800302a:	4b98      	ldr	r3, [pc, #608]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4994      	ldr	r1, [pc, #592]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800304c:	4b8f      	ldr	r3, [pc, #572]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	498c      	ldr	r1, [pc, #560]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800306e:	4b87      	ldr	r3, [pc, #540]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	4983      	ldr	r1, [pc, #524]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	497b      	ldr	r1, [pc, #492]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4972      	ldr	r1, [pc, #456]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d4:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	496a      	ldr	r1, [pc, #424]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4961      	ldr	r1, [pc, #388]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003118:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800311a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	4959      	ldr	r1, [pc, #356]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800313a:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4950      	ldr	r1, [pc, #320]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4948      	ldr	r1, [pc, #288]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003194:	4b3d      	ldr	r3, [pc, #244]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	493a      	ldr	r1, [pc, #232]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d105      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	492c      	ldr	r1, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a26      	ldr	r2, [pc, #152]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	491e      	ldr	r1, [pc, #120]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4910      	ldr	r1, [pc, #64]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003266:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4902      	ldr	r1, [pc, #8]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800328c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003298:	d105      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d015      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	4917      	ldr	r1, [pc, #92]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d105      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d015      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003308:	d105      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003314:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003316:	7cbb      	ldrb	r3, [r7, #18]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e09d      	b.n	8003472 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe f952 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800339c:	d902      	bls.n	80033a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e002      	b.n	80033aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033b2:	d007      	beq.n	80033c4 <HAL_SPI_Init+0xa0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	ea42 0103 	orr.w	r1, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f003 0204 	and.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003440:	ea42 0103 	orr.w	r1, r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e049      	b.n	8003520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d106      	bne.n	80034a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fe fa59 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f000 fa55 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d001      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e054      	b.n	80035ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d022      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d01d      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a22      	ldr	r2, [pc, #136]	; (80035fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d018      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_TIM_Base_Start_IT+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <HAL_TIM_Base_Start_IT+0xdc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00e      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_TIM_Base_Start_IT+0xe0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_TIM_Base_Start_IT+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x80>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_Base_Start_IT+0xe8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d115      	bne.n	80035d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_TIM_Base_Start_IT+0xec>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d015      	beq.n	80035e6 <HAL_TIM_Base_Start_IT+0xbe>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d011      	beq.n	80035e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d2:	e008      	b.n	80035e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e000      	b.n	80035e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000
 8003610:	40015000 	.word	0x40015000
 8003614:	00010007 	.word	0x00010007

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0202 	mvn.w	r2, #2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f965 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f957 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f968 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0204 	mvn.w	r2, #4
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f93b 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f92d 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f93e 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0208 	mvn.w	r2, #8
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2204      	movs	r2, #4
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f911 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f903 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f914 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b10      	cmp	r3, #16
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0210 	mvn.w	r2, #16
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2208      	movs	r2, #8
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8e7 	bl	800392a <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8d9 	bl	8003916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8ea 	bl	800393e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0201 	mvn.w	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe f904 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa18 	bl	8003bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d10e      	bne.n	80037f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d107      	bne.n	80037f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fa0b 	bl	8003c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d107      	bne.n	8003822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f898 	bl	8003952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d10e      	bne.n	800384e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d107      	bne.n	800384e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0220 	mvn.w	r2, #32
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9cb 	bl	8003be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385c:	d10f      	bne.n	800387e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d107      	bne.n	800387e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9d1 	bl	8003c20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800388c:	d10f      	bne.n	80038ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389c:	d107      	bne.n	80038ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f9c3 	bl	8003c34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038bc:	d10f      	bne.n	80038de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d107      	bne.n	80038de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f9b5 	bl	8003c48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ec:	d10f      	bne.n	800390e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f9a7 	bl	8003c5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d017      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d013      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00f      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00b      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3f      	ldr	r2, [pc, #252]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d108      	bne.n	80039c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <TIM_Base_SetConfig+0x144>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_Base_SetConfig+0x148>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_Base_SetConfig+0x14c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	; (8003aac <TIM_Base_SetConfig+0x144>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <TIM_Base_SetConfig+0x148>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <TIM_Base_SetConfig+0x14c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d103      	bne.n	8003a80 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40015000 	.word	0x40015000
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e074      	b.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d01d      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40013400 	.word	0x40013400
 8003bd0:	40015000 	.word	0x40015000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000

08003be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e042      	b.n	8003d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd ff1d 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2224      	movs	r2, #36	; 0x24
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f82c 	bl	8003d10 <UART_SetConfig>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e022      	b.n	8003d08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fae8 	bl	80042a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fb6f 	bl	80043e4 <UART_CheckIdleState>
 8003d06:	4603      	mov	r3, r0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	b5b0      	push	{r4, r5, r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4bb1      	ldr	r3, [pc, #708]	; (8004000 <UART_SetConfig+0x2f0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	69f9      	ldr	r1, [r7, #28]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4aa6      	ldr	r2, [pc, #664]	; (8004004 <UART_SetConfig+0x2f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	69f9      	ldr	r1, [r7, #28]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f023 010f 	bic.w	r1, r3, #15
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a97      	ldr	r2, [pc, #604]	; (8004008 <UART_SetConfig+0x2f8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d120      	bne.n	8003df2 <UART_SetConfig+0xe2>
 8003db0:	4b96      	ldr	r3, [pc, #600]	; (800400c <UART_SetConfig+0x2fc>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d816      	bhi.n	8003dec <UART_SetConfig+0xdc>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0xb4>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de1 	.word	0x08003de1
 8003dcc:	08003ddb 	.word	0x08003ddb
 8003dd0:	08003de7 	.word	0x08003de7
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e0e7      	b.n	8003faa <UART_SetConfig+0x29a>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	76fb      	strb	r3, [r7, #27]
 8003dde:	e0e4      	b.n	8003faa <UART_SetConfig+0x29a>
 8003de0:	2304      	movs	r3, #4
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e0e1      	b.n	8003faa <UART_SetConfig+0x29a>
 8003de6:	2308      	movs	r3, #8
 8003de8:	76fb      	strb	r3, [r7, #27]
 8003dea:	e0de      	b.n	8003faa <UART_SetConfig+0x29a>
 8003dec:	2310      	movs	r3, #16
 8003dee:	76fb      	strb	r3, [r7, #27]
 8003df0:	e0db      	b.n	8003faa <UART_SetConfig+0x29a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a86      	ldr	r2, [pc, #536]	; (8004010 <UART_SetConfig+0x300>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d132      	bne.n	8003e62 <UART_SetConfig+0x152>
 8003dfc:	4b83      	ldr	r3, [pc, #524]	; (800400c <UART_SetConfig+0x2fc>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d828      	bhi.n	8003e5c <UART_SetConfig+0x14c>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x100>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e5d 	.word	0x08003e5d
 8003e18:	08003e5d 	.word	0x08003e5d
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e51 	.word	0x08003e51
 8003e24:	08003e5d 	.word	0x08003e5d
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e5d 	.word	0x08003e5d
 8003e30:	08003e4b 	.word	0x08003e4b
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e5d 	.word	0x08003e5d
 8003e40:	08003e57 	.word	0x08003e57
 8003e44:	2300      	movs	r3, #0
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	e0af      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	76fb      	strb	r3, [r7, #27]
 8003e4e:	e0ac      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e50:	2304      	movs	r3, #4
 8003e52:	76fb      	strb	r3, [r7, #27]
 8003e54:	e0a9      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e56:	2308      	movs	r3, #8
 8003e58:	76fb      	strb	r3, [r7, #27]
 8003e5a:	e0a6      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	76fb      	strb	r3, [r7, #27]
 8003e60:	e0a3      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6b      	ldr	r2, [pc, #428]	; (8004014 <UART_SetConfig+0x304>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d120      	bne.n	8003eae <UART_SetConfig+0x19e>
 8003e6c:	4b67      	ldr	r3, [pc, #412]	; (800400c <UART_SetConfig+0x2fc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e76:	2b30      	cmp	r3, #48	; 0x30
 8003e78:	d013      	beq.n	8003ea2 <UART_SetConfig+0x192>
 8003e7a:	2b30      	cmp	r3, #48	; 0x30
 8003e7c:	d814      	bhi.n	8003ea8 <UART_SetConfig+0x198>
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d009      	beq.n	8003e96 <UART_SetConfig+0x186>
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d810      	bhi.n	8003ea8 <UART_SetConfig+0x198>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <UART_SetConfig+0x180>
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d006      	beq.n	8003e9c <UART_SetConfig+0x18c>
 8003e8e:	e00b      	b.n	8003ea8 <UART_SetConfig+0x198>
 8003e90:	2300      	movs	r3, #0
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	e089      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	76fb      	strb	r3, [r7, #27]
 8003e9a:	e086      	b.n	8003faa <UART_SetConfig+0x29a>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	76fb      	strb	r3, [r7, #27]
 8003ea0:	e083      	b.n	8003faa <UART_SetConfig+0x29a>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	76fb      	strb	r3, [r7, #27]
 8003ea6:	e080      	b.n	8003faa <UART_SetConfig+0x29a>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	76fb      	strb	r3, [r7, #27]
 8003eac:	e07d      	b.n	8003faa <UART_SetConfig+0x29a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a59      	ldr	r2, [pc, #356]	; (8004018 <UART_SetConfig+0x308>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d120      	bne.n	8003efa <UART_SetConfig+0x1ea>
 8003eb8:	4b54      	ldr	r3, [pc, #336]	; (800400c <UART_SetConfig+0x2fc>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec4:	d013      	beq.n	8003eee <UART_SetConfig+0x1de>
 8003ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec8:	d814      	bhi.n	8003ef4 <UART_SetConfig+0x1e4>
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d009      	beq.n	8003ee2 <UART_SetConfig+0x1d2>
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d810      	bhi.n	8003ef4 <UART_SetConfig+0x1e4>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <UART_SetConfig+0x1cc>
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d006      	beq.n	8003ee8 <UART_SetConfig+0x1d8>
 8003eda:	e00b      	b.n	8003ef4 <UART_SetConfig+0x1e4>
 8003edc:	2300      	movs	r3, #0
 8003ede:	76fb      	strb	r3, [r7, #27]
 8003ee0:	e063      	b.n	8003faa <UART_SetConfig+0x29a>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	76fb      	strb	r3, [r7, #27]
 8003ee6:	e060      	b.n	8003faa <UART_SetConfig+0x29a>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	76fb      	strb	r3, [r7, #27]
 8003eec:	e05d      	b.n	8003faa <UART_SetConfig+0x29a>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	76fb      	strb	r3, [r7, #27]
 8003ef2:	e05a      	b.n	8003faa <UART_SetConfig+0x29a>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	76fb      	strb	r3, [r7, #27]
 8003ef8:	e057      	b.n	8003faa <UART_SetConfig+0x29a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a47      	ldr	r2, [pc, #284]	; (800401c <UART_SetConfig+0x30c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d125      	bne.n	8003f50 <UART_SetConfig+0x240>
 8003f04:	4b41      	ldr	r3, [pc, #260]	; (800400c <UART_SetConfig+0x2fc>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f12:	d017      	beq.n	8003f44 <UART_SetConfig+0x234>
 8003f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f18:	d817      	bhi.n	8003f4a <UART_SetConfig+0x23a>
 8003f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1e:	d00b      	beq.n	8003f38 <UART_SetConfig+0x228>
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d811      	bhi.n	8003f4a <UART_SetConfig+0x23a>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <UART_SetConfig+0x222>
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	d006      	beq.n	8003f3e <UART_SetConfig+0x22e>
 8003f30:	e00b      	b.n	8003f4a <UART_SetConfig+0x23a>
 8003f32:	2300      	movs	r3, #0
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e038      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e035      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e032      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f44:	2308      	movs	r3, #8
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	e02f      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	76fb      	strb	r3, [r7, #27]
 8003f4e:	e02c      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <UART_SetConfig+0x2f4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d125      	bne.n	8003fa6 <UART_SetConfig+0x296>
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	; (800400c <UART_SetConfig+0x2fc>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f68:	d017      	beq.n	8003f9a <UART_SetConfig+0x28a>
 8003f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f6e:	d817      	bhi.n	8003fa0 <UART_SetConfig+0x290>
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f74:	d00b      	beq.n	8003f8e <UART_SetConfig+0x27e>
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7a:	d811      	bhi.n	8003fa0 <UART_SetConfig+0x290>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <UART_SetConfig+0x278>
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f84:	d006      	beq.n	8003f94 <UART_SetConfig+0x284>
 8003f86:	e00b      	b.n	8003fa0 <UART_SetConfig+0x290>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	76fb      	strb	r3, [r7, #27]
 8003f8c:	e00d      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	76fb      	strb	r3, [r7, #27]
 8003f92:	e00a      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f94:	2304      	movs	r3, #4
 8003f96:	76fb      	strb	r3, [r7, #27]
 8003f98:	e007      	b.n	8003faa <UART_SetConfig+0x29a>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	76fb      	strb	r3, [r7, #27]
 8003f9e:	e004      	b.n	8003faa <UART_SetConfig+0x29a>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	76fb      	strb	r3, [r7, #27]
 8003fa4:	e001      	b.n	8003faa <UART_SetConfig+0x29a>
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <UART_SetConfig+0x2f4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f040 809f 	bne.w	80040f4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fb6:	7efb      	ldrb	r3, [r7, #27]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d837      	bhi.n	800402c <UART_SetConfig+0x31c>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x2b4>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	0800402d 	.word	0x0800402d
 8003fd4:	08003ff7 	.word	0x08003ff7
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	0800402d 	.word	0x0800402d
 8003fe0:	0800402d 	.word	0x0800402d
 8003fe4:	08004025 	.word	0x08004025
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fede 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003fec:	6178      	str	r0, [r7, #20]
        break;
 8003fee:	e022      	b.n	8004036 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <UART_SetConfig+0x310>)
 8003ff2:	617b      	str	r3, [r7, #20]
        break;
 8003ff4:	e01f      	b.n	8004036 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe fe69 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8003ffa:	6178      	str	r0, [r7, #20]
        break;
 8003ffc:	e01b      	b.n	8004036 <UART_SetConfig+0x326>
 8003ffe:	bf00      	nop
 8004000:	cfff69f3 	.word	0xcfff69f3
 8004004:	40008000 	.word	0x40008000
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000
 8004010:	40004400 	.word	0x40004400
 8004014:	40004800 	.word	0x40004800
 8004018:	40004c00 	.word	0x40004c00
 800401c:	40005000 	.word	0x40005000
 8004020:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004028:	617b      	str	r3, [r7, #20]
        break;
 800402a:	e004      	b.n	8004036 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	76bb      	strb	r3, [r7, #26]
        break;
 8004034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8119 	beq.w	8004270 <UART_SetConfig+0x560>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	4a95      	ldr	r2, [pc, #596]	; (8004298 <UART_SetConfig+0x588>)
 8004044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004048:	461a      	mov	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004050:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d305      	bcc.n	800406e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d902      	bls.n	8004074 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	76bb      	strb	r3, [r7, #26]
 8004072:	e0fd      	b.n	8004270 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4618      	mov	r0, r3
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4a85      	ldr	r2, [pc, #532]	; (8004298 <UART_SetConfig+0x588>)
 8004082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004086:	b29a      	uxth	r2, r3
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	f7fc fe24 	bl	8000cd8 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	020b      	lsls	r3, r1, #8
 80040a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040a6:	0202      	lsls	r2, r0, #8
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6849      	ldr	r1, [r1, #4]
 80040ac:	0849      	lsrs	r1, r1, #1
 80040ae:	4608      	mov	r0, r1
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	1814      	adds	r4, r2, r0
 80040b6:	eb43 0501 	adc.w	r5, r3, r1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	f7fc fe06 	bl	8000cd8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040da:	d308      	bcc.n	80040ee <UART_SetConfig+0x3de>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d204      	bcs.n	80040ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	e0c0      	b.n	8004270 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	76bb      	strb	r3, [r7, #26]
 80040f2:	e0bd      	b.n	8004270 <UART_SetConfig+0x560>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d164      	bne.n	80041c8 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80040fe:	7efb      	ldrb	r3, [r7, #27]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x446>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x3fc>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fe3a 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8004134:	6178      	str	r0, [r7, #20]
        break;
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe fe4c 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 800413c:	6178      	str	r0, [r7, #20]
        break;
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b56      	ldr	r3, [pc, #344]	; (800429c <UART_SetConfig+0x58c>)
 8004142:	617b      	str	r3, [r7, #20]
        break;
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7fe fdc1 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 800414a:	6178      	str	r0, [r7, #20]
        break;
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	617b      	str	r3, [r7, #20]
        break;
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	76bb      	strb	r3, [r7, #26]
        break;
 800415e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8084 	beq.w	8004270 <UART_SetConfig+0x560>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	4a4a      	ldr	r2, [pc, #296]	; (8004298 <UART_SetConfig+0x588>)
 800416e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004172:	461a      	mov	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fbb3 f3f2 	udiv	r3, r3, r2
 800417a:	005a      	lsls	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b0f      	cmp	r3, #15
 8004192:	d916      	bls.n	80041c2 <UART_SetConfig+0x4b2>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d212      	bcs.n	80041c2 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f023 030f 	bic.w	r3, r3, #15
 80041a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	89fb      	ldrh	r3, [r7, #14]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	89fa      	ldrh	r2, [r7, #14]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e056      	b.n	8004270 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	76bb      	strb	r3, [r7, #26]
 80041c6:	e053      	b.n	8004270 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c8:	7efb      	ldrb	r3, [r7, #27]
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d827      	bhi.n	800421e <UART_SetConfig+0x50e>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x4c4>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004209 	.word	0x08004209
 80041e0:	0800421f 	.word	0x0800421f
 80041e4:	0800420f 	.word	0x0800420f
 80041e8:	0800421f 	.word	0x0800421f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800421f 	.word	0x0800421f
 80041f4:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe fdd6 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 80041fc:	6178      	str	r0, [r7, #20]
        break;
 80041fe:	e013      	b.n	8004228 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fde8 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8004204:	6178      	str	r0, [r7, #20]
        break;
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <UART_SetConfig+0x58c>)
 800420a:	617b      	str	r3, [r7, #20]
        break;
 800420c:	e00c      	b.n	8004228 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420e:	f7fe fd5d 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8004212:	6178      	str	r0, [r7, #20]
        break;
 8004214:	e008      	b.n	8004228 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	617b      	str	r3, [r7, #20]
        break;
 800421c:	e004      	b.n	8004228 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	76bb      	strb	r3, [r7, #26]
        break;
 8004226:	bf00      	nop
    }

    if (pclk != 0U)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d020      	beq.n	8004270 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <UART_SetConfig+0x588>)
 8004234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004238:	461a      	mov	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	441a      	add	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d909      	bls.n	800426c <UART_SetConfig+0x55c>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425e:	d205      	bcs.n	800426c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	e001      	b.n	8004270 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800428c:	7ebb      	ldrb	r3, [r7, #26]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bdb0      	pop	{r4, r5, r7, pc}
 8004296:	bf00      	nop
 8004298:	08009194 	.word	0x08009194
 800429c:	00f42400 	.word	0x00f42400

080042a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01a      	beq.n	80043b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439e:	d10a      	bne.n	80043b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	605a      	str	r2, [r3, #4]
  }
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f4:	f7fd fc72 	bl	8001cdc <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d10e      	bne.n	8004426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f82f 	bl	800447a <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e025      	b.n	8004472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d10e      	bne.n	8004452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f819 	bl	800447a <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e00f      	b.n	8004472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b09c      	sub	sp, #112	; 0x70
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448a:	e0a9      	b.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	f000 80a5 	beq.w	80045e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fd fc21 	bl	8001cdc <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <UART_WaitOnFlagUntilTimeout+0x32>
 80044a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d140      	bne.n	800452e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044c0:	667b      	str	r3, [r7, #100]	; 0x64
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	663b      	str	r3, [r7, #96]	; 0x60
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e069      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d051      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454a:	d149      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e6      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	613b      	str	r3, [r7, #16]
   return(result);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045a8:	623a      	str	r2, [r7, #32]
 80045aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	69f9      	ldr	r1, [r7, #28]
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e5      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e010      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69da      	ldr	r2, [r3, #28]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	f43f af46 	beq.w	800448c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3770      	adds	r7, #112	; 0x70
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_UARTEx_DisableFifoMode+0x16>
 800461c:	2302      	movs	r3, #2
 800461e:	e027      	b.n	8004670 <HAL_UARTEx_DisableFifoMode+0x66>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800464e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e02d      	b.n	80046f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	; 0x24
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f84f 	bl	8004774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e02d      	b.n	800476c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f811 	bl	8004774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004794:	e031      	b.n	80047fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004796:	2308      	movs	r3, #8
 8004798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800479a:	2308      	movs	r3, #8
 800479c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	0e5b      	lsrs	r3, r3, #25
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0f5b      	lsrs	r3, r3, #29
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047be:	7bbb      	ldrb	r3, [r7, #14]
 80047c0:	7b3a      	ldrb	r2, [r7, #12]
 80047c2:	4911      	ldr	r1, [pc, #68]	; (8004808 <UARTEx_SetNbDataToProcess+0x94>)
 80047c4:	5c8a      	ldrb	r2, [r1, r2]
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ca:	7b3a      	ldrb	r2, [r7, #12]
 80047cc:	490f      	ldr	r1, [pc, #60]	; (800480c <UARTEx_SetNbDataToProcess+0x98>)
 80047ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	7b7a      	ldrb	r2, [r7, #13]
 80047e0:	4909      	ldr	r1, [pc, #36]	; (8004808 <UARTEx_SetNbDataToProcess+0x94>)
 80047e2:	5c8a      	ldrb	r2, [r1, r2]
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047e8:	7b7a      	ldrb	r2, [r7, #13]
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <UARTEx_SetNbDataToProcess+0x98>)
 80047ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	080091ac 	.word	0x080091ac
 800480c:	080091b4 	.word	0x080091b4

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f004 fc60 	bl	80090f4 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	0800967c 	.word	0x0800967c
 8004858:	0800967c 	.word	0x0800967c
 800485c:	0800967c 	.word	0x0800967c
 8004860:	08009680 	.word	0x08009680

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <__cvt>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	ec55 4b10 	vmov	r4, r5, d0
 800487c:	2d00      	cmp	r5, #0
 800487e:	460e      	mov	r6, r1
 8004880:	4619      	mov	r1, r3
 8004882:	462b      	mov	r3, r5
 8004884:	bfbb      	ittet	lt
 8004886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800488a:	461d      	movlt	r5, r3
 800488c:	2300      	movge	r3, #0
 800488e:	232d      	movlt	r3, #45	; 0x2d
 8004890:	700b      	strb	r3, [r1, #0]
 8004892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004898:	4691      	mov	r9, r2
 800489a:	f023 0820 	bic.w	r8, r3, #32
 800489e:	bfbc      	itt	lt
 80048a0:	4622      	movlt	r2, r4
 80048a2:	4614      	movlt	r4, r2
 80048a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048a8:	d005      	beq.n	80048b6 <__cvt+0x42>
 80048aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048ae:	d100      	bne.n	80048b2 <__cvt+0x3e>
 80048b0:	3601      	adds	r6, #1
 80048b2:	2102      	movs	r1, #2
 80048b4:	e000      	b.n	80048b8 <__cvt+0x44>
 80048b6:	2103      	movs	r1, #3
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	ab02      	add	r3, sp, #8
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	ec45 4b10 	vmov	d0, r4, r5
 80048c4:	4653      	mov	r3, sl
 80048c6:	4632      	mov	r2, r6
 80048c8:	f001 fdce 	bl	8006468 <_dtoa_r>
 80048cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048d0:	4607      	mov	r7, r0
 80048d2:	d102      	bne.n	80048da <__cvt+0x66>
 80048d4:	f019 0f01 	tst.w	r9, #1
 80048d8:	d022      	beq.n	8004920 <__cvt+0xac>
 80048da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048de:	eb07 0906 	add.w	r9, r7, r6
 80048e2:	d110      	bne.n	8004906 <__cvt+0x92>
 80048e4:	783b      	ldrb	r3, [r7, #0]
 80048e6:	2b30      	cmp	r3, #48	; 0x30
 80048e8:	d10a      	bne.n	8004900 <__cvt+0x8c>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2300      	movs	r3, #0
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fc f911 	bl	8000b18 <__aeabi_dcmpeq>
 80048f6:	b918      	cbnz	r0, 8004900 <__cvt+0x8c>
 80048f8:	f1c6 0601 	rsb	r6, r6, #1
 80048fc:	f8ca 6000 	str.w	r6, [sl]
 8004900:	f8da 3000 	ldr.w	r3, [sl]
 8004904:	4499      	add	r9, r3
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fc f903 	bl	8000b18 <__aeabi_dcmpeq>
 8004912:	b108      	cbz	r0, 8004918 <__cvt+0xa4>
 8004914:	f8cd 900c 	str.w	r9, [sp, #12]
 8004918:	2230      	movs	r2, #48	; 0x30
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	454b      	cmp	r3, r9
 800491e:	d307      	bcc.n	8004930 <__cvt+0xbc>
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004924:	1bdb      	subs	r3, r3, r7
 8004926:	4638      	mov	r0, r7
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	b004      	add	sp, #16
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	1c59      	adds	r1, r3, #1
 8004932:	9103      	str	r1, [sp, #12]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e7f0      	b.n	800491a <__cvt+0xa6>

08004938 <__exponent>:
 8004938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493a:	4603      	mov	r3, r0
 800493c:	2900      	cmp	r1, #0
 800493e:	bfb8      	it	lt
 8004940:	4249      	neglt	r1, r1
 8004942:	f803 2b02 	strb.w	r2, [r3], #2
 8004946:	bfb4      	ite	lt
 8004948:	222d      	movlt	r2, #45	; 0x2d
 800494a:	222b      	movge	r2, #43	; 0x2b
 800494c:	2909      	cmp	r1, #9
 800494e:	7042      	strb	r2, [r0, #1]
 8004950:	dd2a      	ble.n	80049a8 <__exponent+0x70>
 8004952:	f10d 0407 	add.w	r4, sp, #7
 8004956:	46a4      	mov	ip, r4
 8004958:	270a      	movs	r7, #10
 800495a:	46a6      	mov	lr, r4
 800495c:	460a      	mov	r2, r1
 800495e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004962:	fb07 1516 	mls	r5, r7, r6, r1
 8004966:	3530      	adds	r5, #48	; 0x30
 8004968:	2a63      	cmp	r2, #99	; 0x63
 800496a:	f104 34ff 	add.w	r4, r4, #4294967295
 800496e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004972:	4631      	mov	r1, r6
 8004974:	dcf1      	bgt.n	800495a <__exponent+0x22>
 8004976:	3130      	adds	r1, #48	; 0x30
 8004978:	f1ae 0502 	sub.w	r5, lr, #2
 800497c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004980:	1c44      	adds	r4, r0, #1
 8004982:	4629      	mov	r1, r5
 8004984:	4561      	cmp	r1, ip
 8004986:	d30a      	bcc.n	800499e <__exponent+0x66>
 8004988:	f10d 0209 	add.w	r2, sp, #9
 800498c:	eba2 020e 	sub.w	r2, r2, lr
 8004990:	4565      	cmp	r5, ip
 8004992:	bf88      	it	hi
 8004994:	2200      	movhi	r2, #0
 8004996:	4413      	add	r3, r2
 8004998:	1a18      	subs	r0, r3, r0
 800499a:	b003      	add	sp, #12
 800499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049a6:	e7ed      	b.n	8004984 <__exponent+0x4c>
 80049a8:	2330      	movs	r3, #48	; 0x30
 80049aa:	3130      	adds	r1, #48	; 0x30
 80049ac:	7083      	strb	r3, [r0, #2]
 80049ae:	70c1      	strb	r1, [r0, #3]
 80049b0:	1d03      	adds	r3, r0, #4
 80049b2:	e7f1      	b.n	8004998 <__exponent+0x60>

080049b4 <_printf_float>:
 80049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b8:	ed2d 8b02 	vpush	{d8}
 80049bc:	b08d      	sub	sp, #52	; 0x34
 80049be:	460c      	mov	r4, r1
 80049c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049c4:	4616      	mov	r6, r2
 80049c6:	461f      	mov	r7, r3
 80049c8:	4605      	mov	r5, r0
 80049ca:	f002 ff9d 	bl	8007908 <_localeconv_r>
 80049ce:	f8d0 a000 	ldr.w	sl, [r0]
 80049d2:	4650      	mov	r0, sl
 80049d4:	f7fb fc24 	bl	8000220 <strlen>
 80049d8:	2300      	movs	r3, #0
 80049da:	930a      	str	r3, [sp, #40]	; 0x28
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	9305      	str	r3, [sp, #20]
 80049e0:	f8d8 3000 	ldr.w	r3, [r8]
 80049e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049e8:	3307      	adds	r3, #7
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	f103 0208 	add.w	r2, r3, #8
 80049f2:	f8c8 2000 	str.w	r2, [r8]
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a0c:	ee08 0a10 	vmov	s16, r0
 8004a10:	4b9f      	ldr	r3, [pc, #636]	; (8004c90 <_printf_float+0x2dc>)
 8004a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	f7fc f8af 	bl	8000b7c <__aeabi_dcmpun>
 8004a1e:	bb88      	cbnz	r0, 8004a84 <_printf_float+0xd0>
 8004a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a24:	4b9a      	ldr	r3, [pc, #616]	; (8004c90 <_printf_float+0x2dc>)
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2a:	f7fc f889 	bl	8000b40 <__aeabi_dcmple>
 8004a2e:	bb48      	cbnz	r0, 8004a84 <_printf_float+0xd0>
 8004a30:	2200      	movs	r2, #0
 8004a32:	2300      	movs	r3, #0
 8004a34:	4640      	mov	r0, r8
 8004a36:	4649      	mov	r1, r9
 8004a38:	f7fc f878 	bl	8000b2c <__aeabi_dcmplt>
 8004a3c:	b110      	cbz	r0, 8004a44 <_printf_float+0x90>
 8004a3e:	232d      	movs	r3, #45	; 0x2d
 8004a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a44:	4b93      	ldr	r3, [pc, #588]	; (8004c94 <_printf_float+0x2e0>)
 8004a46:	4894      	ldr	r0, [pc, #592]	; (8004c98 <_printf_float+0x2e4>)
 8004a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a4c:	bf94      	ite	ls
 8004a4e:	4698      	movls	r8, r3
 8004a50:	4680      	movhi	r8, r0
 8004a52:	2303      	movs	r3, #3
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	f023 0204 	bic.w	r2, r3, #4
 8004a5c:	6022      	str	r2, [r4, #0]
 8004a5e:	f04f 0900 	mov.w	r9, #0
 8004a62:	9700      	str	r7, [sp, #0]
 8004a64:	4633      	mov	r3, r6
 8004a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f9d8 	bl	8004e20 <_printf_common>
 8004a70:	3001      	adds	r0, #1
 8004a72:	f040 8090 	bne.w	8004b96 <_printf_float+0x1e2>
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	b00d      	add	sp, #52	; 0x34
 8004a7c:	ecbd 8b02 	vpop	{d8}
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fc f876 	bl	8000b7c <__aeabi_dcmpun>
 8004a90:	b140      	cbz	r0, 8004aa4 <_printf_float+0xf0>
 8004a92:	464b      	mov	r3, r9
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbc      	itt	lt
 8004a98:	232d      	movlt	r3, #45	; 0x2d
 8004a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a9e:	487f      	ldr	r0, [pc, #508]	; (8004c9c <_printf_float+0x2e8>)
 8004aa0:	4b7f      	ldr	r3, [pc, #508]	; (8004ca0 <_printf_float+0x2ec>)
 8004aa2:	e7d1      	b.n	8004a48 <_printf_float+0x94>
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004aaa:	9206      	str	r2, [sp, #24]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	d13f      	bne.n	8004b30 <_printf_float+0x17c>
 8004ab0:	2306      	movs	r3, #6
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	9b05      	ldr	r3, [sp, #20]
 8004ab6:	6861      	ldr	r1, [r4, #4]
 8004ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004abc:	2300      	movs	r3, #0
 8004abe:	9303      	str	r3, [sp, #12]
 8004ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ac6:	ab09      	add	r3, sp, #36	; 0x24
 8004ac8:	ec49 8b10 	vmov	d0, r8, r9
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f7ff fecd 	bl	8004874 <__cvt>
 8004ada:	9b06      	ldr	r3, [sp, #24]
 8004adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ade:	2b47      	cmp	r3, #71	; 0x47
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	d108      	bne.n	8004af6 <_printf_float+0x142>
 8004ae4:	1cc8      	adds	r0, r1, #3
 8004ae6:	db02      	blt.n	8004aee <_printf_float+0x13a>
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	4299      	cmp	r1, r3
 8004aec:	dd41      	ble.n	8004b72 <_printf_float+0x1be>
 8004aee:	f1ab 0b02 	sub.w	fp, fp, #2
 8004af2:	fa5f fb8b 	uxtb.w	fp, fp
 8004af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004afa:	d820      	bhi.n	8004b3e <_printf_float+0x18a>
 8004afc:	3901      	subs	r1, #1
 8004afe:	465a      	mov	r2, fp
 8004b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b04:	9109      	str	r1, [sp, #36]	; 0x24
 8004b06:	f7ff ff17 	bl	8004938 <__exponent>
 8004b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b0c:	1813      	adds	r3, r2, r0
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	4681      	mov	r9, r0
 8004b12:	6123      	str	r3, [r4, #16]
 8004b14:	dc02      	bgt.n	8004b1c <_printf_float+0x168>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	07d2      	lsls	r2, r2, #31
 8004b1a:	d501      	bpl.n	8004b20 <_printf_float+0x16c>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d09c      	beq.n	8004a62 <_printf_float+0xae>
 8004b28:	232d      	movs	r3, #45	; 0x2d
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2e:	e798      	b.n	8004a62 <_printf_float+0xae>
 8004b30:	9a06      	ldr	r2, [sp, #24]
 8004b32:	2a47      	cmp	r2, #71	; 0x47
 8004b34:	d1be      	bne.n	8004ab4 <_printf_float+0x100>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1bc      	bne.n	8004ab4 <_printf_float+0x100>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7b9      	b.n	8004ab2 <_printf_float+0xfe>
 8004b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b42:	d118      	bne.n	8004b76 <_printf_float+0x1c2>
 8004b44:	2900      	cmp	r1, #0
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	dd0b      	ble.n	8004b62 <_printf_float+0x1ae>
 8004b4a:	6121      	str	r1, [r4, #16]
 8004b4c:	b913      	cbnz	r3, 8004b54 <_printf_float+0x1a0>
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	07d0      	lsls	r0, r2, #31
 8004b52:	d502      	bpl.n	8004b5a <_printf_float+0x1a6>
 8004b54:	3301      	adds	r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b5c:	f04f 0900 	mov.w	r9, #0
 8004b60:	e7de      	b.n	8004b20 <_printf_float+0x16c>
 8004b62:	b913      	cbnz	r3, 8004b6a <_printf_float+0x1b6>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	07d2      	lsls	r2, r2, #31
 8004b68:	d501      	bpl.n	8004b6e <_printf_float+0x1ba>
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	e7f4      	b.n	8004b58 <_printf_float+0x1a4>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e7f2      	b.n	8004b58 <_printf_float+0x1a4>
 8004b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	db05      	blt.n	8004b88 <_printf_float+0x1d4>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	6121      	str	r1, [r4, #16]
 8004b80:	07d8      	lsls	r0, r3, #31
 8004b82:	d5ea      	bpl.n	8004b5a <_printf_float+0x1a6>
 8004b84:	1c4b      	adds	r3, r1, #1
 8004b86:	e7e7      	b.n	8004b58 <_printf_float+0x1a4>
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	bfd4      	ite	le
 8004b8c:	f1c1 0202 	rsble	r2, r1, #2
 8004b90:	2201      	movgt	r2, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	e7e0      	b.n	8004b58 <_printf_float+0x1a4>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	055a      	lsls	r2, r3, #21
 8004b9a:	d407      	bmi.n	8004bac <_printf_float+0x1f8>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d12c      	bne.n	8004c04 <_printf_float+0x250>
 8004baa:	e764      	b.n	8004a76 <_printf_float+0xc2>
 8004bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bb0:	f240 80e0 	bls.w	8004d74 <_printf_float+0x3c0>
 8004bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f7fb ffac 	bl	8000b18 <__aeabi_dcmpeq>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d034      	beq.n	8004c2e <_printf_float+0x27a>
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <_printf_float+0x2f0>)
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	f43f af51 	beq.w	8004a76 <_printf_float+0xc2>
 8004bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	db02      	blt.n	8004be2 <_printf_float+0x22e>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	07d8      	lsls	r0, r3, #31
 8004be0:	d510      	bpl.n	8004c04 <_printf_float+0x250>
 8004be2:	ee18 3a10 	vmov	r3, s16
 8004be6:	4652      	mov	r2, sl
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af41 	beq.w	8004a76 <_printf_float+0xc2>
 8004bf4:	f04f 0800 	mov.w	r8, #0
 8004bf8:	f104 091a 	add.w	r9, r4, #26
 8004bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	4543      	cmp	r3, r8
 8004c02:	dc09      	bgt.n	8004c18 <_printf_float+0x264>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	079b      	lsls	r3, r3, #30
 8004c08:	f100 8105 	bmi.w	8004e16 <_printf_float+0x462>
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c10:	4298      	cmp	r0, r3
 8004c12:	bfb8      	it	lt
 8004c14:	4618      	movlt	r0, r3
 8004c16:	e730      	b.n	8004a7a <_printf_float+0xc6>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af27 	beq.w	8004a76 <_printf_float+0xc2>
 8004c28:	f108 0801 	add.w	r8, r8, #1
 8004c2c:	e7e6      	b.n	8004bfc <_printf_float+0x248>
 8004c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dc39      	bgt.n	8004ca8 <_printf_float+0x2f4>
 8004c34:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <_printf_float+0x2f0>)
 8004c36:	2301      	movs	r3, #1
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f af19 	beq.w	8004a76 <_printf_float+0xc2>
 8004c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d102      	bne.n	8004c52 <_printf_float+0x29e>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07d9      	lsls	r1, r3, #31
 8004c50:	d5d8      	bpl.n	8004c04 <_printf_float+0x250>
 8004c52:	ee18 3a10 	vmov	r3, s16
 8004c56:	4652      	mov	r2, sl
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f af09 	beq.w	8004a76 <_printf_float+0xc2>
 8004c64:	f04f 0900 	mov.w	r9, #0
 8004c68:	f104 0a1a 	add.w	sl, r4, #26
 8004c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6e:	425b      	negs	r3, r3
 8004c70:	454b      	cmp	r3, r9
 8004c72:	dc01      	bgt.n	8004c78 <_printf_float+0x2c4>
 8004c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c76:	e792      	b.n	8004b9e <_printf_float+0x1ea>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f aef7 	beq.w	8004a76 <_printf_float+0xc2>
 8004c88:	f109 0901 	add.w	r9, r9, #1
 8004c8c:	e7ee      	b.n	8004c6c <_printf_float+0x2b8>
 8004c8e:	bf00      	nop
 8004c90:	7fefffff 	.word	0x7fefffff
 8004c94:	080091c0 	.word	0x080091c0
 8004c98:	080091c4 	.word	0x080091c4
 8004c9c:	080091cc 	.word	0x080091cc
 8004ca0:	080091c8 	.word	0x080091c8
 8004ca4:	080091d0 	.word	0x080091d0
 8004ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bfa8      	it	ge
 8004cb0:	461a      	movge	r2, r3
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	dc37      	bgt.n	8004d28 <_printf_float+0x374>
 8004cb8:	f04f 0b00 	mov.w	fp, #0
 8004cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc0:	f104 021a 	add.w	r2, r4, #26
 8004cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	eba3 0309 	sub.w	r3, r3, r9
 8004ccc:	455b      	cmp	r3, fp
 8004cce:	dc33      	bgt.n	8004d38 <_printf_float+0x384>
 8004cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	db3b      	blt.n	8004d50 <_printf_float+0x39c>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07da      	lsls	r2, r3, #31
 8004cdc:	d438      	bmi.n	8004d50 <_printf_float+0x39c>
 8004cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ce0:	9b05      	ldr	r3, [sp, #20]
 8004ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	eba2 0901 	sub.w	r9, r2, r1
 8004cea:	4599      	cmp	r9, r3
 8004cec:	bfa8      	it	ge
 8004cee:	4699      	movge	r9, r3
 8004cf0:	f1b9 0f00 	cmp.w	r9, #0
 8004cf4:	dc35      	bgt.n	8004d62 <_printf_float+0x3ae>
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfe:	f104 0a1a 	add.w	sl, r4, #26
 8004d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	eba3 0309 	sub.w	r3, r3, r9
 8004d0c:	4543      	cmp	r3, r8
 8004d0e:	f77f af79 	ble.w	8004c04 <_printf_float+0x250>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4652      	mov	r2, sl
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f aeaa 	beq.w	8004a76 <_printf_float+0xc2>
 8004d22:	f108 0801 	add.w	r8, r8, #1
 8004d26:	e7ec      	b.n	8004d02 <_printf_float+0x34e>
 8004d28:	4613      	mov	r3, r2
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	d1c0      	bne.n	8004cb8 <_printf_float+0x304>
 8004d36:	e69e      	b.n	8004a76 <_printf_float+0xc2>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	9205      	str	r2, [sp, #20]
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f ae97 	beq.w	8004a76 <_printf_float+0xc2>
 8004d48:	9a05      	ldr	r2, [sp, #20]
 8004d4a:	f10b 0b01 	add.w	fp, fp, #1
 8004d4e:	e7b9      	b.n	8004cc4 <_printf_float+0x310>
 8004d50:	ee18 3a10 	vmov	r3, s16
 8004d54:	4652      	mov	r2, sl
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1be      	bne.n	8004cde <_printf_float+0x32a>
 8004d60:	e689      	b.n	8004a76 <_printf_float+0xc2>
 8004d62:	9a05      	ldr	r2, [sp, #20]
 8004d64:	464b      	mov	r3, r9
 8004d66:	4442      	add	r2, r8
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d1c1      	bne.n	8004cf6 <_printf_float+0x342>
 8004d72:	e680      	b.n	8004a76 <_printf_float+0xc2>
 8004d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d76:	2a01      	cmp	r2, #1
 8004d78:	dc01      	bgt.n	8004d7e <_printf_float+0x3ca>
 8004d7a:	07db      	lsls	r3, r3, #31
 8004d7c:	d538      	bpl.n	8004df0 <_printf_float+0x43c>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4642      	mov	r2, r8
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae74 	beq.w	8004a76 <_printf_float+0xc2>
 8004d8e:	ee18 3a10 	vmov	r3, s16
 8004d92:	4652      	mov	r2, sl
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f ae6b 	beq.w	8004a76 <_printf_float+0xc2>
 8004da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f7fb feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8004dac:	b9d8      	cbnz	r0, 8004de6 <_printf_float+0x432>
 8004dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db0:	f108 0201 	add.w	r2, r8, #1
 8004db4:	3b01      	subs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d10e      	bne.n	8004dde <_printf_float+0x42a>
 8004dc0:	e659      	b.n	8004a76 <_printf_float+0xc2>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae52 	beq.w	8004a76 <_printf_float+0xc2>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4543      	cmp	r3, r8
 8004ddc:	dcf1      	bgt.n	8004dc2 <_printf_float+0x40e>
 8004dde:	464b      	mov	r3, r9
 8004de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de4:	e6dc      	b.n	8004ba0 <_printf_float+0x1ec>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	f104 0a1a 	add.w	sl, r4, #26
 8004dee:	e7f2      	b.n	8004dd6 <_printf_float+0x422>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4642      	mov	r2, r8
 8004df4:	e7df      	b.n	8004db6 <_printf_float+0x402>
 8004df6:	2301      	movs	r3, #1
 8004df8:	464a      	mov	r2, r9
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae38 	beq.w	8004a76 <_printf_float+0xc2>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	68e3      	ldr	r3, [r4, #12]
 8004e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e0e:	1a5b      	subs	r3, r3, r1
 8004e10:	4543      	cmp	r3, r8
 8004e12:	dcf0      	bgt.n	8004df6 <_printf_float+0x442>
 8004e14:	e6fa      	b.n	8004c0c <_printf_float+0x258>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	f104 0919 	add.w	r9, r4, #25
 8004e1e:	e7f4      	b.n	8004e0a <_printf_float+0x456>

08004e20 <_printf_common>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	4616      	mov	r6, r2
 8004e26:	4699      	mov	r9, r3
 8004e28:	688a      	ldr	r2, [r1, #8]
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bfb8      	it	lt
 8004e34:	4613      	movlt	r3, r2
 8004e36:	6033      	str	r3, [r6, #0]
 8004e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b10a      	cbz	r2, 8004e46 <_printf_common+0x26>
 8004e42:	3301      	adds	r3, #1
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	0699      	lsls	r1, r3, #26
 8004e4a:	bf42      	ittt	mi
 8004e4c:	6833      	ldrmi	r3, [r6, #0]
 8004e4e:	3302      	addmi	r3, #2
 8004e50:	6033      	strmi	r3, [r6, #0]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	f015 0506 	ands.w	r5, r5, #6
 8004e58:	d106      	bne.n	8004e68 <_printf_common+0x48>
 8004e5a:	f104 0a19 	add.w	sl, r4, #25
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	6832      	ldr	r2, [r6, #0]
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dc26      	bgt.n	8004eb6 <_printf_common+0x96>
 8004e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e6c:	1e13      	subs	r3, r2, #0
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	bf18      	it	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	0692      	lsls	r2, r2, #26
 8004e76:	d42b      	bmi.n	8004ed0 <_printf_common+0xb0>
 8004e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	4638      	mov	r0, r7
 8004e80:	47c0      	blx	r8
 8004e82:	3001      	adds	r0, #1
 8004e84:	d01e      	beq.n	8004ec4 <_printf_common+0xa4>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	68e5      	ldr	r5, [r4, #12]
 8004e8a:	6832      	ldr	r2, [r6, #0]
 8004e8c:	f003 0306 	and.w	r3, r3, #6
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	bf08      	it	eq
 8004e94:	1aad      	subeq	r5, r5, r2
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	bf0c      	ite	eq
 8004e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea0:	2500      	movne	r5, #0
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bfc4      	itt	gt
 8004ea6:	1a9b      	subgt	r3, r3, r2
 8004ea8:	18ed      	addgt	r5, r5, r3
 8004eaa:	2600      	movs	r6, #0
 8004eac:	341a      	adds	r4, #26
 8004eae:	42b5      	cmp	r5, r6
 8004eb0:	d11a      	bne.n	8004ee8 <_printf_common+0xc8>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e008      	b.n	8004ec8 <_printf_common+0xa8>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4652      	mov	r2, sl
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	47c0      	blx	r8
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d103      	bne.n	8004ecc <_printf_common+0xac>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	3501      	adds	r5, #1
 8004ece:	e7c6      	b.n	8004e5e <_printf_common+0x3e>
 8004ed0:	18e1      	adds	r1, r4, r3
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	2030      	movs	r0, #48	; 0x30
 8004ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eda:	4422      	add	r2, r4
 8004edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	e7c7      	b.n	8004e78 <_printf_common+0x58>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4622      	mov	r2, r4
 8004eec:	4649      	mov	r1, r9
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d0e6      	beq.n	8004ec4 <_printf_common+0xa4>
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7d9      	b.n	8004eae <_printf_common+0x8e>
	...

08004efc <_printf_i>:
 8004efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	460c      	mov	r4, r1
 8004f02:	4691      	mov	r9, r2
 8004f04:	7e27      	ldrb	r7, [r4, #24]
 8004f06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f08:	2f78      	cmp	r7, #120	; 0x78
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	469a      	mov	sl, r3
 8004f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f12:	d807      	bhi.n	8004f24 <_printf_i+0x28>
 8004f14:	2f62      	cmp	r7, #98	; 0x62
 8004f16:	d80a      	bhi.n	8004f2e <_printf_i+0x32>
 8004f18:	2f00      	cmp	r7, #0
 8004f1a:	f000 80d8 	beq.w	80050ce <_printf_i+0x1d2>
 8004f1e:	2f58      	cmp	r7, #88	; 0x58
 8004f20:	f000 80a3 	beq.w	800506a <_printf_i+0x16e>
 8004f24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f2c:	e03a      	b.n	8004fa4 <_printf_i+0xa8>
 8004f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f32:	2b15      	cmp	r3, #21
 8004f34:	d8f6      	bhi.n	8004f24 <_printf_i+0x28>
 8004f36:	a001      	add	r0, pc, #4	; (adr r0, 8004f3c <_printf_i+0x40>)
 8004f38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f3c:	08004f95 	.word	0x08004f95
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004f25 	.word	0x08004f25
 8004f48:	08004f25 	.word	0x08004f25
 8004f4c:	08004f25 	.word	0x08004f25
 8004f50:	08004f25 	.word	0x08004f25
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004f25 	.word	0x08004f25
 8004f5c:	08004f25 	.word	0x08004f25
 8004f60:	08004f25 	.word	0x08004f25
 8004f64:	08004f25 	.word	0x08004f25
 8004f68:	080050b5 	.word	0x080050b5
 8004f6c:	08004fd9 	.word	0x08004fd9
 8004f70:	08005097 	.word	0x08005097
 8004f74:	08004f25 	.word	0x08004f25
 8004f78:	08004f25 	.word	0x08004f25
 8004f7c:	080050d7 	.word	0x080050d7
 8004f80:	08004f25 	.word	0x08004f25
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004f25 	.word	0x08004f25
 8004f8c:	08004f25 	.word	0x08004f25
 8004f90:	0800509f 	.word	0x0800509f
 8004f94:	680b      	ldr	r3, [r1, #0]
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	600a      	str	r2, [r1, #0]
 8004f9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0a3      	b.n	80050f0 <_printf_i+0x1f4>
 8004fa8:	6825      	ldr	r5, [r4, #0]
 8004faa:	6808      	ldr	r0, [r1, #0]
 8004fac:	062e      	lsls	r6, r5, #24
 8004fae:	f100 0304 	add.w	r3, r0, #4
 8004fb2:	d50a      	bpl.n	8004fca <_printf_i+0xce>
 8004fb4:	6805      	ldr	r5, [r0, #0]
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	da03      	bge.n	8004fc4 <_printf_i+0xc8>
 8004fbc:	232d      	movs	r3, #45	; 0x2d
 8004fbe:	426d      	negs	r5, r5
 8004fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc4:	485e      	ldr	r0, [pc, #376]	; (8005140 <_printf_i+0x244>)
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	e019      	b.n	8004ffe <_printf_i+0x102>
 8004fca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fce:	6805      	ldr	r5, [r0, #0]
 8004fd0:	600b      	str	r3, [r1, #0]
 8004fd2:	bf18      	it	ne
 8004fd4:	b22d      	sxthne	r5, r5
 8004fd6:	e7ef      	b.n	8004fb8 <_printf_i+0xbc>
 8004fd8:	680b      	ldr	r3, [r1, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	1d18      	adds	r0, r3, #4
 8004fde:	6008      	str	r0, [r1, #0]
 8004fe0:	0628      	lsls	r0, r5, #24
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_i+0xec>
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <_printf_i+0xf2>
 8004fe8:	0669      	lsls	r1, r5, #25
 8004fea:	d5fb      	bpl.n	8004fe4 <_printf_i+0xe8>
 8004fec:	881d      	ldrh	r5, [r3, #0]
 8004fee:	4854      	ldr	r0, [pc, #336]	; (8005140 <_printf_i+0x244>)
 8004ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2308      	moveq	r3, #8
 8004ff6:	230a      	movne	r3, #10
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ffe:	6866      	ldr	r6, [r4, #4]
 8005000:	60a6      	str	r6, [r4, #8]
 8005002:	2e00      	cmp	r6, #0
 8005004:	bfa2      	ittt	ge
 8005006:	6821      	ldrge	r1, [r4, #0]
 8005008:	f021 0104 	bicge.w	r1, r1, #4
 800500c:	6021      	strge	r1, [r4, #0]
 800500e:	b90d      	cbnz	r5, 8005014 <_printf_i+0x118>
 8005010:	2e00      	cmp	r6, #0
 8005012:	d04d      	beq.n	80050b0 <_printf_i+0x1b4>
 8005014:	4616      	mov	r6, r2
 8005016:	fbb5 f1f3 	udiv	r1, r5, r3
 800501a:	fb03 5711 	mls	r7, r3, r1, r5
 800501e:	5dc7      	ldrb	r7, [r0, r7]
 8005020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005024:	462f      	mov	r7, r5
 8005026:	42bb      	cmp	r3, r7
 8005028:	460d      	mov	r5, r1
 800502a:	d9f4      	bls.n	8005016 <_printf_i+0x11a>
 800502c:	2b08      	cmp	r3, #8
 800502e:	d10b      	bne.n	8005048 <_printf_i+0x14c>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	07df      	lsls	r7, r3, #31
 8005034:	d508      	bpl.n	8005048 <_printf_i+0x14c>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	6861      	ldr	r1, [r4, #4]
 800503a:	4299      	cmp	r1, r3
 800503c:	bfde      	ittt	le
 800503e:	2330      	movle	r3, #48	; 0x30
 8005040:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005044:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005048:	1b92      	subs	r2, r2, r6
 800504a:	6122      	str	r2, [r4, #16]
 800504c:	f8cd a000 	str.w	sl, [sp]
 8005050:	464b      	mov	r3, r9
 8005052:	aa03      	add	r2, sp, #12
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7ff fee2 	bl	8004e20 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	d14c      	bne.n	80050fa <_printf_i+0x1fe>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	b004      	add	sp, #16
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	4835      	ldr	r0, [pc, #212]	; (8005140 <_printf_i+0x244>)
 800506c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	680e      	ldr	r6, [r1, #0]
 8005074:	061f      	lsls	r7, r3, #24
 8005076:	f856 5b04 	ldr.w	r5, [r6], #4
 800507a:	600e      	str	r6, [r1, #0]
 800507c:	d514      	bpl.n	80050a8 <_printf_i+0x1ac>
 800507e:	07d9      	lsls	r1, r3, #31
 8005080:	bf44      	itt	mi
 8005082:	f043 0320 	orrmi.w	r3, r3, #32
 8005086:	6023      	strmi	r3, [r4, #0]
 8005088:	b91d      	cbnz	r5, 8005092 <_printf_i+0x196>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	f023 0320 	bic.w	r3, r3, #32
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	2310      	movs	r3, #16
 8005094:	e7b0      	b.n	8004ff8 <_printf_i+0xfc>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	f043 0320 	orr.w	r3, r3, #32
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	2378      	movs	r3, #120	; 0x78
 80050a0:	4828      	ldr	r0, [pc, #160]	; (8005144 <_printf_i+0x248>)
 80050a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050a6:	e7e3      	b.n	8005070 <_printf_i+0x174>
 80050a8:	065e      	lsls	r6, r3, #25
 80050aa:	bf48      	it	mi
 80050ac:	b2ad      	uxthmi	r5, r5
 80050ae:	e7e6      	b.n	800507e <_printf_i+0x182>
 80050b0:	4616      	mov	r6, r2
 80050b2:	e7bb      	b.n	800502c <_printf_i+0x130>
 80050b4:	680b      	ldr	r3, [r1, #0]
 80050b6:	6826      	ldr	r6, [r4, #0]
 80050b8:	6960      	ldr	r0, [r4, #20]
 80050ba:	1d1d      	adds	r5, r3, #4
 80050bc:	600d      	str	r5, [r1, #0]
 80050be:	0635      	lsls	r5, r6, #24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	d501      	bpl.n	80050c8 <_printf_i+0x1cc>
 80050c4:	6018      	str	r0, [r3, #0]
 80050c6:	e002      	b.n	80050ce <_printf_i+0x1d2>
 80050c8:	0671      	lsls	r1, r6, #25
 80050ca:	d5fb      	bpl.n	80050c4 <_printf_i+0x1c8>
 80050cc:	8018      	strh	r0, [r3, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	4616      	mov	r6, r2
 80050d4:	e7ba      	b.n	800504c <_printf_i+0x150>
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	600a      	str	r2, [r1, #0]
 80050dc:	681e      	ldr	r6, [r3, #0]
 80050de:	6862      	ldr	r2, [r4, #4]
 80050e0:	2100      	movs	r1, #0
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7fb f8a4 	bl	8000230 <memchr>
 80050e8:	b108      	cbz	r0, 80050ee <_printf_i+0x1f2>
 80050ea:	1b80      	subs	r0, r0, r6
 80050ec:	6060      	str	r0, [r4, #4]
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	2300      	movs	r3, #0
 80050f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f8:	e7a8      	b.n	800504c <_printf_i+0x150>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	4632      	mov	r2, r6
 80050fe:	4649      	mov	r1, r9
 8005100:	4640      	mov	r0, r8
 8005102:	47d0      	blx	sl
 8005104:	3001      	adds	r0, #1
 8005106:	d0ab      	beq.n	8005060 <_printf_i+0x164>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	d413      	bmi.n	8005136 <_printf_i+0x23a>
 800510e:	68e0      	ldr	r0, [r4, #12]
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	4298      	cmp	r0, r3
 8005114:	bfb8      	it	lt
 8005116:	4618      	movlt	r0, r3
 8005118:	e7a4      	b.n	8005064 <_printf_i+0x168>
 800511a:	2301      	movs	r3, #1
 800511c:	4632      	mov	r2, r6
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	47d0      	blx	sl
 8005124:	3001      	adds	r0, #1
 8005126:	d09b      	beq.n	8005060 <_printf_i+0x164>
 8005128:	3501      	adds	r5, #1
 800512a:	68e3      	ldr	r3, [r4, #12]
 800512c:	9903      	ldr	r1, [sp, #12]
 800512e:	1a5b      	subs	r3, r3, r1
 8005130:	42ab      	cmp	r3, r5
 8005132:	dcf2      	bgt.n	800511a <_printf_i+0x21e>
 8005134:	e7eb      	b.n	800510e <_printf_i+0x212>
 8005136:	2500      	movs	r5, #0
 8005138:	f104 0619 	add.w	r6, r4, #25
 800513c:	e7f5      	b.n	800512a <_printf_i+0x22e>
 800513e:	bf00      	nop
 8005140:	080091d2 	.word	0x080091d2
 8005144:	080091e3 	.word	0x080091e3

08005148 <_scanf_float>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b087      	sub	sp, #28
 800514e:	4617      	mov	r7, r2
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	688b      	ldr	r3, [r1, #8]
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800515a:	bf83      	ittte	hi
 800515c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005160:	195b      	addhi	r3, r3, r5
 8005162:	9302      	strhi	r3, [sp, #8]
 8005164:	2300      	movls	r3, #0
 8005166:	bf86      	itte	hi
 8005168:	f240 135d 	movwhi	r3, #349	; 0x15d
 800516c:	608b      	strhi	r3, [r1, #8]
 800516e:	9302      	strls	r3, [sp, #8]
 8005170:	680b      	ldr	r3, [r1, #0]
 8005172:	468b      	mov	fp, r1
 8005174:	2500      	movs	r5, #0
 8005176:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800517a:	f84b 3b1c 	str.w	r3, [fp], #28
 800517e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005182:	4680      	mov	r8, r0
 8005184:	460c      	mov	r4, r1
 8005186:	465e      	mov	r6, fp
 8005188:	46aa      	mov	sl, r5
 800518a:	46a9      	mov	r9, r5
 800518c:	9501      	str	r5, [sp, #4]
 800518e:	68a2      	ldr	r2, [r4, #8]
 8005190:	b152      	cbz	r2, 80051a8 <_scanf_float+0x60>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b4e      	cmp	r3, #78	; 0x4e
 8005198:	d864      	bhi.n	8005264 <_scanf_float+0x11c>
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d83c      	bhi.n	8005218 <_scanf_float+0xd0>
 800519e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051a2:	b2c8      	uxtb	r0, r1
 80051a4:	280e      	cmp	r0, #14
 80051a6:	d93a      	bls.n	800521e <_scanf_float+0xd6>
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	d003      	beq.n	80051b6 <_scanf_float+0x6e>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ba:	f1ba 0f01 	cmp.w	sl, #1
 80051be:	f200 8113 	bhi.w	80053e8 <_scanf_float+0x2a0>
 80051c2:	455e      	cmp	r6, fp
 80051c4:	f200 8105 	bhi.w	80053d2 <_scanf_float+0x28a>
 80051c8:	2501      	movs	r5, #1
 80051ca:	4628      	mov	r0, r5
 80051cc:	b007      	add	sp, #28
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80051d6:	2a0d      	cmp	r2, #13
 80051d8:	d8e6      	bhi.n	80051a8 <_scanf_float+0x60>
 80051da:	a101      	add	r1, pc, #4	; (adr r1, 80051e0 <_scanf_float+0x98>)
 80051dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80051e0:	0800531f 	.word	0x0800531f
 80051e4:	080051a9 	.word	0x080051a9
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	080051a9 	.word	0x080051a9
 80051f0:	0800537f 	.word	0x0800537f
 80051f4:	08005357 	.word	0x08005357
 80051f8:	080051a9 	.word	0x080051a9
 80051fc:	080051a9 	.word	0x080051a9
 8005200:	0800532d 	.word	0x0800532d
 8005204:	080051a9 	.word	0x080051a9
 8005208:	080051a9 	.word	0x080051a9
 800520c:	080051a9 	.word	0x080051a9
 8005210:	080051a9 	.word	0x080051a9
 8005214:	080052e5 	.word	0x080052e5
 8005218:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800521c:	e7db      	b.n	80051d6 <_scanf_float+0x8e>
 800521e:	290e      	cmp	r1, #14
 8005220:	d8c2      	bhi.n	80051a8 <_scanf_float+0x60>
 8005222:	a001      	add	r0, pc, #4	; (adr r0, 8005228 <_scanf_float+0xe0>)
 8005224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005228:	080052d7 	.word	0x080052d7
 800522c:	080051a9 	.word	0x080051a9
 8005230:	080052d7 	.word	0x080052d7
 8005234:	0800536b 	.word	0x0800536b
 8005238:	080051a9 	.word	0x080051a9
 800523c:	08005285 	.word	0x08005285
 8005240:	080052c1 	.word	0x080052c1
 8005244:	080052c1 	.word	0x080052c1
 8005248:	080052c1 	.word	0x080052c1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052c1 	.word	0x080052c1
 8005254:	080052c1 	.word	0x080052c1
 8005258:	080052c1 	.word	0x080052c1
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080052c1 	.word	0x080052c1
 8005264:	2b6e      	cmp	r3, #110	; 0x6e
 8005266:	d809      	bhi.n	800527c <_scanf_float+0x134>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d8b2      	bhi.n	80051d2 <_scanf_float+0x8a>
 800526c:	2b54      	cmp	r3, #84	; 0x54
 800526e:	d077      	beq.n	8005360 <_scanf_float+0x218>
 8005270:	2b59      	cmp	r3, #89	; 0x59
 8005272:	d199      	bne.n	80051a8 <_scanf_float+0x60>
 8005274:	2d07      	cmp	r5, #7
 8005276:	d197      	bne.n	80051a8 <_scanf_float+0x60>
 8005278:	2508      	movs	r5, #8
 800527a:	e029      	b.n	80052d0 <_scanf_float+0x188>
 800527c:	2b74      	cmp	r3, #116	; 0x74
 800527e:	d06f      	beq.n	8005360 <_scanf_float+0x218>
 8005280:	2b79      	cmp	r3, #121	; 0x79
 8005282:	e7f6      	b.n	8005272 <_scanf_float+0x12a>
 8005284:	6821      	ldr	r1, [r4, #0]
 8005286:	05c8      	lsls	r0, r1, #23
 8005288:	d51a      	bpl.n	80052c0 <_scanf_float+0x178>
 800528a:	9b02      	ldr	r3, [sp, #8]
 800528c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005290:	6021      	str	r1, [r4, #0]
 8005292:	f109 0901 	add.w	r9, r9, #1
 8005296:	b11b      	cbz	r3, 80052a0 <_scanf_float+0x158>
 8005298:	3b01      	subs	r3, #1
 800529a:	3201      	adds	r2, #1
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	60a2      	str	r2, [r4, #8]
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	f340 8084 	ble.w	80053c0 <_scanf_float+0x278>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	e766      	b.n	800518e <_scanf_float+0x46>
 80052c0:	eb1a 0f05 	cmn.w	sl, r5
 80052c4:	f47f af70 	bne.w	80051a8 <_scanf_float+0x60>
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80052ce:	6022      	str	r2, [r4, #0]
 80052d0:	f806 3b01 	strb.w	r3, [r6], #1
 80052d4:	e7e4      	b.n	80052a0 <_scanf_float+0x158>
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	0610      	lsls	r0, r2, #24
 80052da:	f57f af65 	bpl.w	80051a8 <_scanf_float+0x60>
 80052de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e2:	e7f4      	b.n	80052ce <_scanf_float+0x186>
 80052e4:	f1ba 0f00 	cmp.w	sl, #0
 80052e8:	d10e      	bne.n	8005308 <_scanf_float+0x1c0>
 80052ea:	f1b9 0f00 	cmp.w	r9, #0
 80052ee:	d10e      	bne.n	800530e <_scanf_float+0x1c6>
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052fa:	d108      	bne.n	800530e <_scanf_float+0x1c6>
 80052fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	f04f 0a01 	mov.w	sl, #1
 8005306:	e7e3      	b.n	80052d0 <_scanf_float+0x188>
 8005308:	f1ba 0f02 	cmp.w	sl, #2
 800530c:	d055      	beq.n	80053ba <_scanf_float+0x272>
 800530e:	2d01      	cmp	r5, #1
 8005310:	d002      	beq.n	8005318 <_scanf_float+0x1d0>
 8005312:	2d04      	cmp	r5, #4
 8005314:	f47f af48 	bne.w	80051a8 <_scanf_float+0x60>
 8005318:	3501      	adds	r5, #1
 800531a:	b2ed      	uxtb	r5, r5
 800531c:	e7d8      	b.n	80052d0 <_scanf_float+0x188>
 800531e:	f1ba 0f01 	cmp.w	sl, #1
 8005322:	f47f af41 	bne.w	80051a8 <_scanf_float+0x60>
 8005326:	f04f 0a02 	mov.w	sl, #2
 800532a:	e7d1      	b.n	80052d0 <_scanf_float+0x188>
 800532c:	b97d      	cbnz	r5, 800534e <_scanf_float+0x206>
 800532e:	f1b9 0f00 	cmp.w	r9, #0
 8005332:	f47f af3c 	bne.w	80051ae <_scanf_float+0x66>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800533c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005340:	f47f af39 	bne.w	80051b6 <_scanf_float+0x6e>
 8005344:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	2501      	movs	r5, #1
 800534c:	e7c0      	b.n	80052d0 <_scanf_float+0x188>
 800534e:	2d03      	cmp	r5, #3
 8005350:	d0e2      	beq.n	8005318 <_scanf_float+0x1d0>
 8005352:	2d05      	cmp	r5, #5
 8005354:	e7de      	b.n	8005314 <_scanf_float+0x1cc>
 8005356:	2d02      	cmp	r5, #2
 8005358:	f47f af26 	bne.w	80051a8 <_scanf_float+0x60>
 800535c:	2503      	movs	r5, #3
 800535e:	e7b7      	b.n	80052d0 <_scanf_float+0x188>
 8005360:	2d06      	cmp	r5, #6
 8005362:	f47f af21 	bne.w	80051a8 <_scanf_float+0x60>
 8005366:	2507      	movs	r5, #7
 8005368:	e7b2      	b.n	80052d0 <_scanf_float+0x188>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	0591      	lsls	r1, r2, #22
 800536e:	f57f af1b 	bpl.w	80051a8 <_scanf_float+0x60>
 8005372:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	f8cd 9004 	str.w	r9, [sp, #4]
 800537c:	e7a8      	b.n	80052d0 <_scanf_float+0x188>
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005388:	d006      	beq.n	8005398 <_scanf_float+0x250>
 800538a:	0550      	lsls	r0, r2, #21
 800538c:	f57f af0c 	bpl.w	80051a8 <_scanf_float+0x60>
 8005390:	f1b9 0f00 	cmp.w	r9, #0
 8005394:	f43f af0f 	beq.w	80051b6 <_scanf_float+0x6e>
 8005398:	0591      	lsls	r1, r2, #22
 800539a:	bf58      	it	pl
 800539c:	9901      	ldrpl	r1, [sp, #4]
 800539e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053a2:	bf58      	it	pl
 80053a4:	eba9 0101 	subpl.w	r1, r9, r1
 80053a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80053ac:	bf58      	it	pl
 80053ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053b2:	6022      	str	r2, [r4, #0]
 80053b4:	f04f 0900 	mov.w	r9, #0
 80053b8:	e78a      	b.n	80052d0 <_scanf_float+0x188>
 80053ba:	f04f 0a03 	mov.w	sl, #3
 80053be:	e787      	b.n	80052d0 <_scanf_float+0x188>
 80053c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053c4:	4639      	mov	r1, r7
 80053c6:	4640      	mov	r0, r8
 80053c8:	4798      	blx	r3
 80053ca:	2800      	cmp	r0, #0
 80053cc:	f43f aedf 	beq.w	800518e <_scanf_float+0x46>
 80053d0:	e6ea      	b.n	80051a8 <_scanf_float+0x60>
 80053d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053da:	463a      	mov	r2, r7
 80053dc:	4640      	mov	r0, r8
 80053de:	4798      	blx	r3
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	e6ec      	b.n	80051c2 <_scanf_float+0x7a>
 80053e8:	1e6b      	subs	r3, r5, #1
 80053ea:	2b06      	cmp	r3, #6
 80053ec:	d825      	bhi.n	800543a <_scanf_float+0x2f2>
 80053ee:	2d02      	cmp	r5, #2
 80053f0:	d836      	bhi.n	8005460 <_scanf_float+0x318>
 80053f2:	455e      	cmp	r6, fp
 80053f4:	f67f aee8 	bls.w	80051c8 <_scanf_float+0x80>
 80053f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005400:	463a      	mov	r2, r7
 8005402:	4640      	mov	r0, r8
 8005404:	4798      	blx	r3
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	e7f1      	b.n	80053f2 <_scanf_float+0x2aa>
 800540e:	9802      	ldr	r0, [sp, #8]
 8005410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005414:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005418:	9002      	str	r0, [sp, #8]
 800541a:	463a      	mov	r2, r7
 800541c:	4640      	mov	r0, r8
 800541e:	4798      	blx	r3
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	3b01      	subs	r3, #1
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800542a:	fa5f fa8a 	uxtb.w	sl, sl
 800542e:	f1ba 0f02 	cmp.w	sl, #2
 8005432:	d1ec      	bne.n	800540e <_scanf_float+0x2c6>
 8005434:	3d03      	subs	r5, #3
 8005436:	b2ed      	uxtb	r5, r5
 8005438:	1b76      	subs	r6, r6, r5
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	05da      	lsls	r2, r3, #23
 800543e:	d52f      	bpl.n	80054a0 <_scanf_float+0x358>
 8005440:	055b      	lsls	r3, r3, #21
 8005442:	d510      	bpl.n	8005466 <_scanf_float+0x31e>
 8005444:	455e      	cmp	r6, fp
 8005446:	f67f aebf 	bls.w	80051c8 <_scanf_float+0x80>
 800544a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800544e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005452:	463a      	mov	r2, r7
 8005454:	4640      	mov	r0, r8
 8005456:	4798      	blx	r3
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	e7f1      	b.n	8005444 <_scanf_float+0x2fc>
 8005460:	46aa      	mov	sl, r5
 8005462:	9602      	str	r6, [sp, #8]
 8005464:	e7df      	b.n	8005426 <_scanf_float+0x2de>
 8005466:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	2965      	cmp	r1, #101	; 0x65
 800546e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005472:	f106 35ff 	add.w	r5, r6, #4294967295
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	d00c      	beq.n	8005494 <_scanf_float+0x34c>
 800547a:	2945      	cmp	r1, #69	; 0x45
 800547c:	d00a      	beq.n	8005494 <_scanf_float+0x34c>
 800547e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005482:	463a      	mov	r2, r7
 8005484:	4640      	mov	r0, r8
 8005486:	4798      	blx	r3
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800548e:	3b01      	subs	r3, #1
 8005490:	1eb5      	subs	r5, r6, #2
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005498:	463a      	mov	r2, r7
 800549a:	4640      	mov	r0, r8
 800549c:	4798      	blx	r3
 800549e:	462e      	mov	r6, r5
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	f015 0510 	ands.w	r5, r5, #16
 80054a6:	d158      	bne.n	800555a <_scanf_float+0x412>
 80054a8:	7035      	strb	r5, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d11c      	bne.n	80054f0 <_scanf_float+0x3a8>
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	454b      	cmp	r3, r9
 80054ba:	eba3 0209 	sub.w	r2, r3, r9
 80054be:	d124      	bne.n	800550a <_scanf_float+0x3c2>
 80054c0:	2200      	movs	r2, #0
 80054c2:	4659      	mov	r1, fp
 80054c4:	4640      	mov	r0, r8
 80054c6:	f000 feb5 	bl	8006234 <_strtod_r>
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f011 0f02 	tst.w	r1, #2
 80054d4:	ec57 6b10 	vmov	r6, r7, d0
 80054d8:	f103 0204 	add.w	r2, r3, #4
 80054dc:	d020      	beq.n	8005520 <_scanf_float+0x3d8>
 80054de:	9903      	ldr	r1, [sp, #12]
 80054e0:	600a      	str	r2, [r1, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	e9c3 6700 	strd	r6, r7, [r3]
 80054e8:	68e3      	ldr	r3, [r4, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60e3      	str	r3, [r4, #12]
 80054ee:	e66c      	b.n	80051ca <_scanf_float+0x82>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0e4      	beq.n	80054c0 <_scanf_float+0x378>
 80054f6:	9905      	ldr	r1, [sp, #20]
 80054f8:	230a      	movs	r3, #10
 80054fa:	462a      	mov	r2, r5
 80054fc:	3101      	adds	r1, #1
 80054fe:	4640      	mov	r0, r8
 8005500:	f000 ff22 	bl	8006348 <_strtol_r>
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	9e05      	ldr	r6, [sp, #20]
 8005508:	1ac2      	subs	r2, r0, r3
 800550a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800550e:	429e      	cmp	r6, r3
 8005510:	bf28      	it	cs
 8005512:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005516:	4912      	ldr	r1, [pc, #72]	; (8005560 <_scanf_float+0x418>)
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f843 	bl	80055a4 <siprintf>
 800551e:	e7cf      	b.n	80054c0 <_scanf_float+0x378>
 8005520:	f011 0f04 	tst.w	r1, #4
 8005524:	9903      	ldr	r1, [sp, #12]
 8005526:	600a      	str	r2, [r1, #0]
 8005528:	d1db      	bne.n	80054e2 <_scanf_float+0x39a>
 800552a:	f8d3 8000 	ldr.w	r8, [r3]
 800552e:	ee10 2a10 	vmov	r2, s0
 8005532:	ee10 0a10 	vmov	r0, s0
 8005536:	463b      	mov	r3, r7
 8005538:	4639      	mov	r1, r7
 800553a:	f7fb fb1f 	bl	8000b7c <__aeabi_dcmpun>
 800553e:	b128      	cbz	r0, 800554c <_scanf_float+0x404>
 8005540:	4808      	ldr	r0, [pc, #32]	; (8005564 <_scanf_float+0x41c>)
 8005542:	f000 f829 	bl	8005598 <nanf>
 8005546:	ed88 0a00 	vstr	s0, [r8]
 800554a:	e7cd      	b.n	80054e8 <_scanf_float+0x3a0>
 800554c:	4630      	mov	r0, r6
 800554e:	4639      	mov	r1, r7
 8005550:	f7fb fb72 	bl	8000c38 <__aeabi_d2f>
 8005554:	f8c8 0000 	str.w	r0, [r8]
 8005558:	e7c6      	b.n	80054e8 <_scanf_float+0x3a0>
 800555a:	2500      	movs	r5, #0
 800555c:	e635      	b.n	80051ca <_scanf_float+0x82>
 800555e:	bf00      	nop
 8005560:	080091f4 	.word	0x080091f4
 8005564:	08009670 	.word	0x08009670

08005568 <iprintf>:
 8005568:	b40f      	push	{r0, r1, r2, r3}
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <iprintf+0x2c>)
 800556c:	b513      	push	{r0, r1, r4, lr}
 800556e:	681c      	ldr	r4, [r3, #0]
 8005570:	b124      	cbz	r4, 800557c <iprintf+0x14>
 8005572:	69a3      	ldr	r3, [r4, #24]
 8005574:	b913      	cbnz	r3, 800557c <iprintf+0x14>
 8005576:	4620      	mov	r0, r4
 8005578:	f001 fdba 	bl	80070f0 <__sinit>
 800557c:	ab05      	add	r3, sp, #20
 800557e:	9a04      	ldr	r2, [sp, #16]
 8005580:	68a1      	ldr	r1, [r4, #8]
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	4620      	mov	r0, r4
 8005586:	f003 f8e9 	bl	800875c <_vfiprintf_r>
 800558a:	b002      	add	sp, #8
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	b004      	add	sp, #16
 8005592:	4770      	bx	lr
 8005594:	2000000c 	.word	0x2000000c

08005598 <nanf>:
 8005598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055a0 <nanf+0x8>
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	7fc00000 	.word	0x7fc00000

080055a4 <siprintf>:
 80055a4:	b40e      	push	{r1, r2, r3}
 80055a6:	b500      	push	{lr}
 80055a8:	b09c      	sub	sp, #112	; 0x70
 80055aa:	ab1d      	add	r3, sp, #116	; 0x74
 80055ac:	9002      	str	r0, [sp, #8]
 80055ae:	9006      	str	r0, [sp, #24]
 80055b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055b4:	4809      	ldr	r0, [pc, #36]	; (80055dc <siprintf+0x38>)
 80055b6:	9107      	str	r1, [sp, #28]
 80055b8:	9104      	str	r1, [sp, #16]
 80055ba:	4909      	ldr	r1, [pc, #36]	; (80055e0 <siprintf+0x3c>)
 80055bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c0:	9105      	str	r1, [sp, #20]
 80055c2:	6800      	ldr	r0, [r0, #0]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	a902      	add	r1, sp, #8
 80055c8:	f002 ff9e 	bl	8008508 <_svfiprintf_r>
 80055cc:	9b02      	ldr	r3, [sp, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	b01c      	add	sp, #112	; 0x70
 80055d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d8:	b003      	add	sp, #12
 80055da:	4770      	bx	lr
 80055dc:	2000000c 	.word	0x2000000c
 80055e0:	ffff0208 	.word	0xffff0208

080055e4 <sulp>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4604      	mov	r4, r0
 80055e8:	460d      	mov	r5, r1
 80055ea:	ec45 4b10 	vmov	d0, r4, r5
 80055ee:	4616      	mov	r6, r2
 80055f0:	f002 fd26 	bl	8008040 <__ulp>
 80055f4:	ec51 0b10 	vmov	r0, r1, d0
 80055f8:	b17e      	cbz	r6, 800561a <sulp+0x36>
 80055fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80055fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005602:	2b00      	cmp	r3, #0
 8005604:	dd09      	ble.n	800561a <sulp+0x36>
 8005606:	051b      	lsls	r3, r3, #20
 8005608:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800560c:	2400      	movs	r4, #0
 800560e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005612:	4622      	mov	r2, r4
 8005614:	462b      	mov	r3, r5
 8005616:	f7fb f817 	bl	8000648 <__aeabi_dmul>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	0000      	movs	r0, r0
	...

08005620 <_strtod_l>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	b0a3      	sub	sp, #140	; 0x8c
 8005626:	461f      	mov	r7, r3
 8005628:	2300      	movs	r3, #0
 800562a:	931e      	str	r3, [sp, #120]	; 0x78
 800562c:	4ba4      	ldr	r3, [pc, #656]	; (80058c0 <_strtod_l+0x2a0>)
 800562e:	9219      	str	r2, [sp, #100]	; 0x64
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	4604      	mov	r4, r0
 8005636:	4618      	mov	r0, r3
 8005638:	4688      	mov	r8, r1
 800563a:	f7fa fdf1 	bl	8000220 <strlen>
 800563e:	f04f 0a00 	mov.w	sl, #0
 8005642:	4605      	mov	r5, r0
 8005644:	f04f 0b00 	mov.w	fp, #0
 8005648:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800564c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	2a2b      	cmp	r2, #43	; 0x2b
 8005652:	d04c      	beq.n	80056ee <_strtod_l+0xce>
 8005654:	d839      	bhi.n	80056ca <_strtod_l+0xaa>
 8005656:	2a0d      	cmp	r2, #13
 8005658:	d832      	bhi.n	80056c0 <_strtod_l+0xa0>
 800565a:	2a08      	cmp	r2, #8
 800565c:	d832      	bhi.n	80056c4 <_strtod_l+0xa4>
 800565e:	2a00      	cmp	r2, #0
 8005660:	d03c      	beq.n	80056dc <_strtod_l+0xbc>
 8005662:	2300      	movs	r3, #0
 8005664:	930e      	str	r3, [sp, #56]	; 0x38
 8005666:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005668:	7833      	ldrb	r3, [r6, #0]
 800566a:	2b30      	cmp	r3, #48	; 0x30
 800566c:	f040 80b4 	bne.w	80057d8 <_strtod_l+0x1b8>
 8005670:	7873      	ldrb	r3, [r6, #1]
 8005672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005676:	2b58      	cmp	r3, #88	; 0x58
 8005678:	d16c      	bne.n	8005754 <_strtod_l+0x134>
 800567a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	ab1e      	add	r3, sp, #120	; 0x78
 8005680:	9702      	str	r7, [sp, #8]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4a8f      	ldr	r2, [pc, #572]	; (80058c4 <_strtod_l+0x2a4>)
 8005686:	ab1f      	add	r3, sp, #124	; 0x7c
 8005688:	a91d      	add	r1, sp, #116	; 0x74
 800568a:	4620      	mov	r0, r4
 800568c:	f001 fe34 	bl	80072f8 <__gethex>
 8005690:	f010 0707 	ands.w	r7, r0, #7
 8005694:	4605      	mov	r5, r0
 8005696:	d005      	beq.n	80056a4 <_strtod_l+0x84>
 8005698:	2f06      	cmp	r7, #6
 800569a:	d12a      	bne.n	80056f2 <_strtod_l+0xd2>
 800569c:	3601      	adds	r6, #1
 800569e:	2300      	movs	r3, #0
 80056a0:	961d      	str	r6, [sp, #116]	; 0x74
 80056a2:	930e      	str	r3, [sp, #56]	; 0x38
 80056a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 8596 	bne.w	80061d8 <_strtod_l+0xbb8>
 80056ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ae:	b1db      	cbz	r3, 80056e8 <_strtod_l+0xc8>
 80056b0:	4652      	mov	r2, sl
 80056b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056b6:	ec43 2b10 	vmov	d0, r2, r3
 80056ba:	b023      	add	sp, #140	; 0x8c
 80056bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c0:	2a20      	cmp	r2, #32
 80056c2:	d1ce      	bne.n	8005662 <_strtod_l+0x42>
 80056c4:	3301      	adds	r3, #1
 80056c6:	931d      	str	r3, [sp, #116]	; 0x74
 80056c8:	e7c0      	b.n	800564c <_strtod_l+0x2c>
 80056ca:	2a2d      	cmp	r2, #45	; 0x2d
 80056cc:	d1c9      	bne.n	8005662 <_strtod_l+0x42>
 80056ce:	2201      	movs	r2, #1
 80056d0:	920e      	str	r2, [sp, #56]	; 0x38
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	921d      	str	r2, [sp, #116]	; 0x74
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1c4      	bne.n	8005666 <_strtod_l+0x46>
 80056dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 8576 	bne.w	80061d4 <_strtod_l+0xbb4>
 80056e8:	4652      	mov	r2, sl
 80056ea:	465b      	mov	r3, fp
 80056ec:	e7e3      	b.n	80056b6 <_strtod_l+0x96>
 80056ee:	2200      	movs	r2, #0
 80056f0:	e7ee      	b.n	80056d0 <_strtod_l+0xb0>
 80056f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056f4:	b13a      	cbz	r2, 8005706 <_strtod_l+0xe6>
 80056f6:	2135      	movs	r1, #53	; 0x35
 80056f8:	a820      	add	r0, sp, #128	; 0x80
 80056fa:	f002 fdac 	bl	8008256 <__copybits>
 80056fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005700:	4620      	mov	r0, r4
 8005702:	f002 f971 	bl	80079e8 <_Bfree>
 8005706:	3f01      	subs	r7, #1
 8005708:	2f05      	cmp	r7, #5
 800570a:	d807      	bhi.n	800571c <_strtod_l+0xfc>
 800570c:	e8df f007 	tbb	[pc, r7]
 8005710:	1d180b0e 	.word	0x1d180b0e
 8005714:	030e      	.short	0x030e
 8005716:	f04f 0b00 	mov.w	fp, #0
 800571a:	46da      	mov	sl, fp
 800571c:	0728      	lsls	r0, r5, #28
 800571e:	d5c1      	bpl.n	80056a4 <_strtod_l+0x84>
 8005720:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005724:	e7be      	b.n	80056a4 <_strtod_l+0x84>
 8005726:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800572a:	e7f7      	b.n	800571c <_strtod_l+0xfc>
 800572c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005730:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800573a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800573e:	e7ed      	b.n	800571c <_strtod_l+0xfc>
 8005740:	f8df b184 	ldr.w	fp, [pc, #388]	; 80058c8 <_strtod_l+0x2a8>
 8005744:	f04f 0a00 	mov.w	sl, #0
 8005748:	e7e8      	b.n	800571c <_strtod_l+0xfc>
 800574a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800574e:	f04f 3aff 	mov.w	sl, #4294967295
 8005752:	e7e3      	b.n	800571c <_strtod_l+0xfc>
 8005754:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	921d      	str	r2, [sp, #116]	; 0x74
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d0f9      	beq.n	8005754 <_strtod_l+0x134>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d09f      	beq.n	80056a4 <_strtod_l+0x84>
 8005764:	2301      	movs	r3, #1
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800576e:	930a      	str	r3, [sp, #40]	; 0x28
 8005770:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005774:	464f      	mov	r7, r9
 8005776:	220a      	movs	r2, #10
 8005778:	981d      	ldr	r0, [sp, #116]	; 0x74
 800577a:	7806      	ldrb	r6, [r0, #0]
 800577c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005780:	b2d9      	uxtb	r1, r3
 8005782:	2909      	cmp	r1, #9
 8005784:	d92a      	bls.n	80057dc <_strtod_l+0x1bc>
 8005786:	9907      	ldr	r1, [sp, #28]
 8005788:	462a      	mov	r2, r5
 800578a:	f003 f974 	bl	8008a76 <strncmp>
 800578e:	b398      	cbz	r0, 80057f8 <_strtod_l+0x1d8>
 8005790:	2000      	movs	r0, #0
 8005792:	4633      	mov	r3, r6
 8005794:	463d      	mov	r5, r7
 8005796:	9007      	str	r0, [sp, #28]
 8005798:	4602      	mov	r2, r0
 800579a:	2b65      	cmp	r3, #101	; 0x65
 800579c:	d001      	beq.n	80057a2 <_strtod_l+0x182>
 800579e:	2b45      	cmp	r3, #69	; 0x45
 80057a0:	d118      	bne.n	80057d4 <_strtod_l+0x1b4>
 80057a2:	b91d      	cbnz	r5, 80057ac <_strtod_l+0x18c>
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	4303      	orrs	r3, r0
 80057a8:	d098      	beq.n	80056dc <_strtod_l+0xbc>
 80057aa:	2500      	movs	r5, #0
 80057ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80057b0:	f108 0301 	add.w	r3, r8, #1
 80057b4:	931d      	str	r3, [sp, #116]	; 0x74
 80057b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80057ba:	2b2b      	cmp	r3, #43	; 0x2b
 80057bc:	d075      	beq.n	80058aa <_strtod_l+0x28a>
 80057be:	2b2d      	cmp	r3, #45	; 0x2d
 80057c0:	d07b      	beq.n	80058ba <_strtod_l+0x29a>
 80057c2:	f04f 0c00 	mov.w	ip, #0
 80057c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057ca:	2909      	cmp	r1, #9
 80057cc:	f240 8082 	bls.w	80058d4 <_strtod_l+0x2b4>
 80057d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80057d4:	2600      	movs	r6, #0
 80057d6:	e09d      	b.n	8005914 <_strtod_l+0x2f4>
 80057d8:	2300      	movs	r3, #0
 80057da:	e7c4      	b.n	8005766 <_strtod_l+0x146>
 80057dc:	2f08      	cmp	r7, #8
 80057de:	bfd8      	it	le
 80057e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80057e2:	f100 0001 	add.w	r0, r0, #1
 80057e6:	bfda      	itte	le
 80057e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80057ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80057ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80057f2:	3701      	adds	r7, #1
 80057f4:	901d      	str	r0, [sp, #116]	; 0x74
 80057f6:	e7bf      	b.n	8005778 <_strtod_l+0x158>
 80057f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057fa:	195a      	adds	r2, r3, r5
 80057fc:	921d      	str	r2, [sp, #116]	; 0x74
 80057fe:	5d5b      	ldrb	r3, [r3, r5]
 8005800:	2f00      	cmp	r7, #0
 8005802:	d037      	beq.n	8005874 <_strtod_l+0x254>
 8005804:	9007      	str	r0, [sp, #28]
 8005806:	463d      	mov	r5, r7
 8005808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800580c:	2a09      	cmp	r2, #9
 800580e:	d912      	bls.n	8005836 <_strtod_l+0x216>
 8005810:	2201      	movs	r2, #1
 8005812:	e7c2      	b.n	800579a <_strtod_l+0x17a>
 8005814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	921d      	str	r2, [sp, #116]	; 0x74
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	3001      	adds	r0, #1
 800581e:	2b30      	cmp	r3, #48	; 0x30
 8005820:	d0f8      	beq.n	8005814 <_strtod_l+0x1f4>
 8005822:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005826:	2a08      	cmp	r2, #8
 8005828:	f200 84db 	bhi.w	80061e2 <_strtod_l+0xbc2>
 800582c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800582e:	9007      	str	r0, [sp, #28]
 8005830:	2000      	movs	r0, #0
 8005832:	920a      	str	r2, [sp, #40]	; 0x28
 8005834:	4605      	mov	r5, r0
 8005836:	3b30      	subs	r3, #48	; 0x30
 8005838:	f100 0201 	add.w	r2, r0, #1
 800583c:	d014      	beq.n	8005868 <_strtod_l+0x248>
 800583e:	9907      	ldr	r1, [sp, #28]
 8005840:	4411      	add	r1, r2
 8005842:	9107      	str	r1, [sp, #28]
 8005844:	462a      	mov	r2, r5
 8005846:	eb00 0e05 	add.w	lr, r0, r5
 800584a:	210a      	movs	r1, #10
 800584c:	4572      	cmp	r2, lr
 800584e:	d113      	bne.n	8005878 <_strtod_l+0x258>
 8005850:	182a      	adds	r2, r5, r0
 8005852:	2a08      	cmp	r2, #8
 8005854:	f105 0501 	add.w	r5, r5, #1
 8005858:	4405      	add	r5, r0
 800585a:	dc1c      	bgt.n	8005896 <_strtod_l+0x276>
 800585c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800585e:	220a      	movs	r2, #10
 8005860:	fb02 3301 	mla	r3, r2, r1, r3
 8005864:	9309      	str	r3, [sp, #36]	; 0x24
 8005866:	2200      	movs	r2, #0
 8005868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	911d      	str	r1, [sp, #116]	; 0x74
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	4610      	mov	r0, r2
 8005872:	e7c9      	b.n	8005808 <_strtod_l+0x1e8>
 8005874:	4638      	mov	r0, r7
 8005876:	e7d2      	b.n	800581e <_strtod_l+0x1fe>
 8005878:	2a08      	cmp	r2, #8
 800587a:	dc04      	bgt.n	8005886 <_strtod_l+0x266>
 800587c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800587e:	434e      	muls	r6, r1
 8005880:	9609      	str	r6, [sp, #36]	; 0x24
 8005882:	3201      	adds	r2, #1
 8005884:	e7e2      	b.n	800584c <_strtod_l+0x22c>
 8005886:	f102 0c01 	add.w	ip, r2, #1
 800588a:	f1bc 0f10 	cmp.w	ip, #16
 800588e:	bfd8      	it	le
 8005890:	fb01 f909 	mulle.w	r9, r1, r9
 8005894:	e7f5      	b.n	8005882 <_strtod_l+0x262>
 8005896:	2d10      	cmp	r5, #16
 8005898:	bfdc      	itt	le
 800589a:	220a      	movle	r2, #10
 800589c:	fb02 3909 	mlale	r9, r2, r9, r3
 80058a0:	e7e1      	b.n	8005866 <_strtod_l+0x246>
 80058a2:	2300      	movs	r3, #0
 80058a4:	9307      	str	r3, [sp, #28]
 80058a6:	2201      	movs	r2, #1
 80058a8:	e77c      	b.n	80057a4 <_strtod_l+0x184>
 80058aa:	f04f 0c00 	mov.w	ip, #0
 80058ae:	f108 0302 	add.w	r3, r8, #2
 80058b2:	931d      	str	r3, [sp, #116]	; 0x74
 80058b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80058b8:	e785      	b.n	80057c6 <_strtod_l+0x1a6>
 80058ba:	f04f 0c01 	mov.w	ip, #1
 80058be:	e7f6      	b.n	80058ae <_strtod_l+0x28e>
 80058c0:	080094b4 	.word	0x080094b4
 80058c4:	080091fc 	.word	0x080091fc
 80058c8:	7ff00000 	.word	0x7ff00000
 80058cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058ce:	1c59      	adds	r1, r3, #1
 80058d0:	911d      	str	r1, [sp, #116]	; 0x74
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	d0f9      	beq.n	80058cc <_strtod_l+0x2ac>
 80058d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80058dc:	2908      	cmp	r1, #8
 80058de:	f63f af79 	bhi.w	80057d4 <_strtod_l+0x1b4>
 80058e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80058e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058e8:	9308      	str	r3, [sp, #32]
 80058ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	911d      	str	r1, [sp, #116]	; 0x74
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80058f6:	2e09      	cmp	r6, #9
 80058f8:	d937      	bls.n	800596a <_strtod_l+0x34a>
 80058fa:	9e08      	ldr	r6, [sp, #32]
 80058fc:	1b89      	subs	r1, r1, r6
 80058fe:	2908      	cmp	r1, #8
 8005900:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005904:	dc02      	bgt.n	800590c <_strtod_l+0x2ec>
 8005906:	4576      	cmp	r6, lr
 8005908:	bfa8      	it	ge
 800590a:	4676      	movge	r6, lr
 800590c:	f1bc 0f00 	cmp.w	ip, #0
 8005910:	d000      	beq.n	8005914 <_strtod_l+0x2f4>
 8005912:	4276      	negs	r6, r6
 8005914:	2d00      	cmp	r5, #0
 8005916:	d14f      	bne.n	80059b8 <_strtod_l+0x398>
 8005918:	9904      	ldr	r1, [sp, #16]
 800591a:	4301      	orrs	r1, r0
 800591c:	f47f aec2 	bne.w	80056a4 <_strtod_l+0x84>
 8005920:	2a00      	cmp	r2, #0
 8005922:	f47f aedb 	bne.w	80056dc <_strtod_l+0xbc>
 8005926:	2b69      	cmp	r3, #105	; 0x69
 8005928:	d027      	beq.n	800597a <_strtod_l+0x35a>
 800592a:	dc24      	bgt.n	8005976 <_strtod_l+0x356>
 800592c:	2b49      	cmp	r3, #73	; 0x49
 800592e:	d024      	beq.n	800597a <_strtod_l+0x35a>
 8005930:	2b4e      	cmp	r3, #78	; 0x4e
 8005932:	f47f aed3 	bne.w	80056dc <_strtod_l+0xbc>
 8005936:	499e      	ldr	r1, [pc, #632]	; (8005bb0 <_strtod_l+0x590>)
 8005938:	a81d      	add	r0, sp, #116	; 0x74
 800593a:	f001 ff35 	bl	80077a8 <__match>
 800593e:	2800      	cmp	r0, #0
 8005940:	f43f aecc 	beq.w	80056dc <_strtod_l+0xbc>
 8005944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b28      	cmp	r3, #40	; 0x28
 800594a:	d12d      	bne.n	80059a8 <_strtod_l+0x388>
 800594c:	4999      	ldr	r1, [pc, #612]	; (8005bb4 <_strtod_l+0x594>)
 800594e:	aa20      	add	r2, sp, #128	; 0x80
 8005950:	a81d      	add	r0, sp, #116	; 0x74
 8005952:	f001 ff3d 	bl	80077d0 <__hexnan>
 8005956:	2805      	cmp	r0, #5
 8005958:	d126      	bne.n	80059a8 <_strtod_l+0x388>
 800595a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005960:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005964:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005968:	e69c      	b.n	80056a4 <_strtod_l+0x84>
 800596a:	210a      	movs	r1, #10
 800596c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005970:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005974:	e7b9      	b.n	80058ea <_strtod_l+0x2ca>
 8005976:	2b6e      	cmp	r3, #110	; 0x6e
 8005978:	e7db      	b.n	8005932 <_strtod_l+0x312>
 800597a:	498f      	ldr	r1, [pc, #572]	; (8005bb8 <_strtod_l+0x598>)
 800597c:	a81d      	add	r0, sp, #116	; 0x74
 800597e:	f001 ff13 	bl	80077a8 <__match>
 8005982:	2800      	cmp	r0, #0
 8005984:	f43f aeaa 	beq.w	80056dc <_strtod_l+0xbc>
 8005988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800598a:	498c      	ldr	r1, [pc, #560]	; (8005bbc <_strtod_l+0x59c>)
 800598c:	3b01      	subs	r3, #1
 800598e:	a81d      	add	r0, sp, #116	; 0x74
 8005990:	931d      	str	r3, [sp, #116]	; 0x74
 8005992:	f001 ff09 	bl	80077a8 <__match>
 8005996:	b910      	cbnz	r0, 800599e <_strtod_l+0x37e>
 8005998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800599a:	3301      	adds	r3, #1
 800599c:	931d      	str	r3, [sp, #116]	; 0x74
 800599e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005bcc <_strtod_l+0x5ac>
 80059a2:	f04f 0a00 	mov.w	sl, #0
 80059a6:	e67d      	b.n	80056a4 <_strtod_l+0x84>
 80059a8:	4885      	ldr	r0, [pc, #532]	; (8005bc0 <_strtod_l+0x5a0>)
 80059aa:	f003 f809 	bl	80089c0 <nan>
 80059ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 80059b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80059b6:	e675      	b.n	80056a4 <_strtod_l+0x84>
 80059b8:	9b07      	ldr	r3, [sp, #28]
 80059ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059bc:	1af3      	subs	r3, r6, r3
 80059be:	2f00      	cmp	r7, #0
 80059c0:	bf08      	it	eq
 80059c2:	462f      	moveq	r7, r5
 80059c4:	2d10      	cmp	r5, #16
 80059c6:	9308      	str	r3, [sp, #32]
 80059c8:	46a8      	mov	r8, r5
 80059ca:	bfa8      	it	ge
 80059cc:	f04f 0810 	movge.w	r8, #16
 80059d0:	f7fa fdc0 	bl	8000554 <__aeabi_ui2d>
 80059d4:	2d09      	cmp	r5, #9
 80059d6:	4682      	mov	sl, r0
 80059d8:	468b      	mov	fp, r1
 80059da:	dd13      	ble.n	8005a04 <_strtod_l+0x3e4>
 80059dc:	4b79      	ldr	r3, [pc, #484]	; (8005bc4 <_strtod_l+0x5a4>)
 80059de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059e6:	f7fa fe2f 	bl	8000648 <__aeabi_dmul>
 80059ea:	4682      	mov	sl, r0
 80059ec:	4648      	mov	r0, r9
 80059ee:	468b      	mov	fp, r1
 80059f0:	f7fa fdb0 	bl	8000554 <__aeabi_ui2d>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4650      	mov	r0, sl
 80059fa:	4659      	mov	r1, fp
 80059fc:	f7fa fc6e 	bl	80002dc <__adddf3>
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	2d0f      	cmp	r5, #15
 8005a06:	dc38      	bgt.n	8005a7a <_strtod_l+0x45a>
 8005a08:	9b08      	ldr	r3, [sp, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f43f ae4a 	beq.w	80056a4 <_strtod_l+0x84>
 8005a10:	dd24      	ble.n	8005a5c <_strtod_l+0x43c>
 8005a12:	2b16      	cmp	r3, #22
 8005a14:	dc0b      	bgt.n	8005a2e <_strtod_l+0x40e>
 8005a16:	4d6b      	ldr	r5, [pc, #428]	; (8005bc4 <_strtod_l+0x5a4>)
 8005a18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005a1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005a20:	4652      	mov	r2, sl
 8005a22:	465b      	mov	r3, fp
 8005a24:	f7fa fe10 	bl	8000648 <__aeabi_dmul>
 8005a28:	4682      	mov	sl, r0
 8005a2a:	468b      	mov	fp, r1
 8005a2c:	e63a      	b.n	80056a4 <_strtod_l+0x84>
 8005a2e:	9a08      	ldr	r2, [sp, #32]
 8005a30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a34:	4293      	cmp	r3, r2
 8005a36:	db20      	blt.n	8005a7a <_strtod_l+0x45a>
 8005a38:	4c62      	ldr	r4, [pc, #392]	; (8005bc4 <_strtod_l+0x5a4>)
 8005a3a:	f1c5 050f 	rsb	r5, r5, #15
 8005a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005a42:	4652      	mov	r2, sl
 8005a44:	465b      	mov	r3, fp
 8005a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a4a:	f7fa fdfd 	bl	8000648 <__aeabi_dmul>
 8005a4e:	9b08      	ldr	r3, [sp, #32]
 8005a50:	1b5d      	subs	r5, r3, r5
 8005a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005a5a:	e7e3      	b.n	8005a24 <_strtod_l+0x404>
 8005a5c:	9b08      	ldr	r3, [sp, #32]
 8005a5e:	3316      	adds	r3, #22
 8005a60:	db0b      	blt.n	8005a7a <_strtod_l+0x45a>
 8005a62:	9b07      	ldr	r3, [sp, #28]
 8005a64:	4a57      	ldr	r2, [pc, #348]	; (8005bc4 <_strtod_l+0x5a4>)
 8005a66:	1b9e      	subs	r6, r3, r6
 8005a68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005a6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	f7fa ff12 	bl	800089c <__aeabi_ddiv>
 8005a78:	e7d6      	b.n	8005a28 <_strtod_l+0x408>
 8005a7a:	9b08      	ldr	r3, [sp, #32]
 8005a7c:	eba5 0808 	sub.w	r8, r5, r8
 8005a80:	4498      	add	r8, r3
 8005a82:	f1b8 0f00 	cmp.w	r8, #0
 8005a86:	dd71      	ble.n	8005b6c <_strtod_l+0x54c>
 8005a88:	f018 030f 	ands.w	r3, r8, #15
 8005a8c:	d00a      	beq.n	8005aa4 <_strtod_l+0x484>
 8005a8e:	494d      	ldr	r1, [pc, #308]	; (8005bc4 <_strtod_l+0x5a4>)
 8005a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a94:	4652      	mov	r2, sl
 8005a96:	465b      	mov	r3, fp
 8005a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9c:	f7fa fdd4 	bl	8000648 <__aeabi_dmul>
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	468b      	mov	fp, r1
 8005aa4:	f038 080f 	bics.w	r8, r8, #15
 8005aa8:	d04d      	beq.n	8005b46 <_strtod_l+0x526>
 8005aaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005aae:	dd22      	ble.n	8005af6 <_strtod_l+0x4d6>
 8005ab0:	2500      	movs	r5, #0
 8005ab2:	462e      	mov	r6, r5
 8005ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ab6:	9507      	str	r5, [sp, #28]
 8005ab8:	2322      	movs	r3, #34	; 0x22
 8005aba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005bcc <_strtod_l+0x5ac>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	f04f 0a00 	mov.w	sl, #0
 8005ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f43f adec 	beq.w	80056a4 <_strtod_l+0x84>
 8005acc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f001 ff8a 	bl	80079e8 <_Bfree>
 8005ad4:	9907      	ldr	r1, [sp, #28]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f001 ff86 	bl	80079e8 <_Bfree>
 8005adc:	4631      	mov	r1, r6
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f001 ff82 	bl	80079e8 <_Bfree>
 8005ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f001 ff7e 	bl	80079e8 <_Bfree>
 8005aec:	4629      	mov	r1, r5
 8005aee:	4620      	mov	r0, r4
 8005af0:	f001 ff7a 	bl	80079e8 <_Bfree>
 8005af4:	e5d6      	b.n	80056a4 <_strtod_l+0x84>
 8005af6:	2300      	movs	r3, #0
 8005af8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005afc:	4650      	mov	r0, sl
 8005afe:	4659      	mov	r1, fp
 8005b00:	4699      	mov	r9, r3
 8005b02:	f1b8 0f01 	cmp.w	r8, #1
 8005b06:	dc21      	bgt.n	8005b4c <_strtod_l+0x52c>
 8005b08:	b10b      	cbz	r3, 8005b0e <_strtod_l+0x4ee>
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	468b      	mov	fp, r1
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <_strtod_l+0x5a8>)
 8005b10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b18:	4652      	mov	r2, sl
 8005b1a:	465b      	mov	r3, fp
 8005b1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005b20:	f7fa fd92 	bl	8000648 <__aeabi_dmul>
 8005b24:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <_strtod_l+0x5ac>)
 8005b26:	460a      	mov	r2, r1
 8005b28:	400b      	ands	r3, r1
 8005b2a:	4929      	ldr	r1, [pc, #164]	; (8005bd0 <_strtod_l+0x5b0>)
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	4682      	mov	sl, r0
 8005b30:	d8be      	bhi.n	8005ab0 <_strtod_l+0x490>
 8005b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b36:	428b      	cmp	r3, r1
 8005b38:	bf86      	itte	hi
 8005b3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005bd4 <_strtod_l+0x5b4>
 8005b3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005b42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005b46:	2300      	movs	r3, #0
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	e081      	b.n	8005c50 <_strtod_l+0x630>
 8005b4c:	f018 0f01 	tst.w	r8, #1
 8005b50:	d007      	beq.n	8005b62 <_strtod_l+0x542>
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <_strtod_l+0x5a8>)
 8005b54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa fd74 	bl	8000648 <__aeabi_dmul>
 8005b60:	2301      	movs	r3, #1
 8005b62:	f109 0901 	add.w	r9, r9, #1
 8005b66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b6a:	e7ca      	b.n	8005b02 <_strtod_l+0x4e2>
 8005b6c:	d0eb      	beq.n	8005b46 <_strtod_l+0x526>
 8005b6e:	f1c8 0800 	rsb	r8, r8, #0
 8005b72:	f018 020f 	ands.w	r2, r8, #15
 8005b76:	d00a      	beq.n	8005b8e <_strtod_l+0x56e>
 8005b78:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <_strtod_l+0x5a4>)
 8005b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b7e:	4650      	mov	r0, sl
 8005b80:	4659      	mov	r1, fp
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fe89 	bl	800089c <__aeabi_ddiv>
 8005b8a:	4682      	mov	sl, r0
 8005b8c:	468b      	mov	fp, r1
 8005b8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b92:	d0d8      	beq.n	8005b46 <_strtod_l+0x526>
 8005b94:	f1b8 0f1f 	cmp.w	r8, #31
 8005b98:	dd1e      	ble.n	8005bd8 <_strtod_l+0x5b8>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	462e      	mov	r6, r5
 8005b9e:	9509      	str	r5, [sp, #36]	; 0x24
 8005ba0:	9507      	str	r5, [sp, #28]
 8005ba2:	2322      	movs	r3, #34	; 0x22
 8005ba4:	f04f 0a00 	mov.w	sl, #0
 8005ba8:	f04f 0b00 	mov.w	fp, #0
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	e789      	b.n	8005ac4 <_strtod_l+0x4a4>
 8005bb0:	080091cd 	.word	0x080091cd
 8005bb4:	08009210 	.word	0x08009210
 8005bb8:	080091c5 	.word	0x080091c5
 8005bbc:	08009354 	.word	0x08009354
 8005bc0:	08009670 	.word	0x08009670
 8005bc4:	08009550 	.word	0x08009550
 8005bc8:	08009528 	.word	0x08009528
 8005bcc:	7ff00000 	.word	0x7ff00000
 8005bd0:	7ca00000 	.word	0x7ca00000
 8005bd4:	7fefffff 	.word	0x7fefffff
 8005bd8:	f018 0310 	ands.w	r3, r8, #16
 8005bdc:	bf18      	it	ne
 8005bde:	236a      	movne	r3, #106	; 0x6a
 8005be0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005f98 <_strtod_l+0x978>
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	4650      	mov	r0, sl
 8005be8:	4659      	mov	r1, fp
 8005bea:	2300      	movs	r3, #0
 8005bec:	f018 0f01 	tst.w	r8, #1
 8005bf0:	d004      	beq.n	8005bfc <_strtod_l+0x5dc>
 8005bf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005bf6:	f7fa fd27 	bl	8000648 <__aeabi_dmul>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c00:	f109 0908 	add.w	r9, r9, #8
 8005c04:	d1f2      	bne.n	8005bec <_strtod_l+0x5cc>
 8005c06:	b10b      	cbz	r3, 8005c0c <_strtod_l+0x5ec>
 8005c08:	4682      	mov	sl, r0
 8005c0a:	468b      	mov	fp, r1
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	b1bb      	cbz	r3, 8005c40 <_strtod_l+0x620>
 8005c10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005c14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	4659      	mov	r1, fp
 8005c1c:	dd10      	ble.n	8005c40 <_strtod_l+0x620>
 8005c1e:	2b1f      	cmp	r3, #31
 8005c20:	f340 8128 	ble.w	8005e74 <_strtod_l+0x854>
 8005c24:	2b34      	cmp	r3, #52	; 0x34
 8005c26:	bfde      	ittt	le
 8005c28:	3b20      	suble	r3, #32
 8005c2a:	f04f 32ff 	movle.w	r2, #4294967295
 8005c2e:	fa02 f303 	lslle.w	r3, r2, r3
 8005c32:	f04f 0a00 	mov.w	sl, #0
 8005c36:	bfcc      	ite	gt
 8005c38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c3c:	ea03 0b01 	andle.w	fp, r3, r1
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	4650      	mov	r0, sl
 8005c46:	4659      	mov	r1, fp
 8005c48:	f7fa ff66 	bl	8000b18 <__aeabi_dcmpeq>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d1a4      	bne.n	8005b9a <_strtod_l+0x57a>
 8005c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c56:	462b      	mov	r3, r5
 8005c58:	463a      	mov	r2, r7
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f001 ff30 	bl	8007ac0 <__s2b>
 8005c60:	9009      	str	r0, [sp, #36]	; 0x24
 8005c62:	2800      	cmp	r0, #0
 8005c64:	f43f af24 	beq.w	8005ab0 <_strtod_l+0x490>
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	1b9e      	subs	r6, r3, r6
 8005c6c:	9b08      	ldr	r3, [sp, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfb4      	ite	lt
 8005c72:	4633      	movlt	r3, r6
 8005c74:	2300      	movge	r3, #0
 8005c76:	9310      	str	r3, [sp, #64]	; 0x40
 8005c78:	9b08      	ldr	r3, [sp, #32]
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c80:	9318      	str	r3, [sp, #96]	; 0x60
 8005c82:	462e      	mov	r6, r5
 8005c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c86:	4620      	mov	r0, r4
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	f001 fe6d 	bl	8007968 <_Balloc>
 8005c8e:	9007      	str	r0, [sp, #28]
 8005c90:	2800      	cmp	r0, #0
 8005c92:	f43f af11 	beq.w	8005ab8 <_strtod_l+0x498>
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	3202      	adds	r2, #2
 8005c9c:	f103 010c 	add.w	r1, r3, #12
 8005ca0:	0092      	lsls	r2, r2, #2
 8005ca2:	300c      	adds	r0, #12
 8005ca4:	f001 fe52 	bl	800794c <memcpy>
 8005ca8:	ec4b ab10 	vmov	d0, sl, fp
 8005cac:	aa20      	add	r2, sp, #128	; 0x80
 8005cae:	a91f      	add	r1, sp, #124	; 0x7c
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005cb6:	f002 fa3f 	bl	8008138 <__d2b>
 8005cba:	901e      	str	r0, [sp, #120]	; 0x78
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f43f aefb 	beq.w	8005ab8 <_strtod_l+0x498>
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f001 ff95 	bl	8007bf4 <__i2b>
 8005cca:	4606      	mov	r6, r0
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f43f aef3 	beq.w	8005ab8 <_strtod_l+0x498>
 8005cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cd4:	9904      	ldr	r1, [sp, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfab      	itete	ge
 8005cda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005cdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005cde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005ce0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005ce4:	bfac      	ite	ge
 8005ce6:	eb03 0902 	addge.w	r9, r3, r2
 8005cea:	1ad7      	sublt	r7, r2, r3
 8005cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cee:	eba3 0801 	sub.w	r8, r3, r1
 8005cf2:	4490      	add	r8, r2
 8005cf4:	4ba3      	ldr	r3, [pc, #652]	; (8005f84 <_strtod_l+0x964>)
 8005cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cfa:	4598      	cmp	r8, r3
 8005cfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d00:	f280 80cc 	bge.w	8005e9c <_strtod_l+0x87c>
 8005d04:	eba3 0308 	sub.w	r3, r3, r8
 8005d08:	2b1f      	cmp	r3, #31
 8005d0a:	eba2 0203 	sub.w	r2, r2, r3
 8005d0e:	f04f 0101 	mov.w	r1, #1
 8005d12:	f300 80b6 	bgt.w	8005e82 <_strtod_l+0x862>
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	9311      	str	r3, [sp, #68]	; 0x44
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d20:	eb09 0802 	add.w	r8, r9, r2
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	45c1      	cmp	r9, r8
 8005d28:	4417      	add	r7, r2
 8005d2a:	441f      	add	r7, r3
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	bfa8      	it	ge
 8005d30:	4643      	movge	r3, r8
 8005d32:	42bb      	cmp	r3, r7
 8005d34:	bfa8      	it	ge
 8005d36:	463b      	movge	r3, r7
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfc2      	ittt	gt
 8005d3c:	eba8 0803 	subgt.w	r8, r8, r3
 8005d40:	1aff      	subgt	r7, r7, r3
 8005d42:	eba9 0903 	subgt.w	r9, r9, r3
 8005d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dd17      	ble.n	8005d7c <_strtod_l+0x75c>
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4620      	mov	r0, r4
 8005d52:	f002 f80b 	bl	8007d6c <__pow5mult>
 8005d56:	4606      	mov	r6, r0
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f aead 	beq.w	8005ab8 <_strtod_l+0x498>
 8005d5e:	4601      	mov	r1, r0
 8005d60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d62:	4620      	mov	r0, r4
 8005d64:	f001 ff5c 	bl	8007c20 <__multiply>
 8005d68:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f43f aea4 	beq.w	8005ab8 <_strtod_l+0x498>
 8005d70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005d72:	4620      	mov	r0, r4
 8005d74:	f001 fe38 	bl	80079e8 <_Bfree>
 8005d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d7a:	931e      	str	r3, [sp, #120]	; 0x78
 8005d7c:	f1b8 0f00 	cmp.w	r8, #0
 8005d80:	f300 8091 	bgt.w	8005ea6 <_strtod_l+0x886>
 8005d84:	9b08      	ldr	r3, [sp, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dd08      	ble.n	8005d9c <_strtod_l+0x77c>
 8005d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005d8c:	9907      	ldr	r1, [sp, #28]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f001 ffec 	bl	8007d6c <__pow5mult>
 8005d94:	9007      	str	r0, [sp, #28]
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f ae8e 	beq.w	8005ab8 <_strtod_l+0x498>
 8005d9c:	2f00      	cmp	r7, #0
 8005d9e:	dd08      	ble.n	8005db2 <_strtod_l+0x792>
 8005da0:	9907      	ldr	r1, [sp, #28]
 8005da2:	463a      	mov	r2, r7
 8005da4:	4620      	mov	r0, r4
 8005da6:	f002 f83b 	bl	8007e20 <__lshift>
 8005daa:	9007      	str	r0, [sp, #28]
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f43f ae83 	beq.w	8005ab8 <_strtod_l+0x498>
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	dd08      	ble.n	8005dca <_strtod_l+0x7aa>
 8005db8:	4631      	mov	r1, r6
 8005dba:	464a      	mov	r2, r9
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f002 f82f 	bl	8007e20 <__lshift>
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f43f ae77 	beq.w	8005ab8 <_strtod_l+0x498>
 8005dca:	9a07      	ldr	r2, [sp, #28]
 8005dcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f002 f8ae 	bl	8007f30 <__mdiff>
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f43f ae6e 	beq.w	8005ab8 <_strtod_l+0x498>
 8005ddc:	68c3      	ldr	r3, [r0, #12]
 8005dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8005de0:	2300      	movs	r3, #0
 8005de2:	60c3      	str	r3, [r0, #12]
 8005de4:	4631      	mov	r1, r6
 8005de6:	f002 f887 	bl	8007ef8 <__mcmp>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	da65      	bge.n	8005eba <_strtod_l+0x89a>
 8005dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005df0:	ea53 030a 	orrs.w	r3, r3, sl
 8005df4:	f040 8087 	bne.w	8005f06 <_strtod_l+0x8e6>
 8005df8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 8082 	bne.w	8005f06 <_strtod_l+0x8e6>
 8005e02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e06:	0d1b      	lsrs	r3, r3, #20
 8005e08:	051b      	lsls	r3, r3, #20
 8005e0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e0e:	d97a      	bls.n	8005f06 <_strtod_l+0x8e6>
 8005e10:	696b      	ldr	r3, [r5, #20]
 8005e12:	b913      	cbnz	r3, 8005e1a <_strtod_l+0x7fa>
 8005e14:	692b      	ldr	r3, [r5, #16]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	dd75      	ble.n	8005f06 <_strtod_l+0x8e6>
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f001 fffe 	bl	8007e20 <__lshift>
 8005e24:	4631      	mov	r1, r6
 8005e26:	4605      	mov	r5, r0
 8005e28:	f002 f866 	bl	8007ef8 <__mcmp>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	dd6a      	ble.n	8005f06 <_strtod_l+0x8e6>
 8005e30:	9904      	ldr	r1, [sp, #16]
 8005e32:	4a55      	ldr	r2, [pc, #340]	; (8005f88 <_strtod_l+0x968>)
 8005e34:	465b      	mov	r3, fp
 8005e36:	2900      	cmp	r1, #0
 8005e38:	f000 8085 	beq.w	8005f46 <_strtod_l+0x926>
 8005e3c:	ea02 010b 	and.w	r1, r2, fp
 8005e40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e44:	dc7f      	bgt.n	8005f46 <_strtod_l+0x926>
 8005e46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e4a:	f77f aeaa 	ble.w	8005ba2 <_strtod_l+0x582>
 8005e4e:	4a4f      	ldr	r2, [pc, #316]	; (8005f8c <_strtod_l+0x96c>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005e56:	4650      	mov	r0, sl
 8005e58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	f7fa fbf3 	bl	8000648 <__aeabi_dmul>
 8005e62:	460b      	mov	r3, r1
 8005e64:	4303      	orrs	r3, r0
 8005e66:	bf08      	it	eq
 8005e68:	2322      	moveq	r3, #34	; 0x22
 8005e6a:	4682      	mov	sl, r0
 8005e6c:	468b      	mov	fp, r1
 8005e6e:	bf08      	it	eq
 8005e70:	6023      	streq	r3, [r4, #0]
 8005e72:	e62b      	b.n	8005acc <_strtod_l+0x4ac>
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	ea03 0a0a 	and.w	sl, r3, sl
 8005e80:	e6de      	b.n	8005c40 <_strtod_l+0x620>
 8005e82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005e86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005e8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005e8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005e92:	fa01 f308 	lsl.w	r3, r1, r8
 8005e96:	930c      	str	r3, [sp, #48]	; 0x30
 8005e98:	9111      	str	r1, [sp, #68]	; 0x44
 8005e9a:	e741      	b.n	8005d20 <_strtod_l+0x700>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ea4:	e73c      	b.n	8005d20 <_strtod_l+0x700>
 8005ea6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f001 ffb8 	bl	8007e20 <__lshift>
 8005eb0:	901e      	str	r0, [sp, #120]	; 0x78
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	f47f af66 	bne.w	8005d84 <_strtod_l+0x764>
 8005eb8:	e5fe      	b.n	8005ab8 <_strtod_l+0x498>
 8005eba:	465f      	mov	r7, fp
 8005ebc:	d16e      	bne.n	8005f9c <_strtod_l+0x97c>
 8005ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ec4:	b342      	cbz	r2, 8005f18 <_strtod_l+0x8f8>
 8005ec6:	4a32      	ldr	r2, [pc, #200]	; (8005f90 <_strtod_l+0x970>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d128      	bne.n	8005f1e <_strtod_l+0x8fe>
 8005ecc:	9b04      	ldr	r3, [sp, #16]
 8005ece:	4650      	mov	r0, sl
 8005ed0:	b1eb      	cbz	r3, 8005f0e <_strtod_l+0x8ee>
 8005ed2:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <_strtod_l+0x968>)
 8005ed4:	403a      	ands	r2, r7
 8005ed6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005eda:	f04f 31ff 	mov.w	r1, #4294967295
 8005ede:	d819      	bhi.n	8005f14 <_strtod_l+0x8f4>
 8005ee0:	0d12      	lsrs	r2, r2, #20
 8005ee2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	4298      	cmp	r0, r3
 8005eec:	d117      	bne.n	8005f1e <_strtod_l+0x8fe>
 8005eee:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <_strtod_l+0x974>)
 8005ef0:	429f      	cmp	r7, r3
 8005ef2:	d102      	bne.n	8005efa <_strtod_l+0x8da>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	f43f addf 	beq.w	8005ab8 <_strtod_l+0x498>
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <_strtod_l+0x968>)
 8005efc:	403b      	ands	r3, r7
 8005efe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f02:	f04f 0a00 	mov.w	sl, #0
 8005f06:	9b04      	ldr	r3, [sp, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1a0      	bne.n	8005e4e <_strtod_l+0x82e>
 8005f0c:	e5de      	b.n	8005acc <_strtod_l+0x4ac>
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	e7ea      	b.n	8005eea <_strtod_l+0x8ca>
 8005f14:	460b      	mov	r3, r1
 8005f16:	e7e8      	b.n	8005eea <_strtod_l+0x8ca>
 8005f18:	ea53 030a 	orrs.w	r3, r3, sl
 8005f1c:	d088      	beq.n	8005e30 <_strtod_l+0x810>
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f20:	b1db      	cbz	r3, 8005f5a <_strtod_l+0x93a>
 8005f22:	423b      	tst	r3, r7
 8005f24:	d0ef      	beq.n	8005f06 <_strtod_l+0x8e6>
 8005f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f28:	9a04      	ldr	r2, [sp, #16]
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	b1c3      	cbz	r3, 8005f62 <_strtod_l+0x942>
 8005f30:	f7ff fb58 	bl	80055e4 <sulp>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f3c:	f7fa f9ce 	bl	80002dc <__adddf3>
 8005f40:	4682      	mov	sl, r0
 8005f42:	468b      	mov	fp, r1
 8005f44:	e7df      	b.n	8005f06 <_strtod_l+0x8e6>
 8005f46:	4013      	ands	r3, r2
 8005f48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f54:	f04f 3aff 	mov.w	sl, #4294967295
 8005f58:	e7d5      	b.n	8005f06 <_strtod_l+0x8e6>
 8005f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f5c:	ea13 0f0a 	tst.w	r3, sl
 8005f60:	e7e0      	b.n	8005f24 <_strtod_l+0x904>
 8005f62:	f7ff fb3f 	bl	80055e4 <sulp>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f6e:	f7fa f9b3 	bl	80002d8 <__aeabi_dsub>
 8005f72:	2200      	movs	r2, #0
 8005f74:	2300      	movs	r3, #0
 8005f76:	4682      	mov	sl, r0
 8005f78:	468b      	mov	fp, r1
 8005f7a:	f7fa fdcd 	bl	8000b18 <__aeabi_dcmpeq>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d0c1      	beq.n	8005f06 <_strtod_l+0x8e6>
 8005f82:	e60e      	b.n	8005ba2 <_strtod_l+0x582>
 8005f84:	fffffc02 	.word	0xfffffc02
 8005f88:	7ff00000 	.word	0x7ff00000
 8005f8c:	39500000 	.word	0x39500000
 8005f90:	000fffff 	.word	0x000fffff
 8005f94:	7fefffff 	.word	0x7fefffff
 8005f98:	08009228 	.word	0x08009228
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f002 f926 	bl	80081f0 <__ratio>
 8005fa4:	ec59 8b10 	vmov	r8, r9, d0
 8005fa8:	ee10 0a10 	vmov	r0, s0
 8005fac:	2200      	movs	r2, #0
 8005fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fa fdc4 	bl	8000b40 <__aeabi_dcmple>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d07c      	beq.n	80060b6 <_strtod_l+0xa96>
 8005fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04c      	beq.n	800605c <_strtod_l+0xa3c>
 8005fc2:	4b95      	ldr	r3, [pc, #596]	; (8006218 <_strtod_l+0xbf8>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005fca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006218 <_strtod_l+0xbf8>
 8005fce:	f04f 0800 	mov.w	r8, #0
 8005fd2:	4b92      	ldr	r3, [pc, #584]	; (800621c <_strtod_l+0xbfc>)
 8005fd4:	403b      	ands	r3, r7
 8005fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8005fd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fda:	4b91      	ldr	r3, [pc, #580]	; (8006220 <_strtod_l+0xc00>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	f040 80b2 	bne.w	8006146 <_strtod_l+0xb26>
 8005fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005fee:	ec4b ab10 	vmov	d0, sl, fp
 8005ff2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005ff6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ffa:	f002 f821 	bl	8008040 <__ulp>
 8005ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006002:	ec53 2b10 	vmov	r2, r3, d0
 8006006:	f7fa fb1f 	bl	8000648 <__aeabi_dmul>
 800600a:	4652      	mov	r2, sl
 800600c:	465b      	mov	r3, fp
 800600e:	f7fa f965 	bl	80002dc <__adddf3>
 8006012:	460b      	mov	r3, r1
 8006014:	4981      	ldr	r1, [pc, #516]	; (800621c <_strtod_l+0xbfc>)
 8006016:	4a83      	ldr	r2, [pc, #524]	; (8006224 <_strtod_l+0xc04>)
 8006018:	4019      	ands	r1, r3
 800601a:	4291      	cmp	r1, r2
 800601c:	4682      	mov	sl, r0
 800601e:	d95e      	bls.n	80060de <_strtod_l+0xabe>
 8006020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006022:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006026:	4293      	cmp	r3, r2
 8006028:	d103      	bne.n	8006032 <_strtod_l+0xa12>
 800602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602c:	3301      	adds	r3, #1
 800602e:	f43f ad43 	beq.w	8005ab8 <_strtod_l+0x498>
 8006032:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006230 <_strtod_l+0xc10>
 8006036:	f04f 3aff 	mov.w	sl, #4294967295
 800603a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800603c:	4620      	mov	r0, r4
 800603e:	f001 fcd3 	bl	80079e8 <_Bfree>
 8006042:	9907      	ldr	r1, [sp, #28]
 8006044:	4620      	mov	r0, r4
 8006046:	f001 fccf 	bl	80079e8 <_Bfree>
 800604a:	4631      	mov	r1, r6
 800604c:	4620      	mov	r0, r4
 800604e:	f001 fccb 	bl	80079e8 <_Bfree>
 8006052:	4629      	mov	r1, r5
 8006054:	4620      	mov	r0, r4
 8006056:	f001 fcc7 	bl	80079e8 <_Bfree>
 800605a:	e613      	b.n	8005c84 <_strtod_l+0x664>
 800605c:	f1ba 0f00 	cmp.w	sl, #0
 8006060:	d11b      	bne.n	800609a <_strtod_l+0xa7a>
 8006062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006066:	b9f3      	cbnz	r3, 80060a6 <_strtod_l+0xa86>
 8006068:	4b6b      	ldr	r3, [pc, #428]	; (8006218 <_strtod_l+0xbf8>)
 800606a:	2200      	movs	r2, #0
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa fd5c 	bl	8000b2c <__aeabi_dcmplt>
 8006074:	b9d0      	cbnz	r0, 80060ac <_strtod_l+0xa8c>
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	4b6b      	ldr	r3, [pc, #428]	; (8006228 <_strtod_l+0xc08>)
 800607c:	2200      	movs	r2, #0
 800607e:	f7fa fae3 	bl	8000648 <__aeabi_dmul>
 8006082:	4680      	mov	r8, r0
 8006084:	4689      	mov	r9, r1
 8006086:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800608a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800608e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006090:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006094:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006098:	e79b      	b.n	8005fd2 <_strtod_l+0x9b2>
 800609a:	f1ba 0f01 	cmp.w	sl, #1
 800609e:	d102      	bne.n	80060a6 <_strtod_l+0xa86>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f43f ad7e 	beq.w	8005ba2 <_strtod_l+0x582>
 80060a6:	4b61      	ldr	r3, [pc, #388]	; (800622c <_strtod_l+0xc0c>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	e78c      	b.n	8005fc6 <_strtod_l+0x9a6>
 80060ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006228 <_strtod_l+0xc08>
 80060b0:	f04f 0800 	mov.w	r8, #0
 80060b4:	e7e7      	b.n	8006086 <_strtod_l+0xa66>
 80060b6:	4b5c      	ldr	r3, [pc, #368]	; (8006228 <_strtod_l+0xc08>)
 80060b8:	4640      	mov	r0, r8
 80060ba:	4649      	mov	r1, r9
 80060bc:	2200      	movs	r2, #0
 80060be:	f7fa fac3 	bl	8000648 <__aeabi_dmul>
 80060c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c4:	4680      	mov	r8, r0
 80060c6:	4689      	mov	r9, r1
 80060c8:	b933      	cbnz	r3, 80060d8 <_strtod_l+0xab8>
 80060ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ce:	9012      	str	r0, [sp, #72]	; 0x48
 80060d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80060d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80060d6:	e7dd      	b.n	8006094 <_strtod_l+0xa74>
 80060d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80060dc:	e7f9      	b.n	80060d2 <_strtod_l+0xab2>
 80060de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1a8      	bne.n	800603a <_strtod_l+0xa1a>
 80060e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060ee:	0d1b      	lsrs	r3, r3, #20
 80060f0:	051b      	lsls	r3, r3, #20
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1a1      	bne.n	800603a <_strtod_l+0xa1a>
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fe05 	bl	8000d08 <__aeabi_d2lz>
 80060fe:	f7fa fa75 	bl	80005ec <__aeabi_l2d>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa f8e5 	bl	80002d8 <__aeabi_dsub>
 800610e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006114:	ea43 030a 	orr.w	r3, r3, sl
 8006118:	4313      	orrs	r3, r2
 800611a:	4680      	mov	r8, r0
 800611c:	4689      	mov	r9, r1
 800611e:	d053      	beq.n	80061c8 <_strtod_l+0xba8>
 8006120:	a335      	add	r3, pc, #212	; (adr r3, 80061f8 <_strtod_l+0xbd8>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa fd01 	bl	8000b2c <__aeabi_dcmplt>
 800612a:	2800      	cmp	r0, #0
 800612c:	f47f acce 	bne.w	8005acc <_strtod_l+0x4ac>
 8006130:	a333      	add	r3, pc, #204	; (adr r3, 8006200 <_strtod_l+0xbe0>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa fd15 	bl	8000b68 <__aeabi_dcmpgt>
 800613e:	2800      	cmp	r0, #0
 8006140:	f43f af7b 	beq.w	800603a <_strtod_l+0xa1a>
 8006144:	e4c2      	b.n	8005acc <_strtod_l+0x4ac>
 8006146:	9b04      	ldr	r3, [sp, #16]
 8006148:	b333      	cbz	r3, 8006198 <_strtod_l+0xb78>
 800614a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800614c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006150:	d822      	bhi.n	8006198 <_strtod_l+0xb78>
 8006152:	a32d      	add	r3, pc, #180	; (adr r3, 8006208 <_strtod_l+0xbe8>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa fcf0 	bl	8000b40 <__aeabi_dcmple>
 8006160:	b1a0      	cbz	r0, 800618c <_strtod_l+0xb6c>
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	f7fa fd47 	bl	8000bf8 <__aeabi_d2uiz>
 800616a:	2801      	cmp	r0, #1
 800616c:	bf38      	it	cc
 800616e:	2001      	movcc	r0, #1
 8006170:	f7fa f9f0 	bl	8000554 <__aeabi_ui2d>
 8006174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006176:	4680      	mov	r8, r0
 8006178:	4689      	mov	r9, r1
 800617a:	bb13      	cbnz	r3, 80061c2 <_strtod_l+0xba2>
 800617c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006180:	9014      	str	r0, [sp, #80]	; 0x50
 8006182:	9315      	str	r3, [sp, #84]	; 0x54
 8006184:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006188:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800618c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800618e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006190:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	930d      	str	r3, [sp, #52]	; 0x34
 8006198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800619c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80061a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061a4:	f001 ff4c 	bl	8008040 <__ulp>
 80061a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ac:	ec53 2b10 	vmov	r2, r3, d0
 80061b0:	f7fa fa4a 	bl	8000648 <__aeabi_dmul>
 80061b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061b8:	f7fa f890 	bl	80002dc <__adddf3>
 80061bc:	4682      	mov	sl, r0
 80061be:	468b      	mov	fp, r1
 80061c0:	e78f      	b.n	80060e2 <_strtod_l+0xac2>
 80061c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80061c6:	e7dd      	b.n	8006184 <_strtod_l+0xb64>
 80061c8:	a311      	add	r3, pc, #68	; (adr r3, 8006210 <_strtod_l+0xbf0>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f7fa fcad 	bl	8000b2c <__aeabi_dcmplt>
 80061d2:	e7b4      	b.n	800613e <_strtod_l+0xb1e>
 80061d4:	2300      	movs	r3, #0
 80061d6:	930e      	str	r3, [sp, #56]	; 0x38
 80061d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	f7ff ba65 	b.w	80056ac <_strtod_l+0x8c>
 80061e2:	2b65      	cmp	r3, #101	; 0x65
 80061e4:	f43f ab5d 	beq.w	80058a2 <_strtod_l+0x282>
 80061e8:	2b45      	cmp	r3, #69	; 0x45
 80061ea:	f43f ab5a 	beq.w	80058a2 <_strtod_l+0x282>
 80061ee:	2201      	movs	r2, #1
 80061f0:	f7ff bb92 	b.w	8005918 <_strtod_l+0x2f8>
 80061f4:	f3af 8000 	nop.w
 80061f8:	94a03595 	.word	0x94a03595
 80061fc:	3fdfffff 	.word	0x3fdfffff
 8006200:	35afe535 	.word	0x35afe535
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	ffc00000 	.word	0xffc00000
 800620c:	41dfffff 	.word	0x41dfffff
 8006210:	94a03595 	.word	0x94a03595
 8006214:	3fcfffff 	.word	0x3fcfffff
 8006218:	3ff00000 	.word	0x3ff00000
 800621c:	7ff00000 	.word	0x7ff00000
 8006220:	7fe00000 	.word	0x7fe00000
 8006224:	7c9fffff 	.word	0x7c9fffff
 8006228:	3fe00000 	.word	0x3fe00000
 800622c:	bff00000 	.word	0xbff00000
 8006230:	7fefffff 	.word	0x7fefffff

08006234 <_strtod_r>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <_strtod_r+0x8>)
 8006236:	f7ff b9f3 	b.w	8005620 <_strtod_l>
 800623a:	bf00      	nop
 800623c:	20000074 	.word	0x20000074

08006240 <_strtol_l.isra.0>:
 8006240:	2b01      	cmp	r3, #1
 8006242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006246:	d001      	beq.n	800624c <_strtol_l.isra.0+0xc>
 8006248:	2b24      	cmp	r3, #36	; 0x24
 800624a:	d906      	bls.n	800625a <_strtol_l.isra.0+0x1a>
 800624c:	f7fe fae0 	bl	8004810 <__errno>
 8006250:	2316      	movs	r3, #22
 8006252:	6003      	str	r3, [r0, #0]
 8006254:	2000      	movs	r0, #0
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	4f3a      	ldr	r7, [pc, #232]	; (8006344 <_strtol_l.isra.0+0x104>)
 800625c:	468e      	mov	lr, r1
 800625e:	4676      	mov	r6, lr
 8006260:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006264:	5de5      	ldrb	r5, [r4, r7]
 8006266:	f015 0508 	ands.w	r5, r5, #8
 800626a:	d1f8      	bne.n	800625e <_strtol_l.isra.0+0x1e>
 800626c:	2c2d      	cmp	r4, #45	; 0x2d
 800626e:	d134      	bne.n	80062da <_strtol_l.isra.0+0x9a>
 8006270:	f89e 4000 	ldrb.w	r4, [lr]
 8006274:	f04f 0801 	mov.w	r8, #1
 8006278:	f106 0e02 	add.w	lr, r6, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05c      	beq.n	800633a <_strtol_l.isra.0+0xfa>
 8006280:	2b10      	cmp	r3, #16
 8006282:	d10c      	bne.n	800629e <_strtol_l.isra.0+0x5e>
 8006284:	2c30      	cmp	r4, #48	; 0x30
 8006286:	d10a      	bne.n	800629e <_strtol_l.isra.0+0x5e>
 8006288:	f89e 4000 	ldrb.w	r4, [lr]
 800628c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006290:	2c58      	cmp	r4, #88	; 0x58
 8006292:	d14d      	bne.n	8006330 <_strtol_l.isra.0+0xf0>
 8006294:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006298:	2310      	movs	r3, #16
 800629a:	f10e 0e02 	add.w	lr, lr, #2
 800629e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80062a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062a6:	2600      	movs	r6, #0
 80062a8:	fbbc f9f3 	udiv	r9, ip, r3
 80062ac:	4635      	mov	r5, r6
 80062ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80062b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80062b6:	2f09      	cmp	r7, #9
 80062b8:	d818      	bhi.n	80062ec <_strtol_l.isra.0+0xac>
 80062ba:	463c      	mov	r4, r7
 80062bc:	42a3      	cmp	r3, r4
 80062be:	dd24      	ble.n	800630a <_strtol_l.isra.0+0xca>
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	db1f      	blt.n	8006304 <_strtol_l.isra.0+0xc4>
 80062c4:	45a9      	cmp	r9, r5
 80062c6:	d31d      	bcc.n	8006304 <_strtol_l.isra.0+0xc4>
 80062c8:	d101      	bne.n	80062ce <_strtol_l.isra.0+0x8e>
 80062ca:	45a2      	cmp	sl, r4
 80062cc:	db1a      	blt.n	8006304 <_strtol_l.isra.0+0xc4>
 80062ce:	fb05 4503 	mla	r5, r5, r3, r4
 80062d2:	2601      	movs	r6, #1
 80062d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80062d8:	e7eb      	b.n	80062b2 <_strtol_l.isra.0+0x72>
 80062da:	2c2b      	cmp	r4, #43	; 0x2b
 80062dc:	bf08      	it	eq
 80062de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80062e2:	46a8      	mov	r8, r5
 80062e4:	bf08      	it	eq
 80062e6:	f106 0e02 	addeq.w	lr, r6, #2
 80062ea:	e7c7      	b.n	800627c <_strtol_l.isra.0+0x3c>
 80062ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80062f0:	2f19      	cmp	r7, #25
 80062f2:	d801      	bhi.n	80062f8 <_strtol_l.isra.0+0xb8>
 80062f4:	3c37      	subs	r4, #55	; 0x37
 80062f6:	e7e1      	b.n	80062bc <_strtol_l.isra.0+0x7c>
 80062f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80062fc:	2f19      	cmp	r7, #25
 80062fe:	d804      	bhi.n	800630a <_strtol_l.isra.0+0xca>
 8006300:	3c57      	subs	r4, #87	; 0x57
 8006302:	e7db      	b.n	80062bc <_strtol_l.isra.0+0x7c>
 8006304:	f04f 36ff 	mov.w	r6, #4294967295
 8006308:	e7e4      	b.n	80062d4 <_strtol_l.isra.0+0x94>
 800630a:	2e00      	cmp	r6, #0
 800630c:	da05      	bge.n	800631a <_strtol_l.isra.0+0xda>
 800630e:	2322      	movs	r3, #34	; 0x22
 8006310:	6003      	str	r3, [r0, #0]
 8006312:	4665      	mov	r5, ip
 8006314:	b942      	cbnz	r2, 8006328 <_strtol_l.isra.0+0xe8>
 8006316:	4628      	mov	r0, r5
 8006318:	e79d      	b.n	8006256 <_strtol_l.isra.0+0x16>
 800631a:	f1b8 0f00 	cmp.w	r8, #0
 800631e:	d000      	beq.n	8006322 <_strtol_l.isra.0+0xe2>
 8006320:	426d      	negs	r5, r5
 8006322:	2a00      	cmp	r2, #0
 8006324:	d0f7      	beq.n	8006316 <_strtol_l.isra.0+0xd6>
 8006326:	b10e      	cbz	r6, 800632c <_strtol_l.isra.0+0xec>
 8006328:	f10e 31ff 	add.w	r1, lr, #4294967295
 800632c:	6011      	str	r1, [r2, #0]
 800632e:	e7f2      	b.n	8006316 <_strtol_l.isra.0+0xd6>
 8006330:	2430      	movs	r4, #48	; 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1b3      	bne.n	800629e <_strtol_l.isra.0+0x5e>
 8006336:	2308      	movs	r3, #8
 8006338:	e7b1      	b.n	800629e <_strtol_l.isra.0+0x5e>
 800633a:	2c30      	cmp	r4, #48	; 0x30
 800633c:	d0a4      	beq.n	8006288 <_strtol_l.isra.0+0x48>
 800633e:	230a      	movs	r3, #10
 8006340:	e7ad      	b.n	800629e <_strtol_l.isra.0+0x5e>
 8006342:	bf00      	nop
 8006344:	08009251 	.word	0x08009251

08006348 <_strtol_r>:
 8006348:	f7ff bf7a 	b.w	8006240 <_strtol_l.isra.0>

0800634c <quorem>:
 800634c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	6903      	ldr	r3, [r0, #16]
 8006352:	690c      	ldr	r4, [r1, #16]
 8006354:	42a3      	cmp	r3, r4
 8006356:	4607      	mov	r7, r0
 8006358:	f2c0 8081 	blt.w	800645e <quorem+0x112>
 800635c:	3c01      	subs	r4, #1
 800635e:	f101 0814 	add.w	r8, r1, #20
 8006362:	f100 0514 	add.w	r5, r0, #20
 8006366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006374:	3301      	adds	r3, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800637c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006380:	fbb2 f6f3 	udiv	r6, r2, r3
 8006384:	d331      	bcc.n	80063ea <quorem+0x9e>
 8006386:	f04f 0e00 	mov.w	lr, #0
 800638a:	4640      	mov	r0, r8
 800638c:	46ac      	mov	ip, r5
 800638e:	46f2      	mov	sl, lr
 8006390:	f850 2b04 	ldr.w	r2, [r0], #4
 8006394:	b293      	uxth	r3, r2
 8006396:	fb06 e303 	mla	r3, r6, r3, lr
 800639a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800639e:	b29b      	uxth	r3, r3
 80063a0:	ebaa 0303 	sub.w	r3, sl, r3
 80063a4:	0c12      	lsrs	r2, r2, #16
 80063a6:	f8dc a000 	ldr.w	sl, [ip]
 80063aa:	fb06 e202 	mla	r2, r6, r2, lr
 80063ae:	fa13 f38a 	uxtah	r3, r3, sl
 80063b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b6:	fa1f fa82 	uxth.w	sl, r2
 80063ba:	f8dc 2000 	ldr.w	r2, [ip]
 80063be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063cc:	4581      	cmp	r9, r0
 80063ce:	f84c 3b04 	str.w	r3, [ip], #4
 80063d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d6:	d2db      	bcs.n	8006390 <quorem+0x44>
 80063d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80063dc:	b92b      	cbnz	r3, 80063ea <quorem+0x9e>
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	3b04      	subs	r3, #4
 80063e2:	429d      	cmp	r5, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	d32e      	bcc.n	8006446 <quorem+0xfa>
 80063e8:	613c      	str	r4, [r7, #16]
 80063ea:	4638      	mov	r0, r7
 80063ec:	f001 fd84 	bl	8007ef8 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	db24      	blt.n	800643e <quorem+0xf2>
 80063f4:	3601      	adds	r6, #1
 80063f6:	4628      	mov	r0, r5
 80063f8:	f04f 0c00 	mov.w	ip, #0
 80063fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006400:	f8d0 e000 	ldr.w	lr, [r0]
 8006404:	b293      	uxth	r3, r2
 8006406:	ebac 0303 	sub.w	r3, ip, r3
 800640a:	0c12      	lsrs	r2, r2, #16
 800640c:	fa13 f38e 	uxtah	r3, r3, lr
 8006410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006418:	b29b      	uxth	r3, r3
 800641a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641e:	45c1      	cmp	r9, r8
 8006420:	f840 3b04 	str.w	r3, [r0], #4
 8006424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006428:	d2e8      	bcs.n	80063fc <quorem+0xb0>
 800642a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800642e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006432:	b922      	cbnz	r2, 800643e <quorem+0xf2>
 8006434:	3b04      	subs	r3, #4
 8006436:	429d      	cmp	r5, r3
 8006438:	461a      	mov	r2, r3
 800643a:	d30a      	bcc.n	8006452 <quorem+0x106>
 800643c:	613c      	str	r4, [r7, #16]
 800643e:	4630      	mov	r0, r6
 8006440:	b003      	add	sp, #12
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	3b04      	subs	r3, #4
 800644a:	2a00      	cmp	r2, #0
 800644c:	d1cc      	bne.n	80063e8 <quorem+0x9c>
 800644e:	3c01      	subs	r4, #1
 8006450:	e7c7      	b.n	80063e2 <quorem+0x96>
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	3b04      	subs	r3, #4
 8006456:	2a00      	cmp	r2, #0
 8006458:	d1f0      	bne.n	800643c <quorem+0xf0>
 800645a:	3c01      	subs	r4, #1
 800645c:	e7eb      	b.n	8006436 <quorem+0xea>
 800645e:	2000      	movs	r0, #0
 8006460:	e7ee      	b.n	8006440 <quorem+0xf4>
 8006462:	0000      	movs	r0, r0
 8006464:	0000      	movs	r0, r0
	...

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	ed2d 8b02 	vpush	{d8}
 8006470:	ec57 6b10 	vmov	r6, r7, d0
 8006474:	b095      	sub	sp, #84	; 0x54
 8006476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800647c:	9105      	str	r1, [sp, #20]
 800647e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006482:	4604      	mov	r4, r0
 8006484:	9209      	str	r2, [sp, #36]	; 0x24
 8006486:	930f      	str	r3, [sp, #60]	; 0x3c
 8006488:	b975      	cbnz	r5, 80064a8 <_dtoa_r+0x40>
 800648a:	2010      	movs	r0, #16
 800648c:	f001 fa44 	bl	8007918 <malloc>
 8006490:	4602      	mov	r2, r0
 8006492:	6260      	str	r0, [r4, #36]	; 0x24
 8006494:	b920      	cbnz	r0, 80064a0 <_dtoa_r+0x38>
 8006496:	4bb2      	ldr	r3, [pc, #712]	; (8006760 <_dtoa_r+0x2f8>)
 8006498:	21ea      	movs	r1, #234	; 0xea
 800649a:	48b2      	ldr	r0, [pc, #712]	; (8006764 <_dtoa_r+0x2fc>)
 800649c:	f002 fbde 	bl	8008c5c <__assert_func>
 80064a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064a4:	6005      	str	r5, [r0, #0]
 80064a6:	60c5      	str	r5, [r0, #12]
 80064a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	b151      	cbz	r1, 80064c4 <_dtoa_r+0x5c>
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	604a      	str	r2, [r1, #4]
 80064b2:	2301      	movs	r3, #1
 80064b4:	4093      	lsls	r3, r2
 80064b6:	608b      	str	r3, [r1, #8]
 80064b8:	4620      	mov	r0, r4
 80064ba:	f001 fa95 	bl	80079e8 <_Bfree>
 80064be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	1e3b      	subs	r3, r7, #0
 80064c6:	bfb9      	ittee	lt
 80064c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	9303      	strlt	r3, [sp, #12]
 80064ce:	2300      	movge	r3, #0
 80064d0:	f8c8 3000 	strge.w	r3, [r8]
 80064d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80064d8:	4ba3      	ldr	r3, [pc, #652]	; (8006768 <_dtoa_r+0x300>)
 80064da:	bfbc      	itt	lt
 80064dc:	2201      	movlt	r2, #1
 80064de:	f8c8 2000 	strlt.w	r2, [r8]
 80064e2:	ea33 0309 	bics.w	r3, r3, r9
 80064e6:	d11b      	bne.n	8006520 <_dtoa_r+0xb8>
 80064e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064f4:	4333      	orrs	r3, r6
 80064f6:	f000 857a 	beq.w	8006fee <_dtoa_r+0xb86>
 80064fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064fc:	b963      	cbnz	r3, 8006518 <_dtoa_r+0xb0>
 80064fe:	4b9b      	ldr	r3, [pc, #620]	; (800676c <_dtoa_r+0x304>)
 8006500:	e024      	b.n	800654c <_dtoa_r+0xe4>
 8006502:	4b9b      	ldr	r3, [pc, #620]	; (8006770 <_dtoa_r+0x308>)
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	9800      	ldr	r0, [sp, #0]
 800650e:	b015      	add	sp, #84	; 0x54
 8006510:	ecbd 8b02 	vpop	{d8}
 8006514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006518:	4b94      	ldr	r3, [pc, #592]	; (800676c <_dtoa_r+0x304>)
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	3303      	adds	r3, #3
 800651e:	e7f3      	b.n	8006508 <_dtoa_r+0xa0>
 8006520:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	ec51 0b17 	vmov	r0, r1, d7
 800652a:	2300      	movs	r3, #0
 800652c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006530:	f7fa faf2 	bl	8000b18 <__aeabi_dcmpeq>
 8006534:	4680      	mov	r8, r0
 8006536:	b158      	cbz	r0, 8006550 <_dtoa_r+0xe8>
 8006538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800653a:	2301      	movs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8551 	beq.w	8006fe8 <_dtoa_r+0xb80>
 8006546:	488b      	ldr	r0, [pc, #556]	; (8006774 <_dtoa_r+0x30c>)
 8006548:	6018      	str	r0, [r3, #0]
 800654a:	1e43      	subs	r3, r0, #1
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	e7dd      	b.n	800650c <_dtoa_r+0xa4>
 8006550:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006554:	aa12      	add	r2, sp, #72	; 0x48
 8006556:	a913      	add	r1, sp, #76	; 0x4c
 8006558:	4620      	mov	r0, r4
 800655a:	f001 fded 	bl	8008138 <__d2b>
 800655e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006562:	4683      	mov	fp, r0
 8006564:	2d00      	cmp	r5, #0
 8006566:	d07c      	beq.n	8006662 <_dtoa_r+0x1fa>
 8006568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800656e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006572:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006576:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800657a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800657e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <_dtoa_r+0x310>)
 8006584:	2200      	movs	r2, #0
 8006586:	4630      	mov	r0, r6
 8006588:	4639      	mov	r1, r7
 800658a:	f7f9 fea5 	bl	80002d8 <__aeabi_dsub>
 800658e:	a36e      	add	r3, pc, #440	; (adr r3, 8006748 <_dtoa_r+0x2e0>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7fa f858 	bl	8000648 <__aeabi_dmul>
 8006598:	a36d      	add	r3, pc, #436	; (adr r3, 8006750 <_dtoa_r+0x2e8>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7f9 fe9d 	bl	80002dc <__adddf3>
 80065a2:	4606      	mov	r6, r0
 80065a4:	4628      	mov	r0, r5
 80065a6:	460f      	mov	r7, r1
 80065a8:	f7f9 ffe4 	bl	8000574 <__aeabi_i2d>
 80065ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006758 <_dtoa_r+0x2f0>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7fa f849 	bl	8000648 <__aeabi_dmul>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7f9 fe8d 	bl	80002dc <__adddf3>
 80065c2:	4606      	mov	r6, r0
 80065c4:	460f      	mov	r7, r1
 80065c6:	f7fa faef 	bl	8000ba8 <__aeabi_d2iz>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4682      	mov	sl, r0
 80065ce:	2300      	movs	r3, #0
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7fa faaa 	bl	8000b2c <__aeabi_dcmplt>
 80065d8:	b148      	cbz	r0, 80065ee <_dtoa_r+0x186>
 80065da:	4650      	mov	r0, sl
 80065dc:	f7f9 ffca 	bl	8000574 <__aeabi_i2d>
 80065e0:	4632      	mov	r2, r6
 80065e2:	463b      	mov	r3, r7
 80065e4:	f7fa fa98 	bl	8000b18 <__aeabi_dcmpeq>
 80065e8:	b908      	cbnz	r0, 80065ee <_dtoa_r+0x186>
 80065ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ee:	f1ba 0f16 	cmp.w	sl, #22
 80065f2:	d854      	bhi.n	800669e <_dtoa_r+0x236>
 80065f4:	4b61      	ldr	r3, [pc, #388]	; (800677c <_dtoa_r+0x314>)
 80065f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006602:	f7fa fa93 	bl	8000b2c <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	d04b      	beq.n	80066a2 <_dtoa_r+0x23a>
 800660a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800660e:	2300      	movs	r3, #0
 8006610:	930e      	str	r3, [sp, #56]	; 0x38
 8006612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006614:	1b5d      	subs	r5, r3, r5
 8006616:	1e6b      	subs	r3, r5, #1
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	bf43      	ittte	mi
 800661c:	2300      	movmi	r3, #0
 800661e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006622:	9304      	strmi	r3, [sp, #16]
 8006624:	f04f 0800 	movpl.w	r8, #0
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	db3b      	blt.n	80066a6 <_dtoa_r+0x23e>
 800662e:	9b04      	ldr	r3, [sp, #16]
 8006630:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006634:	4453      	add	r3, sl
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	9306      	str	r3, [sp, #24]
 800663c:	9b05      	ldr	r3, [sp, #20]
 800663e:	2b09      	cmp	r3, #9
 8006640:	d869      	bhi.n	8006716 <_dtoa_r+0x2ae>
 8006642:	2b05      	cmp	r3, #5
 8006644:	bfc4      	itt	gt
 8006646:	3b04      	subgt	r3, #4
 8006648:	9305      	strgt	r3, [sp, #20]
 800664a:	9b05      	ldr	r3, [sp, #20]
 800664c:	f1a3 0302 	sub.w	r3, r3, #2
 8006650:	bfcc      	ite	gt
 8006652:	2500      	movgt	r5, #0
 8006654:	2501      	movle	r5, #1
 8006656:	2b03      	cmp	r3, #3
 8006658:	d869      	bhi.n	800672e <_dtoa_r+0x2c6>
 800665a:	e8df f003 	tbb	[pc, r3]
 800665e:	4e2c      	.short	0x4e2c
 8006660:	5a4c      	.short	0x5a4c
 8006662:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006666:	441d      	add	r5, r3
 8006668:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800666c:	2b20      	cmp	r3, #32
 800666e:	bfc1      	itttt	gt
 8006670:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006674:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006678:	fa09 f303 	lslgt.w	r3, r9, r3
 800667c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006680:	bfda      	itte	le
 8006682:	f1c3 0320 	rsble	r3, r3, #32
 8006686:	fa06 f003 	lslle.w	r0, r6, r3
 800668a:	4318      	orrgt	r0, r3
 800668c:	f7f9 ff62 	bl	8000554 <__aeabi_ui2d>
 8006690:	2301      	movs	r3, #1
 8006692:	4606      	mov	r6, r0
 8006694:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006698:	3d01      	subs	r5, #1
 800669a:	9310      	str	r3, [sp, #64]	; 0x40
 800669c:	e771      	b.n	8006582 <_dtoa_r+0x11a>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7b6      	b.n	8006610 <_dtoa_r+0x1a8>
 80066a2:	900e      	str	r0, [sp, #56]	; 0x38
 80066a4:	e7b5      	b.n	8006612 <_dtoa_r+0x1aa>
 80066a6:	f1ca 0300 	rsb	r3, sl, #0
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	2300      	movs	r3, #0
 80066ae:	eba8 080a 	sub.w	r8, r8, sl
 80066b2:	930d      	str	r3, [sp, #52]	; 0x34
 80066b4:	e7c2      	b.n	800663c <_dtoa_r+0x1d4>
 80066b6:	2300      	movs	r3, #0
 80066b8:	9308      	str	r3, [sp, #32]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dc39      	bgt.n	8006734 <_dtoa_r+0x2cc>
 80066c0:	f04f 0901 	mov.w	r9, #1
 80066c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80066c8:	464b      	mov	r3, r9
 80066ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80066ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066d0:	2200      	movs	r2, #0
 80066d2:	6042      	str	r2, [r0, #4]
 80066d4:	2204      	movs	r2, #4
 80066d6:	f102 0614 	add.w	r6, r2, #20
 80066da:	429e      	cmp	r6, r3
 80066dc:	6841      	ldr	r1, [r0, #4]
 80066de:	d92f      	bls.n	8006740 <_dtoa_r+0x2d8>
 80066e0:	4620      	mov	r0, r4
 80066e2:	f001 f941 	bl	8007968 <_Balloc>
 80066e6:	9000      	str	r0, [sp, #0]
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d14b      	bne.n	8006784 <_dtoa_r+0x31c>
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <_dtoa_r+0x318>)
 80066ee:	4602      	mov	r2, r0
 80066f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066f4:	e6d1      	b.n	800649a <_dtoa_r+0x32>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e7de      	b.n	80066b8 <_dtoa_r+0x250>
 80066fa:	2300      	movs	r3, #0
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	eb0a 0903 	add.w	r9, sl, r3
 8006704:	f109 0301 	add.w	r3, r9, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	bfb8      	it	lt
 800670e:	2301      	movlt	r3, #1
 8006710:	e7dd      	b.n	80066ce <_dtoa_r+0x266>
 8006712:	2301      	movs	r3, #1
 8006714:	e7f2      	b.n	80066fc <_dtoa_r+0x294>
 8006716:	2501      	movs	r5, #1
 8006718:	2300      	movs	r3, #0
 800671a:	9305      	str	r3, [sp, #20]
 800671c:	9508      	str	r5, [sp, #32]
 800671e:	f04f 39ff 	mov.w	r9, #4294967295
 8006722:	2200      	movs	r2, #0
 8006724:	f8cd 9004 	str.w	r9, [sp, #4]
 8006728:	2312      	movs	r3, #18
 800672a:	9209      	str	r2, [sp, #36]	; 0x24
 800672c:	e7cf      	b.n	80066ce <_dtoa_r+0x266>
 800672e:	2301      	movs	r3, #1
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	e7f4      	b.n	800671e <_dtoa_r+0x2b6>
 8006734:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006738:	f8cd 9004 	str.w	r9, [sp, #4]
 800673c:	464b      	mov	r3, r9
 800673e:	e7c6      	b.n	80066ce <_dtoa_r+0x266>
 8006740:	3101      	adds	r1, #1
 8006742:	6041      	str	r1, [r0, #4]
 8006744:	0052      	lsls	r2, r2, #1
 8006746:	e7c6      	b.n	80066d6 <_dtoa_r+0x26e>
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	0800935e 	.word	0x0800935e
 8006764:	08009375 	.word	0x08009375
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	0800935a 	.word	0x0800935a
 8006770:	08009351 	.word	0x08009351
 8006774:	080091d1 	.word	0x080091d1
 8006778:	3ff80000 	.word	0x3ff80000
 800677c:	08009550 	.word	0x08009550
 8006780:	080093d4 	.word	0x080093d4
 8006784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006786:	9a00      	ldr	r2, [sp, #0]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	9b01      	ldr	r3, [sp, #4]
 800678c:	2b0e      	cmp	r3, #14
 800678e:	f200 80ad 	bhi.w	80068ec <_dtoa_r+0x484>
 8006792:	2d00      	cmp	r5, #0
 8006794:	f000 80aa 	beq.w	80068ec <_dtoa_r+0x484>
 8006798:	f1ba 0f00 	cmp.w	sl, #0
 800679c:	dd36      	ble.n	800680c <_dtoa_r+0x3a4>
 800679e:	4ac3      	ldr	r2, [pc, #780]	; (8006aac <_dtoa_r+0x644>)
 80067a0:	f00a 030f 	and.w	r3, sl, #15
 80067a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067a8:	ed93 7b00 	vldr	d7, [r3]
 80067ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80067b4:	eeb0 8a47 	vmov.f32	s16, s14
 80067b8:	eef0 8a67 	vmov.f32	s17, s15
 80067bc:	d016      	beq.n	80067ec <_dtoa_r+0x384>
 80067be:	4bbc      	ldr	r3, [pc, #752]	; (8006ab0 <_dtoa_r+0x648>)
 80067c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c8:	f7fa f868 	bl	800089c <__aeabi_ddiv>
 80067cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d0:	f007 070f 	and.w	r7, r7, #15
 80067d4:	2503      	movs	r5, #3
 80067d6:	4eb6      	ldr	r6, [pc, #728]	; (8006ab0 <_dtoa_r+0x648>)
 80067d8:	b957      	cbnz	r7, 80067f0 <_dtoa_r+0x388>
 80067da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067de:	ec53 2b18 	vmov	r2, r3, d8
 80067e2:	f7fa f85b 	bl	800089c <__aeabi_ddiv>
 80067e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ea:	e029      	b.n	8006840 <_dtoa_r+0x3d8>
 80067ec:	2502      	movs	r5, #2
 80067ee:	e7f2      	b.n	80067d6 <_dtoa_r+0x36e>
 80067f0:	07f9      	lsls	r1, r7, #31
 80067f2:	d508      	bpl.n	8006806 <_dtoa_r+0x39e>
 80067f4:	ec51 0b18 	vmov	r0, r1, d8
 80067f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067fc:	f7f9 ff24 	bl	8000648 <__aeabi_dmul>
 8006800:	ec41 0b18 	vmov	d8, r0, r1
 8006804:	3501      	adds	r5, #1
 8006806:	107f      	asrs	r7, r7, #1
 8006808:	3608      	adds	r6, #8
 800680a:	e7e5      	b.n	80067d8 <_dtoa_r+0x370>
 800680c:	f000 80a6 	beq.w	800695c <_dtoa_r+0x4f4>
 8006810:	f1ca 0600 	rsb	r6, sl, #0
 8006814:	4ba5      	ldr	r3, [pc, #660]	; (8006aac <_dtoa_r+0x644>)
 8006816:	4fa6      	ldr	r7, [pc, #664]	; (8006ab0 <_dtoa_r+0x648>)
 8006818:	f006 020f 	and.w	r2, r6, #15
 800681c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006828:	f7f9 ff0e 	bl	8000648 <__aeabi_dmul>
 800682c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006830:	1136      	asrs	r6, r6, #4
 8006832:	2300      	movs	r3, #0
 8006834:	2502      	movs	r5, #2
 8006836:	2e00      	cmp	r6, #0
 8006838:	f040 8085 	bne.w	8006946 <_dtoa_r+0x4de>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1d2      	bne.n	80067e6 <_dtoa_r+0x37e>
 8006840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 808c 	beq.w	8006960 <_dtoa_r+0x4f8>
 8006848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800684c:	4b99      	ldr	r3, [pc, #612]	; (8006ab4 <_dtoa_r+0x64c>)
 800684e:	2200      	movs	r2, #0
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7fa f96a 	bl	8000b2c <__aeabi_dcmplt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f000 8081 	beq.w	8006960 <_dtoa_r+0x4f8>
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d07d      	beq.n	8006960 <_dtoa_r+0x4f8>
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	dd3c      	ble.n	80068e4 <_dtoa_r+0x47c>
 800686a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800686e:	9307      	str	r3, [sp, #28]
 8006870:	2200      	movs	r2, #0
 8006872:	4b91      	ldr	r3, [pc, #580]	; (8006ab8 <_dtoa_r+0x650>)
 8006874:	4630      	mov	r0, r6
 8006876:	4639      	mov	r1, r7
 8006878:	f7f9 fee6 	bl	8000648 <__aeabi_dmul>
 800687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006880:	3501      	adds	r5, #1
 8006882:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800688a:	4628      	mov	r0, r5
 800688c:	f7f9 fe72 	bl	8000574 <__aeabi_i2d>
 8006890:	4632      	mov	r2, r6
 8006892:	463b      	mov	r3, r7
 8006894:	f7f9 fed8 	bl	8000648 <__aeabi_dmul>
 8006898:	4b88      	ldr	r3, [pc, #544]	; (8006abc <_dtoa_r+0x654>)
 800689a:	2200      	movs	r2, #0
 800689c:	f7f9 fd1e 	bl	80002dc <__adddf3>
 80068a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	9303      	str	r3, [sp, #12]
 80068aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d15c      	bne.n	800696a <_dtoa_r+0x502>
 80068b0:	4b83      	ldr	r3, [pc, #524]	; (8006ac0 <_dtoa_r+0x658>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7f9 fd0e 	bl	80002d8 <__aeabi_dsub>
 80068bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7fa f950 	bl	8000b68 <__aeabi_dcmpgt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 8296 	bne.w	8006dfa <_dtoa_r+0x992>
 80068ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80068d2:	4630      	mov	r0, r6
 80068d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068d8:	4639      	mov	r1, r7
 80068da:	f7fa f927 	bl	8000b2c <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f040 8288 	bne.w	8006df4 <_dtoa_r+0x98c>
 80068e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f2c0 8158 	blt.w	8006ba4 <_dtoa_r+0x73c>
 80068f4:	f1ba 0f0e 	cmp.w	sl, #14
 80068f8:	f300 8154 	bgt.w	8006ba4 <_dtoa_r+0x73c>
 80068fc:	4b6b      	ldr	r3, [pc, #428]	; (8006aac <_dtoa_r+0x644>)
 80068fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006902:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	f280 80e3 	bge.w	8006ad4 <_dtoa_r+0x66c>
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f300 80df 	bgt.w	8006ad4 <_dtoa_r+0x66c>
 8006916:	f040 826d 	bne.w	8006df4 <_dtoa_r+0x98c>
 800691a:	4b69      	ldr	r3, [pc, #420]	; (8006ac0 <_dtoa_r+0x658>)
 800691c:	2200      	movs	r2, #0
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7f9 fe91 	bl	8000648 <__aeabi_dmul>
 8006926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800692a:	f7fa f913 	bl	8000b54 <__aeabi_dcmpge>
 800692e:	9e01      	ldr	r6, [sp, #4]
 8006930:	4637      	mov	r7, r6
 8006932:	2800      	cmp	r0, #0
 8006934:	f040 8243 	bne.w	8006dbe <_dtoa_r+0x956>
 8006938:	9d00      	ldr	r5, [sp, #0]
 800693a:	2331      	movs	r3, #49	; 0x31
 800693c:	f805 3b01 	strb.w	r3, [r5], #1
 8006940:	f10a 0a01 	add.w	sl, sl, #1
 8006944:	e23f      	b.n	8006dc6 <_dtoa_r+0x95e>
 8006946:	07f2      	lsls	r2, r6, #31
 8006948:	d505      	bpl.n	8006956 <_dtoa_r+0x4ee>
 800694a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694e:	f7f9 fe7b 	bl	8000648 <__aeabi_dmul>
 8006952:	3501      	adds	r5, #1
 8006954:	2301      	movs	r3, #1
 8006956:	1076      	asrs	r6, r6, #1
 8006958:	3708      	adds	r7, #8
 800695a:	e76c      	b.n	8006836 <_dtoa_r+0x3ce>
 800695c:	2502      	movs	r5, #2
 800695e:	e76f      	b.n	8006840 <_dtoa_r+0x3d8>
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	f8cd a01c 	str.w	sl, [sp, #28]
 8006966:	930c      	str	r3, [sp, #48]	; 0x30
 8006968:	e78d      	b.n	8006886 <_dtoa_r+0x41e>
 800696a:	9900      	ldr	r1, [sp, #0]
 800696c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800696e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006970:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <_dtoa_r+0x644>)
 8006972:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006976:	4401      	add	r1, r0
 8006978:	9102      	str	r1, [sp, #8]
 800697a:	9908      	ldr	r1, [sp, #32]
 800697c:	eeb0 8a47 	vmov.f32	s16, s14
 8006980:	eef0 8a67 	vmov.f32	s17, s15
 8006984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006988:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800698c:	2900      	cmp	r1, #0
 800698e:	d045      	beq.n	8006a1c <_dtoa_r+0x5b4>
 8006990:	494c      	ldr	r1, [pc, #304]	; (8006ac4 <_dtoa_r+0x65c>)
 8006992:	2000      	movs	r0, #0
 8006994:	f7f9 ff82 	bl	800089c <__aeabi_ddiv>
 8006998:	ec53 2b18 	vmov	r2, r3, d8
 800699c:	f7f9 fc9c 	bl	80002d8 <__aeabi_dsub>
 80069a0:	9d00      	ldr	r5, [sp, #0]
 80069a2:	ec41 0b18 	vmov	d8, r0, r1
 80069a6:	4639      	mov	r1, r7
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7fa f8fd 	bl	8000ba8 <__aeabi_d2iz>
 80069ae:	900c      	str	r0, [sp, #48]	; 0x30
 80069b0:	f7f9 fde0 	bl	8000574 <__aeabi_i2d>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fc8c 	bl	80002d8 <__aeabi_dsub>
 80069c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c2:	3330      	adds	r3, #48	; 0x30
 80069c4:	f805 3b01 	strb.w	r3, [r5], #1
 80069c8:	ec53 2b18 	vmov	r2, r3, d8
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	f7fa f8ac 	bl	8000b2c <__aeabi_dcmplt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d165      	bne.n	8006aa4 <_dtoa_r+0x63c>
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	4935      	ldr	r1, [pc, #212]	; (8006ab4 <_dtoa_r+0x64c>)
 80069de:	2000      	movs	r0, #0
 80069e0:	f7f9 fc7a 	bl	80002d8 <__aeabi_dsub>
 80069e4:	ec53 2b18 	vmov	r2, r3, d8
 80069e8:	f7fa f8a0 	bl	8000b2c <__aeabi_dcmplt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 80b9 	bne.w	8006b64 <_dtoa_r+0x6fc>
 80069f2:	9b02      	ldr	r3, [sp, #8]
 80069f4:	429d      	cmp	r5, r3
 80069f6:	f43f af75 	beq.w	80068e4 <_dtoa_r+0x47c>
 80069fa:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <_dtoa_r+0x650>)
 80069fc:	ec51 0b18 	vmov	r0, r1, d8
 8006a00:	2200      	movs	r2, #0
 8006a02:	f7f9 fe21 	bl	8000648 <__aeabi_dmul>
 8006a06:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <_dtoa_r+0x650>)
 8006a08:	ec41 0b18 	vmov	d8, r0, r1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4639      	mov	r1, r7
 8006a12:	f7f9 fe19 	bl	8000648 <__aeabi_dmul>
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	e7c4      	b.n	80069a6 <_dtoa_r+0x53e>
 8006a1c:	ec51 0b17 	vmov	r0, r1, d7
 8006a20:	f7f9 fe12 	bl	8000648 <__aeabi_dmul>
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	9d00      	ldr	r5, [sp, #0]
 8006a28:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2a:	ec41 0b18 	vmov	d8, r0, r1
 8006a2e:	4639      	mov	r1, r7
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7fa f8b9 	bl	8000ba8 <__aeabi_d2iz>
 8006a36:	9011      	str	r0, [sp, #68]	; 0x44
 8006a38:	f7f9 fd9c 	bl	8000574 <__aeabi_i2d>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7f9 fc48 	bl	80002d8 <__aeabi_dsub>
 8006a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a4a:	3330      	adds	r3, #48	; 0x30
 8006a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	429d      	cmp	r5, r3
 8006a54:	4606      	mov	r6, r0
 8006a56:	460f      	mov	r7, r1
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	d134      	bne.n	8006ac8 <_dtoa_r+0x660>
 8006a5e:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <_dtoa_r+0x65c>)
 8006a60:	ec51 0b18 	vmov	r0, r1, d8
 8006a64:	f7f9 fc3a 	bl	80002dc <__adddf3>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7fa f87a 	bl	8000b68 <__aeabi_dcmpgt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d175      	bne.n	8006b64 <_dtoa_r+0x6fc>
 8006a78:	ec53 2b18 	vmov	r2, r3, d8
 8006a7c:	4911      	ldr	r1, [pc, #68]	; (8006ac4 <_dtoa_r+0x65c>)
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f7f9 fc2a 	bl	80002d8 <__aeabi_dsub>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7fa f84e 	bl	8000b2c <__aeabi_dcmplt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	f43f af27 	beq.w	80068e4 <_dtoa_r+0x47c>
 8006a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a98:	1e6b      	subs	r3, r5, #1
 8006a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aa0:	2b30      	cmp	r3, #48	; 0x30
 8006aa2:	d0f8      	beq.n	8006a96 <_dtoa_r+0x62e>
 8006aa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006aa8:	e04a      	b.n	8006b40 <_dtoa_r+0x6d8>
 8006aaa:	bf00      	nop
 8006aac:	08009550 	.word	0x08009550
 8006ab0:	08009528 	.word	0x08009528
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	401c0000 	.word	0x401c0000
 8006ac0:	40140000 	.word	0x40140000
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	4baf      	ldr	r3, [pc, #700]	; (8006d88 <_dtoa_r+0x920>)
 8006aca:	f7f9 fdbd 	bl	8000648 <__aeabi_dmul>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	e7ac      	b.n	8006a2e <_dtoa_r+0x5c6>
 8006ad4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ad8:	9d00      	ldr	r5, [sp, #0]
 8006ada:	4642      	mov	r2, r8
 8006adc:	464b      	mov	r3, r9
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7f9 fedb 	bl	800089c <__aeabi_ddiv>
 8006ae6:	f7fa f85f 	bl	8000ba8 <__aeabi_d2iz>
 8006aea:	9002      	str	r0, [sp, #8]
 8006aec:	f7f9 fd42 	bl	8000574 <__aeabi_i2d>
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	f7f9 fda8 	bl	8000648 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	f7f9 fbea 	bl	80002d8 <__aeabi_dsub>
 8006b04:	9e02      	ldr	r6, [sp, #8]
 8006b06:	9f01      	ldr	r7, [sp, #4]
 8006b08:	3630      	adds	r6, #48	; 0x30
 8006b0a:	f805 6b01 	strb.w	r6, [r5], #1
 8006b0e:	9e00      	ldr	r6, [sp, #0]
 8006b10:	1bae      	subs	r6, r5, r6
 8006b12:	42b7      	cmp	r7, r6
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	d137      	bne.n	8006b8a <_dtoa_r+0x722>
 8006b1a:	f7f9 fbdf 	bl	80002dc <__adddf3>
 8006b1e:	4642      	mov	r2, r8
 8006b20:	464b      	mov	r3, r9
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	f7fa f81f 	bl	8000b68 <__aeabi_dcmpgt>
 8006b2a:	b9c8      	cbnz	r0, 8006b60 <_dtoa_r+0x6f8>
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fff0 	bl	8000b18 <__aeabi_dcmpeq>
 8006b38:	b110      	cbz	r0, 8006b40 <_dtoa_r+0x6d8>
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	07d9      	lsls	r1, r3, #31
 8006b3e:	d40f      	bmi.n	8006b60 <_dtoa_r+0x6f8>
 8006b40:	4620      	mov	r0, r4
 8006b42:	4659      	mov	r1, fp
 8006b44:	f000 ff50 	bl	80079e8 <_Bfree>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	702b      	strb	r3, [r5, #0]
 8006b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b4e:	f10a 0001 	add.w	r0, sl, #1
 8006b52:	6018      	str	r0, [r3, #0]
 8006b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f43f acd8 	beq.w	800650c <_dtoa_r+0xa4>
 8006b5c:	601d      	str	r5, [r3, #0]
 8006b5e:	e4d5      	b.n	800650c <_dtoa_r+0xa4>
 8006b60:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b64:	462b      	mov	r3, r5
 8006b66:	461d      	mov	r5, r3
 8006b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b6c:	2a39      	cmp	r2, #57	; 0x39
 8006b6e:	d108      	bne.n	8006b82 <_dtoa_r+0x71a>
 8006b70:	9a00      	ldr	r2, [sp, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d1f7      	bne.n	8006b66 <_dtoa_r+0x6fe>
 8006b76:	9a07      	ldr	r2, [sp, #28]
 8006b78:	9900      	ldr	r1, [sp, #0]
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	9207      	str	r2, [sp, #28]
 8006b7e:	2230      	movs	r2, #48	; 0x30
 8006b80:	700a      	strb	r2, [r1, #0]
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	3201      	adds	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e78c      	b.n	8006aa4 <_dtoa_r+0x63c>
 8006b8a:	4b7f      	ldr	r3, [pc, #508]	; (8006d88 <_dtoa_r+0x920>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f7f9 fd5b 	bl	8000648 <__aeabi_dmul>
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	f7f9 ffbd 	bl	8000b18 <__aeabi_dcmpeq>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d09b      	beq.n	8006ada <_dtoa_r+0x672>
 8006ba2:	e7cd      	b.n	8006b40 <_dtoa_r+0x6d8>
 8006ba4:	9a08      	ldr	r2, [sp, #32]
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	f000 80c4 	beq.w	8006d34 <_dtoa_r+0x8cc>
 8006bac:	9a05      	ldr	r2, [sp, #20]
 8006bae:	2a01      	cmp	r2, #1
 8006bb0:	f300 80a8 	bgt.w	8006d04 <_dtoa_r+0x89c>
 8006bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	f000 80a0 	beq.w	8006cfc <_dtoa_r+0x894>
 8006bbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bc0:	9e06      	ldr	r6, [sp, #24]
 8006bc2:	4645      	mov	r5, r8
 8006bc4:	9a04      	ldr	r2, [sp, #16]
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	441a      	add	r2, r3
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4498      	add	r8, r3
 8006bce:	9204      	str	r2, [sp, #16]
 8006bd0:	f001 f810 	bl	8007bf4 <__i2b>
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	dd0b      	ble.n	8006bf2 <_dtoa_r+0x78a>
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dd08      	ble.n	8006bf2 <_dtoa_r+0x78a>
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	9a04      	ldr	r2, [sp, #16]
 8006be4:	bfa8      	it	ge
 8006be6:	462b      	movge	r3, r5
 8006be8:	eba8 0803 	sub.w	r8, r8, r3
 8006bec:	1aed      	subs	r5, r5, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	b1fb      	cbz	r3, 8006c36 <_dtoa_r+0x7ce>
 8006bf6:	9b08      	ldr	r3, [sp, #32]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 809f 	beq.w	8006d3c <_dtoa_r+0x8d4>
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	dd11      	ble.n	8006c26 <_dtoa_r+0x7be>
 8006c02:	4639      	mov	r1, r7
 8006c04:	4632      	mov	r2, r6
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 f8b0 	bl	8007d6c <__pow5mult>
 8006c0c:	465a      	mov	r2, fp
 8006c0e:	4601      	mov	r1, r0
 8006c10:	4607      	mov	r7, r0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 f804 	bl	8007c20 <__multiply>
 8006c18:	4659      	mov	r1, fp
 8006c1a:	9007      	str	r0, [sp, #28]
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fee3 	bl	80079e8 <_Bfree>
 8006c22:	9b07      	ldr	r3, [sp, #28]
 8006c24:	469b      	mov	fp, r3
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	1b9a      	subs	r2, r3, r6
 8006c2a:	d004      	beq.n	8006c36 <_dtoa_r+0x7ce>
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f001 f89c 	bl	8007d6c <__pow5mult>
 8006c34:	4683      	mov	fp, r0
 8006c36:	2101      	movs	r1, #1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 ffdb 	bl	8007bf4 <__i2b>
 8006c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	4606      	mov	r6, r0
 8006c44:	dd7c      	ble.n	8006d40 <_dtoa_r+0x8d8>
 8006c46:	461a      	mov	r2, r3
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f001 f88e 	bl	8007d6c <__pow5mult>
 8006c50:	9b05      	ldr	r3, [sp, #20]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	4606      	mov	r6, r0
 8006c56:	dd76      	ble.n	8006d46 <_dtoa_r+0x8de>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9306      	str	r3, [sp, #24]
 8006c5c:	6933      	ldr	r3, [r6, #16]
 8006c5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c62:	6918      	ldr	r0, [r3, #16]
 8006c64:	f000 ff76 	bl	8007b54 <__hi0bits>
 8006c68:	f1c0 0020 	rsb	r0, r0, #32
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	4418      	add	r0, r3
 8006c70:	f010 001f 	ands.w	r0, r0, #31
 8006c74:	f000 8086 	beq.w	8006d84 <_dtoa_r+0x91c>
 8006c78:	f1c0 0320 	rsb	r3, r0, #32
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	dd7f      	ble.n	8006d80 <_dtoa_r+0x918>
 8006c80:	f1c0 001c 	rsb	r0, r0, #28
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	4403      	add	r3, r0
 8006c88:	4480      	add	r8, r0
 8006c8a:	4405      	add	r5, r0
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	f1b8 0f00 	cmp.w	r8, #0
 8006c92:	dd05      	ble.n	8006ca0 <_dtoa_r+0x838>
 8006c94:	4659      	mov	r1, fp
 8006c96:	4642      	mov	r2, r8
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f001 f8c1 	bl	8007e20 <__lshift>
 8006c9e:	4683      	mov	fp, r0
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dd05      	ble.n	8006cb2 <_dtoa_r+0x84a>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	f001 f8b8 	bl	8007e20 <__lshift>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d069      	beq.n	8006d8c <_dtoa_r+0x924>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f001 f91c 	bl	8007ef8 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	da63      	bge.n	8006d8c <_dtoa_r+0x924>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 feae 	bl	8007a2c <__multadd>
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	4683      	mov	fp, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 818f 	beq.w	8006ffc <_dtoa_r+0xb94>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	220a      	movs	r2, #10
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fea1 	bl	8007a2c <__multadd>
 8006cea:	f1b9 0f00 	cmp.w	r9, #0
 8006cee:	4607      	mov	r7, r0
 8006cf0:	f300 808e 	bgt.w	8006e10 <_dtoa_r+0x9a8>
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	dc50      	bgt.n	8006d9c <_dtoa_r+0x934>
 8006cfa:	e089      	b.n	8006e10 <_dtoa_r+0x9a8>
 8006cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d02:	e75d      	b.n	8006bc0 <_dtoa_r+0x758>
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	1e5e      	subs	r6, r3, #1
 8006d08:	9b06      	ldr	r3, [sp, #24]
 8006d0a:	42b3      	cmp	r3, r6
 8006d0c:	bfbf      	itttt	lt
 8006d0e:	9b06      	ldrlt	r3, [sp, #24]
 8006d10:	9606      	strlt	r6, [sp, #24]
 8006d12:	1af2      	sublt	r2, r6, r3
 8006d14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006d16:	bfb6      	itet	lt
 8006d18:	189b      	addlt	r3, r3, r2
 8006d1a:	1b9e      	subge	r6, r3, r6
 8006d1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	bfb8      	it	lt
 8006d22:	2600      	movlt	r6, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfb5      	itete	lt
 8006d28:	eba8 0503 	sublt.w	r5, r8, r3
 8006d2c:	9b01      	ldrge	r3, [sp, #4]
 8006d2e:	2300      	movlt	r3, #0
 8006d30:	4645      	movge	r5, r8
 8006d32:	e747      	b.n	8006bc4 <_dtoa_r+0x75c>
 8006d34:	9e06      	ldr	r6, [sp, #24]
 8006d36:	9f08      	ldr	r7, [sp, #32]
 8006d38:	4645      	mov	r5, r8
 8006d3a:	e74c      	b.n	8006bd6 <_dtoa_r+0x76e>
 8006d3c:	9a06      	ldr	r2, [sp, #24]
 8006d3e:	e775      	b.n	8006c2c <_dtoa_r+0x7c4>
 8006d40:	9b05      	ldr	r3, [sp, #20]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	dc18      	bgt.n	8006d78 <_dtoa_r+0x910>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	b9b3      	cbnz	r3, 8006d78 <_dtoa_r+0x910>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d50:	b9a3      	cbnz	r3, 8006d7c <_dtoa_r+0x914>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d58:	0d1b      	lsrs	r3, r3, #20
 8006d5a:	051b      	lsls	r3, r3, #20
 8006d5c:	b12b      	cbz	r3, 8006d6a <_dtoa_r+0x902>
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	3301      	adds	r3, #1
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	f108 0801 	add.w	r8, r8, #1
 8006d68:	2301      	movs	r3, #1
 8006d6a:	9306      	str	r3, [sp, #24]
 8006d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f47f af74 	bne.w	8006c5c <_dtoa_r+0x7f4>
 8006d74:	2001      	movs	r0, #1
 8006d76:	e779      	b.n	8006c6c <_dtoa_r+0x804>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e7f6      	b.n	8006d6a <_dtoa_r+0x902>
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	e7f4      	b.n	8006d6a <_dtoa_r+0x902>
 8006d80:	d085      	beq.n	8006c8e <_dtoa_r+0x826>
 8006d82:	4618      	mov	r0, r3
 8006d84:	301c      	adds	r0, #28
 8006d86:	e77d      	b.n	8006c84 <_dtoa_r+0x81c>
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dc38      	bgt.n	8006e04 <_dtoa_r+0x99c>
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	dd35      	ble.n	8006e04 <_dtoa_r+0x99c>
 8006d98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d9c:	f1b9 0f00 	cmp.w	r9, #0
 8006da0:	d10d      	bne.n	8006dbe <_dtoa_r+0x956>
 8006da2:	4631      	mov	r1, r6
 8006da4:	464b      	mov	r3, r9
 8006da6:	2205      	movs	r2, #5
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fe3f 	bl	8007a2c <__multadd>
 8006dae:	4601      	mov	r1, r0
 8006db0:	4606      	mov	r6, r0
 8006db2:	4658      	mov	r0, fp
 8006db4:	f001 f8a0 	bl	8007ef8 <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f73f adbd 	bgt.w	8006938 <_dtoa_r+0x4d0>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	9d00      	ldr	r5, [sp, #0]
 8006dc2:	ea6f 0a03 	mvn.w	sl, r3
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 fe0b 	bl	80079e8 <_Bfree>
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	f43f aeb4 	beq.w	8006b40 <_dtoa_r+0x6d8>
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d005      	beq.n	8006dea <_dtoa_r+0x982>
 8006dde:	45b8      	cmp	r8, r7
 8006de0:	d003      	beq.n	8006dea <_dtoa_r+0x982>
 8006de2:	4641      	mov	r1, r8
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fdff 	bl	80079e8 <_Bfree>
 8006dea:	4639      	mov	r1, r7
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fdfb 	bl	80079e8 <_Bfree>
 8006df2:	e6a5      	b.n	8006b40 <_dtoa_r+0x6d8>
 8006df4:	2600      	movs	r6, #0
 8006df6:	4637      	mov	r7, r6
 8006df8:	e7e1      	b.n	8006dbe <_dtoa_r+0x956>
 8006dfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006dfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e00:	4637      	mov	r7, r6
 8006e02:	e599      	b.n	8006938 <_dtoa_r+0x4d0>
 8006e04:	9b08      	ldr	r3, [sp, #32]
 8006e06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80fd 	beq.w	800700a <_dtoa_r+0xba2>
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	dd05      	ble.n	8006e20 <_dtoa_r+0x9b8>
 8006e14:	4639      	mov	r1, r7
 8006e16:	462a      	mov	r2, r5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 f801 	bl	8007e20 <__lshift>
 8006e1e:	4607      	mov	r7, r0
 8006e20:	9b06      	ldr	r3, [sp, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d05c      	beq.n	8006ee0 <_dtoa_r+0xa78>
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fd9d 	bl	8007968 <_Balloc>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b928      	cbnz	r0, 8006e3e <_dtoa_r+0x9d6>
 8006e32:	4b80      	ldr	r3, [pc, #512]	; (8007034 <_dtoa_r+0xbcc>)
 8006e34:	4602      	mov	r2, r0
 8006e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e3a:	f7ff bb2e 	b.w	800649a <_dtoa_r+0x32>
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	3202      	adds	r2, #2
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	f107 010c 	add.w	r1, r7, #12
 8006e48:	300c      	adds	r0, #12
 8006e4a:	f000 fd7f 	bl	800794c <memcpy>
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4629      	mov	r1, r5
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 ffe4 	bl	8007e20 <__lshift>
 8006e58:	9b00      	ldr	r3, [sp, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	9b00      	ldr	r3, [sp, #0]
 8006e60:	444b      	add	r3, r9
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	46b8      	mov	r8, r7
 8006e6c:	9306      	str	r3, [sp, #24]
 8006e6e:	4607      	mov	r7, r0
 8006e70:	9b01      	ldr	r3, [sp, #4]
 8006e72:	4631      	mov	r1, r6
 8006e74:	3b01      	subs	r3, #1
 8006e76:	4658      	mov	r0, fp
 8006e78:	9302      	str	r3, [sp, #8]
 8006e7a:	f7ff fa67 	bl	800634c <quorem>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	3330      	adds	r3, #48	; 0x30
 8006e82:	9004      	str	r0, [sp, #16]
 8006e84:	4641      	mov	r1, r8
 8006e86:	4658      	mov	r0, fp
 8006e88:	9308      	str	r3, [sp, #32]
 8006e8a:	f001 f835 	bl	8007ef8 <__mcmp>
 8006e8e:	463a      	mov	r2, r7
 8006e90:	4681      	mov	r9, r0
 8006e92:	4631      	mov	r1, r6
 8006e94:	4620      	mov	r0, r4
 8006e96:	f001 f84b 	bl	8007f30 <__mdiff>
 8006e9a:	68c2      	ldr	r2, [r0, #12]
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	bb02      	cbnz	r2, 8006ee4 <_dtoa_r+0xa7c>
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4658      	mov	r0, fp
 8006ea6:	f001 f827 	bl	8007ef8 <__mcmp>
 8006eaa:	9b08      	ldr	r3, [sp, #32]
 8006eac:	4602      	mov	r2, r0
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006eb6:	f000 fd97 	bl	80079e8 <_Bfree>
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ebe:	9d01      	ldr	r5, [sp, #4]
 8006ec0:	ea43 0102 	orr.w	r1, r3, r2
 8006ec4:	9b06      	ldr	r3, [sp, #24]
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	d10d      	bne.n	8006ee8 <_dtoa_r+0xa80>
 8006ecc:	2b39      	cmp	r3, #57	; 0x39
 8006ece:	d029      	beq.n	8006f24 <_dtoa_r+0xabc>
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	dd01      	ble.n	8006eda <_dtoa_r+0xa72>
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	3331      	adds	r3, #49	; 0x31
 8006eda:	9a02      	ldr	r2, [sp, #8]
 8006edc:	7013      	strb	r3, [r2, #0]
 8006ede:	e774      	b.n	8006dca <_dtoa_r+0x962>
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	e7b9      	b.n	8006e58 <_dtoa_r+0x9f0>
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	e7e2      	b.n	8006eae <_dtoa_r+0xa46>
 8006ee8:	f1b9 0f00 	cmp.w	r9, #0
 8006eec:	db06      	blt.n	8006efc <_dtoa_r+0xa94>
 8006eee:	9905      	ldr	r1, [sp, #20]
 8006ef0:	ea41 0909 	orr.w	r9, r1, r9
 8006ef4:	9906      	ldr	r1, [sp, #24]
 8006ef6:	ea59 0101 	orrs.w	r1, r9, r1
 8006efa:	d120      	bne.n	8006f3e <_dtoa_r+0xad6>
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	ddec      	ble.n	8006eda <_dtoa_r+0xa72>
 8006f00:	4659      	mov	r1, fp
 8006f02:	2201      	movs	r2, #1
 8006f04:	4620      	mov	r0, r4
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f000 ff8a 	bl	8007e20 <__lshift>
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4683      	mov	fp, r0
 8006f10:	f000 fff2 	bl	8007ef8 <__mcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	dc02      	bgt.n	8006f20 <_dtoa_r+0xab8>
 8006f1a:	d1de      	bne.n	8006eda <_dtoa_r+0xa72>
 8006f1c:	07da      	lsls	r2, r3, #31
 8006f1e:	d5dc      	bpl.n	8006eda <_dtoa_r+0xa72>
 8006f20:	2b39      	cmp	r3, #57	; 0x39
 8006f22:	d1d8      	bne.n	8006ed6 <_dtoa_r+0xa6e>
 8006f24:	9a02      	ldr	r2, [sp, #8]
 8006f26:	2339      	movs	r3, #57	; 0x39
 8006f28:	7013      	strb	r3, [r2, #0]
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	461d      	mov	r5, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f34:	2a39      	cmp	r2, #57	; 0x39
 8006f36:	d050      	beq.n	8006fda <_dtoa_r+0xb72>
 8006f38:	3201      	adds	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	e745      	b.n	8006dca <_dtoa_r+0x962>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	dd03      	ble.n	8006f4a <_dtoa_r+0xae2>
 8006f42:	2b39      	cmp	r3, #57	; 0x39
 8006f44:	d0ee      	beq.n	8006f24 <_dtoa_r+0xabc>
 8006f46:	3301      	adds	r3, #1
 8006f48:	e7c7      	b.n	8006eda <_dtoa_r+0xa72>
 8006f4a:	9a01      	ldr	r2, [sp, #4]
 8006f4c:	9907      	ldr	r1, [sp, #28]
 8006f4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f52:	428a      	cmp	r2, r1
 8006f54:	d02a      	beq.n	8006fac <_dtoa_r+0xb44>
 8006f56:	4659      	mov	r1, fp
 8006f58:	2300      	movs	r3, #0
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 fd65 	bl	8007a2c <__multadd>
 8006f62:	45b8      	cmp	r8, r7
 8006f64:	4683      	mov	fp, r0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f04f 020a 	mov.w	r2, #10
 8006f6e:	4641      	mov	r1, r8
 8006f70:	4620      	mov	r0, r4
 8006f72:	d107      	bne.n	8006f84 <_dtoa_r+0xb1c>
 8006f74:	f000 fd5a 	bl	8007a2c <__multadd>
 8006f78:	4680      	mov	r8, r0
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	e775      	b.n	8006e70 <_dtoa_r+0xa08>
 8006f84:	f000 fd52 	bl	8007a2c <__multadd>
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	220a      	movs	r2, #10
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fd4b 	bl	8007a2c <__multadd>
 8006f96:	4607      	mov	r7, r0
 8006f98:	e7f0      	b.n	8006f7c <_dtoa_r+0xb14>
 8006f9a:	f1b9 0f00 	cmp.w	r9, #0
 8006f9e:	9a00      	ldr	r2, [sp, #0]
 8006fa0:	bfcc      	ite	gt
 8006fa2:	464d      	movgt	r5, r9
 8006fa4:	2501      	movle	r5, #1
 8006fa6:	4415      	add	r5, r2
 8006fa8:	f04f 0800 	mov.w	r8, #0
 8006fac:	4659      	mov	r1, fp
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	f000 ff34 	bl	8007e20 <__lshift>
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4683      	mov	fp, r0
 8006fbc:	f000 ff9c 	bl	8007ef8 <__mcmp>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dcb2      	bgt.n	8006f2a <_dtoa_r+0xac2>
 8006fc4:	d102      	bne.n	8006fcc <_dtoa_r+0xb64>
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	07db      	lsls	r3, r3, #31
 8006fca:	d4ae      	bmi.n	8006f2a <_dtoa_r+0xac2>
 8006fcc:	462b      	mov	r3, r5
 8006fce:	461d      	mov	r5, r3
 8006fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd4:	2a30      	cmp	r2, #48	; 0x30
 8006fd6:	d0fa      	beq.n	8006fce <_dtoa_r+0xb66>
 8006fd8:	e6f7      	b.n	8006dca <_dtoa_r+0x962>
 8006fda:	9a00      	ldr	r2, [sp, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d1a5      	bne.n	8006f2c <_dtoa_r+0xac4>
 8006fe0:	f10a 0a01 	add.w	sl, sl, #1
 8006fe4:	2331      	movs	r3, #49	; 0x31
 8006fe6:	e779      	b.n	8006edc <_dtoa_r+0xa74>
 8006fe8:	4b13      	ldr	r3, [pc, #76]	; (8007038 <_dtoa_r+0xbd0>)
 8006fea:	f7ff baaf 	b.w	800654c <_dtoa_r+0xe4>
 8006fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f47f aa86 	bne.w	8006502 <_dtoa_r+0x9a>
 8006ff6:	4b11      	ldr	r3, [pc, #68]	; (800703c <_dtoa_r+0xbd4>)
 8006ff8:	f7ff baa8 	b.w	800654c <_dtoa_r+0xe4>
 8006ffc:	f1b9 0f00 	cmp.w	r9, #0
 8007000:	dc03      	bgt.n	800700a <_dtoa_r+0xba2>
 8007002:	9b05      	ldr	r3, [sp, #20]
 8007004:	2b02      	cmp	r3, #2
 8007006:	f73f aec9 	bgt.w	8006d9c <_dtoa_r+0x934>
 800700a:	9d00      	ldr	r5, [sp, #0]
 800700c:	4631      	mov	r1, r6
 800700e:	4658      	mov	r0, fp
 8007010:	f7ff f99c 	bl	800634c <quorem>
 8007014:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007018:	f805 3b01 	strb.w	r3, [r5], #1
 800701c:	9a00      	ldr	r2, [sp, #0]
 800701e:	1aaa      	subs	r2, r5, r2
 8007020:	4591      	cmp	r9, r2
 8007022:	ddba      	ble.n	8006f9a <_dtoa_r+0xb32>
 8007024:	4659      	mov	r1, fp
 8007026:	2300      	movs	r3, #0
 8007028:	220a      	movs	r2, #10
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fcfe 	bl	8007a2c <__multadd>
 8007030:	4683      	mov	fp, r0
 8007032:	e7eb      	b.n	800700c <_dtoa_r+0xba4>
 8007034:	080093d4 	.word	0x080093d4
 8007038:	080091d0 	.word	0x080091d0
 800703c:	08009351 	.word	0x08009351

08007040 <std>:
 8007040:	2300      	movs	r3, #0
 8007042:	b510      	push	{r4, lr}
 8007044:	4604      	mov	r4, r0
 8007046:	e9c0 3300 	strd	r3, r3, [r0]
 800704a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800704e:	6083      	str	r3, [r0, #8]
 8007050:	8181      	strh	r1, [r0, #12]
 8007052:	6643      	str	r3, [r0, #100]	; 0x64
 8007054:	81c2      	strh	r2, [r0, #14]
 8007056:	6183      	str	r3, [r0, #24]
 8007058:	4619      	mov	r1, r3
 800705a:	2208      	movs	r2, #8
 800705c:	305c      	adds	r0, #92	; 0x5c
 800705e:	f7fd fc01 	bl	8004864 <memset>
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <std+0x38>)
 8007064:	6263      	str	r3, [r4, #36]	; 0x24
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <std+0x3c>)
 8007068:	62a3      	str	r3, [r4, #40]	; 0x28
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <std+0x40>)
 800706c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <std+0x44>)
 8007070:	6224      	str	r4, [r4, #32]
 8007072:	6323      	str	r3, [r4, #48]	; 0x30
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	080089f1 	.word	0x080089f1
 800707c:	08008a13 	.word	0x08008a13
 8007080:	08008a4b 	.word	0x08008a4b
 8007084:	08008a6f 	.word	0x08008a6f

08007088 <_cleanup_r>:
 8007088:	4901      	ldr	r1, [pc, #4]	; (8007090 <_cleanup_r+0x8>)
 800708a:	f000 b8af 	b.w	80071ec <_fwalk_reent>
 800708e:	bf00      	nop
 8007090:	08008dc5 	.word	0x08008dc5

08007094 <__sfmoreglue>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	1e4a      	subs	r2, r1, #1
 8007098:	2568      	movs	r5, #104	; 0x68
 800709a:	4355      	muls	r5, r2
 800709c:	460e      	mov	r6, r1
 800709e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070a2:	f001 f97b 	bl	800839c <_malloc_r>
 80070a6:	4604      	mov	r4, r0
 80070a8:	b140      	cbz	r0, 80070bc <__sfmoreglue+0x28>
 80070aa:	2100      	movs	r1, #0
 80070ac:	e9c0 1600 	strd	r1, r6, [r0]
 80070b0:	300c      	adds	r0, #12
 80070b2:	60a0      	str	r0, [r4, #8]
 80070b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070b8:	f7fd fbd4 	bl	8004864 <memset>
 80070bc:	4620      	mov	r0, r4
 80070be:	bd70      	pop	{r4, r5, r6, pc}

080070c0 <__sfp_lock_acquire>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__sfp_lock_acquire+0x8>)
 80070c2:	f000 bc26 	b.w	8007912 <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	2000039c 	.word	0x2000039c

080070cc <__sfp_lock_release>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__sfp_lock_release+0x8>)
 80070ce:	f000 bc21 	b.w	8007914 <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	2000039c 	.word	0x2000039c

080070d8 <__sinit_lock_acquire>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__sinit_lock_acquire+0x8>)
 80070da:	f000 bc1a 	b.w	8007912 <__retarget_lock_acquire_recursive>
 80070de:	bf00      	nop
 80070e0:	20000397 	.word	0x20000397

080070e4 <__sinit_lock_release>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__sinit_lock_release+0x8>)
 80070e6:	f000 bc15 	b.w	8007914 <__retarget_lock_release_recursive>
 80070ea:	bf00      	nop
 80070ec:	20000397 	.word	0x20000397

080070f0 <__sinit>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	4604      	mov	r4, r0
 80070f4:	f7ff fff0 	bl	80070d8 <__sinit_lock_acquire>
 80070f8:	69a3      	ldr	r3, [r4, #24]
 80070fa:	b11b      	cbz	r3, 8007104 <__sinit+0x14>
 80070fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007100:	f7ff bff0 	b.w	80070e4 <__sinit_lock_release>
 8007104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007108:	6523      	str	r3, [r4, #80]	; 0x50
 800710a:	4b13      	ldr	r3, [pc, #76]	; (8007158 <__sinit+0x68>)
 800710c:	4a13      	ldr	r2, [pc, #76]	; (800715c <__sinit+0x6c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	62a2      	str	r2, [r4, #40]	; 0x28
 8007112:	42a3      	cmp	r3, r4
 8007114:	bf04      	itt	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	61a3      	streq	r3, [r4, #24]
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f820 	bl	8007160 <__sfp>
 8007120:	6060      	str	r0, [r4, #4]
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f81c 	bl	8007160 <__sfp>
 8007128:	60a0      	str	r0, [r4, #8]
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f818 	bl	8007160 <__sfp>
 8007130:	2200      	movs	r2, #0
 8007132:	60e0      	str	r0, [r4, #12]
 8007134:	2104      	movs	r1, #4
 8007136:	6860      	ldr	r0, [r4, #4]
 8007138:	f7ff ff82 	bl	8007040 <std>
 800713c:	68a0      	ldr	r0, [r4, #8]
 800713e:	2201      	movs	r2, #1
 8007140:	2109      	movs	r1, #9
 8007142:	f7ff ff7d 	bl	8007040 <std>
 8007146:	68e0      	ldr	r0, [r4, #12]
 8007148:	2202      	movs	r2, #2
 800714a:	2112      	movs	r1, #18
 800714c:	f7ff ff78 	bl	8007040 <std>
 8007150:	2301      	movs	r3, #1
 8007152:	61a3      	str	r3, [r4, #24]
 8007154:	e7d2      	b.n	80070fc <__sinit+0xc>
 8007156:	bf00      	nop
 8007158:	080091bc 	.word	0x080091bc
 800715c:	08007089 	.word	0x08007089

08007160 <__sfp>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	4607      	mov	r7, r0
 8007164:	f7ff ffac 	bl	80070c0 <__sfp_lock_acquire>
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <__sfp+0x84>)
 800716a:	681e      	ldr	r6, [r3, #0]
 800716c:	69b3      	ldr	r3, [r6, #24]
 800716e:	b913      	cbnz	r3, 8007176 <__sfp+0x16>
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ffbd 	bl	80070f0 <__sinit>
 8007176:	3648      	adds	r6, #72	; 0x48
 8007178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800717c:	3b01      	subs	r3, #1
 800717e:	d503      	bpl.n	8007188 <__sfp+0x28>
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	b30b      	cbz	r3, 80071c8 <__sfp+0x68>
 8007184:	6836      	ldr	r6, [r6, #0]
 8007186:	e7f7      	b.n	8007178 <__sfp+0x18>
 8007188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800718c:	b9d5      	cbnz	r5, 80071c4 <__sfp+0x64>
 800718e:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <__sfp+0x88>)
 8007190:	60e3      	str	r3, [r4, #12]
 8007192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007196:	6665      	str	r5, [r4, #100]	; 0x64
 8007198:	f000 fbba 	bl	8007910 <__retarget_lock_init_recursive>
 800719c:	f7ff ff96 	bl	80070cc <__sfp_lock_release>
 80071a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071a8:	6025      	str	r5, [r4, #0]
 80071aa:	61a5      	str	r5, [r4, #24]
 80071ac:	2208      	movs	r2, #8
 80071ae:	4629      	mov	r1, r5
 80071b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071b4:	f7fd fb56 	bl	8004864 <memset>
 80071b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071c0:	4620      	mov	r0, r4
 80071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c4:	3468      	adds	r4, #104	; 0x68
 80071c6:	e7d9      	b.n	800717c <__sfp+0x1c>
 80071c8:	2104      	movs	r1, #4
 80071ca:	4638      	mov	r0, r7
 80071cc:	f7ff ff62 	bl	8007094 <__sfmoreglue>
 80071d0:	4604      	mov	r4, r0
 80071d2:	6030      	str	r0, [r6, #0]
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1d5      	bne.n	8007184 <__sfp+0x24>
 80071d8:	f7ff ff78 	bl	80070cc <__sfp_lock_release>
 80071dc:	230c      	movs	r3, #12
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	e7ee      	b.n	80071c0 <__sfp+0x60>
 80071e2:	bf00      	nop
 80071e4:	080091bc 	.word	0x080091bc
 80071e8:	ffff0001 	.word	0xffff0001

080071ec <_fwalk_reent>:
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f0:	4606      	mov	r6, r0
 80071f2:	4688      	mov	r8, r1
 80071f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071f8:	2700      	movs	r7, #0
 80071fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007202:	d505      	bpl.n	8007210 <_fwalk_reent+0x24>
 8007204:	6824      	ldr	r4, [r4, #0]
 8007206:	2c00      	cmp	r4, #0
 8007208:	d1f7      	bne.n	80071fa <_fwalk_reent+0xe>
 800720a:	4638      	mov	r0, r7
 800720c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007210:	89ab      	ldrh	r3, [r5, #12]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d907      	bls.n	8007226 <_fwalk_reent+0x3a>
 8007216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800721a:	3301      	adds	r3, #1
 800721c:	d003      	beq.n	8007226 <_fwalk_reent+0x3a>
 800721e:	4629      	mov	r1, r5
 8007220:	4630      	mov	r0, r6
 8007222:	47c0      	blx	r8
 8007224:	4307      	orrs	r7, r0
 8007226:	3568      	adds	r5, #104	; 0x68
 8007228:	e7e9      	b.n	80071fe <_fwalk_reent+0x12>

0800722a <rshift>:
 800722a:	6903      	ldr	r3, [r0, #16]
 800722c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007234:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007238:	f100 0414 	add.w	r4, r0, #20
 800723c:	dd45      	ble.n	80072ca <rshift+0xa0>
 800723e:	f011 011f 	ands.w	r1, r1, #31
 8007242:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007246:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800724a:	d10c      	bne.n	8007266 <rshift+0x3c>
 800724c:	f100 0710 	add.w	r7, r0, #16
 8007250:	4629      	mov	r1, r5
 8007252:	42b1      	cmp	r1, r6
 8007254:	d334      	bcc.n	80072c0 <rshift+0x96>
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	1eea      	subs	r2, r5, #3
 800725c:	4296      	cmp	r6, r2
 800725e:	bf38      	it	cc
 8007260:	2300      	movcc	r3, #0
 8007262:	4423      	add	r3, r4
 8007264:	e015      	b.n	8007292 <rshift+0x68>
 8007266:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800726a:	f1c1 0820 	rsb	r8, r1, #32
 800726e:	40cf      	lsrs	r7, r1
 8007270:	f105 0e04 	add.w	lr, r5, #4
 8007274:	46a1      	mov	r9, r4
 8007276:	4576      	cmp	r6, lr
 8007278:	46f4      	mov	ip, lr
 800727a:	d815      	bhi.n	80072a8 <rshift+0x7e>
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009a      	lsls	r2, r3, #2
 8007280:	3a04      	subs	r2, #4
 8007282:	3501      	adds	r5, #1
 8007284:	42ae      	cmp	r6, r5
 8007286:	bf38      	it	cc
 8007288:	2200      	movcc	r2, #0
 800728a:	18a3      	adds	r3, r4, r2
 800728c:	50a7      	str	r7, [r4, r2]
 800728e:	b107      	cbz	r7, 8007292 <rshift+0x68>
 8007290:	3304      	adds	r3, #4
 8007292:	1b1a      	subs	r2, r3, r4
 8007294:	42a3      	cmp	r3, r4
 8007296:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800729a:	bf08      	it	eq
 800729c:	2300      	moveq	r3, #0
 800729e:	6102      	str	r2, [r0, #16]
 80072a0:	bf08      	it	eq
 80072a2:	6143      	streq	r3, [r0, #20]
 80072a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072a8:	f8dc c000 	ldr.w	ip, [ip]
 80072ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80072b0:	ea4c 0707 	orr.w	r7, ip, r7
 80072b4:	f849 7b04 	str.w	r7, [r9], #4
 80072b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072bc:	40cf      	lsrs	r7, r1
 80072be:	e7da      	b.n	8007276 <rshift+0x4c>
 80072c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80072c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80072c8:	e7c3      	b.n	8007252 <rshift+0x28>
 80072ca:	4623      	mov	r3, r4
 80072cc:	e7e1      	b.n	8007292 <rshift+0x68>

080072ce <__hexdig_fun>:
 80072ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072d2:	2b09      	cmp	r3, #9
 80072d4:	d802      	bhi.n	80072dc <__hexdig_fun+0xe>
 80072d6:	3820      	subs	r0, #32
 80072d8:	b2c0      	uxtb	r0, r0
 80072da:	4770      	bx	lr
 80072dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d801      	bhi.n	80072e8 <__hexdig_fun+0x1a>
 80072e4:	3847      	subs	r0, #71	; 0x47
 80072e6:	e7f7      	b.n	80072d8 <__hexdig_fun+0xa>
 80072e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d801      	bhi.n	80072f4 <__hexdig_fun+0x26>
 80072f0:	3827      	subs	r0, #39	; 0x27
 80072f2:	e7f1      	b.n	80072d8 <__hexdig_fun+0xa>
 80072f4:	2000      	movs	r0, #0
 80072f6:	4770      	bx	lr

080072f8 <__gethex>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	ed2d 8b02 	vpush	{d8}
 8007300:	b089      	sub	sp, #36	; 0x24
 8007302:	ee08 0a10 	vmov	s16, r0
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	4bbc      	ldr	r3, [pc, #752]	; (80075fc <__gethex+0x304>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	4618      	mov	r0, r3
 8007310:	468b      	mov	fp, r1
 8007312:	4690      	mov	r8, r2
 8007314:	f7f8 ff84 	bl	8000220 <strlen>
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	f8db 2000 	ldr.w	r2, [fp]
 800731e:	4403      	add	r3, r0
 8007320:	4682      	mov	sl, r0
 8007322:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	1c93      	adds	r3, r2, #2
 800732a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800732e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007332:	32fe      	adds	r2, #254	; 0xfe
 8007334:	18d1      	adds	r1, r2, r3
 8007336:	461f      	mov	r7, r3
 8007338:	f813 0b01 	ldrb.w	r0, [r3], #1
 800733c:	9100      	str	r1, [sp, #0]
 800733e:	2830      	cmp	r0, #48	; 0x30
 8007340:	d0f8      	beq.n	8007334 <__gethex+0x3c>
 8007342:	f7ff ffc4 	bl	80072ce <__hexdig_fun>
 8007346:	4604      	mov	r4, r0
 8007348:	2800      	cmp	r0, #0
 800734a:	d13a      	bne.n	80073c2 <__gethex+0xca>
 800734c:	9901      	ldr	r1, [sp, #4]
 800734e:	4652      	mov	r2, sl
 8007350:	4638      	mov	r0, r7
 8007352:	f001 fb90 	bl	8008a76 <strncmp>
 8007356:	4605      	mov	r5, r0
 8007358:	2800      	cmp	r0, #0
 800735a:	d168      	bne.n	800742e <__gethex+0x136>
 800735c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007360:	eb07 060a 	add.w	r6, r7, sl
 8007364:	f7ff ffb3 	bl	80072ce <__hexdig_fun>
 8007368:	2800      	cmp	r0, #0
 800736a:	d062      	beq.n	8007432 <__gethex+0x13a>
 800736c:	4633      	mov	r3, r6
 800736e:	7818      	ldrb	r0, [r3, #0]
 8007370:	2830      	cmp	r0, #48	; 0x30
 8007372:	461f      	mov	r7, r3
 8007374:	f103 0301 	add.w	r3, r3, #1
 8007378:	d0f9      	beq.n	800736e <__gethex+0x76>
 800737a:	f7ff ffa8 	bl	80072ce <__hexdig_fun>
 800737e:	2301      	movs	r3, #1
 8007380:	fab0 f480 	clz	r4, r0
 8007384:	0964      	lsrs	r4, r4, #5
 8007386:	4635      	mov	r5, r6
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	463a      	mov	r2, r7
 800738c:	4616      	mov	r6, r2
 800738e:	3201      	adds	r2, #1
 8007390:	7830      	ldrb	r0, [r6, #0]
 8007392:	f7ff ff9c 	bl	80072ce <__hexdig_fun>
 8007396:	2800      	cmp	r0, #0
 8007398:	d1f8      	bne.n	800738c <__gethex+0x94>
 800739a:	9901      	ldr	r1, [sp, #4]
 800739c:	4652      	mov	r2, sl
 800739e:	4630      	mov	r0, r6
 80073a0:	f001 fb69 	bl	8008a76 <strncmp>
 80073a4:	b980      	cbnz	r0, 80073c8 <__gethex+0xd0>
 80073a6:	b94d      	cbnz	r5, 80073bc <__gethex+0xc4>
 80073a8:	eb06 050a 	add.w	r5, r6, sl
 80073ac:	462a      	mov	r2, r5
 80073ae:	4616      	mov	r6, r2
 80073b0:	3201      	adds	r2, #1
 80073b2:	7830      	ldrb	r0, [r6, #0]
 80073b4:	f7ff ff8b 	bl	80072ce <__hexdig_fun>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d1f8      	bne.n	80073ae <__gethex+0xb6>
 80073bc:	1bad      	subs	r5, r5, r6
 80073be:	00ad      	lsls	r5, r5, #2
 80073c0:	e004      	b.n	80073cc <__gethex+0xd4>
 80073c2:	2400      	movs	r4, #0
 80073c4:	4625      	mov	r5, r4
 80073c6:	e7e0      	b.n	800738a <__gethex+0x92>
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	d1f7      	bne.n	80073bc <__gethex+0xc4>
 80073cc:	7833      	ldrb	r3, [r6, #0]
 80073ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073d2:	2b50      	cmp	r3, #80	; 0x50
 80073d4:	d13b      	bne.n	800744e <__gethex+0x156>
 80073d6:	7873      	ldrb	r3, [r6, #1]
 80073d8:	2b2b      	cmp	r3, #43	; 0x2b
 80073da:	d02c      	beq.n	8007436 <__gethex+0x13e>
 80073dc:	2b2d      	cmp	r3, #45	; 0x2d
 80073de:	d02e      	beq.n	800743e <__gethex+0x146>
 80073e0:	1c71      	adds	r1, r6, #1
 80073e2:	f04f 0900 	mov.w	r9, #0
 80073e6:	7808      	ldrb	r0, [r1, #0]
 80073e8:	f7ff ff71 	bl	80072ce <__hexdig_fun>
 80073ec:	1e43      	subs	r3, r0, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b18      	cmp	r3, #24
 80073f2:	d82c      	bhi.n	800744e <__gethex+0x156>
 80073f4:	f1a0 0210 	sub.w	r2, r0, #16
 80073f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073fc:	f7ff ff67 	bl	80072ce <__hexdig_fun>
 8007400:	1e43      	subs	r3, r0, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b18      	cmp	r3, #24
 8007406:	d91d      	bls.n	8007444 <__gethex+0x14c>
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	d000      	beq.n	8007410 <__gethex+0x118>
 800740e:	4252      	negs	r2, r2
 8007410:	4415      	add	r5, r2
 8007412:	f8cb 1000 	str.w	r1, [fp]
 8007416:	b1e4      	cbz	r4, 8007452 <__gethex+0x15a>
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	bf14      	ite	ne
 800741e:	2700      	movne	r7, #0
 8007420:	2706      	moveq	r7, #6
 8007422:	4638      	mov	r0, r7
 8007424:	b009      	add	sp, #36	; 0x24
 8007426:	ecbd 8b02 	vpop	{d8}
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	463e      	mov	r6, r7
 8007430:	4625      	mov	r5, r4
 8007432:	2401      	movs	r4, #1
 8007434:	e7ca      	b.n	80073cc <__gethex+0xd4>
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	1cb1      	adds	r1, r6, #2
 800743c:	e7d3      	b.n	80073e6 <__gethex+0xee>
 800743e:	f04f 0901 	mov.w	r9, #1
 8007442:	e7fa      	b.n	800743a <__gethex+0x142>
 8007444:	230a      	movs	r3, #10
 8007446:	fb03 0202 	mla	r2, r3, r2, r0
 800744a:	3a10      	subs	r2, #16
 800744c:	e7d4      	b.n	80073f8 <__gethex+0x100>
 800744e:	4631      	mov	r1, r6
 8007450:	e7df      	b.n	8007412 <__gethex+0x11a>
 8007452:	1bf3      	subs	r3, r6, r7
 8007454:	3b01      	subs	r3, #1
 8007456:	4621      	mov	r1, r4
 8007458:	2b07      	cmp	r3, #7
 800745a:	dc0b      	bgt.n	8007474 <__gethex+0x17c>
 800745c:	ee18 0a10 	vmov	r0, s16
 8007460:	f000 fa82 	bl	8007968 <_Balloc>
 8007464:	4604      	mov	r4, r0
 8007466:	b940      	cbnz	r0, 800747a <__gethex+0x182>
 8007468:	4b65      	ldr	r3, [pc, #404]	; (8007600 <__gethex+0x308>)
 800746a:	4602      	mov	r2, r0
 800746c:	21de      	movs	r1, #222	; 0xde
 800746e:	4865      	ldr	r0, [pc, #404]	; (8007604 <__gethex+0x30c>)
 8007470:	f001 fbf4 	bl	8008c5c <__assert_func>
 8007474:	3101      	adds	r1, #1
 8007476:	105b      	asrs	r3, r3, #1
 8007478:	e7ee      	b.n	8007458 <__gethex+0x160>
 800747a:	f100 0914 	add.w	r9, r0, #20
 800747e:	f04f 0b00 	mov.w	fp, #0
 8007482:	f1ca 0301 	rsb	r3, sl, #1
 8007486:	f8cd 9008 	str.w	r9, [sp, #8]
 800748a:	f8cd b000 	str.w	fp, [sp]
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	42b7      	cmp	r7, r6
 8007492:	d340      	bcc.n	8007516 <__gethex+0x21e>
 8007494:	9802      	ldr	r0, [sp, #8]
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	f840 3b04 	str.w	r3, [r0], #4
 800749c:	eba0 0009 	sub.w	r0, r0, r9
 80074a0:	1080      	asrs	r0, r0, #2
 80074a2:	0146      	lsls	r6, r0, #5
 80074a4:	6120      	str	r0, [r4, #16]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb54 	bl	8007b54 <__hi0bits>
 80074ac:	1a30      	subs	r0, r6, r0
 80074ae:	f8d8 6000 	ldr.w	r6, [r8]
 80074b2:	42b0      	cmp	r0, r6
 80074b4:	dd63      	ble.n	800757e <__gethex+0x286>
 80074b6:	1b87      	subs	r7, r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 feee 	bl	800829c <__any_on>
 80074c0:	4682      	mov	sl, r0
 80074c2:	b1a8      	cbz	r0, 80074f0 <__gethex+0x1f8>
 80074c4:	1e7b      	subs	r3, r7, #1
 80074c6:	1159      	asrs	r1, r3, #5
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80074d0:	f04f 0a01 	mov.w	sl, #1
 80074d4:	fa0a f202 	lsl.w	r2, sl, r2
 80074d8:	420a      	tst	r2, r1
 80074da:	d009      	beq.n	80074f0 <__gethex+0x1f8>
 80074dc:	4553      	cmp	r3, sl
 80074de:	dd05      	ble.n	80074ec <__gethex+0x1f4>
 80074e0:	1eb9      	subs	r1, r7, #2
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 feda 	bl	800829c <__any_on>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d145      	bne.n	8007578 <__gethex+0x280>
 80074ec:	f04f 0a02 	mov.w	sl, #2
 80074f0:	4639      	mov	r1, r7
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7ff fe99 	bl	800722a <rshift>
 80074f8:	443d      	add	r5, r7
 80074fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074fe:	42ab      	cmp	r3, r5
 8007500:	da4c      	bge.n	800759c <__gethex+0x2a4>
 8007502:	ee18 0a10 	vmov	r0, s16
 8007506:	4621      	mov	r1, r4
 8007508:	f000 fa6e 	bl	80079e8 <_Bfree>
 800750c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800750e:	2300      	movs	r3, #0
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	27a3      	movs	r7, #163	; 0xa3
 8007514:	e785      	b.n	8007422 <__gethex+0x12a>
 8007516:	1e73      	subs	r3, r6, #1
 8007518:	9a05      	ldr	r2, [sp, #20]
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007520:	4293      	cmp	r3, r2
 8007522:	d019      	beq.n	8007558 <__gethex+0x260>
 8007524:	f1bb 0f20 	cmp.w	fp, #32
 8007528:	d107      	bne.n	800753a <__gethex+0x242>
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	9a00      	ldr	r2, [sp, #0]
 800752e:	f843 2b04 	str.w	r2, [r3], #4
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	2300      	movs	r3, #0
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	469b      	mov	fp, r3
 800753a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800753e:	f7ff fec6 	bl	80072ce <__hexdig_fun>
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	f000 000f 	and.w	r0, r0, #15
 8007548:	fa00 f00b 	lsl.w	r0, r0, fp
 800754c:	4303      	orrs	r3, r0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	f10b 0b04 	add.w	fp, fp, #4
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	e00d      	b.n	8007574 <__gethex+0x27c>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	9a06      	ldr	r2, [sp, #24]
 800755c:	4413      	add	r3, r2
 800755e:	42bb      	cmp	r3, r7
 8007560:	d3e0      	bcc.n	8007524 <__gethex+0x22c>
 8007562:	4618      	mov	r0, r3
 8007564:	9901      	ldr	r1, [sp, #4]
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	4652      	mov	r2, sl
 800756a:	f001 fa84 	bl	8008a76 <strncmp>
 800756e:	9b07      	ldr	r3, [sp, #28]
 8007570:	2800      	cmp	r0, #0
 8007572:	d1d7      	bne.n	8007524 <__gethex+0x22c>
 8007574:	461e      	mov	r6, r3
 8007576:	e78b      	b.n	8007490 <__gethex+0x198>
 8007578:	f04f 0a03 	mov.w	sl, #3
 800757c:	e7b8      	b.n	80074f0 <__gethex+0x1f8>
 800757e:	da0a      	bge.n	8007596 <__gethex+0x29e>
 8007580:	1a37      	subs	r7, r6, r0
 8007582:	4621      	mov	r1, r4
 8007584:	ee18 0a10 	vmov	r0, s16
 8007588:	463a      	mov	r2, r7
 800758a:	f000 fc49 	bl	8007e20 <__lshift>
 800758e:	1bed      	subs	r5, r5, r7
 8007590:	4604      	mov	r4, r0
 8007592:	f100 0914 	add.w	r9, r0, #20
 8007596:	f04f 0a00 	mov.w	sl, #0
 800759a:	e7ae      	b.n	80074fa <__gethex+0x202>
 800759c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80075a0:	42a8      	cmp	r0, r5
 80075a2:	dd72      	ble.n	800768a <__gethex+0x392>
 80075a4:	1b45      	subs	r5, r0, r5
 80075a6:	42ae      	cmp	r6, r5
 80075a8:	dc36      	bgt.n	8007618 <__gethex+0x320>
 80075aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d02a      	beq.n	8007608 <__gethex+0x310>
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d02c      	beq.n	8007610 <__gethex+0x318>
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d115      	bne.n	80075e6 <__gethex+0x2ee>
 80075ba:	42ae      	cmp	r6, r5
 80075bc:	d113      	bne.n	80075e6 <__gethex+0x2ee>
 80075be:	2e01      	cmp	r6, #1
 80075c0:	d10b      	bne.n	80075da <__gethex+0x2e2>
 80075c2:	9a04      	ldr	r2, [sp, #16]
 80075c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	2301      	movs	r3, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	f8c9 3000 	str.w	r3, [r9]
 80075d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075d4:	2762      	movs	r7, #98	; 0x62
 80075d6:	601c      	str	r4, [r3, #0]
 80075d8:	e723      	b.n	8007422 <__gethex+0x12a>
 80075da:	1e71      	subs	r1, r6, #1
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 fe5d 	bl	800829c <__any_on>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d1ed      	bne.n	80075c2 <__gethex+0x2ca>
 80075e6:	ee18 0a10 	vmov	r0, s16
 80075ea:	4621      	mov	r1, r4
 80075ec:	f000 f9fc 	bl	80079e8 <_Bfree>
 80075f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075f2:	2300      	movs	r3, #0
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	2750      	movs	r7, #80	; 0x50
 80075f8:	e713      	b.n	8007422 <__gethex+0x12a>
 80075fa:	bf00      	nop
 80075fc:	080094b4 	.word	0x080094b4
 8007600:	080093d4 	.word	0x080093d4
 8007604:	08009448 	.word	0x08009448
 8007608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1eb      	bne.n	80075e6 <__gethex+0x2ee>
 800760e:	e7d8      	b.n	80075c2 <__gethex+0x2ca>
 8007610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1d5      	bne.n	80075c2 <__gethex+0x2ca>
 8007616:	e7e6      	b.n	80075e6 <__gethex+0x2ee>
 8007618:	1e6f      	subs	r7, r5, #1
 800761a:	f1ba 0f00 	cmp.w	sl, #0
 800761e:	d131      	bne.n	8007684 <__gethex+0x38c>
 8007620:	b127      	cbz	r7, 800762c <__gethex+0x334>
 8007622:	4639      	mov	r1, r7
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fe39 	bl	800829c <__any_on>
 800762a:	4682      	mov	sl, r0
 800762c:	117b      	asrs	r3, r7, #5
 800762e:	2101      	movs	r1, #1
 8007630:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007634:	f007 071f 	and.w	r7, r7, #31
 8007638:	fa01 f707 	lsl.w	r7, r1, r7
 800763c:	421f      	tst	r7, r3
 800763e:	4629      	mov	r1, r5
 8007640:	4620      	mov	r0, r4
 8007642:	bf18      	it	ne
 8007644:	f04a 0a02 	orrne.w	sl, sl, #2
 8007648:	1b76      	subs	r6, r6, r5
 800764a:	f7ff fdee 	bl	800722a <rshift>
 800764e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007652:	2702      	movs	r7, #2
 8007654:	f1ba 0f00 	cmp.w	sl, #0
 8007658:	d048      	beq.n	80076ec <__gethex+0x3f4>
 800765a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d015      	beq.n	800768e <__gethex+0x396>
 8007662:	2b03      	cmp	r3, #3
 8007664:	d017      	beq.n	8007696 <__gethex+0x39e>
 8007666:	2b01      	cmp	r3, #1
 8007668:	d109      	bne.n	800767e <__gethex+0x386>
 800766a:	f01a 0f02 	tst.w	sl, #2
 800766e:	d006      	beq.n	800767e <__gethex+0x386>
 8007670:	f8d9 0000 	ldr.w	r0, [r9]
 8007674:	ea4a 0a00 	orr.w	sl, sl, r0
 8007678:	f01a 0f01 	tst.w	sl, #1
 800767c:	d10e      	bne.n	800769c <__gethex+0x3a4>
 800767e:	f047 0710 	orr.w	r7, r7, #16
 8007682:	e033      	b.n	80076ec <__gethex+0x3f4>
 8007684:	f04f 0a01 	mov.w	sl, #1
 8007688:	e7d0      	b.n	800762c <__gethex+0x334>
 800768a:	2701      	movs	r7, #1
 800768c:	e7e2      	b.n	8007654 <__gethex+0x35c>
 800768e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007690:	f1c3 0301 	rsb	r3, r3, #1
 8007694:	9315      	str	r3, [sp, #84]	; 0x54
 8007696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0f0      	beq.n	800767e <__gethex+0x386>
 800769c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80076a0:	f104 0314 	add.w	r3, r4, #20
 80076a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80076a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80076ac:	f04f 0c00 	mov.w	ip, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80076ba:	d01c      	beq.n	80076f6 <__gethex+0x3fe>
 80076bc:	3201      	adds	r2, #1
 80076be:	6002      	str	r2, [r0, #0]
 80076c0:	2f02      	cmp	r7, #2
 80076c2:	f104 0314 	add.w	r3, r4, #20
 80076c6:	d13f      	bne.n	8007748 <__gethex+0x450>
 80076c8:	f8d8 2000 	ldr.w	r2, [r8]
 80076cc:	3a01      	subs	r2, #1
 80076ce:	42b2      	cmp	r2, r6
 80076d0:	d10a      	bne.n	80076e8 <__gethex+0x3f0>
 80076d2:	1171      	asrs	r1, r6, #5
 80076d4:	2201      	movs	r2, #1
 80076d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076da:	f006 061f 	and.w	r6, r6, #31
 80076de:	fa02 f606 	lsl.w	r6, r2, r6
 80076e2:	421e      	tst	r6, r3
 80076e4:	bf18      	it	ne
 80076e6:	4617      	movne	r7, r2
 80076e8:	f047 0720 	orr.w	r7, r7, #32
 80076ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076ee:	601c      	str	r4, [r3, #0]
 80076f0:	9b04      	ldr	r3, [sp, #16]
 80076f2:	601d      	str	r5, [r3, #0]
 80076f4:	e695      	b.n	8007422 <__gethex+0x12a>
 80076f6:	4299      	cmp	r1, r3
 80076f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80076fc:	d8d8      	bhi.n	80076b0 <__gethex+0x3b8>
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	459b      	cmp	fp, r3
 8007702:	db19      	blt.n	8007738 <__gethex+0x440>
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	ee18 0a10 	vmov	r0, s16
 800770a:	3101      	adds	r1, #1
 800770c:	f000 f92c 	bl	8007968 <_Balloc>
 8007710:	4681      	mov	r9, r0
 8007712:	b918      	cbnz	r0, 800771c <__gethex+0x424>
 8007714:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <__gethex+0x488>)
 8007716:	4602      	mov	r2, r0
 8007718:	2184      	movs	r1, #132	; 0x84
 800771a:	e6a8      	b.n	800746e <__gethex+0x176>
 800771c:	6922      	ldr	r2, [r4, #16]
 800771e:	3202      	adds	r2, #2
 8007720:	f104 010c 	add.w	r1, r4, #12
 8007724:	0092      	lsls	r2, r2, #2
 8007726:	300c      	adds	r0, #12
 8007728:	f000 f910 	bl	800794c <memcpy>
 800772c:	4621      	mov	r1, r4
 800772e:	ee18 0a10 	vmov	r0, s16
 8007732:	f000 f959 	bl	80079e8 <_Bfree>
 8007736:	464c      	mov	r4, r9
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007740:	6122      	str	r2, [r4, #16]
 8007742:	2201      	movs	r2, #1
 8007744:	615a      	str	r2, [r3, #20]
 8007746:	e7bb      	b.n	80076c0 <__gethex+0x3c8>
 8007748:	6922      	ldr	r2, [r4, #16]
 800774a:	455a      	cmp	r2, fp
 800774c:	dd0b      	ble.n	8007766 <__gethex+0x46e>
 800774e:	2101      	movs	r1, #1
 8007750:	4620      	mov	r0, r4
 8007752:	f7ff fd6a 	bl	800722a <rshift>
 8007756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800775a:	3501      	adds	r5, #1
 800775c:	42ab      	cmp	r3, r5
 800775e:	f6ff aed0 	blt.w	8007502 <__gethex+0x20a>
 8007762:	2701      	movs	r7, #1
 8007764:	e7c0      	b.n	80076e8 <__gethex+0x3f0>
 8007766:	f016 061f 	ands.w	r6, r6, #31
 800776a:	d0fa      	beq.n	8007762 <__gethex+0x46a>
 800776c:	449a      	add	sl, r3
 800776e:	f1c6 0620 	rsb	r6, r6, #32
 8007772:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007776:	f000 f9ed 	bl	8007b54 <__hi0bits>
 800777a:	42b0      	cmp	r0, r6
 800777c:	dbe7      	blt.n	800774e <__gethex+0x456>
 800777e:	e7f0      	b.n	8007762 <__gethex+0x46a>
 8007780:	080093d4 	.word	0x080093d4

08007784 <L_shift>:
 8007784:	f1c2 0208 	rsb	r2, r2, #8
 8007788:	0092      	lsls	r2, r2, #2
 800778a:	b570      	push	{r4, r5, r6, lr}
 800778c:	f1c2 0620 	rsb	r6, r2, #32
 8007790:	6843      	ldr	r3, [r0, #4]
 8007792:	6804      	ldr	r4, [r0, #0]
 8007794:	fa03 f506 	lsl.w	r5, r3, r6
 8007798:	432c      	orrs	r4, r5
 800779a:	40d3      	lsrs	r3, r2
 800779c:	6004      	str	r4, [r0, #0]
 800779e:	f840 3f04 	str.w	r3, [r0, #4]!
 80077a2:	4288      	cmp	r0, r1
 80077a4:	d3f4      	bcc.n	8007790 <L_shift+0xc>
 80077a6:	bd70      	pop	{r4, r5, r6, pc}

080077a8 <__match>:
 80077a8:	b530      	push	{r4, r5, lr}
 80077aa:	6803      	ldr	r3, [r0, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b2:	b914      	cbnz	r4, 80077ba <__match+0x12>
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	2001      	movs	r0, #1
 80077b8:	bd30      	pop	{r4, r5, pc}
 80077ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80077c2:	2d19      	cmp	r5, #25
 80077c4:	bf98      	it	ls
 80077c6:	3220      	addls	r2, #32
 80077c8:	42a2      	cmp	r2, r4
 80077ca:	d0f0      	beq.n	80077ae <__match+0x6>
 80077cc:	2000      	movs	r0, #0
 80077ce:	e7f3      	b.n	80077b8 <__match+0x10>

080077d0 <__hexnan>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	6801      	ldr	r1, [r0, #0]
 80077d8:	115e      	asrs	r6, r3, #5
 80077da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077de:	f013 031f 	ands.w	r3, r3, #31
 80077e2:	b087      	sub	sp, #28
 80077e4:	bf18      	it	ne
 80077e6:	3604      	addne	r6, #4
 80077e8:	2500      	movs	r5, #0
 80077ea:	1f37      	subs	r7, r6, #4
 80077ec:	4682      	mov	sl, r0
 80077ee:	4690      	mov	r8, r2
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80077f6:	46b9      	mov	r9, r7
 80077f8:	463c      	mov	r4, r7
 80077fa:	9502      	str	r5, [sp, #8]
 80077fc:	46ab      	mov	fp, r5
 80077fe:	784a      	ldrb	r2, [r1, #1]
 8007800:	1c4b      	adds	r3, r1, #1
 8007802:	9303      	str	r3, [sp, #12]
 8007804:	b342      	cbz	r2, 8007858 <__hexnan+0x88>
 8007806:	4610      	mov	r0, r2
 8007808:	9105      	str	r1, [sp, #20]
 800780a:	9204      	str	r2, [sp, #16]
 800780c:	f7ff fd5f 	bl	80072ce <__hexdig_fun>
 8007810:	2800      	cmp	r0, #0
 8007812:	d14f      	bne.n	80078b4 <__hexnan+0xe4>
 8007814:	9a04      	ldr	r2, [sp, #16]
 8007816:	9905      	ldr	r1, [sp, #20]
 8007818:	2a20      	cmp	r2, #32
 800781a:	d818      	bhi.n	800784e <__hexnan+0x7e>
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	459b      	cmp	fp, r3
 8007820:	dd13      	ble.n	800784a <__hexnan+0x7a>
 8007822:	454c      	cmp	r4, r9
 8007824:	d206      	bcs.n	8007834 <__hexnan+0x64>
 8007826:	2d07      	cmp	r5, #7
 8007828:	dc04      	bgt.n	8007834 <__hexnan+0x64>
 800782a:	462a      	mov	r2, r5
 800782c:	4649      	mov	r1, r9
 800782e:	4620      	mov	r0, r4
 8007830:	f7ff ffa8 	bl	8007784 <L_shift>
 8007834:	4544      	cmp	r4, r8
 8007836:	d950      	bls.n	80078da <__hexnan+0x10a>
 8007838:	2300      	movs	r3, #0
 800783a:	f1a4 0904 	sub.w	r9, r4, #4
 800783e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007842:	f8cd b008 	str.w	fp, [sp, #8]
 8007846:	464c      	mov	r4, r9
 8007848:	461d      	mov	r5, r3
 800784a:	9903      	ldr	r1, [sp, #12]
 800784c:	e7d7      	b.n	80077fe <__hexnan+0x2e>
 800784e:	2a29      	cmp	r2, #41	; 0x29
 8007850:	d156      	bne.n	8007900 <__hexnan+0x130>
 8007852:	3102      	adds	r1, #2
 8007854:	f8ca 1000 	str.w	r1, [sl]
 8007858:	f1bb 0f00 	cmp.w	fp, #0
 800785c:	d050      	beq.n	8007900 <__hexnan+0x130>
 800785e:	454c      	cmp	r4, r9
 8007860:	d206      	bcs.n	8007870 <__hexnan+0xa0>
 8007862:	2d07      	cmp	r5, #7
 8007864:	dc04      	bgt.n	8007870 <__hexnan+0xa0>
 8007866:	462a      	mov	r2, r5
 8007868:	4649      	mov	r1, r9
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff ff8a 	bl	8007784 <L_shift>
 8007870:	4544      	cmp	r4, r8
 8007872:	d934      	bls.n	80078de <__hexnan+0x10e>
 8007874:	f1a8 0204 	sub.w	r2, r8, #4
 8007878:	4623      	mov	r3, r4
 800787a:	f853 1b04 	ldr.w	r1, [r3], #4
 800787e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007882:	429f      	cmp	r7, r3
 8007884:	d2f9      	bcs.n	800787a <__hexnan+0xaa>
 8007886:	1b3b      	subs	r3, r7, r4
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	3304      	adds	r3, #4
 800788e:	3401      	adds	r4, #1
 8007890:	3e03      	subs	r6, #3
 8007892:	42b4      	cmp	r4, r6
 8007894:	bf88      	it	hi
 8007896:	2304      	movhi	r3, #4
 8007898:	4443      	add	r3, r8
 800789a:	2200      	movs	r2, #0
 800789c:	f843 2b04 	str.w	r2, [r3], #4
 80078a0:	429f      	cmp	r7, r3
 80078a2:	d2fb      	bcs.n	800789c <__hexnan+0xcc>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	b91b      	cbnz	r3, 80078b0 <__hexnan+0xe0>
 80078a8:	4547      	cmp	r7, r8
 80078aa:	d127      	bne.n	80078fc <__hexnan+0x12c>
 80078ac:	2301      	movs	r3, #1
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	2005      	movs	r0, #5
 80078b2:	e026      	b.n	8007902 <__hexnan+0x132>
 80078b4:	3501      	adds	r5, #1
 80078b6:	2d08      	cmp	r5, #8
 80078b8:	f10b 0b01 	add.w	fp, fp, #1
 80078bc:	dd06      	ble.n	80078cc <__hexnan+0xfc>
 80078be:	4544      	cmp	r4, r8
 80078c0:	d9c3      	bls.n	800784a <__hexnan+0x7a>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80078c8:	2501      	movs	r5, #1
 80078ca:	3c04      	subs	r4, #4
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	f000 000f 	and.w	r0, r0, #15
 80078d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	e7b7      	b.n	800784a <__hexnan+0x7a>
 80078da:	2508      	movs	r5, #8
 80078dc:	e7b5      	b.n	800784a <__hexnan+0x7a>
 80078de:	9b01      	ldr	r3, [sp, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0df      	beq.n	80078a4 <__hexnan+0xd4>
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	f1c3 0320 	rsb	r3, r3, #32
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80078f4:	401a      	ands	r2, r3
 80078f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80078fa:	e7d3      	b.n	80078a4 <__hexnan+0xd4>
 80078fc:	3f04      	subs	r7, #4
 80078fe:	e7d1      	b.n	80078a4 <__hexnan+0xd4>
 8007900:	2004      	movs	r0, #4
 8007902:	b007      	add	sp, #28
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007908 <_localeconv_r>:
 8007908:	4800      	ldr	r0, [pc, #0]	; (800790c <_localeconv_r+0x4>)
 800790a:	4770      	bx	lr
 800790c:	20000164 	.word	0x20000164

08007910 <__retarget_lock_init_recursive>:
 8007910:	4770      	bx	lr

08007912 <__retarget_lock_acquire_recursive>:
 8007912:	4770      	bx	lr

08007914 <__retarget_lock_release_recursive>:
 8007914:	4770      	bx	lr
	...

08007918 <malloc>:
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <malloc+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f000 bd3d 	b.w	800839c <_malloc_r>
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c

08007928 <__ascii_mbtowc>:
 8007928:	b082      	sub	sp, #8
 800792a:	b901      	cbnz	r1, 800792e <__ascii_mbtowc+0x6>
 800792c:	a901      	add	r1, sp, #4
 800792e:	b142      	cbz	r2, 8007942 <__ascii_mbtowc+0x1a>
 8007930:	b14b      	cbz	r3, 8007946 <__ascii_mbtowc+0x1e>
 8007932:	7813      	ldrb	r3, [r2, #0]
 8007934:	600b      	str	r3, [r1, #0]
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	1e10      	subs	r0, r2, #0
 800793a:	bf18      	it	ne
 800793c:	2001      	movne	r0, #1
 800793e:	b002      	add	sp, #8
 8007940:	4770      	bx	lr
 8007942:	4610      	mov	r0, r2
 8007944:	e7fb      	b.n	800793e <__ascii_mbtowc+0x16>
 8007946:	f06f 0001 	mvn.w	r0, #1
 800794a:	e7f8      	b.n	800793e <__ascii_mbtowc+0x16>

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <_Balloc>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800796c:	4604      	mov	r4, r0
 800796e:	460d      	mov	r5, r1
 8007970:	b976      	cbnz	r6, 8007990 <_Balloc+0x28>
 8007972:	2010      	movs	r0, #16
 8007974:	f7ff ffd0 	bl	8007918 <malloc>
 8007978:	4602      	mov	r2, r0
 800797a:	6260      	str	r0, [r4, #36]	; 0x24
 800797c:	b920      	cbnz	r0, 8007988 <_Balloc+0x20>
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <_Balloc+0x78>)
 8007980:	4818      	ldr	r0, [pc, #96]	; (80079e4 <_Balloc+0x7c>)
 8007982:	2166      	movs	r1, #102	; 0x66
 8007984:	f001 f96a 	bl	8008c5c <__assert_func>
 8007988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800798c:	6006      	str	r6, [r0, #0]
 800798e:	60c6      	str	r6, [r0, #12]
 8007990:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007992:	68f3      	ldr	r3, [r6, #12]
 8007994:	b183      	cbz	r3, 80079b8 <_Balloc+0x50>
 8007996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800799e:	b9b8      	cbnz	r0, 80079d0 <_Balloc+0x68>
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f605 	lsl.w	r6, r1, r5
 80079a6:	1d72      	adds	r2, r6, #5
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fc97 	bl	80082de <_calloc_r>
 80079b0:	b160      	cbz	r0, 80079cc <_Balloc+0x64>
 80079b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079b6:	e00e      	b.n	80079d6 <_Balloc+0x6e>
 80079b8:	2221      	movs	r2, #33	; 0x21
 80079ba:	2104      	movs	r1, #4
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fc8e 	bl	80082de <_calloc_r>
 80079c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c4:	60f0      	str	r0, [r6, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e4      	bne.n	8007996 <_Balloc+0x2e>
 80079cc:	2000      	movs	r0, #0
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	6802      	ldr	r2, [r0, #0]
 80079d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079d6:	2300      	movs	r3, #0
 80079d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079dc:	e7f7      	b.n	80079ce <_Balloc+0x66>
 80079de:	bf00      	nop
 80079e0:	0800935e 	.word	0x0800935e
 80079e4:	080094c8 	.word	0x080094c8

080079e8 <_Bfree>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079ec:	4605      	mov	r5, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b976      	cbnz	r6, 8007a10 <_Bfree+0x28>
 80079f2:	2010      	movs	r0, #16
 80079f4:	f7ff ff90 	bl	8007918 <malloc>
 80079f8:	4602      	mov	r2, r0
 80079fa:	6268      	str	r0, [r5, #36]	; 0x24
 80079fc:	b920      	cbnz	r0, 8007a08 <_Bfree+0x20>
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <_Bfree+0x3c>)
 8007a00:	4809      	ldr	r0, [pc, #36]	; (8007a28 <_Bfree+0x40>)
 8007a02:	218a      	movs	r1, #138	; 0x8a
 8007a04:	f001 f92a 	bl	8008c5c <__assert_func>
 8007a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a0c:	6006      	str	r6, [r0, #0]
 8007a0e:	60c6      	str	r6, [r0, #12]
 8007a10:	b13c      	cbz	r4, 8007a22 <_Bfree+0x3a>
 8007a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a14:	6862      	ldr	r2, [r4, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a1c:	6021      	str	r1, [r4, #0]
 8007a1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	0800935e 	.word	0x0800935e
 8007a28:	080094c8 	.word	0x080094c8

08007a2c <__multadd>:
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	690e      	ldr	r6, [r1, #16]
 8007a32:	4607      	mov	r7, r0
 8007a34:	4698      	mov	r8, r3
 8007a36:	460c      	mov	r4, r1
 8007a38:	f101 0014 	add.w	r0, r1, #20
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6805      	ldr	r5, [r0, #0]
 8007a40:	b2a9      	uxth	r1, r5
 8007a42:	fb02 8101 	mla	r1, r2, r1, r8
 8007a46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a4a:	0c2d      	lsrs	r5, r5, #16
 8007a4c:	fb02 c505 	mla	r5, r2, r5, ip
 8007a50:	b289      	uxth	r1, r1
 8007a52:	3301      	adds	r3, #1
 8007a54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a58:	429e      	cmp	r6, r3
 8007a5a:	f840 1b04 	str.w	r1, [r0], #4
 8007a5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a62:	dcec      	bgt.n	8007a3e <__multadd+0x12>
 8007a64:	f1b8 0f00 	cmp.w	r8, #0
 8007a68:	d022      	beq.n	8007ab0 <__multadd+0x84>
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	dc19      	bgt.n	8007aa4 <__multadd+0x78>
 8007a70:	6861      	ldr	r1, [r4, #4]
 8007a72:	4638      	mov	r0, r7
 8007a74:	3101      	adds	r1, #1
 8007a76:	f7ff ff77 	bl	8007968 <_Balloc>
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	b928      	cbnz	r0, 8007a8a <__multadd+0x5e>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <__multadd+0x8c>)
 8007a82:	480e      	ldr	r0, [pc, #56]	; (8007abc <__multadd+0x90>)
 8007a84:	21b5      	movs	r1, #181	; 0xb5
 8007a86:	f001 f8e9 	bl	8008c5c <__assert_func>
 8007a8a:	6922      	ldr	r2, [r4, #16]
 8007a8c:	3202      	adds	r2, #2
 8007a8e:	f104 010c 	add.w	r1, r4, #12
 8007a92:	0092      	lsls	r2, r2, #2
 8007a94:	300c      	adds	r0, #12
 8007a96:	f7ff ff59 	bl	800794c <memcpy>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f7ff ffa3 	bl	80079e8 <_Bfree>
 8007aa2:	462c      	mov	r4, r5
 8007aa4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	f8c3 8014 	str.w	r8, [r3, #20]
 8007aae:	6126      	str	r6, [r4, #16]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab6:	bf00      	nop
 8007ab8:	080093d4 	.word	0x080093d4
 8007abc:	080094c8 	.word	0x080094c8

08007ac0 <__s2b>:
 8007ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	461f      	mov	r7, r3
 8007aca:	2209      	movs	r2, #9
 8007acc:	3308      	adds	r3, #8
 8007ace:	4606      	mov	r6, r0
 8007ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	db09      	blt.n	8007af0 <__s2b+0x30>
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ff43 	bl	8007968 <_Balloc>
 8007ae2:	b940      	cbnz	r0, 8007af6 <__s2b+0x36>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <__s2b+0x8c>)
 8007ae8:	4819      	ldr	r0, [pc, #100]	; (8007b50 <__s2b+0x90>)
 8007aea:	21ce      	movs	r1, #206	; 0xce
 8007aec:	f001 f8b6 	bl	8008c5c <__assert_func>
 8007af0:	0052      	lsls	r2, r2, #1
 8007af2:	3101      	adds	r1, #1
 8007af4:	e7f0      	b.n	8007ad8 <__s2b+0x18>
 8007af6:	9b08      	ldr	r3, [sp, #32]
 8007af8:	6143      	str	r3, [r0, #20]
 8007afa:	2d09      	cmp	r5, #9
 8007afc:	f04f 0301 	mov.w	r3, #1
 8007b00:	6103      	str	r3, [r0, #16]
 8007b02:	dd16      	ble.n	8007b32 <__s2b+0x72>
 8007b04:	f104 0909 	add.w	r9, r4, #9
 8007b08:	46c8      	mov	r8, r9
 8007b0a:	442c      	add	r4, r5
 8007b0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b10:	4601      	mov	r1, r0
 8007b12:	3b30      	subs	r3, #48	; 0x30
 8007b14:	220a      	movs	r2, #10
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7ff ff88 	bl	8007a2c <__multadd>
 8007b1c:	45a0      	cmp	r8, r4
 8007b1e:	d1f5      	bne.n	8007b0c <__s2b+0x4c>
 8007b20:	f1a5 0408 	sub.w	r4, r5, #8
 8007b24:	444c      	add	r4, r9
 8007b26:	1b2d      	subs	r5, r5, r4
 8007b28:	1963      	adds	r3, r4, r5
 8007b2a:	42bb      	cmp	r3, r7
 8007b2c:	db04      	blt.n	8007b38 <__s2b+0x78>
 8007b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b32:	340a      	adds	r4, #10
 8007b34:	2509      	movs	r5, #9
 8007b36:	e7f6      	b.n	8007b26 <__s2b+0x66>
 8007b38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	3b30      	subs	r3, #48	; 0x30
 8007b40:	220a      	movs	r2, #10
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff72 	bl	8007a2c <__multadd>
 8007b48:	e7ee      	b.n	8007b28 <__s2b+0x68>
 8007b4a:	bf00      	nop
 8007b4c:	080093d4 	.word	0x080093d4
 8007b50:	080094c8 	.word	0x080094c8

08007b54 <__hi0bits>:
 8007b54:	0c03      	lsrs	r3, r0, #16
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	b9d3      	cbnz	r3, 8007b90 <__hi0bits+0x3c>
 8007b5a:	0400      	lsls	r0, r0, #16
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b62:	bf04      	itt	eq
 8007b64:	0200      	lsleq	r0, r0, #8
 8007b66:	3308      	addeq	r3, #8
 8007b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b6c:	bf04      	itt	eq
 8007b6e:	0100      	lsleq	r0, r0, #4
 8007b70:	3304      	addeq	r3, #4
 8007b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b76:	bf04      	itt	eq
 8007b78:	0080      	lsleq	r0, r0, #2
 8007b7a:	3302      	addeq	r3, #2
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	db05      	blt.n	8007b8c <__hi0bits+0x38>
 8007b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b84:	f103 0301 	add.w	r3, r3, #1
 8007b88:	bf08      	it	eq
 8007b8a:	2320      	moveq	r3, #32
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	4770      	bx	lr
 8007b90:	2300      	movs	r3, #0
 8007b92:	e7e4      	b.n	8007b5e <__hi0bits+0xa>

08007b94 <__lo0bits>:
 8007b94:	6803      	ldr	r3, [r0, #0]
 8007b96:	f013 0207 	ands.w	r2, r3, #7
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	d00b      	beq.n	8007bb6 <__lo0bits+0x22>
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d424      	bmi.n	8007bec <__lo0bits+0x58>
 8007ba2:	0798      	lsls	r0, r3, #30
 8007ba4:	bf49      	itett	mi
 8007ba6:	085b      	lsrmi	r3, r3, #1
 8007ba8:	089b      	lsrpl	r3, r3, #2
 8007baa:	2001      	movmi	r0, #1
 8007bac:	600b      	strmi	r3, [r1, #0]
 8007bae:	bf5c      	itt	pl
 8007bb0:	600b      	strpl	r3, [r1, #0]
 8007bb2:	2002      	movpl	r0, #2
 8007bb4:	4770      	bx	lr
 8007bb6:	b298      	uxth	r0, r3
 8007bb8:	b9b0      	cbnz	r0, 8007be8 <__lo0bits+0x54>
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007bc2:	bf04      	itt	eq
 8007bc4:	0a1b      	lsreq	r3, r3, #8
 8007bc6:	3008      	addeq	r0, #8
 8007bc8:	071a      	lsls	r2, r3, #28
 8007bca:	bf04      	itt	eq
 8007bcc:	091b      	lsreq	r3, r3, #4
 8007bce:	3004      	addeq	r0, #4
 8007bd0:	079a      	lsls	r2, r3, #30
 8007bd2:	bf04      	itt	eq
 8007bd4:	089b      	lsreq	r3, r3, #2
 8007bd6:	3002      	addeq	r0, #2
 8007bd8:	07da      	lsls	r2, r3, #31
 8007bda:	d403      	bmi.n	8007be4 <__lo0bits+0x50>
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	d005      	beq.n	8007bf0 <__lo0bits+0x5c>
 8007be4:	600b      	str	r3, [r1, #0]
 8007be6:	4770      	bx	lr
 8007be8:	4610      	mov	r0, r2
 8007bea:	e7e8      	b.n	8007bbe <__lo0bits+0x2a>
 8007bec:	2000      	movs	r0, #0
 8007bee:	4770      	bx	lr
 8007bf0:	2020      	movs	r0, #32
 8007bf2:	4770      	bx	lr

08007bf4 <__i2b>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	f7ff feb5 	bl	8007968 <_Balloc>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__i2b+0x1a>
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <__i2b+0x24>)
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <__i2b+0x28>)
 8007c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c0a:	f001 f827 	bl	8008c5c <__assert_func>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	6144      	str	r4, [r0, #20]
 8007c12:	6103      	str	r3, [r0, #16]
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	080093d4 	.word	0x080093d4
 8007c1c:	080094c8 	.word	0x080094c8

08007c20 <__multiply>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4614      	mov	r4, r2
 8007c26:	690a      	ldr	r2, [r1, #16]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	bfb8      	it	lt
 8007c2e:	460b      	movlt	r3, r1
 8007c30:	460d      	mov	r5, r1
 8007c32:	bfbc      	itt	lt
 8007c34:	4625      	movlt	r5, r4
 8007c36:	461c      	movlt	r4, r3
 8007c38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c40:	68ab      	ldr	r3, [r5, #8]
 8007c42:	6869      	ldr	r1, [r5, #4]
 8007c44:	eb0a 0709 	add.w	r7, sl, r9
 8007c48:	42bb      	cmp	r3, r7
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	bfb8      	it	lt
 8007c4e:	3101      	addlt	r1, #1
 8007c50:	f7ff fe8a 	bl	8007968 <_Balloc>
 8007c54:	b930      	cbnz	r0, 8007c64 <__multiply+0x44>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <__multiply+0x144>)
 8007c5a:	4843      	ldr	r0, [pc, #268]	; (8007d68 <__multiply+0x148>)
 8007c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8007c60:	f000 fffc 	bl	8008c5c <__assert_func>
 8007c64:	f100 0614 	add.w	r6, r0, #20
 8007c68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c6c:	4633      	mov	r3, r6
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4543      	cmp	r3, r8
 8007c72:	d31e      	bcc.n	8007cb2 <__multiply+0x92>
 8007c74:	f105 0c14 	add.w	ip, r5, #20
 8007c78:	f104 0314 	add.w	r3, r4, #20
 8007c7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c84:	9202      	str	r2, [sp, #8]
 8007c86:	ebac 0205 	sub.w	r2, ip, r5
 8007c8a:	3a15      	subs	r2, #21
 8007c8c:	f022 0203 	bic.w	r2, r2, #3
 8007c90:	3204      	adds	r2, #4
 8007c92:	f105 0115 	add.w	r1, r5, #21
 8007c96:	458c      	cmp	ip, r1
 8007c98:	bf38      	it	cc
 8007c9a:	2204      	movcc	r2, #4
 8007c9c:	9201      	str	r2, [sp, #4]
 8007c9e:	9a02      	ldr	r2, [sp, #8]
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d808      	bhi.n	8007cb8 <__multiply+0x98>
 8007ca6:	2f00      	cmp	r7, #0
 8007ca8:	dc55      	bgt.n	8007d56 <__multiply+0x136>
 8007caa:	6107      	str	r7, [r0, #16]
 8007cac:	b005      	add	sp, #20
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	f843 2b04 	str.w	r2, [r3], #4
 8007cb6:	e7db      	b.n	8007c70 <__multiply+0x50>
 8007cb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cbc:	f1ba 0f00 	cmp.w	sl, #0
 8007cc0:	d020      	beq.n	8007d04 <__multiply+0xe4>
 8007cc2:	f105 0e14 	add.w	lr, r5, #20
 8007cc6:	46b1      	mov	r9, r6
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007cce:	f8d9 b000 	ldr.w	fp, [r9]
 8007cd2:	b2a1      	uxth	r1, r4
 8007cd4:	fa1f fb8b 	uxth.w	fp, fp
 8007cd8:	fb0a b101 	mla	r1, sl, r1, fp
 8007cdc:	4411      	add	r1, r2
 8007cde:	f8d9 2000 	ldr.w	r2, [r9]
 8007ce2:	0c24      	lsrs	r4, r4, #16
 8007ce4:	0c12      	lsrs	r2, r2, #16
 8007ce6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007cea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007cee:	b289      	uxth	r1, r1
 8007cf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cf4:	45f4      	cmp	ip, lr
 8007cf6:	f849 1b04 	str.w	r1, [r9], #4
 8007cfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007cfe:	d8e4      	bhi.n	8007cca <__multiply+0xaa>
 8007d00:	9901      	ldr	r1, [sp, #4]
 8007d02:	5072      	str	r2, [r6, r1]
 8007d04:	9a03      	ldr	r2, [sp, #12]
 8007d06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	f1b9 0f00 	cmp.w	r9, #0
 8007d10:	d01f      	beq.n	8007d52 <__multiply+0x132>
 8007d12:	6834      	ldr	r4, [r6, #0]
 8007d14:	f105 0114 	add.w	r1, r5, #20
 8007d18:	46b6      	mov	lr, r6
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	880a      	ldrh	r2, [r1, #0]
 8007d20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007d24:	fb09 b202 	mla	r2, r9, r2, fp
 8007d28:	4492      	add	sl, r2
 8007d2a:	b2a4      	uxth	r4, r4
 8007d2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007d30:	f84e 4b04 	str.w	r4, [lr], #4
 8007d34:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d38:	f8be 2000 	ldrh.w	r2, [lr]
 8007d3c:	0c24      	lsrs	r4, r4, #16
 8007d3e:	fb09 2404 	mla	r4, r9, r4, r2
 8007d42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d46:	458c      	cmp	ip, r1
 8007d48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d4c:	d8e7      	bhi.n	8007d1e <__multiply+0xfe>
 8007d4e:	9a01      	ldr	r2, [sp, #4]
 8007d50:	50b4      	str	r4, [r6, r2]
 8007d52:	3604      	adds	r6, #4
 8007d54:	e7a3      	b.n	8007c9e <__multiply+0x7e>
 8007d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1a5      	bne.n	8007caa <__multiply+0x8a>
 8007d5e:	3f01      	subs	r7, #1
 8007d60:	e7a1      	b.n	8007ca6 <__multiply+0x86>
 8007d62:	bf00      	nop
 8007d64:	080093d4 	.word	0x080093d4
 8007d68:	080094c8 	.word	0x080094c8

08007d6c <__pow5mult>:
 8007d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d70:	4615      	mov	r5, r2
 8007d72:	f012 0203 	ands.w	r2, r2, #3
 8007d76:	4606      	mov	r6, r0
 8007d78:	460f      	mov	r7, r1
 8007d7a:	d007      	beq.n	8007d8c <__pow5mult+0x20>
 8007d7c:	4c25      	ldr	r4, [pc, #148]	; (8007e14 <__pow5mult+0xa8>)
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	2300      	movs	r3, #0
 8007d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d86:	f7ff fe51 	bl	8007a2c <__multadd>
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	10ad      	asrs	r5, r5, #2
 8007d8e:	d03d      	beq.n	8007e0c <__pow5mult+0xa0>
 8007d90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d92:	b97c      	cbnz	r4, 8007db4 <__pow5mult+0x48>
 8007d94:	2010      	movs	r0, #16
 8007d96:	f7ff fdbf 	bl	8007918 <malloc>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6270      	str	r0, [r6, #36]	; 0x24
 8007d9e:	b928      	cbnz	r0, 8007dac <__pow5mult+0x40>
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <__pow5mult+0xac>)
 8007da2:	481e      	ldr	r0, [pc, #120]	; (8007e1c <__pow5mult+0xb0>)
 8007da4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007da8:	f000 ff58 	bl	8008c5c <__assert_func>
 8007dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007db0:	6004      	str	r4, [r0, #0]
 8007db2:	60c4      	str	r4, [r0, #12]
 8007db4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dbc:	b94c      	cbnz	r4, 8007dd2 <__pow5mult+0x66>
 8007dbe:	f240 2171 	movw	r1, #625	; 0x271
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ff16 	bl	8007bf4 <__i2b>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dce:	4604      	mov	r4, r0
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	07eb      	lsls	r3, r5, #31
 8007dd8:	d50a      	bpl.n	8007df0 <__pow5mult+0x84>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ff1e 	bl	8007c20 <__multiply>
 8007de4:	4639      	mov	r1, r7
 8007de6:	4680      	mov	r8, r0
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff fdfd 	bl	80079e8 <_Bfree>
 8007dee:	4647      	mov	r7, r8
 8007df0:	106d      	asrs	r5, r5, #1
 8007df2:	d00b      	beq.n	8007e0c <__pow5mult+0xa0>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	b938      	cbnz	r0, 8007e08 <__pow5mult+0x9c>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ff0f 	bl	8007c20 <__multiply>
 8007e02:	6020      	str	r0, [r4, #0]
 8007e04:	f8c0 9000 	str.w	r9, [r0]
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e7e4      	b.n	8007dd6 <__pow5mult+0x6a>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	bf00      	nop
 8007e14:	08009618 	.word	0x08009618
 8007e18:	0800935e 	.word	0x0800935e
 8007e1c:	080094c8 	.word	0x080094c8

08007e20 <__lshift>:
 8007e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	460c      	mov	r4, r1
 8007e26:	6849      	ldr	r1, [r1, #4]
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	4607      	mov	r7, r0
 8007e32:	4691      	mov	r9, r2
 8007e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e38:	f108 0601 	add.w	r6, r8, #1
 8007e3c:	42b3      	cmp	r3, r6
 8007e3e:	db0b      	blt.n	8007e58 <__lshift+0x38>
 8007e40:	4638      	mov	r0, r7
 8007e42:	f7ff fd91 	bl	8007968 <_Balloc>
 8007e46:	4605      	mov	r5, r0
 8007e48:	b948      	cbnz	r0, 8007e5e <__lshift+0x3e>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <__lshift+0xd0>)
 8007e4e:	4829      	ldr	r0, [pc, #164]	; (8007ef4 <__lshift+0xd4>)
 8007e50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e54:	f000 ff02 	bl	8008c5c <__assert_func>
 8007e58:	3101      	adds	r1, #1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	e7ee      	b.n	8007e3c <__lshift+0x1c>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f100 0114 	add.w	r1, r0, #20
 8007e64:	f100 0210 	add.w	r2, r0, #16
 8007e68:	4618      	mov	r0, r3
 8007e6a:	4553      	cmp	r3, sl
 8007e6c:	db33      	blt.n	8007ed6 <__lshift+0xb6>
 8007e6e:	6920      	ldr	r0, [r4, #16]
 8007e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e74:	f104 0314 	add.w	r3, r4, #20
 8007e78:	f019 091f 	ands.w	r9, r9, #31
 8007e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e84:	d02b      	beq.n	8007ede <__lshift+0xbe>
 8007e86:	f1c9 0e20 	rsb	lr, r9, #32
 8007e8a:	468a      	mov	sl, r1
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	fa00 f009 	lsl.w	r0, r0, r9
 8007e94:	4302      	orrs	r2, r0
 8007e96:	f84a 2b04 	str.w	r2, [sl], #4
 8007e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9e:	459c      	cmp	ip, r3
 8007ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ea4:	d8f3      	bhi.n	8007e8e <__lshift+0x6e>
 8007ea6:	ebac 0304 	sub.w	r3, ip, r4
 8007eaa:	3b15      	subs	r3, #21
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	f104 0015 	add.w	r0, r4, #21
 8007eb6:	4584      	cmp	ip, r0
 8007eb8:	bf38      	it	cc
 8007eba:	2304      	movcc	r3, #4
 8007ebc:	50ca      	str	r2, [r1, r3]
 8007ebe:	b10a      	cbz	r2, 8007ec4 <__lshift+0xa4>
 8007ec0:	f108 0602 	add.w	r6, r8, #2
 8007ec4:	3e01      	subs	r6, #1
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	612e      	str	r6, [r5, #16]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	f7ff fd8c 	bl	80079e8 <_Bfree>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eda:	3301      	adds	r3, #1
 8007edc:	e7c5      	b.n	8007e6a <__lshift+0x4a>
 8007ede:	3904      	subs	r1, #4
 8007ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ee8:	459c      	cmp	ip, r3
 8007eea:	d8f9      	bhi.n	8007ee0 <__lshift+0xc0>
 8007eec:	e7ea      	b.n	8007ec4 <__lshift+0xa4>
 8007eee:	bf00      	nop
 8007ef0:	080093d4 	.word	0x080093d4
 8007ef4:	080094c8 	.word	0x080094c8

08007ef8 <__mcmp>:
 8007ef8:	b530      	push	{r4, r5, lr}
 8007efa:	6902      	ldr	r2, [r0, #16]
 8007efc:	690c      	ldr	r4, [r1, #16]
 8007efe:	1b12      	subs	r2, r2, r4
 8007f00:	d10e      	bne.n	8007f20 <__mcmp+0x28>
 8007f02:	f100 0314 	add.w	r3, r0, #20
 8007f06:	3114      	adds	r1, #20
 8007f08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f18:	42a5      	cmp	r5, r4
 8007f1a:	d003      	beq.n	8007f24 <__mcmp+0x2c>
 8007f1c:	d305      	bcc.n	8007f2a <__mcmp+0x32>
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4610      	mov	r0, r2
 8007f22:	bd30      	pop	{r4, r5, pc}
 8007f24:	4283      	cmp	r3, r0
 8007f26:	d3f3      	bcc.n	8007f10 <__mcmp+0x18>
 8007f28:	e7fa      	b.n	8007f20 <__mcmp+0x28>
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2e:	e7f7      	b.n	8007f20 <__mcmp+0x28>

08007f30 <__mdiff>:
 8007f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	4606      	mov	r6, r0
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4617      	mov	r7, r2
 8007f3e:	f7ff ffdb 	bl	8007ef8 <__mcmp>
 8007f42:	1e05      	subs	r5, r0, #0
 8007f44:	d110      	bne.n	8007f68 <__mdiff+0x38>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff fd0d 	bl	8007968 <_Balloc>
 8007f4e:	b930      	cbnz	r0, 8007f5e <__mdiff+0x2e>
 8007f50:	4b39      	ldr	r3, [pc, #228]	; (8008038 <__mdiff+0x108>)
 8007f52:	4602      	mov	r2, r0
 8007f54:	f240 2132 	movw	r1, #562	; 0x232
 8007f58:	4838      	ldr	r0, [pc, #224]	; (800803c <__mdiff+0x10c>)
 8007f5a:	f000 fe7f 	bl	8008c5c <__assert_func>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	bfa4      	itt	ge
 8007f6a:	463b      	movge	r3, r7
 8007f6c:	4627      	movge	r7, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	bfa6      	itte	ge
 8007f74:	461c      	movge	r4, r3
 8007f76:	2500      	movge	r5, #0
 8007f78:	2501      	movlt	r5, #1
 8007f7a:	f7ff fcf5 	bl	8007968 <_Balloc>
 8007f7e:	b920      	cbnz	r0, 8007f8a <__mdiff+0x5a>
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <__mdiff+0x108>)
 8007f82:	4602      	mov	r2, r0
 8007f84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f88:	e7e6      	b.n	8007f58 <__mdiff+0x28>
 8007f8a:	693e      	ldr	r6, [r7, #16]
 8007f8c:	60c5      	str	r5, [r0, #12]
 8007f8e:	6925      	ldr	r5, [r4, #16]
 8007f90:	f107 0114 	add.w	r1, r7, #20
 8007f94:	f104 0914 	add.w	r9, r4, #20
 8007f98:	f100 0e14 	add.w	lr, r0, #20
 8007f9c:	f107 0210 	add.w	r2, r7, #16
 8007fa0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007fa4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007fa8:	46f2      	mov	sl, lr
 8007faa:	2700      	movs	r7, #0
 8007fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fb4:	fa1f f883 	uxth.w	r8, r3
 8007fb8:	fa17 f78b 	uxtah	r7, r7, fp
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	eba7 0808 	sub.w	r8, r7, r8
 8007fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fca:	fa1f f888 	uxth.w	r8, r8
 8007fce:	141f      	asrs	r7, r3, #16
 8007fd0:	454d      	cmp	r5, r9
 8007fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8007fda:	d8e7      	bhi.n	8007fac <__mdiff+0x7c>
 8007fdc:	1b2b      	subs	r3, r5, r4
 8007fde:	3b15      	subs	r3, #21
 8007fe0:	f023 0303 	bic.w	r3, r3, #3
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	3415      	adds	r4, #21
 8007fe8:	42a5      	cmp	r5, r4
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	4419      	add	r1, r3
 8007ff0:	4473      	add	r3, lr
 8007ff2:	469e      	mov	lr, r3
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	4565      	cmp	r5, ip
 8007ff8:	d30e      	bcc.n	8008018 <__mdiff+0xe8>
 8007ffa:	f10c 0203 	add.w	r2, ip, #3
 8007ffe:	1a52      	subs	r2, r2, r1
 8008000:	f022 0203 	bic.w	r2, r2, #3
 8008004:	3903      	subs	r1, #3
 8008006:	458c      	cmp	ip, r1
 8008008:	bf38      	it	cc
 800800a:	2200      	movcc	r2, #0
 800800c:	441a      	add	r2, r3
 800800e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008012:	b17b      	cbz	r3, 8008034 <__mdiff+0x104>
 8008014:	6106      	str	r6, [r0, #16]
 8008016:	e7a5      	b.n	8007f64 <__mdiff+0x34>
 8008018:	f855 8b04 	ldr.w	r8, [r5], #4
 800801c:	fa17 f488 	uxtah	r4, r7, r8
 8008020:	1422      	asrs	r2, r4, #16
 8008022:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008026:	b2a4      	uxth	r4, r4
 8008028:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800802c:	f84e 4b04 	str.w	r4, [lr], #4
 8008030:	1417      	asrs	r7, r2, #16
 8008032:	e7e0      	b.n	8007ff6 <__mdiff+0xc6>
 8008034:	3e01      	subs	r6, #1
 8008036:	e7ea      	b.n	800800e <__mdiff+0xde>
 8008038:	080093d4 	.word	0x080093d4
 800803c:	080094c8 	.word	0x080094c8

08008040 <__ulp>:
 8008040:	b082      	sub	sp, #8
 8008042:	ed8d 0b00 	vstr	d0, [sp]
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	4912      	ldr	r1, [pc, #72]	; (8008094 <__ulp+0x54>)
 800804a:	4019      	ands	r1, r3
 800804c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008050:	2900      	cmp	r1, #0
 8008052:	dd05      	ble.n	8008060 <__ulp+0x20>
 8008054:	2200      	movs	r2, #0
 8008056:	460b      	mov	r3, r1
 8008058:	ec43 2b10 	vmov	d0, r2, r3
 800805c:	b002      	add	sp, #8
 800805e:	4770      	bx	lr
 8008060:	4249      	negs	r1, r1
 8008062:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008066:	ea4f 5021 	mov.w	r0, r1, asr #20
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	da04      	bge.n	800807e <__ulp+0x3e>
 8008074:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008078:	fa41 f300 	asr.w	r3, r1, r0
 800807c:	e7ec      	b.n	8008058 <__ulp+0x18>
 800807e:	f1a0 0114 	sub.w	r1, r0, #20
 8008082:	291e      	cmp	r1, #30
 8008084:	bfda      	itte	le
 8008086:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800808a:	fa20 f101 	lsrle.w	r1, r0, r1
 800808e:	2101      	movgt	r1, #1
 8008090:	460a      	mov	r2, r1
 8008092:	e7e1      	b.n	8008058 <__ulp+0x18>
 8008094:	7ff00000 	.word	0x7ff00000

08008098 <__b2d>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	6905      	ldr	r5, [r0, #16]
 800809c:	f100 0714 	add.w	r7, r0, #20
 80080a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80080a4:	1f2e      	subs	r6, r5, #4
 80080a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff fd52 	bl	8007b54 <__hi0bits>
 80080b0:	f1c0 0320 	rsb	r3, r0, #32
 80080b4:	280a      	cmp	r0, #10
 80080b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008134 <__b2d+0x9c>
 80080ba:	600b      	str	r3, [r1, #0]
 80080bc:	dc14      	bgt.n	80080e8 <__b2d+0x50>
 80080be:	f1c0 0e0b 	rsb	lr, r0, #11
 80080c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80080c6:	42b7      	cmp	r7, r6
 80080c8:	ea41 030c 	orr.w	r3, r1, ip
 80080cc:	bf34      	ite	cc
 80080ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080d2:	2100      	movcs	r1, #0
 80080d4:	3015      	adds	r0, #21
 80080d6:	fa04 f000 	lsl.w	r0, r4, r0
 80080da:	fa21 f10e 	lsr.w	r1, r1, lr
 80080de:	ea40 0201 	orr.w	r2, r0, r1
 80080e2:	ec43 2b10 	vmov	d0, r2, r3
 80080e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e8:	42b7      	cmp	r7, r6
 80080ea:	bf3a      	itte	cc
 80080ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80080f4:	2100      	movcs	r1, #0
 80080f6:	380b      	subs	r0, #11
 80080f8:	d017      	beq.n	800812a <__b2d+0x92>
 80080fa:	f1c0 0c20 	rsb	ip, r0, #32
 80080fe:	fa04 f500 	lsl.w	r5, r4, r0
 8008102:	42be      	cmp	r6, r7
 8008104:	fa21 f40c 	lsr.w	r4, r1, ip
 8008108:	ea45 0504 	orr.w	r5, r5, r4
 800810c:	bf8c      	ite	hi
 800810e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008112:	2400      	movls	r4, #0
 8008114:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008118:	fa01 f000 	lsl.w	r0, r1, r0
 800811c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008120:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008124:	ea40 0204 	orr.w	r2, r0, r4
 8008128:	e7db      	b.n	80080e2 <__b2d+0x4a>
 800812a:	ea44 030c 	orr.w	r3, r4, ip
 800812e:	460a      	mov	r2, r1
 8008130:	e7d7      	b.n	80080e2 <__b2d+0x4a>
 8008132:	bf00      	nop
 8008134:	3ff00000 	.word	0x3ff00000

08008138 <__d2b>:
 8008138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800813c:	4689      	mov	r9, r1
 800813e:	2101      	movs	r1, #1
 8008140:	ec57 6b10 	vmov	r6, r7, d0
 8008144:	4690      	mov	r8, r2
 8008146:	f7ff fc0f 	bl	8007968 <_Balloc>
 800814a:	4604      	mov	r4, r0
 800814c:	b930      	cbnz	r0, 800815c <__d2b+0x24>
 800814e:	4602      	mov	r2, r0
 8008150:	4b25      	ldr	r3, [pc, #148]	; (80081e8 <__d2b+0xb0>)
 8008152:	4826      	ldr	r0, [pc, #152]	; (80081ec <__d2b+0xb4>)
 8008154:	f240 310a 	movw	r1, #778	; 0x30a
 8008158:	f000 fd80 	bl	8008c5c <__assert_func>
 800815c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008164:	bb35      	cbnz	r5, 80081b4 <__d2b+0x7c>
 8008166:	2e00      	cmp	r6, #0
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	d028      	beq.n	80081be <__d2b+0x86>
 800816c:	4668      	mov	r0, sp
 800816e:	9600      	str	r6, [sp, #0]
 8008170:	f7ff fd10 	bl	8007b94 <__lo0bits>
 8008174:	9900      	ldr	r1, [sp, #0]
 8008176:	b300      	cbz	r0, 80081ba <__d2b+0x82>
 8008178:	9a01      	ldr	r2, [sp, #4]
 800817a:	f1c0 0320 	rsb	r3, r0, #32
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	430b      	orrs	r3, r1
 8008184:	40c2      	lsrs	r2, r0
 8008186:	6163      	str	r3, [r4, #20]
 8008188:	9201      	str	r2, [sp, #4]
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	61a3      	str	r3, [r4, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf14      	ite	ne
 8008192:	2202      	movne	r2, #2
 8008194:	2201      	moveq	r2, #1
 8008196:	6122      	str	r2, [r4, #16]
 8008198:	b1d5      	cbz	r5, 80081d0 <__d2b+0x98>
 800819a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800819e:	4405      	add	r5, r0
 80081a0:	f8c9 5000 	str.w	r5, [r9]
 80081a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081a8:	f8c8 0000 	str.w	r0, [r8]
 80081ac:	4620      	mov	r0, r4
 80081ae:	b003      	add	sp, #12
 80081b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081b8:	e7d5      	b.n	8008166 <__d2b+0x2e>
 80081ba:	6161      	str	r1, [r4, #20]
 80081bc:	e7e5      	b.n	800818a <__d2b+0x52>
 80081be:	a801      	add	r0, sp, #4
 80081c0:	f7ff fce8 	bl	8007b94 <__lo0bits>
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	6163      	str	r3, [r4, #20]
 80081c8:	2201      	movs	r2, #1
 80081ca:	6122      	str	r2, [r4, #16]
 80081cc:	3020      	adds	r0, #32
 80081ce:	e7e3      	b.n	8008198 <__d2b+0x60>
 80081d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081d8:	f8c9 0000 	str.w	r0, [r9]
 80081dc:	6918      	ldr	r0, [r3, #16]
 80081de:	f7ff fcb9 	bl	8007b54 <__hi0bits>
 80081e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081e6:	e7df      	b.n	80081a8 <__d2b+0x70>
 80081e8:	080093d4 	.word	0x080093d4
 80081ec:	080094c8 	.word	0x080094c8

080081f0 <__ratio>:
 80081f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4688      	mov	r8, r1
 80081f6:	4669      	mov	r1, sp
 80081f8:	4681      	mov	r9, r0
 80081fa:	f7ff ff4d 	bl	8008098 <__b2d>
 80081fe:	a901      	add	r1, sp, #4
 8008200:	4640      	mov	r0, r8
 8008202:	ec55 4b10 	vmov	r4, r5, d0
 8008206:	f7ff ff47 	bl	8008098 <__b2d>
 800820a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800820e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008212:	eba3 0c02 	sub.w	ip, r3, r2
 8008216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008220:	ec51 0b10 	vmov	r0, r1, d0
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfd6      	itet	le
 8008228:	460a      	movle	r2, r1
 800822a:	462a      	movgt	r2, r5
 800822c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008230:	468b      	mov	fp, r1
 8008232:	462f      	mov	r7, r5
 8008234:	bfd4      	ite	le
 8008236:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800823a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800823e:	4620      	mov	r0, r4
 8008240:	ee10 2a10 	vmov	r2, s0
 8008244:	465b      	mov	r3, fp
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fb28 	bl	800089c <__aeabi_ddiv>
 800824c:	ec41 0b10 	vmov	d0, r0, r1
 8008250:	b003      	add	sp, #12
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008256 <__copybits>:
 8008256:	3901      	subs	r1, #1
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	1149      	asrs	r1, r1, #5
 800825c:	6914      	ldr	r4, [r2, #16]
 800825e:	3101      	adds	r1, #1
 8008260:	f102 0314 	add.w	r3, r2, #20
 8008264:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800826c:	1f05      	subs	r5, r0, #4
 800826e:	42a3      	cmp	r3, r4
 8008270:	d30c      	bcc.n	800828c <__copybits+0x36>
 8008272:	1aa3      	subs	r3, r4, r2
 8008274:	3b11      	subs	r3, #17
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	3211      	adds	r2, #17
 800827c:	42a2      	cmp	r2, r4
 800827e:	bf88      	it	hi
 8008280:	2300      	movhi	r3, #0
 8008282:	4418      	add	r0, r3
 8008284:	2300      	movs	r3, #0
 8008286:	4288      	cmp	r0, r1
 8008288:	d305      	bcc.n	8008296 <__copybits+0x40>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008290:	f845 6f04 	str.w	r6, [r5, #4]!
 8008294:	e7eb      	b.n	800826e <__copybits+0x18>
 8008296:	f840 3b04 	str.w	r3, [r0], #4
 800829a:	e7f4      	b.n	8008286 <__copybits+0x30>

0800829c <__any_on>:
 800829c:	f100 0214 	add.w	r2, r0, #20
 80082a0:	6900      	ldr	r0, [r0, #16]
 80082a2:	114b      	asrs	r3, r1, #5
 80082a4:	4298      	cmp	r0, r3
 80082a6:	b510      	push	{r4, lr}
 80082a8:	db11      	blt.n	80082ce <__any_on+0x32>
 80082aa:	dd0a      	ble.n	80082c2 <__any_on+0x26>
 80082ac:	f011 011f 	ands.w	r1, r1, #31
 80082b0:	d007      	beq.n	80082c2 <__any_on+0x26>
 80082b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082b6:	fa24 f001 	lsr.w	r0, r4, r1
 80082ba:	fa00 f101 	lsl.w	r1, r0, r1
 80082be:	428c      	cmp	r4, r1
 80082c0:	d10b      	bne.n	80082da <__any_on+0x3e>
 80082c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d803      	bhi.n	80082d2 <__any_on+0x36>
 80082ca:	2000      	movs	r0, #0
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	4603      	mov	r3, r0
 80082d0:	e7f7      	b.n	80082c2 <__any_on+0x26>
 80082d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d0f5      	beq.n	80082c6 <__any_on+0x2a>
 80082da:	2001      	movs	r0, #1
 80082dc:	e7f6      	b.n	80082cc <__any_on+0x30>

080082de <_calloc_r>:
 80082de:	b513      	push	{r0, r1, r4, lr}
 80082e0:	434a      	muls	r2, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	9201      	str	r2, [sp, #4]
 80082e6:	f000 f859 	bl	800839c <_malloc_r>
 80082ea:	4604      	mov	r4, r0
 80082ec:	b118      	cbz	r0, 80082f6 <_calloc_r+0x18>
 80082ee:	9a01      	ldr	r2, [sp, #4]
 80082f0:	2100      	movs	r1, #0
 80082f2:	f7fc fab7 	bl	8004864 <memset>
 80082f6:	4620      	mov	r0, r4
 80082f8:	b002      	add	sp, #8
 80082fa:	bd10      	pop	{r4, pc}

080082fc <_free_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	2900      	cmp	r1, #0
 8008300:	d048      	beq.n	8008394 <_free_r+0x98>
 8008302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f1a1 0404 	sub.w	r4, r1, #4
 800830e:	bfb8      	it	lt
 8008310:	18e4      	addlt	r4, r4, r3
 8008312:	f000 fe35 	bl	8008f80 <__malloc_lock>
 8008316:	4a20      	ldr	r2, [pc, #128]	; (8008398 <_free_r+0x9c>)
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	4615      	mov	r5, r2
 800831e:	b933      	cbnz	r3, 800832e <_free_r+0x32>
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6014      	str	r4, [r2, #0]
 8008324:	b003      	add	sp, #12
 8008326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800832a:	f000 be2f 	b.w	8008f8c <__malloc_unlock>
 800832e:	42a3      	cmp	r3, r4
 8008330:	d90b      	bls.n	800834a <_free_r+0x4e>
 8008332:	6821      	ldr	r1, [r4, #0]
 8008334:	1862      	adds	r2, r4, r1
 8008336:	4293      	cmp	r3, r2
 8008338:	bf04      	itt	eq
 800833a:	681a      	ldreq	r2, [r3, #0]
 800833c:	685b      	ldreq	r3, [r3, #4]
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	bf04      	itt	eq
 8008342:	1852      	addeq	r2, r2, r1
 8008344:	6022      	streq	r2, [r4, #0]
 8008346:	602c      	str	r4, [r5, #0]
 8008348:	e7ec      	b.n	8008324 <_free_r+0x28>
 800834a:	461a      	mov	r2, r3
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	b10b      	cbz	r3, 8008354 <_free_r+0x58>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d9fa      	bls.n	800834a <_free_r+0x4e>
 8008354:	6811      	ldr	r1, [r2, #0]
 8008356:	1855      	adds	r5, r2, r1
 8008358:	42a5      	cmp	r5, r4
 800835a:	d10b      	bne.n	8008374 <_free_r+0x78>
 800835c:	6824      	ldr	r4, [r4, #0]
 800835e:	4421      	add	r1, r4
 8008360:	1854      	adds	r4, r2, r1
 8008362:	42a3      	cmp	r3, r4
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	d1dd      	bne.n	8008324 <_free_r+0x28>
 8008368:	681c      	ldr	r4, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	6053      	str	r3, [r2, #4]
 800836e:	4421      	add	r1, r4
 8008370:	6011      	str	r1, [r2, #0]
 8008372:	e7d7      	b.n	8008324 <_free_r+0x28>
 8008374:	d902      	bls.n	800837c <_free_r+0x80>
 8008376:	230c      	movs	r3, #12
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	e7d3      	b.n	8008324 <_free_r+0x28>
 800837c:	6825      	ldr	r5, [r4, #0]
 800837e:	1961      	adds	r1, r4, r5
 8008380:	428b      	cmp	r3, r1
 8008382:	bf04      	itt	eq
 8008384:	6819      	ldreq	r1, [r3, #0]
 8008386:	685b      	ldreq	r3, [r3, #4]
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	bf04      	itt	eq
 800838c:	1949      	addeq	r1, r1, r5
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	6054      	str	r4, [r2, #4]
 8008392:	e7c7      	b.n	8008324 <_free_r+0x28>
 8008394:	b003      	add	sp, #12
 8008396:	bd30      	pop	{r4, r5, pc}
 8008398:	20000208 	.word	0x20000208

0800839c <_malloc_r>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	1ccd      	adds	r5, r1, #3
 80083a0:	f025 0503 	bic.w	r5, r5, #3
 80083a4:	3508      	adds	r5, #8
 80083a6:	2d0c      	cmp	r5, #12
 80083a8:	bf38      	it	cc
 80083aa:	250c      	movcc	r5, #12
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	4606      	mov	r6, r0
 80083b0:	db01      	blt.n	80083b6 <_malloc_r+0x1a>
 80083b2:	42a9      	cmp	r1, r5
 80083b4:	d903      	bls.n	80083be <_malloc_r+0x22>
 80083b6:	230c      	movs	r3, #12
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	2000      	movs	r0, #0
 80083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083be:	f000 fddf 	bl	8008f80 <__malloc_lock>
 80083c2:	4921      	ldr	r1, [pc, #132]	; (8008448 <_malloc_r+0xac>)
 80083c4:	680a      	ldr	r2, [r1, #0]
 80083c6:	4614      	mov	r4, r2
 80083c8:	b99c      	cbnz	r4, 80083f2 <_malloc_r+0x56>
 80083ca:	4f20      	ldr	r7, [pc, #128]	; (800844c <_malloc_r+0xb0>)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	b923      	cbnz	r3, 80083da <_malloc_r+0x3e>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 fafc 	bl	80089d0 <_sbrk_r>
 80083d8:	6038      	str	r0, [r7, #0]
 80083da:	4629      	mov	r1, r5
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 faf7 	bl	80089d0 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d123      	bne.n	800842e <_malloc_r+0x92>
 80083e6:	230c      	movs	r3, #12
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	4630      	mov	r0, r6
 80083ec:	f000 fdce 	bl	8008f8c <__malloc_unlock>
 80083f0:	e7e3      	b.n	80083ba <_malloc_r+0x1e>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	1b5b      	subs	r3, r3, r5
 80083f6:	d417      	bmi.n	8008428 <_malloc_r+0x8c>
 80083f8:	2b0b      	cmp	r3, #11
 80083fa:	d903      	bls.n	8008404 <_malloc_r+0x68>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	441c      	add	r4, r3
 8008400:	6025      	str	r5, [r4, #0]
 8008402:	e004      	b.n	800840e <_malloc_r+0x72>
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	42a2      	cmp	r2, r4
 8008408:	bf0c      	ite	eq
 800840a:	600b      	streq	r3, [r1, #0]
 800840c:	6053      	strne	r3, [r2, #4]
 800840e:	4630      	mov	r0, r6
 8008410:	f000 fdbc 	bl	8008f8c <__malloc_unlock>
 8008414:	f104 000b 	add.w	r0, r4, #11
 8008418:	1d23      	adds	r3, r4, #4
 800841a:	f020 0007 	bic.w	r0, r0, #7
 800841e:	1ac2      	subs	r2, r0, r3
 8008420:	d0cc      	beq.n	80083bc <_malloc_r+0x20>
 8008422:	1a1b      	subs	r3, r3, r0
 8008424:	50a3      	str	r3, [r4, r2]
 8008426:	e7c9      	b.n	80083bc <_malloc_r+0x20>
 8008428:	4622      	mov	r2, r4
 800842a:	6864      	ldr	r4, [r4, #4]
 800842c:	e7cc      	b.n	80083c8 <_malloc_r+0x2c>
 800842e:	1cc4      	adds	r4, r0, #3
 8008430:	f024 0403 	bic.w	r4, r4, #3
 8008434:	42a0      	cmp	r0, r4
 8008436:	d0e3      	beq.n	8008400 <_malloc_r+0x64>
 8008438:	1a21      	subs	r1, r4, r0
 800843a:	4630      	mov	r0, r6
 800843c:	f000 fac8 	bl	80089d0 <_sbrk_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d1dd      	bne.n	8008400 <_malloc_r+0x64>
 8008444:	e7cf      	b.n	80083e6 <_malloc_r+0x4a>
 8008446:	bf00      	nop
 8008448:	20000208 	.word	0x20000208
 800844c:	2000020c 	.word	0x2000020c

08008450 <__ssputs_r>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	688e      	ldr	r6, [r1, #8]
 8008456:	429e      	cmp	r6, r3
 8008458:	4682      	mov	sl, r0
 800845a:	460c      	mov	r4, r1
 800845c:	4690      	mov	r8, r2
 800845e:	461f      	mov	r7, r3
 8008460:	d838      	bhi.n	80084d4 <__ssputs_r+0x84>
 8008462:	898a      	ldrh	r2, [r1, #12]
 8008464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008468:	d032      	beq.n	80084d0 <__ssputs_r+0x80>
 800846a:	6825      	ldr	r5, [r4, #0]
 800846c:	6909      	ldr	r1, [r1, #16]
 800846e:	eba5 0901 	sub.w	r9, r5, r1
 8008472:	6965      	ldr	r5, [r4, #20]
 8008474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800847c:	3301      	adds	r3, #1
 800847e:	444b      	add	r3, r9
 8008480:	106d      	asrs	r5, r5, #1
 8008482:	429d      	cmp	r5, r3
 8008484:	bf38      	it	cc
 8008486:	461d      	movcc	r5, r3
 8008488:	0553      	lsls	r3, r2, #21
 800848a:	d531      	bpl.n	80084f0 <__ssputs_r+0xa0>
 800848c:	4629      	mov	r1, r5
 800848e:	f7ff ff85 	bl	800839c <_malloc_r>
 8008492:	4606      	mov	r6, r0
 8008494:	b950      	cbnz	r0, 80084ac <__ssputs_r+0x5c>
 8008496:	230c      	movs	r3, #12
 8008498:	f8ca 3000 	str.w	r3, [sl]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ac:	6921      	ldr	r1, [r4, #16]
 80084ae:	464a      	mov	r2, r9
 80084b0:	f7ff fa4c 	bl	800794c <memcpy>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	6126      	str	r6, [r4, #16]
 80084c2:	6165      	str	r5, [r4, #20]
 80084c4:	444e      	add	r6, r9
 80084c6:	eba5 0509 	sub.w	r5, r5, r9
 80084ca:	6026      	str	r6, [r4, #0]
 80084cc:	60a5      	str	r5, [r4, #8]
 80084ce:	463e      	mov	r6, r7
 80084d0:	42be      	cmp	r6, r7
 80084d2:	d900      	bls.n	80084d6 <__ssputs_r+0x86>
 80084d4:	463e      	mov	r6, r7
 80084d6:	4632      	mov	r2, r6
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	4641      	mov	r1, r8
 80084dc:	f000 fd36 	bl	8008f4c <memmove>
 80084e0:	68a3      	ldr	r3, [r4, #8]
 80084e2:	6822      	ldr	r2, [r4, #0]
 80084e4:	1b9b      	subs	r3, r3, r6
 80084e6:	4432      	add	r2, r6
 80084e8:	60a3      	str	r3, [r4, #8]
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7db      	b.n	80084a8 <__ssputs_r+0x58>
 80084f0:	462a      	mov	r2, r5
 80084f2:	f000 fd51 	bl	8008f98 <_realloc_r>
 80084f6:	4606      	mov	r6, r0
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d1e1      	bne.n	80084c0 <__ssputs_r+0x70>
 80084fc:	6921      	ldr	r1, [r4, #16]
 80084fe:	4650      	mov	r0, sl
 8008500:	f7ff fefc 	bl	80082fc <_free_r>
 8008504:	e7c7      	b.n	8008496 <__ssputs_r+0x46>
	...

08008508 <_svfiprintf_r>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	4698      	mov	r8, r3
 800850e:	898b      	ldrh	r3, [r1, #12]
 8008510:	061b      	lsls	r3, r3, #24
 8008512:	b09d      	sub	sp, #116	; 0x74
 8008514:	4607      	mov	r7, r0
 8008516:	460d      	mov	r5, r1
 8008518:	4614      	mov	r4, r2
 800851a:	d50e      	bpl.n	800853a <_svfiprintf_r+0x32>
 800851c:	690b      	ldr	r3, [r1, #16]
 800851e:	b963      	cbnz	r3, 800853a <_svfiprintf_r+0x32>
 8008520:	2140      	movs	r1, #64	; 0x40
 8008522:	f7ff ff3b 	bl	800839c <_malloc_r>
 8008526:	6028      	str	r0, [r5, #0]
 8008528:	6128      	str	r0, [r5, #16]
 800852a:	b920      	cbnz	r0, 8008536 <_svfiprintf_r+0x2e>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e0d1      	b.n	80086da <_svfiprintf_r+0x1d2>
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	616b      	str	r3, [r5, #20]
 800853a:	2300      	movs	r3, #0
 800853c:	9309      	str	r3, [sp, #36]	; 0x24
 800853e:	2320      	movs	r3, #32
 8008540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008544:	f8cd 800c 	str.w	r8, [sp, #12]
 8008548:	2330      	movs	r3, #48	; 0x30
 800854a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086f4 <_svfiprintf_r+0x1ec>
 800854e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008552:	f04f 0901 	mov.w	r9, #1
 8008556:	4623      	mov	r3, r4
 8008558:	469a      	mov	sl, r3
 800855a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855e:	b10a      	cbz	r2, 8008564 <_svfiprintf_r+0x5c>
 8008560:	2a25      	cmp	r2, #37	; 0x25
 8008562:	d1f9      	bne.n	8008558 <_svfiprintf_r+0x50>
 8008564:	ebba 0b04 	subs.w	fp, sl, r4
 8008568:	d00b      	beq.n	8008582 <_svfiprintf_r+0x7a>
 800856a:	465b      	mov	r3, fp
 800856c:	4622      	mov	r2, r4
 800856e:	4629      	mov	r1, r5
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff ff6d 	bl	8008450 <__ssputs_r>
 8008576:	3001      	adds	r0, #1
 8008578:	f000 80aa 	beq.w	80086d0 <_svfiprintf_r+0x1c8>
 800857c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857e:	445a      	add	r2, fp
 8008580:	9209      	str	r2, [sp, #36]	; 0x24
 8008582:	f89a 3000 	ldrb.w	r3, [sl]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80a2 	beq.w	80086d0 <_svfiprintf_r+0x1c8>
 800858c:	2300      	movs	r3, #0
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008596:	f10a 0a01 	add.w	sl, sl, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9307      	str	r3, [sp, #28]
 800859e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a2:	931a      	str	r3, [sp, #104]	; 0x68
 80085a4:	4654      	mov	r4, sl
 80085a6:	2205      	movs	r2, #5
 80085a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ac:	4851      	ldr	r0, [pc, #324]	; (80086f4 <_svfiprintf_r+0x1ec>)
 80085ae:	f7f7 fe3f 	bl	8000230 <memchr>
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	b9d8      	cbnz	r0, 80085ee <_svfiprintf_r+0xe6>
 80085b6:	06d0      	lsls	r0, r2, #27
 80085b8:	bf44      	itt	mi
 80085ba:	2320      	movmi	r3, #32
 80085bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c0:	0711      	lsls	r1, r2, #28
 80085c2:	bf44      	itt	mi
 80085c4:	232b      	movmi	r3, #43	; 0x2b
 80085c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ca:	f89a 3000 	ldrb.w	r3, [sl]
 80085ce:	2b2a      	cmp	r3, #42	; 0x2a
 80085d0:	d015      	beq.n	80085fe <_svfiprintf_r+0xf6>
 80085d2:	9a07      	ldr	r2, [sp, #28]
 80085d4:	4654      	mov	r4, sl
 80085d6:	2000      	movs	r0, #0
 80085d8:	f04f 0c0a 	mov.w	ip, #10
 80085dc:	4621      	mov	r1, r4
 80085de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e2:	3b30      	subs	r3, #48	; 0x30
 80085e4:	2b09      	cmp	r3, #9
 80085e6:	d94e      	bls.n	8008686 <_svfiprintf_r+0x17e>
 80085e8:	b1b0      	cbz	r0, 8008618 <_svfiprintf_r+0x110>
 80085ea:	9207      	str	r2, [sp, #28]
 80085ec:	e014      	b.n	8008618 <_svfiprintf_r+0x110>
 80085ee:	eba0 0308 	sub.w	r3, r0, r8
 80085f2:	fa09 f303 	lsl.w	r3, r9, r3
 80085f6:	4313      	orrs	r3, r2
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	46a2      	mov	sl, r4
 80085fc:	e7d2      	b.n	80085a4 <_svfiprintf_r+0x9c>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	1d19      	adds	r1, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9103      	str	r1, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfbb      	ittet	lt
 800860a:	425b      	neglt	r3, r3
 800860c:	f042 0202 	orrlt.w	r2, r2, #2
 8008610:	9307      	strge	r3, [sp, #28]
 8008612:	9307      	strlt	r3, [sp, #28]
 8008614:	bfb8      	it	lt
 8008616:	9204      	strlt	r2, [sp, #16]
 8008618:	7823      	ldrb	r3, [r4, #0]
 800861a:	2b2e      	cmp	r3, #46	; 0x2e
 800861c:	d10c      	bne.n	8008638 <_svfiprintf_r+0x130>
 800861e:	7863      	ldrb	r3, [r4, #1]
 8008620:	2b2a      	cmp	r3, #42	; 0x2a
 8008622:	d135      	bne.n	8008690 <_svfiprintf_r+0x188>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfb8      	it	lt
 8008630:	f04f 33ff 	movlt.w	r3, #4294967295
 8008634:	3402      	adds	r4, #2
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008704 <_svfiprintf_r+0x1fc>
 800863c:	7821      	ldrb	r1, [r4, #0]
 800863e:	2203      	movs	r2, #3
 8008640:	4650      	mov	r0, sl
 8008642:	f7f7 fdf5 	bl	8000230 <memchr>
 8008646:	b140      	cbz	r0, 800865a <_svfiprintf_r+0x152>
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	eba0 000a 	sub.w	r0, r0, sl
 800864e:	fa03 f000 	lsl.w	r0, r3, r0
 8008652:	9b04      	ldr	r3, [sp, #16]
 8008654:	4303      	orrs	r3, r0
 8008656:	3401      	adds	r4, #1
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865e:	4826      	ldr	r0, [pc, #152]	; (80086f8 <_svfiprintf_r+0x1f0>)
 8008660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008664:	2206      	movs	r2, #6
 8008666:	f7f7 fde3 	bl	8000230 <memchr>
 800866a:	2800      	cmp	r0, #0
 800866c:	d038      	beq.n	80086e0 <_svfiprintf_r+0x1d8>
 800866e:	4b23      	ldr	r3, [pc, #140]	; (80086fc <_svfiprintf_r+0x1f4>)
 8008670:	bb1b      	cbnz	r3, 80086ba <_svfiprintf_r+0x1b2>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	3307      	adds	r3, #7
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	3308      	adds	r3, #8
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	4433      	add	r3, r6
 8008682:	9309      	str	r3, [sp, #36]	; 0x24
 8008684:	e767      	b.n	8008556 <_svfiprintf_r+0x4e>
 8008686:	fb0c 3202 	mla	r2, ip, r2, r3
 800868a:	460c      	mov	r4, r1
 800868c:	2001      	movs	r0, #1
 800868e:	e7a5      	b.n	80085dc <_svfiprintf_r+0xd4>
 8008690:	2300      	movs	r3, #0
 8008692:	3401      	adds	r4, #1
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	4619      	mov	r1, r3
 8008698:	f04f 0c0a 	mov.w	ip, #10
 800869c:	4620      	mov	r0, r4
 800869e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a2:	3a30      	subs	r2, #48	; 0x30
 80086a4:	2a09      	cmp	r2, #9
 80086a6:	d903      	bls.n	80086b0 <_svfiprintf_r+0x1a8>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0c5      	beq.n	8008638 <_svfiprintf_r+0x130>
 80086ac:	9105      	str	r1, [sp, #20]
 80086ae:	e7c3      	b.n	8008638 <_svfiprintf_r+0x130>
 80086b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b4:	4604      	mov	r4, r0
 80086b6:	2301      	movs	r3, #1
 80086b8:	e7f0      	b.n	800869c <_svfiprintf_r+0x194>
 80086ba:	ab03      	add	r3, sp, #12
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	462a      	mov	r2, r5
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <_svfiprintf_r+0x1f8>)
 80086c2:	a904      	add	r1, sp, #16
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7fc f975 	bl	80049b4 <_printf_float>
 80086ca:	1c42      	adds	r2, r0, #1
 80086cc:	4606      	mov	r6, r0
 80086ce:	d1d6      	bne.n	800867e <_svfiprintf_r+0x176>
 80086d0:	89ab      	ldrh	r3, [r5, #12]
 80086d2:	065b      	lsls	r3, r3, #25
 80086d4:	f53f af2c 	bmi.w	8008530 <_svfiprintf_r+0x28>
 80086d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086da:	b01d      	add	sp, #116	; 0x74
 80086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	462a      	mov	r2, r5
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <_svfiprintf_r+0x1f8>)
 80086e8:	a904      	add	r1, sp, #16
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7fc fc06 	bl	8004efc <_printf_i>
 80086f0:	e7eb      	b.n	80086ca <_svfiprintf_r+0x1c2>
 80086f2:	bf00      	nop
 80086f4:	08009624 	.word	0x08009624
 80086f8:	0800962e 	.word	0x0800962e
 80086fc:	080049b5 	.word	0x080049b5
 8008700:	08008451 	.word	0x08008451
 8008704:	0800962a 	.word	0x0800962a

08008708 <__sfputc_r>:
 8008708:	6893      	ldr	r3, [r2, #8]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	b410      	push	{r4}
 8008710:	6093      	str	r3, [r2, #8]
 8008712:	da08      	bge.n	8008726 <__sfputc_r+0x1e>
 8008714:	6994      	ldr	r4, [r2, #24]
 8008716:	42a3      	cmp	r3, r4
 8008718:	db01      	blt.n	800871e <__sfputc_r+0x16>
 800871a:	290a      	cmp	r1, #10
 800871c:	d103      	bne.n	8008726 <__sfputc_r+0x1e>
 800871e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008722:	f000 b9bb 	b.w	8008a9c <__swbuf_r>
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	1c58      	adds	r0, r3, #1
 800872a:	6010      	str	r0, [r2, #0]
 800872c:	7019      	strb	r1, [r3, #0]
 800872e:	4608      	mov	r0, r1
 8008730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008734:	4770      	bx	lr

08008736 <__sfputs_r>:
 8008736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4614      	mov	r4, r2
 800873e:	18d5      	adds	r5, r2, r3
 8008740:	42ac      	cmp	r4, r5
 8008742:	d101      	bne.n	8008748 <__sfputs_r+0x12>
 8008744:	2000      	movs	r0, #0
 8008746:	e007      	b.n	8008758 <__sfputs_r+0x22>
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	463a      	mov	r2, r7
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ffda 	bl	8008708 <__sfputc_r>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d1f3      	bne.n	8008740 <__sfputs_r+0xa>
 8008758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800875c <_vfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	460d      	mov	r5, r1
 8008762:	b09d      	sub	sp, #116	; 0x74
 8008764:	4614      	mov	r4, r2
 8008766:	4698      	mov	r8, r3
 8008768:	4606      	mov	r6, r0
 800876a:	b118      	cbz	r0, 8008774 <_vfiprintf_r+0x18>
 800876c:	6983      	ldr	r3, [r0, #24]
 800876e:	b90b      	cbnz	r3, 8008774 <_vfiprintf_r+0x18>
 8008770:	f7fe fcbe 	bl	80070f0 <__sinit>
 8008774:	4b89      	ldr	r3, [pc, #548]	; (800899c <_vfiprintf_r+0x240>)
 8008776:	429d      	cmp	r5, r3
 8008778:	d11b      	bne.n	80087b2 <_vfiprintf_r+0x56>
 800877a:	6875      	ldr	r5, [r6, #4]
 800877c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878a:	f7ff f8c2 	bl	8007912 <__retarget_lock_acquire_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	071b      	lsls	r3, r3, #28
 8008792:	d501      	bpl.n	8008798 <_vfiprintf_r+0x3c>
 8008794:	692b      	ldr	r3, [r5, #16]
 8008796:	b9eb      	cbnz	r3, 80087d4 <_vfiprintf_r+0x78>
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f000 f9f0 	bl	8008b80 <__swsetup_r>
 80087a0:	b1c0      	cbz	r0, 80087d4 <_vfiprintf_r+0x78>
 80087a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a4:	07dc      	lsls	r4, r3, #31
 80087a6:	d50e      	bpl.n	80087c6 <_vfiprintf_r+0x6a>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	b01d      	add	sp, #116	; 0x74
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	4b7b      	ldr	r3, [pc, #492]	; (80089a0 <_vfiprintf_r+0x244>)
 80087b4:	429d      	cmp	r5, r3
 80087b6:	d101      	bne.n	80087bc <_vfiprintf_r+0x60>
 80087b8:	68b5      	ldr	r5, [r6, #8]
 80087ba:	e7df      	b.n	800877c <_vfiprintf_r+0x20>
 80087bc:	4b79      	ldr	r3, [pc, #484]	; (80089a4 <_vfiprintf_r+0x248>)
 80087be:	429d      	cmp	r5, r3
 80087c0:	bf08      	it	eq
 80087c2:	68f5      	ldreq	r5, [r6, #12]
 80087c4:	e7da      	b.n	800877c <_vfiprintf_r+0x20>
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4ed      	bmi.n	80087a8 <_vfiprintf_r+0x4c>
 80087cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ce:	f7ff f8a1 	bl	8007914 <__retarget_lock_release_recursive>
 80087d2:	e7e9      	b.n	80087a8 <_vfiprintf_r+0x4c>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	; 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	2330      	movs	r3, #48	; 0x30
 80087e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089a8 <_vfiprintf_r+0x24c>
 80087e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ec:	f04f 0901 	mov.w	r9, #1
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0xa2>
 80087fa:	2a25      	cmp	r2, #37	; 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x96>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xc0>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ff93 	bl	8008736 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80aa 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	; 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80a2 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800883c:	931a      	str	r3, [sp, #104]	; 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4858      	ldr	r0, [pc, #352]	; (80089a8 <_vfiprintf_r+0x24c>)
 8008848:	f7f7 fcf2 	bl	8000230 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x12c>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	; 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	; 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x13c>
 800886c:	9a07      	ldr	r2, [sp, #28]
 800886e:	4654      	mov	r4, sl
 8008870:	2000      	movs	r0, #0
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	; 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94e      	bls.n	8008920 <_vfiprintf_r+0x1c4>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x156>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x156>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	46a2      	mov	sl, r4
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xe2>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	; 0x2e
 80088b6:	d10c      	bne.n	80088d2 <_vfiprintf_r+0x176>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	; 0x2a
 80088bc:	d135      	bne.n	800892a <_vfiprintf_r+0x1ce>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	9203      	str	r2, [sp, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bfb8      	it	lt
 80088ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ce:	3402      	adds	r4, #2
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089b8 <_vfiprintf_r+0x25c>
 80088d6:	7821      	ldrb	r1, [r4, #0]
 80088d8:	2203      	movs	r2, #3
 80088da:	4650      	mov	r0, sl
 80088dc:	f7f7 fca8 	bl	8000230 <memchr>
 80088e0:	b140      	cbz	r0, 80088f4 <_vfiprintf_r+0x198>
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	eba0 000a 	sub.w	r0, r0, sl
 80088e8:	fa03 f000 	lsl.w	r0, r3, r0
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4303      	orrs	r3, r0
 80088f0:	3401      	adds	r4, #1
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	482c      	ldr	r0, [pc, #176]	; (80089ac <_vfiprintf_r+0x250>)
 80088fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088fe:	2206      	movs	r2, #6
 8008900:	f7f7 fc96 	bl	8000230 <memchr>
 8008904:	2800      	cmp	r0, #0
 8008906:	d03f      	beq.n	8008988 <_vfiprintf_r+0x22c>
 8008908:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <_vfiprintf_r+0x254>)
 800890a:	bb1b      	cbnz	r3, 8008954 <_vfiprintf_r+0x1f8>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	3308      	adds	r3, #8
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	443b      	add	r3, r7
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	e767      	b.n	80087f0 <_vfiprintf_r+0x94>
 8008920:	fb0c 3202 	mla	r2, ip, r2, r3
 8008924:	460c      	mov	r4, r1
 8008926:	2001      	movs	r0, #1
 8008928:	e7a5      	b.n	8008876 <_vfiprintf_r+0x11a>
 800892a:	2300      	movs	r3, #0
 800892c:	3401      	adds	r4, #1
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	4619      	mov	r1, r3
 8008932:	f04f 0c0a 	mov.w	ip, #10
 8008936:	4620      	mov	r0, r4
 8008938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893c:	3a30      	subs	r2, #48	; 0x30
 800893e:	2a09      	cmp	r2, #9
 8008940:	d903      	bls.n	800894a <_vfiprintf_r+0x1ee>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c5      	beq.n	80088d2 <_vfiprintf_r+0x176>
 8008946:	9105      	str	r1, [sp, #20]
 8008948:	e7c3      	b.n	80088d2 <_vfiprintf_r+0x176>
 800894a:	fb0c 2101 	mla	r1, ip, r1, r2
 800894e:	4604      	mov	r4, r0
 8008950:	2301      	movs	r3, #1
 8008952:	e7f0      	b.n	8008936 <_vfiprintf_r+0x1da>
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <_vfiprintf_r+0x258>)
 800895c:	a904      	add	r1, sp, #16
 800895e:	4630      	mov	r0, r6
 8008960:	f7fc f828 	bl	80049b4 <_printf_float>
 8008964:	4607      	mov	r7, r0
 8008966:	1c78      	adds	r0, r7, #1
 8008968:	d1d6      	bne.n	8008918 <_vfiprintf_r+0x1bc>
 800896a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d405      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	059a      	lsls	r2, r3, #22
 8008974:	d402      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008978:	f7fe ffcc 	bl	8007914 <__retarget_lock_release_recursive>
 800897c:	89ab      	ldrh	r3, [r5, #12]
 800897e:	065b      	lsls	r3, r3, #25
 8008980:	f53f af12 	bmi.w	80087a8 <_vfiprintf_r+0x4c>
 8008984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008986:	e711      	b.n	80087ac <_vfiprintf_r+0x50>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <_vfiprintf_r+0x258>)
 8008990:	a904      	add	r1, sp, #16
 8008992:	4630      	mov	r0, r6
 8008994:	f7fc fab2 	bl	8004efc <_printf_i>
 8008998:	e7e4      	b.n	8008964 <_vfiprintf_r+0x208>
 800899a:	bf00      	nop
 800899c:	08009408 	.word	0x08009408
 80089a0:	08009428 	.word	0x08009428
 80089a4:	080093e8 	.word	0x080093e8
 80089a8:	08009624 	.word	0x08009624
 80089ac:	0800962e 	.word	0x0800962e
 80089b0:	080049b5 	.word	0x080049b5
 80089b4:	08008737 	.word	0x08008737
 80089b8:	0800962a 	.word	0x0800962a
 80089bc:	00000000 	.word	0x00000000

080089c0 <nan>:
 80089c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80089c8 <nan+0x8>
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	00000000 	.word	0x00000000
 80089cc:	7ff80000 	.word	0x7ff80000

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_sbrk_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f8 ff3e 	bl	800185c <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	200003a0 	.word	0x200003a0

080089f0 <__sread>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	f000 faf4 	bl	8008fe4 <_read_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bfab      	itete	ge
 8008a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrhlt	r3, [r4, #12]
 8008a04:	181b      	addge	r3, r3, r0
 8008a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0a:	bfac      	ite	ge
 8008a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a0e:	81a3      	strhlt	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__swrite>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	461f      	mov	r7, r3
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	05db      	lsls	r3, r3, #23
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d505      	bpl.n	8008a30 <__swrite+0x1e>
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2302      	movs	r3, #2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f000 fa18 	bl	8008e60 <_lseek_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f000 b889 	b.w	8008b5c <_write_r>

08008a4a <__sseek>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 fa05 	bl	8008e60 <_lseek_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	bf15      	itete	ne
 8008a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strheq	r3, [r4, #12]
 8008a68:	bf18      	it	ne
 8008a6a:	81a3      	strhne	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__sclose>:
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 b911 	b.w	8008c98 <_close_r>

08008a76 <strncmp>:
 8008a76:	b510      	push	{r4, lr}
 8008a78:	b16a      	cbz	r2, 8008a96 <strncmp+0x20>
 8008a7a:	3901      	subs	r1, #1
 8008a7c:	1884      	adds	r4, r0, r2
 8008a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d103      	bne.n	8008a92 <strncmp+0x1c>
 8008a8a:	42a0      	cmp	r0, r4
 8008a8c:	d001      	beq.n	8008a92 <strncmp+0x1c>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f5      	bne.n	8008a7e <strncmp+0x8>
 8008a92:	1a98      	subs	r0, r3, r2
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	4610      	mov	r0, r2
 8008a98:	e7fc      	b.n	8008a94 <strncmp+0x1e>
	...

08008a9c <__swbuf_r>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	460e      	mov	r6, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	b118      	cbz	r0, 8008aae <__swbuf_r+0x12>
 8008aa6:	6983      	ldr	r3, [r0, #24]
 8008aa8:	b90b      	cbnz	r3, 8008aae <__swbuf_r+0x12>
 8008aaa:	f7fe fb21 	bl	80070f0 <__sinit>
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <__swbuf_r+0x98>)
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	d12b      	bne.n	8008b0c <__swbuf_r+0x70>
 8008ab4:	686c      	ldr	r4, [r5, #4]
 8008ab6:	69a3      	ldr	r3, [r4, #24]
 8008ab8:	60a3      	str	r3, [r4, #8]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	071a      	lsls	r2, r3, #28
 8008abe:	d52f      	bpl.n	8008b20 <__swbuf_r+0x84>
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	b36b      	cbz	r3, 8008b20 <__swbuf_r+0x84>
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	6963      	ldr	r3, [r4, #20]
 8008acc:	b2f6      	uxtb	r6, r6
 8008ace:	4283      	cmp	r3, r0
 8008ad0:	4637      	mov	r7, r6
 8008ad2:	dc04      	bgt.n	8008ade <__swbuf_r+0x42>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f974 	bl	8008dc4 <_fflush_r>
 8008adc:	bb30      	cbnz	r0, 8008b2c <__swbuf_r+0x90>
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	701e      	strb	r6, [r3, #0]
 8008aec:	6963      	ldr	r3, [r4, #20]
 8008aee:	3001      	adds	r0, #1
 8008af0:	4283      	cmp	r3, r0
 8008af2:	d004      	beq.n	8008afe <__swbuf_r+0x62>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	07db      	lsls	r3, r3, #31
 8008af8:	d506      	bpl.n	8008b08 <__swbuf_r+0x6c>
 8008afa:	2e0a      	cmp	r6, #10
 8008afc:	d104      	bne.n	8008b08 <__swbuf_r+0x6c>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4628      	mov	r0, r5
 8008b02:	f000 f95f 	bl	8008dc4 <_fflush_r>
 8008b06:	b988      	cbnz	r0, 8008b2c <__swbuf_r+0x90>
 8008b08:	4638      	mov	r0, r7
 8008b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <__swbuf_r+0x9c>)
 8008b0e:	429c      	cmp	r4, r3
 8008b10:	d101      	bne.n	8008b16 <__swbuf_r+0x7a>
 8008b12:	68ac      	ldr	r4, [r5, #8]
 8008b14:	e7cf      	b.n	8008ab6 <__swbuf_r+0x1a>
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <__swbuf_r+0xa0>)
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	bf08      	it	eq
 8008b1c:	68ec      	ldreq	r4, [r5, #12]
 8008b1e:	e7ca      	b.n	8008ab6 <__swbuf_r+0x1a>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f82c 	bl	8008b80 <__swsetup_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d0cb      	beq.n	8008ac4 <__swbuf_r+0x28>
 8008b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b30:	e7ea      	b.n	8008b08 <__swbuf_r+0x6c>
 8008b32:	bf00      	nop
 8008b34:	08009408 	.word	0x08009408
 8008b38:	08009428 	.word	0x08009428
 8008b3c:	080093e8 	.word	0x080093e8

08008b40 <__ascii_wctomb>:
 8008b40:	b149      	cbz	r1, 8008b56 <__ascii_wctomb+0x16>
 8008b42:	2aff      	cmp	r2, #255	; 0xff
 8008b44:	bf85      	ittet	hi
 8008b46:	238a      	movhi	r3, #138	; 0x8a
 8008b48:	6003      	strhi	r3, [r0, #0]
 8008b4a:	700a      	strbls	r2, [r1, #0]
 8008b4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b50:	bf98      	it	ls
 8008b52:	2001      	movls	r0, #1
 8008b54:	4770      	bx	lr
 8008b56:	4608      	mov	r0, r1
 8008b58:	4770      	bx	lr
	...

08008b5c <_write_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_write_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f7f9 f80a 	bl	8001b84 <_write>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_write_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_write_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	200003a0 	.word	0x200003a0

08008b80 <__swsetup_r>:
 8008b80:	4b32      	ldr	r3, [pc, #200]	; (8008c4c <__swsetup_r+0xcc>)
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	681d      	ldr	r5, [r3, #0]
 8008b86:	4606      	mov	r6, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	b125      	cbz	r5, 8008b96 <__swsetup_r+0x16>
 8008b8c:	69ab      	ldr	r3, [r5, #24]
 8008b8e:	b913      	cbnz	r3, 8008b96 <__swsetup_r+0x16>
 8008b90:	4628      	mov	r0, r5
 8008b92:	f7fe faad 	bl	80070f0 <__sinit>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <__swsetup_r+0xd0>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	d10f      	bne.n	8008bbc <__swsetup_r+0x3c>
 8008b9c:	686c      	ldr	r4, [r5, #4]
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba4:	0719      	lsls	r1, r3, #28
 8008ba6:	d42c      	bmi.n	8008c02 <__swsetup_r+0x82>
 8008ba8:	06dd      	lsls	r5, r3, #27
 8008baa:	d411      	bmi.n	8008bd0 <__swsetup_r+0x50>
 8008bac:	2309      	movs	r3, #9
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	e03e      	b.n	8008c3a <__swsetup_r+0xba>
 8008bbc:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <__swsetup_r+0xd4>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d101      	bne.n	8008bc6 <__swsetup_r+0x46>
 8008bc2:	68ac      	ldr	r4, [r5, #8]
 8008bc4:	e7eb      	b.n	8008b9e <__swsetup_r+0x1e>
 8008bc6:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <__swsetup_r+0xd8>)
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	bf08      	it	eq
 8008bcc:	68ec      	ldreq	r4, [r5, #12]
 8008bce:	e7e6      	b.n	8008b9e <__swsetup_r+0x1e>
 8008bd0:	0758      	lsls	r0, r3, #29
 8008bd2:	d512      	bpl.n	8008bfa <__swsetup_r+0x7a>
 8008bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd6:	b141      	cbz	r1, 8008bea <__swsetup_r+0x6a>
 8008bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	d002      	beq.n	8008be6 <__swsetup_r+0x66>
 8008be0:	4630      	mov	r0, r6
 8008be2:	f7ff fb8b 	bl	80082fc <_free_r>
 8008be6:	2300      	movs	r3, #0
 8008be8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f043 0308 	orr.w	r3, r3, #8
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	b94b      	cbnz	r3, 8008c1a <__swsetup_r+0x9a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c10:	d003      	beq.n	8008c1a <__swsetup_r+0x9a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f959 	bl	8008ecc <__smakebuf_r>
 8008c1a:	89a0      	ldrh	r0, [r4, #12]
 8008c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c20:	f010 0301 	ands.w	r3, r0, #1
 8008c24:	d00a      	beq.n	8008c3c <__swsetup_r+0xbc>
 8008c26:	2300      	movs	r3, #0
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	6963      	ldr	r3, [r4, #20]
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	61a3      	str	r3, [r4, #24]
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	b943      	cbnz	r3, 8008c46 <__swsetup_r+0xc6>
 8008c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c38:	d1ba      	bne.n	8008bb0 <__swsetup_r+0x30>
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	0781      	lsls	r1, r0, #30
 8008c3e:	bf58      	it	pl
 8008c40:	6963      	ldrpl	r3, [r4, #20]
 8008c42:	60a3      	str	r3, [r4, #8]
 8008c44:	e7f4      	b.n	8008c30 <__swsetup_r+0xb0>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e7f7      	b.n	8008c3a <__swsetup_r+0xba>
 8008c4a:	bf00      	nop
 8008c4c:	2000000c 	.word	0x2000000c
 8008c50:	08009408 	.word	0x08009408
 8008c54:	08009428 	.word	0x08009428
 8008c58:	080093e8 	.word	0x080093e8

08008c5c <__assert_func>:
 8008c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c5e:	4614      	mov	r4, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <__assert_func+0x2c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4605      	mov	r5, r0
 8008c68:	68d8      	ldr	r0, [r3, #12]
 8008c6a:	b14c      	cbz	r4, 8008c80 <__assert_func+0x24>
 8008c6c:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <__assert_func+0x30>)
 8008c6e:	9100      	str	r1, [sp, #0]
 8008c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c74:	4906      	ldr	r1, [pc, #24]	; (8008c90 <__assert_func+0x34>)
 8008c76:	462b      	mov	r3, r5
 8008c78:	f000 f8e0 	bl	8008e3c <fiprintf>
 8008c7c:	f000 f9c4 	bl	8009008 <abort>
 8008c80:	4b04      	ldr	r3, [pc, #16]	; (8008c94 <__assert_func+0x38>)
 8008c82:	461c      	mov	r4, r3
 8008c84:	e7f3      	b.n	8008c6e <__assert_func+0x12>
 8008c86:	bf00      	nop
 8008c88:	2000000c 	.word	0x2000000c
 8008c8c:	08009635 	.word	0x08009635
 8008c90:	08009642 	.word	0x08009642
 8008c94:	08009670 	.word	0x08009670

08008c98 <_close_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_close_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 fda5 	bl	80017f2 <_close>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_close_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_close_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200003a0 	.word	0x200003a0

08008cb8 <__sflush_r>:
 8008cb8:	898a      	ldrh	r2, [r1, #12]
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	0710      	lsls	r0, r2, #28
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	d458      	bmi.n	8008d78 <__sflush_r+0xc0>
 8008cc6:	684b      	ldr	r3, [r1, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dc05      	bgt.n	8008cd8 <__sflush_r+0x20>
 8008ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dc02      	bgt.n	8008cd8 <__sflush_r+0x20>
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	d0f9      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce4:	682f      	ldr	r7, [r5, #0]
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	d032      	beq.n	8008d50 <__sflush_r+0x98>
 8008cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	075a      	lsls	r2, r3, #29
 8008cf0:	d505      	bpl.n	8008cfe <__sflush_r+0x46>
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	1ac0      	subs	r0, r0, r3
 8008cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cf8:	b10b      	cbz	r3, 8008cfe <__sflush_r+0x46>
 8008cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4602      	mov	r2, r0
 8008d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d04:	6a21      	ldr	r1, [r4, #32]
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b0      	blx	r6
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	d106      	bne.n	8008d1e <__sflush_r+0x66>
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	291d      	cmp	r1, #29
 8008d14:	d82c      	bhi.n	8008d70 <__sflush_r+0xb8>
 8008d16:	4a2a      	ldr	r2, [pc, #168]	; (8008dc0 <__sflush_r+0x108>)
 8008d18:	40ca      	lsrs	r2, r1
 8008d1a:	07d6      	lsls	r6, r2, #31
 8008d1c:	d528      	bpl.n	8008d70 <__sflush_r+0xb8>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6062      	str	r2, [r4, #4]
 8008d22:	04d9      	lsls	r1, r3, #19
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	d504      	bpl.n	8008d34 <__sflush_r+0x7c>
 8008d2a:	1c42      	adds	r2, r0, #1
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0x7a>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b903      	cbnz	r3, 8008d34 <__sflush_r+0x7c>
 8008d32:	6560      	str	r0, [r4, #84]	; 0x54
 8008d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	d0ca      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d40:	4299      	cmp	r1, r3
 8008d42:	d002      	beq.n	8008d4a <__sflush_r+0x92>
 8008d44:	4628      	mov	r0, r5
 8008d46:	f7ff fad9 	bl	80082fc <_free_r>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d4e:	e7c1      	b.n	8008cd4 <__sflush_r+0x1c>
 8008d50:	6a21      	ldr	r1, [r4, #32]
 8008d52:	2301      	movs	r3, #1
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b0      	blx	r6
 8008d58:	1c41      	adds	r1, r0, #1
 8008d5a:	d1c7      	bne.n	8008cec <__sflush_r+0x34>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c4      	beq.n	8008cec <__sflush_r+0x34>
 8008d62:	2b1d      	cmp	r3, #29
 8008d64:	d001      	beq.n	8008d6a <__sflush_r+0xb2>
 8008d66:	2b16      	cmp	r3, #22
 8008d68:	d101      	bne.n	8008d6e <__sflush_r+0xb6>
 8008d6a:	602f      	str	r7, [r5, #0]
 8008d6c:	e7b1      	b.n	8008cd2 <__sflush_r+0x1a>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	e7ad      	b.n	8008cd4 <__sflush_r+0x1c>
 8008d78:	690f      	ldr	r7, [r1, #16]
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	d0a9      	beq.n	8008cd2 <__sflush_r+0x1a>
 8008d7e:	0793      	lsls	r3, r2, #30
 8008d80:	680e      	ldr	r6, [r1, #0]
 8008d82:	bf08      	it	eq
 8008d84:	694b      	ldreq	r3, [r1, #20]
 8008d86:	600f      	str	r7, [r1, #0]
 8008d88:	bf18      	it	ne
 8008d8a:	2300      	movne	r3, #0
 8008d8c:	eba6 0807 	sub.w	r8, r6, r7
 8008d90:	608b      	str	r3, [r1, #8]
 8008d92:	f1b8 0f00 	cmp.w	r8, #0
 8008d96:	dd9c      	ble.n	8008cd2 <__sflush_r+0x1a>
 8008d98:	6a21      	ldr	r1, [r4, #32]
 8008d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d9c:	4643      	mov	r3, r8
 8008d9e:	463a      	mov	r2, r7
 8008da0:	4628      	mov	r0, r5
 8008da2:	47b0      	blx	r6
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dc06      	bgt.n	8008db6 <__sflush_r+0xfe>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	e78e      	b.n	8008cd4 <__sflush_r+0x1c>
 8008db6:	4407      	add	r7, r0
 8008db8:	eba8 0800 	sub.w	r8, r8, r0
 8008dbc:	e7e9      	b.n	8008d92 <__sflush_r+0xda>
 8008dbe:	bf00      	nop
 8008dc0:	20400001 	.word	0x20400001

08008dc4 <_fflush_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	690b      	ldr	r3, [r1, #16]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b913      	cbnz	r3, 8008dd4 <_fflush_r+0x10>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	b118      	cbz	r0, 8008dde <_fflush_r+0x1a>
 8008dd6:	6983      	ldr	r3, [r0, #24]
 8008dd8:	b90b      	cbnz	r3, 8008dde <_fflush_r+0x1a>
 8008dda:	f7fe f989 	bl	80070f0 <__sinit>
 8008dde:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <_fflush_r+0x6c>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	d11b      	bne.n	8008e1c <_fflush_r+0x58>
 8008de4:	686c      	ldr	r4, [r5, #4]
 8008de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0ef      	beq.n	8008dce <_fflush_r+0xa>
 8008dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008df0:	07d0      	lsls	r0, r2, #31
 8008df2:	d404      	bmi.n	8008dfe <_fflush_r+0x3a>
 8008df4:	0599      	lsls	r1, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_fflush_r+0x3a>
 8008df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfa:	f7fe fd8a 	bl	8007912 <__retarget_lock_acquire_recursive>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	4621      	mov	r1, r4
 8008e02:	f7ff ff59 	bl	8008cb8 <__sflush_r>
 8008e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e08:	07da      	lsls	r2, r3, #31
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	d4e0      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	059b      	lsls	r3, r3, #22
 8008e12:	d4dd      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e16:	f7fe fd7d 	bl	8007914 <__retarget_lock_release_recursive>
 8008e1a:	e7d9      	b.n	8008dd0 <_fflush_r+0xc>
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <_fflush_r+0x70>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d101      	bne.n	8008e26 <_fflush_r+0x62>
 8008e22:	68ac      	ldr	r4, [r5, #8]
 8008e24:	e7df      	b.n	8008de6 <_fflush_r+0x22>
 8008e26:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <_fflush_r+0x74>)
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	bf08      	it	eq
 8008e2c:	68ec      	ldreq	r4, [r5, #12]
 8008e2e:	e7da      	b.n	8008de6 <_fflush_r+0x22>
 8008e30:	08009408 	.word	0x08009408
 8008e34:	08009428 	.word	0x08009428
 8008e38:	080093e8 	.word	0x080093e8

08008e3c <fiprintf>:
 8008e3c:	b40e      	push	{r1, r2, r3}
 8008e3e:	b503      	push	{r0, r1, lr}
 8008e40:	4601      	mov	r1, r0
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <fiprintf+0x20>)
 8008e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f7ff fc85 	bl	800875c <_vfiprintf_r>
 8008e52:	b002      	add	sp, #8
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <_lseek_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_lseek_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f8 fce6 	bl	8001840 <_lseek>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_lseek_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_lseek_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	200003a0 	.word	0x200003a0

08008e84 <__swhatbuf_r>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	460e      	mov	r6, r1
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	b096      	sub	sp, #88	; 0x58
 8008e90:	4614      	mov	r4, r2
 8008e92:	461d      	mov	r5, r3
 8008e94:	da07      	bge.n	8008ea6 <__swhatbuf_r+0x22>
 8008e96:	2300      	movs	r3, #0
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	89b3      	ldrh	r3, [r6, #12]
 8008e9c:	061a      	lsls	r2, r3, #24
 8008e9e:	d410      	bmi.n	8008ec2 <__swhatbuf_r+0x3e>
 8008ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ea4:	e00e      	b.n	8008ec4 <__swhatbuf_r+0x40>
 8008ea6:	466a      	mov	r2, sp
 8008ea8:	f000 f8b6 	bl	8009018 <_fstat_r>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	dbf2      	blt.n	8008e96 <__swhatbuf_r+0x12>
 8008eb0:	9a01      	ldr	r2, [sp, #4]
 8008eb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008eb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eba:	425a      	negs	r2, r3
 8008ebc:	415a      	adcs	r2, r3
 8008ebe:	602a      	str	r2, [r5, #0]
 8008ec0:	e7ee      	b.n	8008ea0 <__swhatbuf_r+0x1c>
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	b016      	add	sp, #88	; 0x58
 8008eca:	bd70      	pop	{r4, r5, r6, pc}

08008ecc <__smakebuf_r>:
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ed0:	079d      	lsls	r5, r3, #30
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	d507      	bpl.n	8008ee8 <__smakebuf_r+0x1c>
 8008ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	6123      	str	r3, [r4, #16]
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	6163      	str	r3, [r4, #20]
 8008ee4:	b002      	add	sp, #8
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	ab01      	add	r3, sp, #4
 8008eea:	466a      	mov	r2, sp
 8008eec:	f7ff ffca 	bl	8008e84 <__swhatbuf_r>
 8008ef0:	9900      	ldr	r1, [sp, #0]
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff fa51 	bl	800839c <_malloc_r>
 8008efa:	b948      	cbnz	r0, 8008f10 <__smakebuf_r+0x44>
 8008efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f00:	059a      	lsls	r2, r3, #22
 8008f02:	d4ef      	bmi.n	8008ee4 <__smakebuf_r+0x18>
 8008f04:	f023 0303 	bic.w	r3, r3, #3
 8008f08:	f043 0302 	orr.w	r3, r3, #2
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	e7e3      	b.n	8008ed8 <__smakebuf_r+0xc>
 8008f10:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <__smakebuf_r+0x7c>)
 8008f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	6020      	str	r0, [r4, #0]
 8008f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	9b00      	ldr	r3, [sp, #0]
 8008f20:	6163      	str	r3, [r4, #20]
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	6120      	str	r0, [r4, #16]
 8008f26:	b15b      	cbz	r3, 8008f40 <__smakebuf_r+0x74>
 8008f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f000 f885 	bl	800903c <_isatty_r>
 8008f32:	b128      	cbz	r0, 8008f40 <__smakebuf_r+0x74>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	89a0      	ldrh	r0, [r4, #12]
 8008f42:	4305      	orrs	r5, r0
 8008f44:	81a5      	strh	r5, [r4, #12]
 8008f46:	e7cd      	b.n	8008ee4 <__smakebuf_r+0x18>
 8008f48:	08007089 	.word	0x08007089

08008f4c <memmove>:
 8008f4c:	4288      	cmp	r0, r1
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	eb01 0402 	add.w	r4, r1, r2
 8008f54:	d902      	bls.n	8008f5c <memmove+0x10>
 8008f56:	4284      	cmp	r4, r0
 8008f58:	4623      	mov	r3, r4
 8008f5a:	d807      	bhi.n	8008f6c <memmove+0x20>
 8008f5c:	1e43      	subs	r3, r0, #1
 8008f5e:	42a1      	cmp	r1, r4
 8008f60:	d008      	beq.n	8008f74 <memmove+0x28>
 8008f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f6a:	e7f8      	b.n	8008f5e <memmove+0x12>
 8008f6c:	4402      	add	r2, r0
 8008f6e:	4601      	mov	r1, r0
 8008f70:	428a      	cmp	r2, r1
 8008f72:	d100      	bne.n	8008f76 <memmove+0x2a>
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f7e:	e7f7      	b.n	8008f70 <memmove+0x24>

08008f80 <__malloc_lock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_lock+0x8>)
 8008f82:	f7fe bcc6 	b.w	8007912 <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	20000398 	.word	0x20000398

08008f8c <__malloc_unlock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_unlock+0x8>)
 8008f8e:	f7fe bcc1 	b.w	8007914 <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	20000398 	.word	0x20000398

08008f98 <_realloc_r>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	b921      	cbnz	r1, 8008fac <_realloc_r+0x14>
 8008fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	f7ff b9f8 	b.w	800839c <_malloc_r>
 8008fac:	b922      	cbnz	r2, 8008fb8 <_realloc_r+0x20>
 8008fae:	f7ff f9a5 	bl	80082fc <_free_r>
 8008fb2:	4625      	mov	r5, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	f000 f850 	bl	800905c <_malloc_usable_size_r>
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d20f      	bcs.n	8008fe0 <_realloc_r+0x48>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff f9ea 	bl	800839c <_malloc_r>
 8008fc8:	4605      	mov	r5, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0f2      	beq.n	8008fb4 <_realloc_r+0x1c>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	f7fe fcbb 	bl	800794c <memcpy>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f7ff f98f 	bl	80082fc <_free_r>
 8008fde:	e7e9      	b.n	8008fb4 <_realloc_r+0x1c>
 8008fe0:	4635      	mov	r5, r6
 8008fe2:	e7e7      	b.n	8008fb4 <_realloc_r+0x1c>

08008fe4 <_read_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_read_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f8 fbe0 	bl	80017b8 <_read>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_read_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_read_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200003a0 	.word	0x200003a0

08009008 <abort>:
 8009008:	b508      	push	{r3, lr}
 800900a:	2006      	movs	r0, #6
 800900c:	f000 f856 	bl	80090bc <raise>
 8009010:	2001      	movs	r0, #1
 8009012:	f7f8 fbc7 	bl	80017a4 <_exit>
	...

08009018 <_fstat_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d07      	ldr	r5, [pc, #28]	; (8009038 <_fstat_r+0x20>)
 800901c:	2300      	movs	r3, #0
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	4611      	mov	r1, r2
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	f7f8 fbf0 	bl	800180a <_fstat>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d102      	bne.n	8009034 <_fstat_r+0x1c>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	b103      	cbz	r3, 8009034 <_fstat_r+0x1c>
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	bd38      	pop	{r3, r4, r5, pc}
 8009036:	bf00      	nop
 8009038:	200003a0 	.word	0x200003a0

0800903c <_isatty_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d06      	ldr	r5, [pc, #24]	; (8009058 <_isatty_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f8 fbef 	bl	800182a <_isatty>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_isatty_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_isatty_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	200003a0 	.word	0x200003a0

0800905c <_malloc_usable_size_r>:
 800905c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009060:	1f18      	subs	r0, r3, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	bfbc      	itt	lt
 8009066:	580b      	ldrlt	r3, [r1, r0]
 8009068:	18c0      	addlt	r0, r0, r3
 800906a:	4770      	bx	lr

0800906c <_raise_r>:
 800906c:	291f      	cmp	r1, #31
 800906e:	b538      	push	{r3, r4, r5, lr}
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	d904      	bls.n	8009080 <_raise_r+0x14>
 8009076:	2316      	movs	r3, #22
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	f04f 30ff 	mov.w	r0, #4294967295
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009082:	b112      	cbz	r2, 800908a <_raise_r+0x1e>
 8009084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009088:	b94b      	cbnz	r3, 800909e <_raise_r+0x32>
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f830 	bl	80090f0 <_getpid_r>
 8009090:	462a      	mov	r2, r5
 8009092:	4601      	mov	r1, r0
 8009094:	4620      	mov	r0, r4
 8009096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909a:	f000 b817 	b.w	80090cc <_kill_r>
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d00a      	beq.n	80090b8 <_raise_r+0x4c>
 80090a2:	1c59      	adds	r1, r3, #1
 80090a4:	d103      	bne.n	80090ae <_raise_r+0x42>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	2001      	movs	r0, #1
 80090ac:	e7e7      	b.n	800907e <_raise_r+0x12>
 80090ae:	2400      	movs	r4, #0
 80090b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090b4:	4628      	mov	r0, r5
 80090b6:	4798      	blx	r3
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7e0      	b.n	800907e <_raise_r+0x12>

080090bc <raise>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <raise+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7ff bfd3 	b.w	800906c <_raise_r>
 80090c6:	bf00      	nop
 80090c8:	2000000c 	.word	0x2000000c

080090cc <_kill_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d07      	ldr	r5, [pc, #28]	; (80090ec <_kill_r+0x20>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	f7f8 fb53 	bl	8001784 <_kill>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d102      	bne.n	80090e8 <_kill_r+0x1c>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	b103      	cbz	r3, 80090e8 <_kill_r+0x1c>
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	bd38      	pop	{r3, r4, r5, pc}
 80090ea:	bf00      	nop
 80090ec:	200003a0 	.word	0x200003a0

080090f0 <_getpid_r>:
 80090f0:	f7f8 bb40 	b.w	8001774 <_getpid>

080090f4 <_init>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	bf00      	nop
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr

08009100 <_fini>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr
