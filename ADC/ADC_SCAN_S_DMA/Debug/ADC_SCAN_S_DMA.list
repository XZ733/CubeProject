
ADC_SCAN_S_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c88  08005c88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005d00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005d00  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017294  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df3  00000000  00000000  00037334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  0003b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028806  00000000  00000000  0003be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b04  00000000  00000000  00064666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fee54  00000000  00000000  0007916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  00178014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b84 	.word	0x08005b84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005b84 	.word	0x08005b84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2220      	movs	r2, #32
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f004 fb79 	bl	8004cc8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <MX_ADC1_Init+0x104>)
 80005d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <MX_ADC1_Init+0x104>)
 80005e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_ADC1_Init+0x104>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ec:	4b33      	ldr	r3, [pc, #204]	; (80006bc <MX_ADC1_Init+0x104>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_ADC1_Init+0x104>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_ADC1_Init+0x104>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_ADC1_Init+0x104>)
 8000600:	2204      	movs	r2, #4
 8000602:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_ADC1_Init+0x104>)
 8000606:	2200      	movs	r2, #0
 8000608:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_ADC1_Init+0x104>)
 800060c:	2200      	movs	r2, #0
 800060e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_ADC1_Init+0x104>)
 8000612:	2202      	movs	r2, #2
 8000614:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_ADC1_Init+0x104>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_ADC1_Init+0x104>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_ADC1_Init+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_ADC1_Init+0x104>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0x104>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	481e      	ldr	r0, [pc, #120]	; (80006bc <MX_ADC1_Init+0x104>)
 8000642:	f000 fe7b 	bl	800133c <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800064c:	f000 f9e3 	bl	8000a16 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	4619      	mov	r1, r3
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <MX_ADC1_Init+0x104>)
 800065c:	f001 fe6e 	bl	800233c <HAL_ADCEx_MultiModeConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000666:	f000 f9d6 	bl	8000a16 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC1_Init+0x108>)
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066e:	2306      	movs	r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000672:	2304      	movs	r3, #4
 8000674:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000676:	237f      	movs	r3, #127	; 0x7f
 8000678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067a:	2304      	movs	r3, #4
 800067c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x104>)
 8000688:	f001 f8fc 	bl	8001884 <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000692:	f000 f9c0 	bl	8000a16 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_ADC1_Init+0x10c>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800069a:	230c      	movs	r3, #12
 800069c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_ADC1_Init+0x104>)
 80006a4:	f001 f8ee 	bl	8001884 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ae:	f000 f9b2 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3730      	adds	r7, #48	; 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000098 	.word	0x20000098
 80006c0:	19200040 	.word	0x19200040
 80006c4:	1d500080 	.word	0x1d500080

080006c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006e8:	d14e      	bne.n	8000788 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 80006f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <HAL_ADC_MspInit+0xc8>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4819      	ldr	r0, [pc, #100]	; (8000794 <HAL_ADC_MspInit+0xcc>)
 800072e:	f002 fa8f 	bl	8002c50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_ADC_MspInit+0xd4>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 800073a:	2205      	movs	r2, #5
 800073c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000756:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 800075a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 800076e:	f001 fffd 	bl	800276c <HAL_DMA_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000778:	f000 f94d 	bl	8000a16 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000780:	655a      	str	r2, [r3, #84]	; 0x54
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_ADC_MspInit+0xd0>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000800 	.word	0x48000800
 8000798:	20000104 	.word	0x20000104
 800079c:	40020008 	.word	0x40020008

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_DMA_Init+0x50>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <MX_DMA_Init+0x50>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_DMA_Init+0x50>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_DMA_Init+0x50>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x50>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x50>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200b      	movs	r0, #11
 80007dc:	f001 ff91 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f001 ffa8 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f002 fb6f 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_GPIO_Init+0xd8>)
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_GPIO_Init+0xdc>)
 800088c:	f002 f9e0 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f002 f9d1 	bl	8002c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f001 ff25 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b8:	2028      	movs	r0, #40	; 0x28
 80008ba:	f001 ff3c 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	10110000 	.word	0x10110000
 80008d0:	48000800 	.word	0x48000800

080008d4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN PV */
uint32_t ADC_Value[2];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_Value,sizeof(ADC_Value)/sizeof(ADC_Value[0]));
 80008dc:	2202      	movs	r2, #2
 80008de:	4904      	ldr	r1, [pc, #16]	; (80008f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <HAL_ADC_ConvCpltCallback+0x20>)
 80008e2:	f000 feed 	bl	80016c0 <HAL_ADC_Start_DMA>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000164 	.word	0x20000164
 80008f4:	20000098 	.word	0x20000098

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fa6d 	bl	8000dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f820 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff ff76 	bl	80007f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000908:	f000 f9a0 	bl	8000c4c <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 800090c:	f7ff ff48 	bl	80007a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000910:	f7ff fe52 	bl	80005b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_Value,sizeof(ADC_Value)/sizeof(ADC_Value[0]));
 8000914:	2202      	movs	r2, #2
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <main+0x40>)
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <main+0x44>)
 800091a:	f000 fed1 	bl	80016c0 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_Delay(2000);
 800091e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000922:	f000 facb 	bl	8000ebc <HAL_Delay>
		printf(" %lu %lu\r\n",ADC_Value[0],ADC_Value[1]);//这里为了�?????单演示，�?????以在中断回调里面直接打印�?????
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <main+0x40>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a03      	ldr	r2, [pc, #12]	; (8000938 <main+0x40>)
 800092c:	6852      	ldr	r2, [r2, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <main+0x48>)
 8000932:	f004 f9d1 	bl	8004cd8 <iprintf>
		HAL_Delay(2000);
 8000936:	e7f2      	b.n	800091e <main+0x26>
 8000938:	20000164 	.word	0x20000164
 800093c:	20000098 	.word	0x20000098
 8000940:	08005b9c 	.word	0x08005b9c

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0a8      	sub	sp, #160	; 0xa0
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800094e:	2238      	movs	r2, #56	; 0x38
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f9b8 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2254      	movs	r2, #84	; 0x54
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f9aa 	bl	8004cc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000974:	2000      	movs	r0, #0
 8000976:	f002 fb29 	bl	8002fcc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097a:	2301      	movs	r3, #1
 800097c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000982:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	2303      	movs	r3, #3
 800098c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000990:	2306      	movs	r3, #6
 8000992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000996:	2355      	movs	r3, #85	; 0x55
 8000998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fbbe 	bl	8003134 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009be:	f000 f82a 	bl	8000a16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009da:	2104      	movs	r1, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fec1 	bl	8003764 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009e8:	f000 f815 	bl	8000a16 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12;
 80009ec:	f248 0320 	movw	r3, #32800	; 0x8020
 80009f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 f8cc 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a0a:	f000 f804 	bl	8000a16 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	37a0      	adds	r7, #160	; 0xa0
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1a:	b672      	cpsid	i
}
 8000a1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a56:	f002 fb5d 	bl	8003114 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f9e4 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel1_IRQHandler+0x10>)
 8000ac2:	f001 ff76 	bl	80029b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000104 	.word	0x20000104

08000ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ad4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad8:	f002 fa54 	bl	8002f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000af2:	f3af 8000 	nop.w
 8000af6:	4601      	mov	r1, r0
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	b2ca      	uxtb	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <_read+0x12>
	}

return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e009      	b.n	8000b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f915 	bl	8000d64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf1      	blt.n	8000b2c <_write+0x12>
	}
	return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_isatty>:

int _isatty(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	return 1;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f004 f842 	bl	8004c74 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20020000 	.word	0x20020000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	20000210 	.word	0x20000210

08000c28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c52:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <MX_LPUART1_UART_Init+0x90>)
 8000c54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000c90:	f003 f9d0 	bl	8004034 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f7ff febc 	bl	8000a16 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000ca2:	f003 ff1d 	bl	8004ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000cac:	f7ff feb3 	bl	8000a16 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000cb4:	f003 ff52 	bl	8004b5c <HAL_UARTEx_SetRxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000cbe:	f7ff feaa 	bl	8000a16 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_LPUART1_UART_Init+0x8c>)
 8000cc4:	f003 fed3 	bl	8004a6e <HAL_UARTEx_DisableFifoMode>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000cce:	f7ff fea2 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000016c 	.word	0x2000016c
 8000cdc:	40008000 	.word	0x40008000

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_UART_MspInit+0x80>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d32:	230c      	movs	r3, #12
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d42:	230c      	movs	r3, #12
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 ff7e 	bl	8002c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40008000 	.word	0x40008000
 8000d60:	40021000 	.word	0x40021000

08000d64 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8000d6c:	1d39      	adds	r1, r7, #4
 8000d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d72:	2201      	movs	r2, #1
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <__io_putchar+0x20>)
 8000d76:	f003 f9ad 	bl	80040d4 <HAL_UART_Transmit>
  return ch;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000016c 	.word	0x2000016c

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db2:	f7ff ff39 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f003 ff63 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fd9d 	bl	80008f8 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dcc:	08005c90 	.word	0x08005c90
  ldr r2, =_sbss
 8000dd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>

08000dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f001 fc81 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f80e 	bl	8000e0c <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfc:	f7ff fe10 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e00:	79fb      	ldrb	r3, [r7, #7]

}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_InitTick+0x68>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d022      	beq.n	8000e66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_InitTick+0x68>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fc8c 	bl	8002752 <HAL_SYSTICK_Config>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d809      	bhi.n	8000e5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e46:	2200      	movs	r2, #0
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4e:	f001 fc58 	bl	8002702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_InitTick+0x70>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e004      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200001fc 	.word	0x200001fc
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001fc 	.word	0x200001fc

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d004      	beq.n	8000ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee0:	bf00      	nop
 8000ee2:	f7ff ffdf 	bl	8000ea4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d8f7      	bhi.n	8000ee2 <HAL_Delay+0x26>
  {
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000008 	.word	0x20000008

08000f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3360      	adds	r3, #96	; 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_ADC_SetOffset+0x44>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	4313      	orrs	r3, r2
 8000f98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	03fff000 	.word	0x03fff000

08000fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3360      	adds	r3, #96	; 0x60
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3360      	adds	r3, #96	; 0x60
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001012:	b480      	push	{r7}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3360      	adds	r3, #96	; 0x60
 8001022:	461a      	mov	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	431a      	orrs	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3360      	adds	r3, #96	; 0x60
 8001058:	461a      	mov	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	431a      	orrs	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3330      	adds	r3, #48	; 0x30
 80010da:	461a      	mov	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	4413      	add	r3, r2
 80010e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	211f      	movs	r1, #31
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0e9b      	lsrs	r3, r3, #26
 8001102:	f003 011f 	and.w	r1, r3, #31
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001122:	b480      	push	{r7}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3314      	adds	r3, #20
 8001132:	461a      	mov	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	0e5b      	lsrs	r3, r3, #25
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0d1b      	lsrs	r3, r3, #20
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2107      	movs	r1, #7
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	0d1b      	lsrs	r3, r3, #20
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	431a      	orrs	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0318 	and.w	r3, r3, #24
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800119c:	40d9      	lsrs	r1, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	400b      	ands	r3, r1
 80011a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0007ffff 	.word	0x0007ffff

080011c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6093      	str	r3, [r2, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001214:	d101      	bne.n	800121a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <LL_ADC_IsEnabled+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_ADC_IsEnabled+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012da:	f043 0204 	orr.w	r2, r3, #4
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d101      	bne.n	8001306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b08      	cmp	r3, #8
 8001326:	d101      	bne.n	800132c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1af      	b.n	80016b6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f9af 	bl	80006c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff3f 	bl	8001200 <LL_ADC_IsDeepPowerDownEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff25 	bl	80011dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff5a 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ac:	4b9f      	ldr	r3, [pc, #636]	; (800162c <HAL_ADC_Init+0x2f0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	4a9f      	ldr	r2, [pc, #636]	; (8001630 <HAL_ADC_Init+0x2f4>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	3301      	adds	r3, #1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff3c 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff75 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8148 	bne.w	80016a4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8144 	bne.w	80016a4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff35 	bl	80012a0 <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d141      	bne.n	80014c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d004      	beq.n	8001450 <HAL_ADC_Init+0x114>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7a      	ldr	r2, [pc, #488]	; (8001634 <HAL_ADC_Init+0x2f8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d10f      	bne.n	8001470 <HAL_ADC_Init+0x134>
 8001450:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001454:	f7ff ff24 	bl	80012a0 <LL_ADC_IsEnabled>
 8001458:	4604      	mov	r4, r0
 800145a:	4876      	ldr	r0, [pc, #472]	; (8001634 <HAL_ADC_Init+0x2f8>)
 800145c:	f7ff ff20 	bl	80012a0 <LL_ADC_IsEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	4323      	orrs	r3, r4
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	e012      	b.n	8001496 <HAL_ADC_Init+0x15a>
 8001470:	4871      	ldr	r0, [pc, #452]	; (8001638 <HAL_ADC_Init+0x2fc>)
 8001472:	f7ff ff15 	bl	80012a0 <LL_ADC_IsEnabled>
 8001476:	4604      	mov	r4, r0
 8001478:	4870      	ldr	r0, [pc, #448]	; (800163c <HAL_ADC_Init+0x300>)
 800147a:	f7ff ff11 	bl	80012a0 <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	431c      	orrs	r4, r3
 8001482:	486f      	ldr	r0, [pc, #444]	; (8001640 <HAL_ADC_Init+0x304>)
 8001484:	f7ff ff0c 	bl	80012a0 <LL_ADC_IsEnabled>
 8001488:	4603      	mov	r3, r0
 800148a:	4323      	orrs	r3, r4
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Init+0x172>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a62      	ldr	r2, [pc, #392]	; (8001634 <HAL_ADC_Init+0x2f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Init+0x176>
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_ADC_Init+0x308>)
 80014b0:	e000      	b.n	80014b4 <HAL_ADC_Init+0x178>
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_ADC_Init+0x30c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f7ff fd20 	bl	8000f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7f5b      	ldrb	r3, [r3, #29]
 80014c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d106      	bne.n	80014fc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	3b01      	subs	r3, #1
 80014f4:	045b      	lsls	r3, r3, #17
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_ADC_Init+0x310>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	430b      	orrs	r3, r1
 800152a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fed1 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 800154c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fede 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 8001558:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d17f      	bne.n	8001660 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d17c      	bne.n	8001660 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800156a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001572:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001582:	f023 0302 	bic.w	r3, r3, #2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	430b      	orrs	r3, r1
 800158e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d017      	beq.n	80015c8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6911      	ldr	r1, [r2, #16]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80015c6:	e013      	b.n	80015f0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12a      	bne.n	8001650 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001610:	4311      	orrs	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800161c:	430a      	orrs	r2, r1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	e019      	b.n	8001660 <HAL_ADC_Init+0x324>
 800162c:	20000000 	.word	0x20000000
 8001630:	053e2d63 	.word	0x053e2d63
 8001634:	50000100 	.word	0x50000100
 8001638:	50000400 	.word	0x50000400
 800163c:	50000500 	.word	0x50000500
 8001640:	50000600 	.word	0x50000600
 8001644:	50000300 	.word	0x50000300
 8001648:	50000700 	.word	0x50000700
 800164c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10c      	bne.n	8001682 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f023 010f 	bic.w	r1, r3, #15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	e007      	b.n	8001692 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 020f 	bic.w	r2, r2, #15
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a2:	e007      	b.n	80016b4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop

080016c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_Start_DMA+0x20>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_ADC_Start_DMA+0x17c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_Start_DMA+0x24>
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_ADC_Start_DMA+0x180>)
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Start_DMA+0x26>
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_ADC_Start_DMA+0x184>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fd6a 	bl	80011c0 <LL_ADC_GetMultimode>
 80016ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fdfb 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 8096 	bne.w	800182c <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_DMA+0x4e>
 800170a:	2302      	movs	r3, #2
 800170c:	e091      	b.n	8001832 <HAL_ADC_Start_DMA+0x172>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d002      	beq.n	8001728 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d17a      	bne.n	800181e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 fceb 	bl	8002104 <ADC_Enable>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d16d      	bne.n	8001814 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_ADC_Start_DMA+0x17c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d009      	beq.n	800176a <HAL_ADC_Start_DMA+0xaa>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_ADC_Start_DMA+0x188>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d002      	beq.n	8001766 <HAL_ADC_Start_DMA+0xa6>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e003      	b.n	800176e <HAL_ADC_Start_DMA+0xae>
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_ADC_Start_DMA+0x18c>)
 8001768:	e001      	b.n	800176e <HAL_ADC_Start_DMA+0xae>
 800176a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	4293      	cmp	r3, r2
 8001774:	d002      	beq.n	800177c <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001798:	f023 0206 	bic.w	r2, r3, #6
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	661a      	str	r2, [r3, #96]	; 0x60
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_ADC_Start_DMA+0x190>)
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <HAL_ADC_Start_DMA+0x194>)
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	4a26      	ldr	r2, [pc, #152]	; (8001858 <HAL_ADC_Start_DMA+0x198>)
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	221c      	movs	r2, #28
 80017c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0210 	orr.w	r2, r2, #16
 80017de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3340      	adds	r3, #64	; 0x40
 80017fa:	4619      	mov	r1, r3
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f001 f85c 	bl	80028bc <HAL_DMA_Start_IT>
 8001804:	4603      	mov	r3, r0
 8001806:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fd5a 	bl	80012c6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001812:	e00d      	b.n	8001830 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800181c:	e008      	b.n	8001830 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800182a:	e001      	b.n	8001830 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800182c:	2302      	movs	r3, #2
 800182e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	50000100 	.word	0x50000100
 8001840:	50000300 	.word	0x50000300
 8001844:	50000700 	.word	0x50000700
 8001848:	50000500 	.word	0x50000500
 800184c:	50000400 	.word	0x50000400
 8001850:	080021c9 	.word	0x080021c9
 8001854:	080022a1 	.word	0x080022a1
 8001858:	080022bd 	.word	0x080022bd

0800185c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0b6      	sub	sp, #216	; 0xd8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x24>
 80018a2:	2302      	movs	r3, #2
 80018a4:	f000 bc13 	b.w	80020ce <HAL_ADC_ConfigChannel+0x84a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fd1a 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 83f3 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6859      	ldr	r1, [r3, #4]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f7ff fbfb 	bl	80010ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd08 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80018de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fd14 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 80018ec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 81d9 	bne.w	8001cac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 81d4 	bne.w	8001cac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800190c:	d10f      	bne.n	800192e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff fc02 	bl	8001122 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fba9 	bl	800107e <LL_ADC_SetSamplingTimeCommonConfig>
 800192c:	e00e      	b.n	800194c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	461a      	mov	r2, r3
 800193c:	f7ff fbf1 	bl	8001122 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb99 	bl	800107e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	08db      	lsrs	r3, r3, #3
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d022      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6919      	ldr	r1, [r3, #16]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800197e:	f7ff faf3 	bl	8000f68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	461a      	mov	r2, r3
 8001990:	f7ff fb3f 	bl	8001012 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	7f1b      	ldrb	r3, [r3, #28]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d102      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x126>
 80019a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a8:	e000      	b.n	80019ac <HAL_ADC_ConfigChannel+0x128>
 80019aa:	2300      	movs	r3, #0
 80019ac:	461a      	mov	r2, r3
 80019ae:	f7ff fb4b 	bl	8001048 <LL_ADC_SetOffsetSaturation>
 80019b2:	e17b      	b.n	8001cac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff faf8 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x15c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff faed 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	f003 021f 	and.w	r2, r3, #31
 80019de:	e01e      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x19a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fae2 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e004      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x1b2>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	e018      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x1e4>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e004      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001a5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fab1 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fa95 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x222>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fa8a 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	e01e      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x260>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa7f 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001acc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e004      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x278>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	e018      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x2aa>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e004      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fa4e 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fa32 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2e8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fa27 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	e01e      	b.n	8001baa <HAL_ADC_ConfigChannel+0x326>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2102      	movs	r1, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fa1c 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e004      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x33e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	e016      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x36c>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d106      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f9ed 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f9d1 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x3aa>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9c6 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	e017      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x3da>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2103      	movs	r1, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9bb 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x3f2>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	e011      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x416>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d106      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f998 	bl	8000fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff faf5 	bl	80012a0 <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 813d 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f7ff fa54 	bl	8001178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4aa2      	ldr	r2, [pc, #648]	; (8001f60 <HAL_ADC_ConfigChannel+0x6dc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	f040 812e 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x480>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e019      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x4b4>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e003      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	bf94      	ite	ls
 8001d32:	2301      	movls	r3, #1
 8001d34:	2300      	movhi	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d079      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x4d4>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	069b      	lsls	r3, r3, #26
 8001d52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d56:	e015      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x500>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	069b      	lsls	r3, r3, #26
 8001d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x520>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	e017      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x550>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	ea42 0103 	orr.w	r1, r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x576>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	051b      	lsls	r3, r3, #20
 8001df8:	e018      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x5a8>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	e07e      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x5c8>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	069b      	lsls	r3, r3, #26
 8001e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4a:	e015      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x5f4>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	069b      	lsls	r3, r3, #26
 8001e74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x614>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	e017      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x644>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	ea42 0103 	orr.w	r1, r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x670>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b1e      	subs	r3, #30
 8001eec:	051b      	lsls	r3, r3, #20
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	e01b      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x6a8>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	613b      	str	r3, [r7, #16]
  return result;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	3b1e      	subs	r3, #30
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7ff f8f5 	bl	8001122 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_ADC_ConfigChannel+0x6e0>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80be 	beq.w	80020c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x6d6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10a      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x6ec>
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_ADC_ConfigChannel+0x6e8>)
 8001f5c:	e009      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x6ee>
 8001f5e:	bf00      	nop
 8001f60:	407f0000 	.word	0x407f0000
 8001f64:	80080000 	.word	0x80080000
 8001f68:	50000100 	.word	0x50000100
 8001f6c:	50000300 	.word	0x50000300
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_ADC_ConfigChannel+0x854>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffea 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001f78:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a56      	ldr	r2, [pc, #344]	; (80020dc <HAL_ADC_ConfigChannel+0x858>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x70c>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <HAL_ADC_ConfigChannel+0x85c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d13a      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d134      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa4:	d005      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x72e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_ADC_ConfigChannel+0x860>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 8085 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x742>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <HAL_ADC_ConfigChannel+0x864>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x746>
 8001fc6:	4a49      	ldr	r2, [pc, #292]	; (80020ec <HAL_ADC_ConfigChannel+0x868>)
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x748>
 8001fca:	4a43      	ldr	r2, [pc, #268]	; (80020d8 <HAL_ADC_ConfigChannel+0x854>)
 8001fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f7fe ffa5 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b44      	ldr	r3, [pc, #272]	; (80020f0 <HAL_ADC_ConfigChannel+0x86c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a44      	ldr	r2, [pc, #272]	; (80020f4 <HAL_ADC_ConfigChannel+0x870>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff6:	e002      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002004:	e05a      	b.n	80020bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_ADC_ConfigChannel+0x874>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d125      	bne.n	800205c <HAL_ADC_ConfigChannel+0x7d8>
 8002010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11f      	bne.n	800205c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <HAL_ADC_ConfigChannel+0x864>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d104      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x7ac>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_ADC_ConfigChannel+0x878>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d047      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002038:	d004      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x7c0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_ADC_ConfigChannel+0x864>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x7c4>
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_ADC_ConfigChannel+0x868>)
 8002046:	e000      	b.n	800204a <HAL_ADC_ConfigChannel+0x7c6>
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_ADC_ConfigChannel+0x854>)
 800204a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f7fe ff66 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800205a:	e031      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_ADC_ConfigChannel+0x87c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12d      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d127      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_ADC_ConfigChannel+0x864>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d004      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x80c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <HAL_ADC_ConfigChannel+0x864>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x810>
 8002090:	4a16      	ldr	r2, [pc, #88]	; (80020ec <HAL_ADC_ConfigChannel+0x868>)
 8002092:	e000      	b.n	8002096 <HAL_ADC_ConfigChannel+0x812>
 8002094:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_ADC_ConfigChannel+0x854>)
 8002096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800209a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7fe ff40 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
 80020a6:	e00c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020bc:	bf00      	nop
 80020be:	e000      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80020ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	37d8      	adds	r7, #216	; 0xd8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	50000700 	.word	0x50000700
 80020dc:	c3210000 	.word	0xc3210000
 80020e0:	90c00010 	.word	0x90c00010
 80020e4:	50000600 	.word	0x50000600
 80020e8:	50000100 	.word	0x50000100
 80020ec:	50000300 	.word	0x50000300
 80020f0:	20000000 	.word	0x20000000
 80020f4:	053e2d63 	.word	0x053e2d63
 80020f8:	c7520000 	.word	0xc7520000
 80020fc:	50000500 	.word	0x50000500
 8002100:	cb840000 	.word	0xcb840000

08002104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f8c5 	bl	80012a0 <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d14d      	bne.n	80021b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <ADC_Enable+0xc0>)
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e039      	b.n	80021ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f894 	bl	8001278 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002150:	f7fe fea8 	bl	8000ea4 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002156:	e028      	b.n	80021aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f89f 	bl	80012a0 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f883 	bl	8001278 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002172:	f7fe fe97 	bl	8000ea4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d914      	bls.n	80021aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d00d      	beq.n	80021aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e007      	b.n	80021ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d1cf      	bne.n	8002158 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	8000003f 	.word	0x8000003f

080021c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d14b      	bne.n	800227a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d021      	beq.n	8002240 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ff4f 	bl	80010a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d032      	beq.n	8002272 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12b      	bne.n	8002272 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11f      	bne.n	8002272 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c
 800223e:	e018      	b.n	8002272 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d111      	bne.n	8002272 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7fe fb2e 	bl	80008d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002278:	e00e      	b.n	8002298 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff faf2 	bl	8001870 <HAL_ADC_ErrorCallback>
}
 800228c:	e004      	b.n	8002298 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fad4 	bl	800185c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	f043 0204 	orr.w	r2, r3, #4
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fac4 	bl	8001870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_ADC_IsEnabled>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <LL_ADC_IsEnabled+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_IsEnabled+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_IsConversionOngoing>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d101      	bne.n	800232e <LL_ADC_REG_IsConversionOngoing+0x18>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b0a1      	sub	sp, #132	; 0x84
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002356:	2302      	movs	r3, #2
 8002358:	e0e7      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002362:	2300      	movs	r3, #0
 8002364:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002366:	2300      	movs	r3, #0
 8002368:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002372:	d102      	bne.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	e009      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6e      	ldr	r2, [pc, #440]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002384:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	e001      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0be      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffb1 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80023b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffab 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80a0 	bne.w	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 809c 	bne.w	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d8:	d004      	beq.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80023e6:	e000      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023e8:	4b56      	ldr	r3, [pc, #344]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80023ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d04b      	beq.n	800248c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002406:	035b      	lsls	r3, r3, #13
 8002408:	430b      	orrs	r3, r1
 800240a:	431a      	orrs	r2, r3
 800240c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002418:	d004      	beq.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a45      	ldr	r2, [pc, #276]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10f      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002424:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002428:	f7ff ff62 	bl	80022f0 <LL_ADC_IsEnabled>
 800242c:	4604      	mov	r4, r0
 800242e:	4841      	ldr	r0, [pc, #260]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002430:	f7ff ff5e 	bl	80022f0 <LL_ADC_IsEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	4323      	orrs	r3, r4
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e012      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002444:	483c      	ldr	r0, [pc, #240]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002446:	f7ff ff53 	bl	80022f0 <LL_ADC_IsEnabled>
 800244a:	4604      	mov	r4, r0
 800244c:	483b      	ldr	r0, [pc, #236]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800244e:	f7ff ff4f 	bl	80022f0 <LL_ADC_IsEnabled>
 8002452:	4603      	mov	r3, r0
 8002454:	431c      	orrs	r4, r3
 8002456:	483c      	ldr	r0, [pc, #240]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002458:	f7ff ff4a 	bl	80022f0 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d056      	beq.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800246e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002476:	f023 030f 	bic.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	430a      	orrs	r2, r1
 8002484:	431a      	orrs	r2, r3
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800248a:	e047      	b.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800248c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002496:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a0:	d004      	beq.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80024ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b0:	f7ff ff1e 	bl	80022f0 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	481f      	ldr	r0, [pc, #124]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024b8:	f7ff ff1a 	bl	80022f0 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e012      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80024cc:	481a      	ldr	r0, [pc, #104]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024ce:	f7ff ff0f 	bl	80022f0 <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4819      	ldr	r0, [pc, #100]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024d6:	f7ff ff0b 	bl	80022f0 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	431c      	orrs	r4, r3
 80024de:	481a      	ldr	r0, [pc, #104]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024e0:	f7ff ff06 	bl	80022f0 <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4323      	orrs	r3, r4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024fe:	f023 030f 	bic.w	r3, r3, #15
 8002502:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002504:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002506:	e009      	b.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800251a:	e000      	b.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800251c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002526:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800252a:	4618      	mov	r0, r3
 800252c:	3784      	adds	r7, #132	; 0x84
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop
 8002534:	50000100 	.word	0x50000100
 8002538:	50000400 	.word	0x50000400
 800253c:	50000500 	.word	0x50000500
 8002540:	50000300 	.word	0x50000300
 8002544:	50000700 	.word	0x50000700
 8002548:	50000600 	.word	0x50000600

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff40 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff90 	bl	8002640 <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5f 	bl	80025ec <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff33 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa4 	bl	80026a8 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08d      	b.n	800289a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_DMA_Init+0x138>)
 8002786:	429a      	cmp	r2, r3
 8002788:	d80f      	bhi.n	80027aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_DMA_Init+0x13c>)
 8002792:	4413      	add	r3, r2
 8002794:	4a45      	ldr	r2, [pc, #276]	; (80028ac <HAL_DMA_Init+0x140>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_DMA_Init+0x144>)
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
 80027a8:	e00e      	b.n	80027c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_DMA_Init+0x148>)
 80027b2:	4413      	add	r3, r2
 80027b4:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_DMA_Init+0x140>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_DMA_Init+0x14c>)
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9b6 	bl	8002b8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002828:	d102      	bne.n	8002830 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002844:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_DMA_Init+0x104>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d80c      	bhi.n	8002870 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9d6 	bl	8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e008      	b.n	8002882 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020407 	.word	0x40020407
 80028a8:	bffdfff8 	.word	0xbffdfff8
 80028ac:	cccccccd 	.word	0xcccccccd
 80028b0:	40020000 	.word	0x40020000
 80028b4:	bffdfbf8 	.word	0xbffdfbf8
 80028b8:	40020400 	.word	0x40020400

080028bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Start_IT+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e066      	b.n	80029aa <HAL_DMA_Start_IT+0xee>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d155      	bne.n	800299c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f8fb 	bl	8002b10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 020e 	orr.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e00f      	b.n	8002954 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 020a 	orr.w	r2, r2, #10
 8002952:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e005      	b.n	80029a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2204      	movs	r2, #4
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d026      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x7a>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d021      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0204 	bic.w	r2, r2, #4
 8002a04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f003 021f 	and.w	r2, r3, #31
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2104      	movs	r1, #4
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d071      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a2a:	e06c      	b.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2202      	movs	r2, #2
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02e      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d029      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020a 	bic.w	r2, r2, #10
 8002a66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d038      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a9c:	e033      	b.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d025      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 020e 	bic.w	r2, r2, #14
 8002aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
}
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d802      	bhi.n	8002ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e001      	b.n	8002baa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ba8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3b08      	subs	r3, #8
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	009a      	lsls	r2, r3, #2
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40020407 	.word	0x40020407
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020820 	.word	0x40020820
 8002c00:	cccccccd 	.word	0xcccccccd
 8002c04:	40020880 	.word	0x40020880

08002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	1000823f 	.word	0x1000823f
 8002c4c:	40020940 	.word	0x40020940

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c5e:	e15a      	b.n	8002f16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 814c 	beq.w	8002f10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00b      	beq.n	8002c98 <HAL_GPIO_Init+0x48>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c8c:	2b11      	cmp	r3, #17
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d130      	bne.n	8002cfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cce:	2201      	movs	r2, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0201 	and.w	r2, r3, #1
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0xea>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	d123      	bne.n	8002d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a6 	beq.w	8002f10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ddc:	4a56      	ldr	r2, [pc, #344]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e06:	d01f      	beq.n	8002e48 <HAL_GPIO_Init+0x1f8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_GPIO_Init+0x2ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d019      	beq.n	8002e44 <HAL_GPIO_Init+0x1f4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_GPIO_Init+0x1f0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <HAL_GPIO_Init+0x2f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_GPIO_Init+0x1ec>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a49      	ldr	r2, [pc, #292]	; (8002f48 <HAL_GPIO_Init+0x2f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_GPIO_Init+0x1e8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_GPIO_Init+0x1e4>
 8002e30:	2305      	movs	r3, #5
 8002e32:	e00a      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e34:	2306      	movs	r3, #6
 8002e36:	e008      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e006      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e004      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e002      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e8c:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f0a:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f ae9d 	bne.w	8002c60 <HAL_GPIO_Init+0x10>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	48000800 	.word	0x48000800
 8002f44:	48000c00 	.word	0x48000c00
 8002f48:	48001000 	.word	0x48001000
 8002f4c:	48001400 	.word	0x48001400
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f806 	bl	8002fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d141      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe6:	d131      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4a46      	ldr	r2, [pc, #280]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003000:	4a41      	ldr	r2, [pc, #260]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2232      	movs	r2, #50	; 0x32
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	e002      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d102      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d158      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e057      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003052:	4a2d      	ldr	r2, [pc, #180]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800305c:	e04d      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003064:	d141      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d131      	bne.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a23      	ldr	r2, [pc, #140]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2232      	movs	r2, #50	; 0x32
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030aa:	e002      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d102      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f2      	bne.n	80030ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d112      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e011      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030e8:	e007      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40007000 	.word	0x40007000
 800310c:	20000000 	.word	0x20000000
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800311e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003122:	6093      	str	r3, [r2, #8]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40007000 	.word	0x40007000

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e308      	b.n	8003758 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003152:	4ba3      	ldr	r3, [pc, #652]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315c:	4ba0      	ldr	r3, [pc, #640]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d102      	bne.n	8003172 <HAL_RCC_OscConfig+0x3e>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d002      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b99      	ldr	r3, [pc, #612]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e2e3      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a90      	ldr	r2, [pc, #576]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8a      	ldr	r2, [pc, #552]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a87      	ldr	r2, [pc, #540]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b84      	ldr	r3, [pc, #528]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a83      	ldr	r2, [pc, #524]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a80      	ldr	r2, [pc, #512]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd fe5a 	bl	8000ea4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fd fe56 	bl	8000ea4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e2a8      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fe46 	bl	8000ea4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fe42 	bl	8000ea4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e294      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800322e:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d075      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0x136>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d002      	beq.n	8003270 <HAL_RCC_OscConfig+0x13c>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d11f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_OscConfig+0x154>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e267      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4952      	ldr	r1, [pc, #328]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800329c:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_RCC_OscConfig+0x2b0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fdb3 	bl	8000e0c <HAL_InitTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d043      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e253      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fdee 	bl	8000ea4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fd fdea 	bl	8000ea4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e23c      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	4939      	ldr	r1, [pc, #228]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 80032fe:	e01a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003300:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fdca 	bl	8000ea4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003314:	f7fd fdc6 	bl	8000ea4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e218      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1e0>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03c      	beq.n	80033bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01c      	beq.n	8003384 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fd fda3 	bl	8000ea4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7fd fd9f 	bl	8000ea4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1f1      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCC_OscConfig+0x22e>
 8003382:	e01b      	b.n	80033bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fd fd86 	bl	8000ea4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fd fd82 	bl	8000ea4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1d4      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80ab 	beq.w	8003520 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2b4>
 80033da:	2301      	movs	r3, #1
 80033dc:	e005      	b.n	80033ea <HAL_RCC_OscConfig+0x2b6>
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	20000004 	.word	0x20000004
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4baf      	ldr	r3, [pc, #700]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4aae      	ldr	r2, [pc, #696]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
 80033fa:	4bac      	ldr	r3, [pc, #688]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340a:	4ba9      	ldr	r3, [pc, #676]	; (80036b0 <HAL_RCC_OscConfig+0x57c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003416:	4ba6      	ldr	r3, [pc, #664]	; (80036b0 <HAL_RCC_OscConfig+0x57c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4aa5      	ldr	r2, [pc, #660]	; (80036b0 <HAL_RCC_OscConfig+0x57c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fd fd3f 	bl	8000ea4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fd fd3b 	bl	8000ea4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e18d      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	4b9c      	ldr	r3, [pc, #624]	; (80036b0 <HAL_RCC_OscConfig+0x57c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_RCC_OscConfig+0x32e>
 8003450:	4b96      	ldr	r3, [pc, #600]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a95      	ldr	r2, [pc, #596]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003460:	e024      	b.n	80034ac <HAL_RCC_OscConfig+0x378>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d110      	bne.n	800348c <HAL_RCC_OscConfig+0x358>
 800346a:	4b90      	ldr	r3, [pc, #576]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a8e      	ldr	r2, [pc, #568]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347a:	4b8c      	ldr	r3, [pc, #560]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x378>
 800348c:	4b87      	ldr	r3, [pc, #540]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a86      	ldr	r2, [pc, #536]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349c:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a82      	ldr	r2, [pc, #520]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d016      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fd fcf6 	bl	8000ea4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fcf2 	bl	8000ea4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e142      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ed      	beq.n	80034bc <HAL_RCC_OscConfig+0x388>
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd fcdf 	bl	8000ea4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd fcdb 	bl	8000ea4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e12b      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003500:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ed      	bne.n	80034ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b65      	ldr	r3, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	4a64      	ldr	r2, [pc, #400]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01c      	beq.n	800356e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003534:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800353a:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fcae 	bl	8000ea4 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354c:	f7fd fcaa 	bl	8000ea4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0fc      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355e:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ef      	beq.n	800354c <HAL_RCC_OscConfig+0x418>
 800356c:	e01b      	b.n	80035a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800356e:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003574:	4a4d      	ldr	r2, [pc, #308]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fd fc91 	bl	8000ea4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003586:	f7fd fc8d 	bl	8000ea4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0df      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003598:	4b44      	ldr	r3, [pc, #272]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800359a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ef      	bne.n	8003586 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d3 	beq.w	8003756 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	f000 808d 	beq.w	80036d8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d15a      	bne.n	800367c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a38      	ldr	r2, [pc, #224]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80035cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fc67 	bl	8000ea4 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fc63 	bl	8000ea4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0b5      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_OscConfig+0x580>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6a11      	ldr	r1, [r2, #32]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003608:	3a01      	subs	r2, #1
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003612:	0212      	lsls	r2, r2, #8
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800361a:	0852      	lsrs	r2, r2, #1
 800361c:	3a01      	subs	r2, #1
 800361e:	0552      	lsls	r2, r2, #21
 8003620:	4311      	orrs	r1, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003626:	0852      	lsrs	r2, r2, #1
 8003628:	3a01      	subs	r2, #1
 800362a:	0652      	lsls	r2, r2, #25
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003632:	06d2      	lsls	r2, r2, #27
 8003634:	430a      	orrs	r2, r1
 8003636:	491d      	ldr	r1, [pc, #116]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003638:	4313      	orrs	r3, r2
 800363a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003652:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fc26 	bl	8000ea4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd fc22 	bl	8000ea4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e074      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x528>
 800367a:	e06c      	b.n	8003756 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_RCC_OscConfig+0x578>)
 800369a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd fbfe 	bl	8000ea4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	e00e      	b.n	80036ca <HAL_RCC_OscConfig+0x596>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fbf4 	bl	8000ea4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e046      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_OscConfig+0x62c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x584>
 80036d6:	e03e      	b.n	8003756 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e039      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_OscConfig+0x62c>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d12c      	bne.n	8003752 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	3b01      	subs	r3, #1
 8003704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d123      	bne.n	8003752 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d11b      	bne.n	8003752 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d113      	bne.n	8003752 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d109      	bne.n	8003752 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e11e      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d910      	bls.n	80037ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b8e      	ldr	r3, [pc, #568]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 020f 	bic.w	r2, r3, #15
 8003792:	498c      	ldr	r1, [pc, #560]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e106      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d073      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d129      	bne.n	8003814 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c0:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0f4      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037d0:	f000 f99e 	bl	8003b10 <RCC_GetSysClockFreqFromPLLSource>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_ClockConfig+0x268>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d93f      	bls.n	800385e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037de:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d033      	beq.n	800385e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d12f      	bne.n	800385e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003806:	4a70      	ldr	r2, [pc, #448]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e024      	b.n	800385e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381c:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0c6      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0be      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800383c:	f000 f8ce 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4a61      	ldr	r2, [pc, #388]	; (80039cc <HAL_RCC_ClockConfig+0x268>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d909      	bls.n	800385e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003852:	4a5d      	ldr	r2, [pc, #372]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4957      	ldr	r1, [pc, #348]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003870:	f7fd fb18 	bl	8000ea4 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fd fb14 	bl	8000ea4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e095      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b4e      	ldr	r3, [pc, #312]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d023      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a42      	ldr	r2, [pc, #264]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038d8:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4936      	ldr	r1, [pc, #216]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
 80038f2:	e008      	b.n	8003906 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038fa:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a32      	ldr	r2, [pc, #200]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003904:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d21d      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003914:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 020f 	bic.w	r2, r3, #15
 800391c:	4929      	ldr	r1, [pc, #164]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003924:	f7fd fabe 	bl	8000ea4 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fd faba 	bl	8000ea4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e03b      	b.n	80039ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x260>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d1ed      	bne.n	800392c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4917      	ldr	r1, [pc, #92]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490f      	ldr	r1, [pc, #60]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398e:	f000 f825 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_ClockConfig+0x264>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490c      	ldr	r1, [pc, #48]	; (80039d0 <HAL_RCC_ClockConfig+0x26c>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x270>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fa2a 	bl	8000e0c <HAL_InitTick>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40022000 	.word	0x40022000
 80039c8:	40021000 	.word	0x40021000
 80039cc:	04c4b400 	.word	0x04c4b400
 80039d0:	08005ba8 	.word	0x08005ba8
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e047      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039f4:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e03e      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d136      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3301      	adds	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a30:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3a:	68d2      	ldr	r2, [r2, #12]
 8003a3c:	0a12      	lsrs	r2, r2, #8
 8003a3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	617b      	str	r3, [r7, #20]
      break;
 8003a48:	e00c      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a4a:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	0a12      	lsrs	r2, r2, #8
 8003a58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
      break;
 8003a62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e001      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a84:	693b      	ldr	r3, [r7, #16]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	016e3600 	.word	0x016e3600

08003aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08005bb8 	.word	0x08005bb8

08003ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ae8:	f7ff ffda 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0adb      	lsrs	r3, r3, #11
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	08005bb8 	.word	0x08005bb8

08003b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d10c      	bne.n	8003b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	0a12      	lsrs	r2, r2, #8
 8003b42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
    break;
 8003b4c:	e00c      	b.n	8003b68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	0a12      	lsrs	r2, r2, #8
 8003b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    break;
 8003b66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b82:	687b      	ldr	r3, [r7, #4]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40021000 	.word	0x40021000
 8003b94:	016e3600 	.word	0x016e3600
 8003b98:	00f42400 	.word	0x00f42400

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8098 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf2:	f7fd f957 	bl	8000ea4 <HAL_GetTick>
 8003bf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fd f953 	bl	8000ea4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ef      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d159      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d019      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f913 	bl	8000ea4 <HAL_GetTick>
 8003c7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c80:	e00b      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd f90f 	bl	8000ea4 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	74fb      	strb	r3, [r7, #19]
            break;
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ec      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	74bb      	strb	r3, [r7, #18]
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4baf      	ldr	r3, [pc, #700]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4aae      	ldr	r2, [pc, #696]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf6:	4ba9      	ldr	r3, [pc, #676]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 0203 	bic.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	49a5      	ldr	r1, [pc, #660]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d18:	4ba0      	ldr	r3, [pc, #640]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	499d      	ldr	r1, [pc, #628]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3a:	4b98      	ldr	r3, [pc, #608]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4994      	ldr	r1, [pc, #592]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	498c      	ldr	r1, [pc, #560]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d7e:	4b87      	ldr	r3, [pc, #540]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	4983      	ldr	r1, [pc, #524]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da0:	4b7e      	ldr	r3, [pc, #504]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	497b      	ldr	r1, [pc, #492]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b76      	ldr	r3, [pc, #472]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4972      	ldr	r1, [pc, #456]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de4:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	496a      	ldr	r1, [pc, #424]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	4961      	ldr	r1, [pc, #388]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e28:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	4959      	ldr	r1, [pc, #356]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e4a:	4b54      	ldr	r3, [pc, #336]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4950      	ldr	r1, [pc, #320]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4948      	ldr	r1, [pc, #288]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a42      	ldr	r2, [pc, #264]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	493a      	ldr	r1, [pc, #232]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ece:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	492c      	ldr	r1, [pc, #176]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	491e      	ldr	r1, [pc, #120]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4910      	ldr	r1, [pc, #64]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d018      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4902      	ldr	r1, [pc, #8]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003f9c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003faa:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d015      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d105      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d015      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004008:	4909      	ldr	r1, [pc, #36]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004018:	d105      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004024:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004026:	7cbb      	ldrb	r3, [r7, #18]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000

08004034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e042      	b.n	80040cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fc fe41 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8c2 	bl	8004200 <UART_SetConfig>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e022      	b.n	80040cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb80 	bl	8004794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fc07 	bl	80048d8 <UART_CheckIdleState>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	f040 8083 	bne.w	80041f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Transmit+0x28>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e07b      	b.n	80041f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Transmit+0x3a>
 800410a:	2302      	movs	r3, #2
 800410c:	e074      	b.n	80041f8 <HAL_UART_Transmit+0x124>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004126:	f7fc febd 	bl	8000ea4 <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d108      	bne.n	8004158 <HAL_UART_Transmit+0x84>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e003      	b.n	8004160 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004168:	e02c      	b.n	80041c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fbfa 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e039      	b.n	80041f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3302      	adds	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e007      	b.n	80041b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	3301      	adds	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1cc      	bne.n	800416a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fbc7 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e006      	b.n	80041f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	b5b0      	push	{r4, r5, r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4bb1      	ldr	r3, [pc, #708]	; (80044f0 <UART_SetConfig+0x2f0>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	69f9      	ldr	r1, [r7, #28]
 8004234:	430b      	orrs	r3, r1
 8004236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4aa6      	ldr	r2, [pc, #664]	; (80044f4 <UART_SetConfig+0x2f4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	4313      	orrs	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004272:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	69f9      	ldr	r1, [r7, #28]
 800427c:	430b      	orrs	r3, r1
 800427e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f023 010f 	bic.w	r1, r3, #15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a97      	ldr	r2, [pc, #604]	; (80044f8 <UART_SetConfig+0x2f8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d120      	bne.n	80042e2 <UART_SetConfig+0xe2>
 80042a0:	4b96      	ldr	r3, [pc, #600]	; (80044fc <UART_SetConfig+0x2fc>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d816      	bhi.n	80042dc <UART_SetConfig+0xdc>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0xb4>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042d1 	.word	0x080042d1
 80042bc:	080042cb 	.word	0x080042cb
 80042c0:	080042d7 	.word	0x080042d7
 80042c4:	2301      	movs	r3, #1
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e0e7      	b.n	800449a <UART_SetConfig+0x29a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e0e4      	b.n	800449a <UART_SetConfig+0x29a>
 80042d0:	2304      	movs	r3, #4
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e0e1      	b.n	800449a <UART_SetConfig+0x29a>
 80042d6:	2308      	movs	r3, #8
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e0de      	b.n	800449a <UART_SetConfig+0x29a>
 80042dc:	2310      	movs	r3, #16
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	e0db      	b.n	800449a <UART_SetConfig+0x29a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a86      	ldr	r2, [pc, #536]	; (8004500 <UART_SetConfig+0x300>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d132      	bne.n	8004352 <UART_SetConfig+0x152>
 80042ec:	4b83      	ldr	r3, [pc, #524]	; (80044fc <UART_SetConfig+0x2fc>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d828      	bhi.n	800434c <UART_SetConfig+0x14c>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x100>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004335 	.word	0x08004335
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800434d 	.word	0x0800434d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	08004341 	.word	0x08004341
 8004314:	0800434d 	.word	0x0800434d
 8004318:	0800434d 	.word	0x0800434d
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800433b 	.word	0x0800433b
 8004324:	0800434d 	.word	0x0800434d
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800434d 	.word	0x0800434d
 8004330:	08004347 	.word	0x08004347
 8004334:	2300      	movs	r3, #0
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e0af      	b.n	800449a <UART_SetConfig+0x29a>
 800433a:	2302      	movs	r3, #2
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e0ac      	b.n	800449a <UART_SetConfig+0x29a>
 8004340:	2304      	movs	r3, #4
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	e0a9      	b.n	800449a <UART_SetConfig+0x29a>
 8004346:	2308      	movs	r3, #8
 8004348:	76fb      	strb	r3, [r7, #27]
 800434a:	e0a6      	b.n	800449a <UART_SetConfig+0x29a>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e0a3      	b.n	800449a <UART_SetConfig+0x29a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6b      	ldr	r2, [pc, #428]	; (8004504 <UART_SetConfig+0x304>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d120      	bne.n	800439e <UART_SetConfig+0x19e>
 800435c:	4b67      	ldr	r3, [pc, #412]	; (80044fc <UART_SetConfig+0x2fc>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004366:	2b30      	cmp	r3, #48	; 0x30
 8004368:	d013      	beq.n	8004392 <UART_SetConfig+0x192>
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d814      	bhi.n	8004398 <UART_SetConfig+0x198>
 800436e:	2b20      	cmp	r3, #32
 8004370:	d009      	beq.n	8004386 <UART_SetConfig+0x186>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d810      	bhi.n	8004398 <UART_SetConfig+0x198>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <UART_SetConfig+0x180>
 800437a:	2b10      	cmp	r3, #16
 800437c:	d006      	beq.n	800438c <UART_SetConfig+0x18c>
 800437e:	e00b      	b.n	8004398 <UART_SetConfig+0x198>
 8004380:	2300      	movs	r3, #0
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e089      	b.n	800449a <UART_SetConfig+0x29a>
 8004386:	2302      	movs	r3, #2
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e086      	b.n	800449a <UART_SetConfig+0x29a>
 800438c:	2304      	movs	r3, #4
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e083      	b.n	800449a <UART_SetConfig+0x29a>
 8004392:	2308      	movs	r3, #8
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e080      	b.n	800449a <UART_SetConfig+0x29a>
 8004398:	2310      	movs	r3, #16
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e07d      	b.n	800449a <UART_SetConfig+0x29a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a59      	ldr	r2, [pc, #356]	; (8004508 <UART_SetConfig+0x308>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d120      	bne.n	80043ea <UART_SetConfig+0x1ea>
 80043a8:	4b54      	ldr	r3, [pc, #336]	; (80044fc <UART_SetConfig+0x2fc>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043b2:	2bc0      	cmp	r3, #192	; 0xc0
 80043b4:	d013      	beq.n	80043de <UART_SetConfig+0x1de>
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d814      	bhi.n	80043e4 <UART_SetConfig+0x1e4>
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d009      	beq.n	80043d2 <UART_SetConfig+0x1d2>
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d810      	bhi.n	80043e4 <UART_SetConfig+0x1e4>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <UART_SetConfig+0x1cc>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d006      	beq.n	80043d8 <UART_SetConfig+0x1d8>
 80043ca:	e00b      	b.n	80043e4 <UART_SetConfig+0x1e4>
 80043cc:	2300      	movs	r3, #0
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e063      	b.n	800449a <UART_SetConfig+0x29a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e060      	b.n	800449a <UART_SetConfig+0x29a>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e05d      	b.n	800449a <UART_SetConfig+0x29a>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e05a      	b.n	800449a <UART_SetConfig+0x29a>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e057      	b.n	800449a <UART_SetConfig+0x29a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a47      	ldr	r2, [pc, #284]	; (800450c <UART_SetConfig+0x30c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0x240>
 80043f4:	4b41      	ldr	r3, [pc, #260]	; (80044fc <UART_SetConfig+0x2fc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d017      	beq.n	8004434 <UART_SetConfig+0x234>
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d817      	bhi.n	800443a <UART_SetConfig+0x23a>
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d00b      	beq.n	8004428 <UART_SetConfig+0x228>
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d811      	bhi.n	800443a <UART_SetConfig+0x23a>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <UART_SetConfig+0x222>
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d006      	beq.n	800442e <UART_SetConfig+0x22e>
 8004420:	e00b      	b.n	800443a <UART_SetConfig+0x23a>
 8004422:	2300      	movs	r3, #0
 8004424:	76fb      	strb	r3, [r7, #27]
 8004426:	e038      	b.n	800449a <UART_SetConfig+0x29a>
 8004428:	2302      	movs	r3, #2
 800442a:	76fb      	strb	r3, [r7, #27]
 800442c:	e035      	b.n	800449a <UART_SetConfig+0x29a>
 800442e:	2304      	movs	r3, #4
 8004430:	76fb      	strb	r3, [r7, #27]
 8004432:	e032      	b.n	800449a <UART_SetConfig+0x29a>
 8004434:	2308      	movs	r3, #8
 8004436:	76fb      	strb	r3, [r7, #27]
 8004438:	e02f      	b.n	800449a <UART_SetConfig+0x29a>
 800443a:	2310      	movs	r3, #16
 800443c:	76fb      	strb	r3, [r7, #27]
 800443e:	e02c      	b.n	800449a <UART_SetConfig+0x29a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2b      	ldr	r2, [pc, #172]	; (80044f4 <UART_SetConfig+0x2f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d125      	bne.n	8004496 <UART_SetConfig+0x296>
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <UART_SetConfig+0x2fc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004458:	d017      	beq.n	800448a <UART_SetConfig+0x28a>
 800445a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445e:	d817      	bhi.n	8004490 <UART_SetConfig+0x290>
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d00b      	beq.n	800447e <UART_SetConfig+0x27e>
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446a:	d811      	bhi.n	8004490 <UART_SetConfig+0x290>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <UART_SetConfig+0x278>
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d006      	beq.n	8004484 <UART_SetConfig+0x284>
 8004476:	e00b      	b.n	8004490 <UART_SetConfig+0x290>
 8004478:	2300      	movs	r3, #0
 800447a:	76fb      	strb	r3, [r7, #27]
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x29a>
 800447e:	2302      	movs	r3, #2
 8004480:	76fb      	strb	r3, [r7, #27]
 8004482:	e00a      	b.n	800449a <UART_SetConfig+0x29a>
 8004484:	2304      	movs	r3, #4
 8004486:	76fb      	strb	r3, [r7, #27]
 8004488:	e007      	b.n	800449a <UART_SetConfig+0x29a>
 800448a:	2308      	movs	r3, #8
 800448c:	76fb      	strb	r3, [r7, #27]
 800448e:	e004      	b.n	800449a <UART_SetConfig+0x29a>
 8004490:	2310      	movs	r3, #16
 8004492:	76fb      	strb	r3, [r7, #27]
 8004494:	e001      	b.n	800449a <UART_SetConfig+0x29a>
 8004496:	2310      	movs	r3, #16
 8004498:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <UART_SetConfig+0x2f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f040 809f 	bne.w	80045e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044a6:	7efb      	ldrb	r3, [r7, #27]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d837      	bhi.n	800451c <UART_SetConfig+0x31c>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x2b4>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	0800451d 	.word	0x0800451d
 80044c4:	080044e7 	.word	0x080044e7
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	08004515 	.word	0x08004515
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7ff faee 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80044dc:	6178      	str	r0, [r7, #20]
        break;
 80044de:	e022      	b.n	8004526 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <UART_SetConfig+0x310>)
 80044e2:	617b      	str	r3, [r7, #20]
        break;
 80044e4:	e01f      	b.n	8004526 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7ff fa79 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 80044ea:	6178      	str	r0, [r7, #20]
        break;
 80044ec:	e01b      	b.n	8004526 <UART_SetConfig+0x326>
 80044ee:	bf00      	nop
 80044f0:	cfff69f3 	.word	0xcfff69f3
 80044f4:	40008000 	.word	0x40008000
 80044f8:	40013800 	.word	0x40013800
 80044fc:	40021000 	.word	0x40021000
 8004500:	40004400 	.word	0x40004400
 8004504:	40004800 	.word	0x40004800
 8004508:	40004c00 	.word	0x40004c00
 800450c:	40005000 	.word	0x40005000
 8004510:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004518:	617b      	str	r3, [r7, #20]
        break;
 800451a:	e004      	b.n	8004526 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	76bb      	strb	r3, [r7, #26]
        break;
 8004524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 811b 	beq.w	8004764 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	4a96      	ldr	r2, [pc, #600]	; (800478c <UART_SetConfig+0x58c>)
 8004534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004538:	461a      	mov	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004540:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d305      	bcc.n	800455e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	429a      	cmp	r2, r3
 800455c:	d902      	bls.n	8004564 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	76bb      	strb	r3, [r7, #26]
 8004562:	e0ff      	b.n	8004764 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4618      	mov	r0, r3
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	4a86      	ldr	r2, [pc, #536]	; (800478c <UART_SetConfig+0x58c>)
 8004572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004576:	b29a      	uxth	r2, r3
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	f7fb fea0 	bl	80002c0 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	020b      	lsls	r3, r1, #8
 8004592:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004596:	0202      	lsls	r2, r0, #8
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	6849      	ldr	r1, [r1, #4]
 800459c:	0849      	lsrs	r1, r1, #1
 800459e:	4608      	mov	r0, r1
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	1814      	adds	r4, r2, r0
 80045a6:	eb43 0501 	adc.w	r5, r3, r1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	f7fb fe82 	bl	80002c0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d308      	bcc.n	80045de <UART_SetConfig+0x3de>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d2:	d204      	bcs.n	80045de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e0c2      	b.n	8004764 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	76bb      	strb	r3, [r7, #26]
 80045e2:	e0bf      	b.n	8004764 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ec:	d165      	bne.n	80046ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80045ee:	7efb      	ldrb	r3, [r7, #27]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d828      	bhi.n	8004646 <UART_SetConfig+0x446>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x3fc>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	08004647 	.word	0x08004647
 800460c:	08004637 	.word	0x08004637
 8004610:	08004647 	.word	0x08004647
 8004614:	08004647 	.word	0x08004647
 8004618:	08004647 	.word	0x08004647
 800461c:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7ff fa4a 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 8004624:	6178      	str	r0, [r7, #20]
        break;
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7ff fa5c 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 800462c:	6178      	str	r0, [r7, #20]
        break;
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b57      	ldr	r3, [pc, #348]	; (8004790 <UART_SetConfig+0x590>)
 8004632:	617b      	str	r3, [r7, #20]
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7ff f9d1 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800463a:	6178      	str	r0, [r7, #20]
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004642:	617b      	str	r3, [r7, #20]
        break;
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	76bb      	strb	r3, [r7, #26]
        break;
 800464e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8086 	beq.w	8004764 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	4a4b      	ldr	r2, [pc, #300]	; (800478c <UART_SetConfig+0x58c>)
 800465e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004662:	461a      	mov	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fbb3 f3f2 	udiv	r3, r3, r2
 800466a:	005a      	lsls	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	441a      	add	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	b29b      	uxth	r3, r3
 800467e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	d916      	bls.n	80046b4 <UART_SetConfig+0x4b4>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d212      	bcs.n	80046b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f023 030f 	bic.w	r3, r3, #15
 8004696:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	b29b      	uxth	r3, r3
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	89fb      	ldrh	r3, [r7, #14]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	89fa      	ldrh	r2, [r7, #14]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	e057      	b.n	8004764 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	76bb      	strb	r3, [r7, #26]
 80046b8:	e054      	b.n	8004764 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ba:	7efb      	ldrb	r3, [r7, #27]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d828      	bhi.n	8004712 <UART_SetConfig+0x512>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x4c8>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7ff f9e4 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80046f0:	6178      	str	r0, [r7, #20]
        break;
 80046f2:	e013      	b.n	800471c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7ff f9f6 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 80046f8:	6178      	str	r0, [r7, #20]
        break;
 80046fa:	e00f      	b.n	800471c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <UART_SetConfig+0x590>)
 80046fe:	617b      	str	r3, [r7, #20]
        break;
 8004700:	e00c      	b.n	800471c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7ff f96b 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8004706:	6178      	str	r0, [r7, #20]
        break;
 8004708:	e008      	b.n	800471c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	617b      	str	r3, [r7, #20]
        break;
 8004710:	e004      	b.n	800471c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	76bb      	strb	r3, [r7, #26]
        break;
 800471a:	bf00      	nop
    }

    if (pclk != 0U)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	4a19      	ldr	r2, [pc, #100]	; (800478c <UART_SetConfig+0x58c>)
 8004728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800472c:	461a      	mov	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fbb3 f2f2 	udiv	r2, r3, r2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d908      	bls.n	8004760 <UART_SetConfig+0x560>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d204      	bcs.n	8004760 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e001      	b.n	8004764 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004780:	7ebb      	ldrb	r3, [r7, #26]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bdb0      	pop	{r4, r5, r7, pc}
 800478a:	bf00      	nop
 800478c:	08005bc0 	.word	0x08005bc0
 8004790:	00f42400 	.word	0x00f42400

08004794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01a      	beq.n	80048aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004892:	d10a      	bne.n	80048aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e8:	f7fc fadc 	bl	8000ea4 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10e      	bne.n	800491a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f82f 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e025      	b.n	8004966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d10e      	bne.n	8004946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f819 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	e062      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d05e      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	f7fc fa8c 	bl	8000ea4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <UART_WaitOnFlagUntilTimeout+0x30>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11d      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e045      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02e      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d126      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e00f      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d08d      	beq.n	8004980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e027      	b.n	8004ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e02d      	b.n	8004b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0201 	bic.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f84f 	bl	8004bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e02d      	b.n	8004bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f811 	bl	8004bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bf8:	e031      	b.n	8004c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bfe:	2308      	movs	r3, #8
 8004c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	0e5b      	lsrs	r3, r3, #25
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	0f5b      	lsrs	r3, r3, #29
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c22:	7bbb      	ldrb	r3, [r7, #14]
 8004c24:	7b3a      	ldrb	r2, [r7, #12]
 8004c26:	4911      	ldr	r1, [pc, #68]	; (8004c6c <UARTEx_SetNbDataToProcess+0x94>)
 8004c28:	5c8a      	ldrb	r2, [r1, r2]
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c2e:	7b3a      	ldrb	r2, [r7, #12]
 8004c30:	490f      	ldr	r1, [pc, #60]	; (8004c70 <UARTEx_SetNbDataToProcess+0x98>)
 8004c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	7b7a      	ldrb	r2, [r7, #13]
 8004c44:	4909      	ldr	r1, [pc, #36]	; (8004c6c <UARTEx_SetNbDataToProcess+0x94>)
 8004c46:	5c8a      	ldrb	r2, [r1, r2]
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c4c:	7b7a      	ldrb	r2, [r7, #13]
 8004c4e:	4908      	ldr	r1, [pc, #32]	; (8004c70 <UARTEx_SetNbDataToProcess+0x98>)
 8004c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	08005bd8 	.word	0x08005bd8
 8004c70:	08005be0 	.word	0x08005be0

08004c74 <__errno>:
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <__errno+0x8>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4d0d      	ldr	r5, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4d0b      	ldr	r5, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 ff76 	bl	8005b84 <_init>
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08005c88 	.word	0x08005c88
 8004cbc:	08005c88 	.word	0x08005c88
 8004cc0:	08005c88 	.word	0x08005c88
 8004cc4:	08005c8c 	.word	0x08005c8c

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <iprintf>:
 8004cd8:	b40f      	push	{r0, r1, r2, r3}
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <iprintf+0x2c>)
 8004cdc:	b513      	push	{r0, r1, r4, lr}
 8004cde:	681c      	ldr	r4, [r3, #0]
 8004ce0:	b124      	cbz	r4, 8004cec <iprintf+0x14>
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	b913      	cbnz	r3, 8004cec <iprintf+0x14>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 f866 	bl	8004db8 <__sinit>
 8004cec:	ab05      	add	r3, sp, #20
 8004cee:	9a04      	ldr	r2, [sp, #16]
 8004cf0:	68a1      	ldr	r1, [r4, #8]
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f983 	bl	8005000 <_vfiprintf_r>
 8004cfa:	b002      	add	sp, #8
 8004cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d00:	b004      	add	sp, #16
 8004d02:	4770      	bx	lr
 8004d04:	2000000c 	.word	0x2000000c

08004d08 <std>:
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6183      	str	r3, [r0, #24]
 8004d20:	4619      	mov	r1, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	305c      	adds	r0, #92	; 0x5c
 8004d26:	f7ff ffcf 	bl	8004cc8 <memset>
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <std+0x38>)
 8004d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <std+0x3c>)
 8004d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <std+0x40>)
 8004d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <std+0x44>)
 8004d38:	6224      	str	r4, [r4, #32]
 8004d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	080055a9 	.word	0x080055a9
 8004d44:	080055cb 	.word	0x080055cb
 8004d48:	08005603 	.word	0x08005603
 8004d4c:	08005627 	.word	0x08005627

08004d50 <_cleanup_r>:
 8004d50:	4901      	ldr	r1, [pc, #4]	; (8004d58 <_cleanup_r+0x8>)
 8004d52:	f000 b8af 	b.w	8004eb4 <_fwalk_reent>
 8004d56:	bf00      	nop
 8004d58:	08005901 	.word	0x08005901

08004d5c <__sfmoreglue>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	1e4a      	subs	r2, r1, #1
 8004d60:	2568      	movs	r5, #104	; 0x68
 8004d62:	4355      	muls	r5, r2
 8004d64:	460e      	mov	r6, r1
 8004d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d6a:	f000 f8c5 	bl	8004ef8 <_malloc_r>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	b140      	cbz	r0, 8004d84 <__sfmoreglue+0x28>
 8004d72:	2100      	movs	r1, #0
 8004d74:	e9c0 1600 	strd	r1, r6, [r0]
 8004d78:	300c      	adds	r0, #12
 8004d7a:	60a0      	str	r0, [r4, #8]
 8004d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d80:	f7ff ffa2 	bl	8004cc8 <memset>
 8004d84:	4620      	mov	r0, r4
 8004d86:	bd70      	pop	{r4, r5, r6, pc}

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 b8b3 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000208 	.word	0x20000208

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 b8ae 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000208 	.word	0x20000208

08004da0 <__sinit_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sinit_lock_acquire+0x8>)
 8004da2:	f000 b8a7 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000203 	.word	0x20000203

08004dac <__sinit_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sinit_lock_release+0x8>)
 8004dae:	f000 b8a2 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	20000203 	.word	0x20000203

08004db8 <__sinit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f7ff fff0 	bl	8004da0 <__sinit_lock_acquire>
 8004dc0:	69a3      	ldr	r3, [r4, #24]
 8004dc2:	b11b      	cbz	r3, 8004dcc <__sinit+0x14>
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f7ff bff0 	b.w	8004dac <__sinit_lock_release>
 8004dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <__sinit+0x68>)
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <__sinit+0x6c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	bf04      	itt	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	61a3      	streq	r3, [r4, #24]
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 f820 	bl	8004e28 <__sfp>
 8004de8:	6060      	str	r0, [r4, #4]
 8004dea:	4620      	mov	r0, r4
 8004dec:	f000 f81c 	bl	8004e28 <__sfp>
 8004df0:	60a0      	str	r0, [r4, #8]
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f818 	bl	8004e28 <__sfp>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	60e0      	str	r0, [r4, #12]
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	6860      	ldr	r0, [r4, #4]
 8004e00:	f7ff ff82 	bl	8004d08 <std>
 8004e04:	68a0      	ldr	r0, [r4, #8]
 8004e06:	2201      	movs	r2, #1
 8004e08:	2109      	movs	r1, #9
 8004e0a:	f7ff ff7d 	bl	8004d08 <std>
 8004e0e:	68e0      	ldr	r0, [r4, #12]
 8004e10:	2202      	movs	r2, #2
 8004e12:	2112      	movs	r1, #18
 8004e14:	f7ff ff78 	bl	8004d08 <std>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61a3      	str	r3, [r4, #24]
 8004e1c:	e7d2      	b.n	8004dc4 <__sinit+0xc>
 8004e1e:	bf00      	nop
 8004e20:	08005be8 	.word	0x08005be8
 8004e24:	08004d51 	.word	0x08004d51

08004e28 <__sfp>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	f7ff ffac 	bl	8004d88 <__sfp_lock_acquire>
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <__sfp+0x84>)
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	69b3      	ldr	r3, [r6, #24]
 8004e36:	b913      	cbnz	r3, 8004e3e <__sfp+0x16>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbd 	bl	8004db8 <__sinit>
 8004e3e:	3648      	adds	r6, #72	; 0x48
 8004e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	d503      	bpl.n	8004e50 <__sfp+0x28>
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	b30b      	cbz	r3, 8004e90 <__sfp+0x68>
 8004e4c:	6836      	ldr	r6, [r6, #0]
 8004e4e:	e7f7      	b.n	8004e40 <__sfp+0x18>
 8004e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e54:	b9d5      	cbnz	r5, 8004e8c <__sfp+0x64>
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <__sfp+0x88>)
 8004e58:	60e3      	str	r3, [r4, #12]
 8004e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e60:	f000 f847 	bl	8004ef2 <__retarget_lock_init_recursive>
 8004e64:	f7ff ff96 	bl	8004d94 <__sfp_lock_release>
 8004e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e70:	6025      	str	r5, [r4, #0]
 8004e72:	61a5      	str	r5, [r4, #24]
 8004e74:	2208      	movs	r2, #8
 8004e76:	4629      	mov	r1, r5
 8004e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e7c:	f7ff ff24 	bl	8004cc8 <memset>
 8004e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8c:	3468      	adds	r4, #104	; 0x68
 8004e8e:	e7d9      	b.n	8004e44 <__sfp+0x1c>
 8004e90:	2104      	movs	r1, #4
 8004e92:	4638      	mov	r0, r7
 8004e94:	f7ff ff62 	bl	8004d5c <__sfmoreglue>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	6030      	str	r0, [r6, #0]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1d5      	bne.n	8004e4c <__sfp+0x24>
 8004ea0:	f7ff ff78 	bl	8004d94 <__sfp_lock_release>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__sfp+0x60>
 8004eaa:	bf00      	nop
 8004eac:	08005be8 	.word	0x08005be8
 8004eb0:	ffff0001 	.word	0xffff0001

08004eb4 <_fwalk_reent>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	4688      	mov	r8, r1
 8004ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec0:	2700      	movs	r7, #0
 8004ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eca:	d505      	bpl.n	8004ed8 <_fwalk_reent+0x24>
 8004ecc:	6824      	ldr	r4, [r4, #0]
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d1f7      	bne.n	8004ec2 <_fwalk_reent+0xe>
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	89ab      	ldrh	r3, [r5, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d907      	bls.n	8004eee <_fwalk_reent+0x3a>
 8004ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	d003      	beq.n	8004eee <_fwalk_reent+0x3a>
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4630      	mov	r0, r6
 8004eea:	47c0      	blx	r8
 8004eec:	4307      	orrs	r7, r0
 8004eee:	3568      	adds	r5, #104	; 0x68
 8004ef0:	e7e9      	b.n	8004ec6 <_fwalk_reent+0x12>

08004ef2 <__retarget_lock_init_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <_malloc_r>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	1ccd      	adds	r5, r1, #3
 8004efc:	f025 0503 	bic.w	r5, r5, #3
 8004f00:	3508      	adds	r5, #8
 8004f02:	2d0c      	cmp	r5, #12
 8004f04:	bf38      	it	cc
 8004f06:	250c      	movcc	r5, #12
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	db01      	blt.n	8004f12 <_malloc_r+0x1a>
 8004f0e:	42a9      	cmp	r1, r5
 8004f10:	d903      	bls.n	8004f1a <_malloc_r+0x22>
 8004f12:	230c      	movs	r3, #12
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	2000      	movs	r0, #0
 8004f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1a:	f000 fda3 	bl	8005a64 <__malloc_lock>
 8004f1e:	4921      	ldr	r1, [pc, #132]	; (8004fa4 <_malloc_r+0xac>)
 8004f20:	680a      	ldr	r2, [r1, #0]
 8004f22:	4614      	mov	r4, r2
 8004f24:	b99c      	cbnz	r4, 8004f4e <_malloc_r+0x56>
 8004f26:	4f20      	ldr	r7, [pc, #128]	; (8004fa8 <_malloc_r+0xb0>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b923      	cbnz	r3, 8004f36 <_malloc_r+0x3e>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 fb2a 	bl	8005588 <_sbrk_r>
 8004f34:	6038      	str	r0, [r7, #0]
 8004f36:	4629      	mov	r1, r5
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 fb25 	bl	8005588 <_sbrk_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d123      	bne.n	8004f8a <_malloc_r+0x92>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fd92 	bl	8005a70 <__malloc_unlock>
 8004f4c:	e7e3      	b.n	8004f16 <_malloc_r+0x1e>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	1b5b      	subs	r3, r3, r5
 8004f52:	d417      	bmi.n	8004f84 <_malloc_r+0x8c>
 8004f54:	2b0b      	cmp	r3, #11
 8004f56:	d903      	bls.n	8004f60 <_malloc_r+0x68>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	441c      	add	r4, r3
 8004f5c:	6025      	str	r5, [r4, #0]
 8004f5e:	e004      	b.n	8004f6a <_malloc_r+0x72>
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	42a2      	cmp	r2, r4
 8004f64:	bf0c      	ite	eq
 8004f66:	600b      	streq	r3, [r1, #0]
 8004f68:	6053      	strne	r3, [r2, #4]
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 fd80 	bl	8005a70 <__malloc_unlock>
 8004f70:	f104 000b 	add.w	r0, r4, #11
 8004f74:	1d23      	adds	r3, r4, #4
 8004f76:	f020 0007 	bic.w	r0, r0, #7
 8004f7a:	1ac2      	subs	r2, r0, r3
 8004f7c:	d0cc      	beq.n	8004f18 <_malloc_r+0x20>
 8004f7e:	1a1b      	subs	r3, r3, r0
 8004f80:	50a3      	str	r3, [r4, r2]
 8004f82:	e7c9      	b.n	8004f18 <_malloc_r+0x20>
 8004f84:	4622      	mov	r2, r4
 8004f86:	6864      	ldr	r4, [r4, #4]
 8004f88:	e7cc      	b.n	8004f24 <_malloc_r+0x2c>
 8004f8a:	1cc4      	adds	r4, r0, #3
 8004f8c:	f024 0403 	bic.w	r4, r4, #3
 8004f90:	42a0      	cmp	r0, r4
 8004f92:	d0e3      	beq.n	8004f5c <_malloc_r+0x64>
 8004f94:	1a21      	subs	r1, r4, r0
 8004f96:	4630      	mov	r0, r6
 8004f98:	f000 faf6 	bl	8005588 <_sbrk_r>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d1dd      	bne.n	8004f5c <_malloc_r+0x64>
 8004fa0:	e7cf      	b.n	8004f42 <_malloc_r+0x4a>
 8004fa2:	bf00      	nop
 8004fa4:	20000090 	.word	0x20000090
 8004fa8:	20000094 	.word	0x20000094

08004fac <__sfputc_r>:
 8004fac:	6893      	ldr	r3, [r2, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	b410      	push	{r4}
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	da08      	bge.n	8004fca <__sfputc_r+0x1e>
 8004fb8:	6994      	ldr	r4, [r2, #24]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	db01      	blt.n	8004fc2 <__sfputc_r+0x16>
 8004fbe:	290a      	cmp	r1, #10
 8004fc0:	d103      	bne.n	8004fca <__sfputc_r+0x1e>
 8004fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc6:	f000 bb33 	b.w	8005630 <__swbuf_r>
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	1c58      	adds	r0, r3, #1
 8004fce:	6010      	str	r0, [r2, #0]
 8004fd0:	7019      	strb	r1, [r3, #0]
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <__sfputs_r>:
 8004fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	18d5      	adds	r5, r2, r3
 8004fe4:	42ac      	cmp	r4, r5
 8004fe6:	d101      	bne.n	8004fec <__sfputs_r+0x12>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e007      	b.n	8004ffc <__sfputs_r+0x22>
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	463a      	mov	r2, r7
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7ff ffda 	bl	8004fac <__sfputc_r>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d1f3      	bne.n	8004fe4 <__sfputs_r+0xa>
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005000 <_vfiprintf_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	b09d      	sub	sp, #116	; 0x74
 8005008:	4614      	mov	r4, r2
 800500a:	4698      	mov	r8, r3
 800500c:	4606      	mov	r6, r0
 800500e:	b118      	cbz	r0, 8005018 <_vfiprintf_r+0x18>
 8005010:	6983      	ldr	r3, [r0, #24]
 8005012:	b90b      	cbnz	r3, 8005018 <_vfiprintf_r+0x18>
 8005014:	f7ff fed0 	bl	8004db8 <__sinit>
 8005018:	4b89      	ldr	r3, [pc, #548]	; (8005240 <_vfiprintf_r+0x240>)
 800501a:	429d      	cmp	r5, r3
 800501c:	d11b      	bne.n	8005056 <_vfiprintf_r+0x56>
 800501e:	6875      	ldr	r5, [r6, #4]
 8005020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x32>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x32>
 800502c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800502e:	f7ff ff61 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x3c>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b9eb      	cbnz	r3, 8005078 <_vfiprintf_r+0x78>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f000 fb5a 	bl	80056f8 <__swsetup_r>
 8005044:	b1c0      	cbz	r0, 8005078 <_vfiprintf_r+0x78>
 8005046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d50e      	bpl.n	800506a <_vfiprintf_r+0x6a>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	b01d      	add	sp, #116	; 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <_vfiprintf_r+0x244>)
 8005058:	429d      	cmp	r5, r3
 800505a:	d101      	bne.n	8005060 <_vfiprintf_r+0x60>
 800505c:	68b5      	ldr	r5, [r6, #8]
 800505e:	e7df      	b.n	8005020 <_vfiprintf_r+0x20>
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <_vfiprintf_r+0x248>)
 8005062:	429d      	cmp	r5, r3
 8005064:	bf08      	it	eq
 8005066:	68f5      	ldreq	r5, [r6, #12]
 8005068:	e7da      	b.n	8005020 <_vfiprintf_r+0x20>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	0598      	lsls	r0, r3, #22
 800506e:	d4ed      	bmi.n	800504c <_vfiprintf_r+0x4c>
 8005070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005072:	f7ff ff40 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005076:	e7e9      	b.n	800504c <_vfiprintf_r+0x4c>
 8005078:	2300      	movs	r3, #0
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2320      	movs	r3, #32
 800507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005082:	f8cd 800c 	str.w	r8, [sp, #12]
 8005086:	2330      	movs	r3, #48	; 0x30
 8005088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800524c <_vfiprintf_r+0x24c>
 800508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005090:	f04f 0901 	mov.w	r9, #1
 8005094:	4623      	mov	r3, r4
 8005096:	469a      	mov	sl, r3
 8005098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509c:	b10a      	cbz	r2, 80050a2 <_vfiprintf_r+0xa2>
 800509e:	2a25      	cmp	r2, #37	; 0x25
 80050a0:	d1f9      	bne.n	8005096 <_vfiprintf_r+0x96>
 80050a2:	ebba 0b04 	subs.w	fp, sl, r4
 80050a6:	d00b      	beq.n	80050c0 <_vfiprintf_r+0xc0>
 80050a8:	465b      	mov	r3, fp
 80050aa:	4622      	mov	r2, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ff93 	bl	8004fda <__sfputs_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	f000 80aa 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050bc:	445a      	add	r2, fp
 80050be:	9209      	str	r2, [sp, #36]	; 0x24
 80050c0:	f89a 3000 	ldrb.w	r3, [sl]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a2 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ca:	2300      	movs	r3, #0
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d4:	f10a 0a01 	add.w	sl, sl, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e0:	931a      	str	r3, [sp, #104]	; 0x68
 80050e2:	4654      	mov	r4, sl
 80050e4:	2205      	movs	r2, #5
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4858      	ldr	r0, [pc, #352]	; (800524c <_vfiprintf_r+0x24c>)
 80050ec:	f7fb f898 	bl	8000220 <memchr>
 80050f0:	9a04      	ldr	r2, [sp, #16]
 80050f2:	b9d8      	cbnz	r0, 800512c <_vfiprintf_r+0x12c>
 80050f4:	06d1      	lsls	r1, r2, #27
 80050f6:	bf44      	itt	mi
 80050f8:	2320      	movmi	r3, #32
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fe:	0713      	lsls	r3, r2, #28
 8005100:	bf44      	itt	mi
 8005102:	232b      	movmi	r3, #43	; 0x2b
 8005104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005108:	f89a 3000 	ldrb.w	r3, [sl]
 800510c:	2b2a      	cmp	r3, #42	; 0x2a
 800510e:	d015      	beq.n	800513c <_vfiprintf_r+0x13c>
 8005110:	9a07      	ldr	r2, [sp, #28]
 8005112:	4654      	mov	r4, sl
 8005114:	2000      	movs	r0, #0
 8005116:	f04f 0c0a 	mov.w	ip, #10
 800511a:	4621      	mov	r1, r4
 800511c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005120:	3b30      	subs	r3, #48	; 0x30
 8005122:	2b09      	cmp	r3, #9
 8005124:	d94e      	bls.n	80051c4 <_vfiprintf_r+0x1c4>
 8005126:	b1b0      	cbz	r0, 8005156 <_vfiprintf_r+0x156>
 8005128:	9207      	str	r2, [sp, #28]
 800512a:	e014      	b.n	8005156 <_vfiprintf_r+0x156>
 800512c:	eba0 0308 	sub.w	r3, r0, r8
 8005130:	fa09 f303 	lsl.w	r3, r9, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	46a2      	mov	sl, r4
 800513a:	e7d2      	b.n	80050e2 <_vfiprintf_r+0xe2>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	1d19      	adds	r1, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bfbb      	ittet	lt
 8005148:	425b      	neglt	r3, r3
 800514a:	f042 0202 	orrlt.w	r2, r2, #2
 800514e:	9307      	strge	r3, [sp, #28]
 8005150:	9307      	strlt	r3, [sp, #28]
 8005152:	bfb8      	it	lt
 8005154:	9204      	strlt	r2, [sp, #16]
 8005156:	7823      	ldrb	r3, [r4, #0]
 8005158:	2b2e      	cmp	r3, #46	; 0x2e
 800515a:	d10c      	bne.n	8005176 <_vfiprintf_r+0x176>
 800515c:	7863      	ldrb	r3, [r4, #1]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d135      	bne.n	80051ce <_vfiprintf_r+0x1ce>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	9203      	str	r2, [sp, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	bfb8      	it	lt
 800516e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005172:	3402      	adds	r4, #2
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800525c <_vfiprintf_r+0x25c>
 800517a:	7821      	ldrb	r1, [r4, #0]
 800517c:	2203      	movs	r2, #3
 800517e:	4650      	mov	r0, sl
 8005180:	f7fb f84e 	bl	8000220 <memchr>
 8005184:	b140      	cbz	r0, 8005198 <_vfiprintf_r+0x198>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	eba0 000a 	sub.w	r0, r0, sl
 800518c:	fa03 f000 	lsl.w	r0, r3, r0
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	4303      	orrs	r3, r0
 8005194:	3401      	adds	r4, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	482c      	ldr	r0, [pc, #176]	; (8005250 <_vfiprintf_r+0x250>)
 800519e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051a2:	2206      	movs	r2, #6
 80051a4:	f7fb f83c 	bl	8000220 <memchr>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d03f      	beq.n	800522c <_vfiprintf_r+0x22c>
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <_vfiprintf_r+0x254>)
 80051ae:	bb1b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x1f8>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	3307      	adds	r3, #7
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	3308      	adds	r3, #8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051be:	443b      	add	r3, r7
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	e767      	b.n	8005094 <_vfiprintf_r+0x94>
 80051c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c8:	460c      	mov	r4, r1
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7a5      	b.n	800511a <_vfiprintf_r+0x11a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	3401      	adds	r4, #1
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4620      	mov	r0, r4
 80051dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e0:	3a30      	subs	r2, #48	; 0x30
 80051e2:	2a09      	cmp	r2, #9
 80051e4:	d903      	bls.n	80051ee <_vfiprintf_r+0x1ee>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c5      	beq.n	8005176 <_vfiprintf_r+0x176>
 80051ea:	9105      	str	r1, [sp, #20]
 80051ec:	e7c3      	b.n	8005176 <_vfiprintf_r+0x176>
 80051ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f2:	4604      	mov	r4, r0
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7f0      	b.n	80051da <_vfiprintf_r+0x1da>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <_vfiprintf_r+0x258>)
 8005200:	a904      	add	r1, sp, #16
 8005202:	4630      	mov	r0, r6
 8005204:	f3af 8000 	nop.w
 8005208:	4607      	mov	r7, r0
 800520a:	1c78      	adds	r0, r7, #1
 800520c:	d1d6      	bne.n	80051bc <_vfiprintf_r+0x1bc>
 800520e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	d405      	bmi.n	8005220 <_vfiprintf_r+0x220>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	059a      	lsls	r2, r3, #22
 8005218:	d402      	bmi.n	8005220 <_vfiprintf_r+0x220>
 800521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521c:	f7ff fe6b 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005220:	89ab      	ldrh	r3, [r5, #12]
 8005222:	065b      	lsls	r3, r3, #25
 8005224:	f53f af12 	bmi.w	800504c <_vfiprintf_r+0x4c>
 8005228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522a:	e711      	b.n	8005050 <_vfiprintf_r+0x50>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <_vfiprintf_r+0x258>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4630      	mov	r0, r6
 8005238:	f000 f880 	bl	800533c <_printf_i>
 800523c:	e7e4      	b.n	8005208 <_vfiprintf_r+0x208>
 800523e:	bf00      	nop
 8005240:	08005c0c 	.word	0x08005c0c
 8005244:	08005c2c 	.word	0x08005c2c
 8005248:	08005bec 	.word	0x08005bec
 800524c:	08005c4c 	.word	0x08005c4c
 8005250:	08005c56 	.word	0x08005c56
 8005254:	00000000 	.word	0x00000000
 8005258:	08004fdb 	.word	0x08004fdb
 800525c:	08005c52 	.word	0x08005c52

08005260 <_printf_common>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	4699      	mov	r9, r3
 8005268:	688a      	ldr	r2, [r1, #8]
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005270:	4293      	cmp	r3, r2
 8005272:	bfb8      	it	lt
 8005274:	4613      	movlt	r3, r2
 8005276:	6033      	str	r3, [r6, #0]
 8005278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800527c:	4607      	mov	r7, r0
 800527e:	460c      	mov	r4, r1
 8005280:	b10a      	cbz	r2, 8005286 <_printf_common+0x26>
 8005282:	3301      	adds	r3, #1
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	0699      	lsls	r1, r3, #26
 800528a:	bf42      	ittt	mi
 800528c:	6833      	ldrmi	r3, [r6, #0]
 800528e:	3302      	addmi	r3, #2
 8005290:	6033      	strmi	r3, [r6, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	f015 0506 	ands.w	r5, r5, #6
 8005298:	d106      	bne.n	80052a8 <_printf_common+0x48>
 800529a:	f104 0a19 	add.w	sl, r4, #25
 800529e:	68e3      	ldr	r3, [r4, #12]
 80052a0:	6832      	ldr	r2, [r6, #0]
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc26      	bgt.n	80052f6 <_printf_common+0x96>
 80052a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ac:	1e13      	subs	r3, r2, #0
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	0692      	lsls	r2, r2, #26
 80052b6:	d42b      	bmi.n	8005310 <_printf_common+0xb0>
 80052b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d01e      	beq.n	8005304 <_printf_common+0xa4>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	68e5      	ldr	r5, [r4, #12]
 80052ca:	6832      	ldr	r2, [r6, #0]
 80052cc:	f003 0306 	and.w	r3, r3, #6
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	bf08      	it	eq
 80052d4:	1aad      	subeq	r5, r5, r2
 80052d6:	68a3      	ldr	r3, [r4, #8]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	bf0c      	ite	eq
 80052dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e0:	2500      	movne	r5, #0
 80052e2:	4293      	cmp	r3, r2
 80052e4:	bfc4      	itt	gt
 80052e6:	1a9b      	subgt	r3, r3, r2
 80052e8:	18ed      	addgt	r5, r5, r3
 80052ea:	2600      	movs	r6, #0
 80052ec:	341a      	adds	r4, #26
 80052ee:	42b5      	cmp	r5, r6
 80052f0:	d11a      	bne.n	8005328 <_printf_common+0xc8>
 80052f2:	2000      	movs	r0, #0
 80052f4:	e008      	b.n	8005308 <_printf_common+0xa8>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4652      	mov	r2, sl
 80052fa:	4649      	mov	r1, r9
 80052fc:	4638      	mov	r0, r7
 80052fe:	47c0      	blx	r8
 8005300:	3001      	adds	r0, #1
 8005302:	d103      	bne.n	800530c <_printf_common+0xac>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	3501      	adds	r5, #1
 800530e:	e7c6      	b.n	800529e <_printf_common+0x3e>
 8005310:	18e1      	adds	r1, r4, r3
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	2030      	movs	r0, #48	; 0x30
 8005316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800531a:	4422      	add	r2, r4
 800531c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005324:	3302      	adds	r3, #2
 8005326:	e7c7      	b.n	80052b8 <_printf_common+0x58>
 8005328:	2301      	movs	r3, #1
 800532a:	4622      	mov	r2, r4
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d0e6      	beq.n	8005304 <_printf_common+0xa4>
 8005336:	3601      	adds	r6, #1
 8005338:	e7d9      	b.n	80052ee <_printf_common+0x8e>
	...

0800533c <_printf_i>:
 800533c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	4691      	mov	r9, r2
 8005344:	7e27      	ldrb	r7, [r4, #24]
 8005346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005348:	2f78      	cmp	r7, #120	; 0x78
 800534a:	4680      	mov	r8, r0
 800534c:	469a      	mov	sl, r3
 800534e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005352:	d807      	bhi.n	8005364 <_printf_i+0x28>
 8005354:	2f62      	cmp	r7, #98	; 0x62
 8005356:	d80a      	bhi.n	800536e <_printf_i+0x32>
 8005358:	2f00      	cmp	r7, #0
 800535a:	f000 80d8 	beq.w	800550e <_printf_i+0x1d2>
 800535e:	2f58      	cmp	r7, #88	; 0x58
 8005360:	f000 80a3 	beq.w	80054aa <_printf_i+0x16e>
 8005364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800536c:	e03a      	b.n	80053e4 <_printf_i+0xa8>
 800536e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005372:	2b15      	cmp	r3, #21
 8005374:	d8f6      	bhi.n	8005364 <_printf_i+0x28>
 8005376:	a001      	add	r0, pc, #4	; (adr r0, 800537c <_printf_i+0x40>)
 8005378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053e9 	.word	0x080053e9
 8005384:	08005365 	.word	0x08005365
 8005388:	08005365 	.word	0x08005365
 800538c:	08005365 	.word	0x08005365
 8005390:	08005365 	.word	0x08005365
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005365 	.word	0x08005365
 800539c:	08005365 	.word	0x08005365
 80053a0:	08005365 	.word	0x08005365
 80053a4:	08005365 	.word	0x08005365
 80053a8:	080054f5 	.word	0x080054f5
 80053ac:	08005419 	.word	0x08005419
 80053b0:	080054d7 	.word	0x080054d7
 80053b4:	08005365 	.word	0x08005365
 80053b8:	08005365 	.word	0x08005365
 80053bc:	08005517 	.word	0x08005517
 80053c0:	08005365 	.word	0x08005365
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005365 	.word	0x08005365
 80053cc:	08005365 	.word	0x08005365
 80053d0:	080054df 	.word	0x080054df
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	600a      	str	r2, [r1, #0]
 80053dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0a3      	b.n	8005530 <_printf_i+0x1f4>
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	6808      	ldr	r0, [r1, #0]
 80053ec:	062e      	lsls	r6, r5, #24
 80053ee:	f100 0304 	add.w	r3, r0, #4
 80053f2:	d50a      	bpl.n	800540a <_printf_i+0xce>
 80053f4:	6805      	ldr	r5, [r0, #0]
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da03      	bge.n	8005404 <_printf_i+0xc8>
 80053fc:	232d      	movs	r3, #45	; 0x2d
 80053fe:	426d      	negs	r5, r5
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	485e      	ldr	r0, [pc, #376]	; (8005580 <_printf_i+0x244>)
 8005406:	230a      	movs	r3, #10
 8005408:	e019      	b.n	800543e <_printf_i+0x102>
 800540a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800540e:	6805      	ldr	r5, [r0, #0]
 8005410:	600b      	str	r3, [r1, #0]
 8005412:	bf18      	it	ne
 8005414:	b22d      	sxthne	r5, r5
 8005416:	e7ef      	b.n	80053f8 <_printf_i+0xbc>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	1d18      	adds	r0, r3, #4
 800541e:	6008      	str	r0, [r1, #0]
 8005420:	0628      	lsls	r0, r5, #24
 8005422:	d501      	bpl.n	8005428 <_printf_i+0xec>
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0xf2>
 8005428:	0669      	lsls	r1, r5, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0xe8>
 800542c:	881d      	ldrh	r5, [r3, #0]
 800542e:	4854      	ldr	r0, [pc, #336]	; (8005580 <_printf_i+0x244>)
 8005430:	2f6f      	cmp	r7, #111	; 0x6f
 8005432:	bf0c      	ite	eq
 8005434:	2308      	moveq	r3, #8
 8005436:	230a      	movne	r3, #10
 8005438:	2100      	movs	r1, #0
 800543a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543e:	6866      	ldr	r6, [r4, #4]
 8005440:	60a6      	str	r6, [r4, #8]
 8005442:	2e00      	cmp	r6, #0
 8005444:	bfa2      	ittt	ge
 8005446:	6821      	ldrge	r1, [r4, #0]
 8005448:	f021 0104 	bicge.w	r1, r1, #4
 800544c:	6021      	strge	r1, [r4, #0]
 800544e:	b90d      	cbnz	r5, 8005454 <_printf_i+0x118>
 8005450:	2e00      	cmp	r6, #0
 8005452:	d04d      	beq.n	80054f0 <_printf_i+0x1b4>
 8005454:	4616      	mov	r6, r2
 8005456:	fbb5 f1f3 	udiv	r1, r5, r3
 800545a:	fb03 5711 	mls	r7, r3, r1, r5
 800545e:	5dc7      	ldrb	r7, [r0, r7]
 8005460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005464:	462f      	mov	r7, r5
 8005466:	42bb      	cmp	r3, r7
 8005468:	460d      	mov	r5, r1
 800546a:	d9f4      	bls.n	8005456 <_printf_i+0x11a>
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10b      	bne.n	8005488 <_printf_i+0x14c>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	07df      	lsls	r7, r3, #31
 8005474:	d508      	bpl.n	8005488 <_printf_i+0x14c>
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	6861      	ldr	r1, [r4, #4]
 800547a:	4299      	cmp	r1, r3
 800547c:	bfde      	ittt	le
 800547e:	2330      	movle	r3, #48	; 0x30
 8005480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005484:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005488:	1b92      	subs	r2, r2, r6
 800548a:	6122      	str	r2, [r4, #16]
 800548c:	f8cd a000 	str.w	sl, [sp]
 8005490:	464b      	mov	r3, r9
 8005492:	aa03      	add	r2, sp, #12
 8005494:	4621      	mov	r1, r4
 8005496:	4640      	mov	r0, r8
 8005498:	f7ff fee2 	bl	8005260 <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	d14c      	bne.n	800553a <_printf_i+0x1fe>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	b004      	add	sp, #16
 80054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054aa:	4835      	ldr	r0, [pc, #212]	; (8005580 <_printf_i+0x244>)
 80054ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	680e      	ldr	r6, [r1, #0]
 80054b4:	061f      	lsls	r7, r3, #24
 80054b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ba:	600e      	str	r6, [r1, #0]
 80054bc:	d514      	bpl.n	80054e8 <_printf_i+0x1ac>
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	bf44      	itt	mi
 80054c2:	f043 0320 	orrmi.w	r3, r3, #32
 80054c6:	6023      	strmi	r3, [r4, #0]
 80054c8:	b91d      	cbnz	r5, 80054d2 <_printf_i+0x196>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f023 0320 	bic.w	r3, r3, #32
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	2310      	movs	r3, #16
 80054d4:	e7b0      	b.n	8005438 <_printf_i+0xfc>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f043 0320 	orr.w	r3, r3, #32
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	2378      	movs	r3, #120	; 0x78
 80054e0:	4828      	ldr	r0, [pc, #160]	; (8005584 <_printf_i+0x248>)
 80054e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054e6:	e7e3      	b.n	80054b0 <_printf_i+0x174>
 80054e8:	065e      	lsls	r6, r3, #25
 80054ea:	bf48      	it	mi
 80054ec:	b2ad      	uxthmi	r5, r5
 80054ee:	e7e6      	b.n	80054be <_printf_i+0x182>
 80054f0:	4616      	mov	r6, r2
 80054f2:	e7bb      	b.n	800546c <_printf_i+0x130>
 80054f4:	680b      	ldr	r3, [r1, #0]
 80054f6:	6826      	ldr	r6, [r4, #0]
 80054f8:	6960      	ldr	r0, [r4, #20]
 80054fa:	1d1d      	adds	r5, r3, #4
 80054fc:	600d      	str	r5, [r1, #0]
 80054fe:	0635      	lsls	r5, r6, #24
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	d501      	bpl.n	8005508 <_printf_i+0x1cc>
 8005504:	6018      	str	r0, [r3, #0]
 8005506:	e002      	b.n	800550e <_printf_i+0x1d2>
 8005508:	0671      	lsls	r1, r6, #25
 800550a:	d5fb      	bpl.n	8005504 <_printf_i+0x1c8>
 800550c:	8018      	strh	r0, [r3, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	4616      	mov	r6, r2
 8005514:	e7ba      	b.n	800548c <_printf_i+0x150>
 8005516:	680b      	ldr	r3, [r1, #0]
 8005518:	1d1a      	adds	r2, r3, #4
 800551a:	600a      	str	r2, [r1, #0]
 800551c:	681e      	ldr	r6, [r3, #0]
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	2100      	movs	r1, #0
 8005522:	4630      	mov	r0, r6
 8005524:	f7fa fe7c 	bl	8000220 <memchr>
 8005528:	b108      	cbz	r0, 800552e <_printf_i+0x1f2>
 800552a:	1b80      	subs	r0, r0, r6
 800552c:	6060      	str	r0, [r4, #4]
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	2300      	movs	r3, #0
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	e7a8      	b.n	800548c <_printf_i+0x150>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	4632      	mov	r2, r6
 800553e:	4649      	mov	r1, r9
 8005540:	4640      	mov	r0, r8
 8005542:	47d0      	blx	sl
 8005544:	3001      	adds	r0, #1
 8005546:	d0ab      	beq.n	80054a0 <_printf_i+0x164>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	079b      	lsls	r3, r3, #30
 800554c:	d413      	bmi.n	8005576 <_printf_i+0x23a>
 800554e:	68e0      	ldr	r0, [r4, #12]
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	4298      	cmp	r0, r3
 8005554:	bfb8      	it	lt
 8005556:	4618      	movlt	r0, r3
 8005558:	e7a4      	b.n	80054a4 <_printf_i+0x168>
 800555a:	2301      	movs	r3, #1
 800555c:	4632      	mov	r2, r6
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	47d0      	blx	sl
 8005564:	3001      	adds	r0, #1
 8005566:	d09b      	beq.n	80054a0 <_printf_i+0x164>
 8005568:	3501      	adds	r5, #1
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	9903      	ldr	r1, [sp, #12]
 800556e:	1a5b      	subs	r3, r3, r1
 8005570:	42ab      	cmp	r3, r5
 8005572:	dcf2      	bgt.n	800555a <_printf_i+0x21e>
 8005574:	e7eb      	b.n	800554e <_printf_i+0x212>
 8005576:	2500      	movs	r5, #0
 8005578:	f104 0619 	add.w	r6, r4, #25
 800557c:	e7f5      	b.n	800556a <_printf_i+0x22e>
 800557e:	bf00      	nop
 8005580:	08005c5d 	.word	0x08005c5d
 8005584:	08005c6e 	.word	0x08005c6e

08005588 <_sbrk_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d06      	ldr	r5, [pc, #24]	; (80055a4 <_sbrk_r+0x1c>)
 800558c:	2300      	movs	r3, #0
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fb fb12 	bl	8000bbc <_sbrk>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_sbrk_r+0x1a>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_sbrk_r+0x1a>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	2000020c 	.word	0x2000020c

080055a8 <__sread>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	f000 fab4 	bl	8005b1c <_read_r>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	bfab      	itete	ge
 80055b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055ba:	89a3      	ldrhlt	r3, [r4, #12]
 80055bc:	181b      	addge	r3, r3, r0
 80055be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c2:	bfac      	ite	ge
 80055c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055c6:	81a3      	strhlt	r3, [r4, #12]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__swrite>:
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	461f      	mov	r7, r3
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	05db      	lsls	r3, r3, #23
 80055d4:	4605      	mov	r5, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4616      	mov	r6, r2
 80055da:	d505      	bpl.n	80055e8 <__swrite+0x1e>
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	2302      	movs	r3, #2
 80055e2:	2200      	movs	r2, #0
 80055e4:	f000 f9c8 	bl	8005978 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4628      	mov	r0, r5
 80055fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	f000 b869 	b.w	80056d4 <_write_r>

08005602 <__sseek>:
 8005602:	b510      	push	{r4, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 f9b5 	bl	8005978 <_lseek_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	bf15      	itete	ne
 8005614:	6560      	strne	r0, [r4, #84]	; 0x54
 8005616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800561e:	81a3      	strheq	r3, [r4, #12]
 8005620:	bf18      	it	ne
 8005622:	81a3      	strhne	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__sclose>:
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 b8d3 	b.w	80057d4 <_close_r>
	...

08005630 <__swbuf_r>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	4614      	mov	r4, r2
 8005636:	4605      	mov	r5, r0
 8005638:	b118      	cbz	r0, 8005642 <__swbuf_r+0x12>
 800563a:	6983      	ldr	r3, [r0, #24]
 800563c:	b90b      	cbnz	r3, 8005642 <__swbuf_r+0x12>
 800563e:	f7ff fbbb 	bl	8004db8 <__sinit>
 8005642:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <__swbuf_r+0x98>)
 8005644:	429c      	cmp	r4, r3
 8005646:	d12b      	bne.n	80056a0 <__swbuf_r+0x70>
 8005648:	686c      	ldr	r4, [r5, #4]
 800564a:	69a3      	ldr	r3, [r4, #24]
 800564c:	60a3      	str	r3, [r4, #8]
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	071a      	lsls	r2, r3, #28
 8005652:	d52f      	bpl.n	80056b4 <__swbuf_r+0x84>
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	b36b      	cbz	r3, 80056b4 <__swbuf_r+0x84>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1ac0      	subs	r0, r0, r3
 800565e:	6963      	ldr	r3, [r4, #20]
 8005660:	b2f6      	uxtb	r6, r6
 8005662:	4283      	cmp	r3, r0
 8005664:	4637      	mov	r7, r6
 8005666:	dc04      	bgt.n	8005672 <__swbuf_r+0x42>
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f948 	bl	8005900 <_fflush_r>
 8005670:	bb30      	cbnz	r0, 80056c0 <__swbuf_r+0x90>
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	3b01      	subs	r3, #1
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	6022      	str	r2, [r4, #0]
 800567e:	701e      	strb	r6, [r3, #0]
 8005680:	6963      	ldr	r3, [r4, #20]
 8005682:	3001      	adds	r0, #1
 8005684:	4283      	cmp	r3, r0
 8005686:	d004      	beq.n	8005692 <__swbuf_r+0x62>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d506      	bpl.n	800569c <__swbuf_r+0x6c>
 800568e:	2e0a      	cmp	r6, #10
 8005690:	d104      	bne.n	800569c <__swbuf_r+0x6c>
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f933 	bl	8005900 <_fflush_r>
 800569a:	b988      	cbnz	r0, 80056c0 <__swbuf_r+0x90>
 800569c:	4638      	mov	r0, r7
 800569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <__swbuf_r+0x9c>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <__swbuf_r+0x7a>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7cf      	b.n	800564a <__swbuf_r+0x1a>
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <__swbuf_r+0xa0>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7ca      	b.n	800564a <__swbuf_r+0x1a>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f81e 	bl	80056f8 <__swsetup_r>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0cb      	beq.n	8005658 <__swbuf_r+0x28>
 80056c0:	f04f 37ff 	mov.w	r7, #4294967295
 80056c4:	e7ea      	b.n	800569c <__swbuf_r+0x6c>
 80056c6:	bf00      	nop
 80056c8:	08005c0c 	.word	0x08005c0c
 80056cc:	08005c2c 	.word	0x08005c2c
 80056d0:	08005bec 	.word	0x08005bec

080056d4 <_write_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_write_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb fa19 	bl	8000b1a <_write>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_write_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_write_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	2000020c 	.word	0x2000020c

080056f8 <__swsetup_r>:
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <__swsetup_r+0xcc>)
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	4606      	mov	r6, r0
 8005700:	460c      	mov	r4, r1
 8005702:	b125      	cbz	r5, 800570e <__swsetup_r+0x16>
 8005704:	69ab      	ldr	r3, [r5, #24]
 8005706:	b913      	cbnz	r3, 800570e <__swsetup_r+0x16>
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fb55 	bl	8004db8 <__sinit>
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <__swsetup_r+0xd0>)
 8005710:	429c      	cmp	r4, r3
 8005712:	d10f      	bne.n	8005734 <__swsetup_r+0x3c>
 8005714:	686c      	ldr	r4, [r5, #4]
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d42c      	bmi.n	800577a <__swsetup_r+0x82>
 8005720:	06dd      	lsls	r5, r3, #27
 8005722:	d411      	bmi.n	8005748 <__swsetup_r+0x50>
 8005724:	2309      	movs	r3, #9
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	e03e      	b.n	80057b2 <__swsetup_r+0xba>
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <__swsetup_r+0xd4>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d101      	bne.n	800573e <__swsetup_r+0x46>
 800573a:	68ac      	ldr	r4, [r5, #8]
 800573c:	e7eb      	b.n	8005716 <__swsetup_r+0x1e>
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <__swsetup_r+0xd8>)
 8005740:	429c      	cmp	r4, r3
 8005742:	bf08      	it	eq
 8005744:	68ec      	ldreq	r4, [r5, #12]
 8005746:	e7e6      	b.n	8005716 <__swsetup_r+0x1e>
 8005748:	0758      	lsls	r0, r3, #29
 800574a:	d512      	bpl.n	8005772 <__swsetup_r+0x7a>
 800574c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574e:	b141      	cbz	r1, 8005762 <__swsetup_r+0x6a>
 8005750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005754:	4299      	cmp	r1, r3
 8005756:	d002      	beq.n	800575e <__swsetup_r+0x66>
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f98f 	bl	8005a7c <_free_r>
 800575e:	2300      	movs	r3, #0
 8005760:	6363      	str	r3, [r4, #52]	; 0x34
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	2300      	movs	r3, #0
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	b94b      	cbnz	r3, 8005792 <__swsetup_r+0x9a>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d003      	beq.n	8005792 <__swsetup_r+0x9a>
 800578a:	4621      	mov	r1, r4
 800578c:	4630      	mov	r0, r6
 800578e:	f000 f929 	bl	80059e4 <__smakebuf_r>
 8005792:	89a0      	ldrh	r0, [r4, #12]
 8005794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005798:	f010 0301 	ands.w	r3, r0, #1
 800579c:	d00a      	beq.n	80057b4 <__swsetup_r+0xbc>
 800579e:	2300      	movs	r3, #0
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	425b      	negs	r3, r3
 80057a6:	61a3      	str	r3, [r4, #24]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b943      	cbnz	r3, 80057be <__swsetup_r+0xc6>
 80057ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057b0:	d1ba      	bne.n	8005728 <__swsetup_r+0x30>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	0781      	lsls	r1, r0, #30
 80057b6:	bf58      	it	pl
 80057b8:	6963      	ldrpl	r3, [r4, #20]
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	e7f4      	b.n	80057a8 <__swsetup_r+0xb0>
 80057be:	2000      	movs	r0, #0
 80057c0:	e7f7      	b.n	80057b2 <__swsetup_r+0xba>
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	08005c0c 	.word	0x08005c0c
 80057cc:	08005c2c 	.word	0x08005c2c
 80057d0:	08005bec 	.word	0x08005bec

080057d4 <_close_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d06      	ldr	r5, [pc, #24]	; (80057f0 <_close_r+0x1c>)
 80057d8:	2300      	movs	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fb f9b7 	bl	8000b52 <_close>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_close_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_close_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	2000020c 	.word	0x2000020c

080057f4 <__sflush_r>:
 80057f4:	898a      	ldrh	r2, [r1, #12]
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	0710      	lsls	r0, r2, #28
 80057fe:	460c      	mov	r4, r1
 8005800:	d458      	bmi.n	80058b4 <__sflush_r+0xc0>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc05      	bgt.n	8005814 <__sflush_r+0x20>
 8005808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc02      	bgt.n	8005814 <__sflush_r+0x20>
 800580e:	2000      	movs	r0, #0
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0f9      	beq.n	800580e <__sflush_r+0x1a>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x98>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x46>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x46>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x66>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb8>
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <__sflush_r+0x108>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	04d9      	lsls	r1, r3, #19
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x7c>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x7a>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x7c>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0ca      	beq.n	800580e <__sflush_r+0x1a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x92>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f8fb 	bl	8005a7c <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c1      	b.n	8005810 <__sflush_r+0x1c>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x34>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x34>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xb2>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb6>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b1      	b.n	800580e <__sflush_r+0x1a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ad      	b.n	8005810 <__sflush_r+0x1c>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0a9      	beq.n	800580e <__sflush_r+0x1a>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	680e      	ldr	r6, [r1, #0]
 80058be:	bf08      	it	eq
 80058c0:	694b      	ldreq	r3, [r1, #20]
 80058c2:	600f      	str	r7, [r1, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2300      	movne	r3, #0
 80058c8:	eba6 0807 	sub.w	r8, r6, r7
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	dd9c      	ble.n	800580e <__sflush_r+0x1a>
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	47b0      	blx	r6
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dc06      	bgt.n	80058f2 <__sflush_r+0xfe>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	e78e      	b.n	8005810 <__sflush_r+0x1c>
 80058f2:	4407      	add	r7, r0
 80058f4:	eba8 0800 	sub.w	r8, r8, r0
 80058f8:	e7e9      	b.n	80058ce <__sflush_r+0xda>
 80058fa:	bf00      	nop
 80058fc:	20400001 	.word	0x20400001

08005900 <_fflush_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b913      	cbnz	r3, 8005910 <_fflush_r+0x10>
 800590a:	2500      	movs	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	b118      	cbz	r0, 800591a <_fflush_r+0x1a>
 8005912:	6983      	ldr	r3, [r0, #24]
 8005914:	b90b      	cbnz	r3, 800591a <_fflush_r+0x1a>
 8005916:	f7ff fa4f 	bl	8004db8 <__sinit>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_fflush_r+0x6c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d11b      	bne.n	8005958 <_fflush_r+0x58>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x3a>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x3a>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f7ff fadd 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff59 	bl	80057f4 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005944:	07da      	lsls	r2, r3, #31
 8005946:	4605      	mov	r5, r0
 8005948:	d4e0      	bmi.n	800590c <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4dd      	bmi.n	800590c <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f7ff fad0 	bl	8004ef6 <__retarget_lock_release_recursive>
 8005956:	e7d9      	b.n	800590c <_fflush_r+0xc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <_fflush_r+0x70>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <_fflush_r+0x62>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7df      	b.n	8005922 <_fflush_r+0x22>
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <_fflush_r+0x74>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7da      	b.n	8005922 <_fflush_r+0x22>
 800596c:	08005c0c 	.word	0x08005c0c
 8005970:	08005c2c 	.word	0x08005c2c
 8005974:	08005bec 	.word	0x08005bec

08005978 <_lseek_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	; (8005998 <_lseek_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fb f90a 	bl	8000ba0 <_lseek>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_lseek_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_lseek_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	2000020c 	.word	0x2000020c

0800599c <__swhatbuf_r>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	460e      	mov	r6, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2900      	cmp	r1, #0
 80059a6:	b096      	sub	sp, #88	; 0x58
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	da07      	bge.n	80059be <__swhatbuf_r+0x22>
 80059ae:	2300      	movs	r3, #0
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	89b3      	ldrh	r3, [r6, #12]
 80059b4:	061a      	lsls	r2, r3, #24
 80059b6:	d410      	bmi.n	80059da <__swhatbuf_r+0x3e>
 80059b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059bc:	e00e      	b.n	80059dc <__swhatbuf_r+0x40>
 80059be:	466a      	mov	r2, sp
 80059c0:	f000 f8be 	bl	8005b40 <_fstat_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dbf2      	blt.n	80059ae <__swhatbuf_r+0x12>
 80059c8:	9a01      	ldr	r2, [sp, #4]
 80059ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059d2:	425a      	negs	r2, r3
 80059d4:	415a      	adcs	r2, r3
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	e7ee      	b.n	80059b8 <__swhatbuf_r+0x1c>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	2000      	movs	r0, #0
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	b016      	add	sp, #88	; 0x58
 80059e2:	bd70      	pop	{r4, r5, r6, pc}

080059e4 <__smakebuf_r>:
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059e8:	079d      	lsls	r5, r3, #30
 80059ea:	4606      	mov	r6, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	d507      	bpl.n	8005a00 <__smakebuf_r+0x1c>
 80059f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	2301      	movs	r3, #1
 80059fa:	6163      	str	r3, [r4, #20]
 80059fc:	b002      	add	sp, #8
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	ab01      	add	r3, sp, #4
 8005a02:	466a      	mov	r2, sp
 8005a04:	f7ff ffca 	bl	800599c <__swhatbuf_r>
 8005a08:	9900      	ldr	r1, [sp, #0]
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff fa73 	bl	8004ef8 <_malloc_r>
 8005a12:	b948      	cbnz	r0, 8005a28 <__smakebuf_r+0x44>
 8005a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a18:	059a      	lsls	r2, r3, #22
 8005a1a:	d4ef      	bmi.n	80059fc <__smakebuf_r+0x18>
 8005a1c:	f023 0303 	bic.w	r3, r3, #3
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	e7e3      	b.n	80059f0 <__smakebuf_r+0xc>
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <__smakebuf_r+0x7c>)
 8005a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	6020      	str	r0, [r4, #0]
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	9b00      	ldr	r3, [sp, #0]
 8005a38:	6163      	str	r3, [r4, #20]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	6120      	str	r0, [r4, #16]
 8005a3e:	b15b      	cbz	r3, 8005a58 <__smakebuf_r+0x74>
 8005a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f88d 	bl	8005b64 <_isatty_r>
 8005a4a:	b128      	cbz	r0, 8005a58 <__smakebuf_r+0x74>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	89a0      	ldrh	r0, [r4, #12]
 8005a5a:	4305      	orrs	r5, r0
 8005a5c:	81a5      	strh	r5, [r4, #12]
 8005a5e:	e7cd      	b.n	80059fc <__smakebuf_r+0x18>
 8005a60:	08004d51 	.word	0x08004d51

08005a64 <__malloc_lock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__malloc_lock+0x8>)
 8005a66:	f7ff ba45 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	20000204 	.word	0x20000204

08005a70 <__malloc_unlock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__malloc_unlock+0x8>)
 8005a72:	f7ff ba40 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000204 	.word	0x20000204

08005a7c <_free_r>:
 8005a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	d048      	beq.n	8005b14 <_free_r+0x98>
 8005a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a86:	9001      	str	r0, [sp, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a8e:	bfb8      	it	lt
 8005a90:	18e4      	addlt	r4, r4, r3
 8005a92:	f7ff ffe7 	bl	8005a64 <__malloc_lock>
 8005a96:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <_free_r+0x9c>)
 8005a98:	9801      	ldr	r0, [sp, #4]
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	4615      	mov	r5, r2
 8005a9e:	b933      	cbnz	r3, 8005aae <_free_r+0x32>
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6014      	str	r4, [r2, #0]
 8005aa4:	b003      	add	sp, #12
 8005aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aaa:	f7ff bfe1 	b.w	8005a70 <__malloc_unlock>
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	d90b      	bls.n	8005aca <_free_r+0x4e>
 8005ab2:	6821      	ldr	r1, [r4, #0]
 8005ab4:	1862      	adds	r2, r4, r1
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	bf04      	itt	eq
 8005aba:	681a      	ldreq	r2, [r3, #0]
 8005abc:	685b      	ldreq	r3, [r3, #4]
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	bf04      	itt	eq
 8005ac2:	1852      	addeq	r2, r2, r1
 8005ac4:	6022      	streq	r2, [r4, #0]
 8005ac6:	602c      	str	r4, [r5, #0]
 8005ac8:	e7ec      	b.n	8005aa4 <_free_r+0x28>
 8005aca:	461a      	mov	r2, r3
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b10b      	cbz	r3, 8005ad4 <_free_r+0x58>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d9fa      	bls.n	8005aca <_free_r+0x4e>
 8005ad4:	6811      	ldr	r1, [r2, #0]
 8005ad6:	1855      	adds	r5, r2, r1
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	d10b      	bne.n	8005af4 <_free_r+0x78>
 8005adc:	6824      	ldr	r4, [r4, #0]
 8005ade:	4421      	add	r1, r4
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	d1dd      	bne.n	8005aa4 <_free_r+0x28>
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	6053      	str	r3, [r2, #4]
 8005aee:	4421      	add	r1, r4
 8005af0:	6011      	str	r1, [r2, #0]
 8005af2:	e7d7      	b.n	8005aa4 <_free_r+0x28>
 8005af4:	d902      	bls.n	8005afc <_free_r+0x80>
 8005af6:	230c      	movs	r3, #12
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	e7d3      	b.n	8005aa4 <_free_r+0x28>
 8005afc:	6825      	ldr	r5, [r4, #0]
 8005afe:	1961      	adds	r1, r4, r5
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf04      	itt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	6063      	str	r3, [r4, #4]
 8005b0a:	bf04      	itt	eq
 8005b0c:	1949      	addeq	r1, r1, r5
 8005b0e:	6021      	streq	r1, [r4, #0]
 8005b10:	6054      	str	r4, [r2, #4]
 8005b12:	e7c7      	b.n	8005aa4 <_free_r+0x28>
 8005b14:	b003      	add	sp, #12
 8005b16:	bd30      	pop	{r4, r5, pc}
 8005b18:	20000090 	.word	0x20000090

08005b1c <_read_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <_read_r+0x20>)
 8005b20:	4604      	mov	r4, r0
 8005b22:	4608      	mov	r0, r1
 8005b24:	4611      	mov	r1, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	602a      	str	r2, [r5, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f7fa ffd8 	bl	8000ae0 <_read>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_read_r+0x1e>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_read_r+0x1e>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	2000020c 	.word	0x2000020c

08005b40 <_fstat_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_fstat_r+0x20>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f7fb f80c 	bl	8000b6a <_fstat>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d102      	bne.n	8005b5c <_fstat_r+0x1c>
 8005b56:	682b      	ldr	r3, [r5, #0]
 8005b58:	b103      	cbz	r3, 8005b5c <_fstat_r+0x1c>
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	bd38      	pop	{r3, r4, r5, pc}
 8005b5e:	bf00      	nop
 8005b60:	2000020c 	.word	0x2000020c

08005b64 <_isatty_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	; (8005b80 <_isatty_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fb f80b 	bl	8000b8a <_isatty>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_isatty_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_isatty_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	2000020c 	.word	0x2000020c

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
