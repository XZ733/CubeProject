
ADC_1C_S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009ef8  08009ef8  00019ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f4  0800a3f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3fc  0800a3fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001e0  0800a5e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800a5e4  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ec  00000000  00000000  00032ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00036038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bef  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012175  00000000  00000000  0005e98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb47  00000000  00000000  00070b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  0016f6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009edc 	.word	0x08009edc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08009edc 	.word	0x08009edc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f004 faf9 	bl	800564c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_ADC1_Init+0xe8>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001084:	2204      	movs	r2, #4
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001096:	2201      	movs	r2, #1
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010c6:	f000 fe9b 	bl	8001e00 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d0:	f000 f98f 	bl	80013f2 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010e0:	f002 f860 	bl	80031a4 <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f000 f982 	bl	80013f2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_ADC1_Init+0xec>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	; 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0xe8>)
 800110c:	f001 fa66 	bl	80025dc <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001116:	f000 f96c 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000208 	.word	0x20000208
 8001128:	1d500080 	.word	0x1d500080

0800112c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114c:	d123      	bne.n	8001196 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <HAL_ADC_MspInit+0x78>)
 8001192:	f002 fa1f 	bl	80035d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <MX_GPIO_Init+0xd4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <MX_GPIO_Init+0xd4>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_GPIO_Init+0xd4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_GPIO_Init+0xd4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_GPIO_Init+0xd4>)
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0xd4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xd4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <MX_GPIO_Init+0xd4>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_GPIO_Init+0xd4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_GPIO_Init+0xd4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_GPIO_Init+0xd4>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_GPIO_Init+0xd4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f002 fb57 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_GPIO_Init+0xd8>)
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <MX_GPIO_Init+0xdc>)
 8001240:	f002 f9c8 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 f9b9 	bl	80035d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2028      	movs	r0, #40	; 0x28
 8001268:	f002 f97f 	bl	800356a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800126c:	2028      	movs	r0, #40	; 0x28
 800126e:	f002 f996 	bl	800359e <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	10110000 	.word	0x10110000
 8001284:	48000800 	.word	0x48000800

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f000 faab 	bl	80017e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f846 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f7ff ff88 	bl	80011a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001298:	f000 f9de 	bl	8001658 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800129c:	f7ff fece 	bl	800103c <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80012a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a4:	f000 fb10 	bl	80018c8 <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <main+0x88>)
 80012aa:	f000 ff6b 	bl	8002184 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 80012ae:	2164      	movs	r1, #100	; 0x64
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <main+0x88>)
 80012b2:	f001 f87f 	bl	80023b4 <HAL_ADC_PollForConversion>
	  adcData = HAL_ADC_GetValue(&hadc1);
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <main+0x88>)
 80012b8:	f001 f982 	bl	80025c0 <HAL_ADC_GetValue>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <main+0x8c>)
 80012c2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80012c4:	4812      	ldr	r0, [pc, #72]	; (8001310 <main+0x88>)
 80012c6:	f001 f841 	bl	800234c <HAL_ADC_Stop>
	  voltage = adcData*(3.3/4096);
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <main+0x8c>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f950 	bl	8000574 <__aeabi_i2d>
 80012d4:	a30c      	add	r3, pc, #48	; (adr r3, 8001308 <main+0x80>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f9b5 	bl	8000648 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fca7 	bl	8000c38 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <main+0x90>)
 80012ee:	6013      	str	r3, [r2, #0]
	  printf("%f \t\n",voltage);
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <main+0x90>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f94f 	bl	8000598 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <main+0x94>)
 8001300:	f005 f826 	bl	8006350 <iprintf>
  {
 8001304:	e7cc      	b.n	80012a0 <main+0x18>
 8001306:	bf00      	nop
 8001308:	66666666 	.word	0x66666666
 800130c:	3f4a6666 	.word	0x3f4a6666
 8001310:	20000208 	.word	0x20000208
 8001314:	20000278 	.word	0x20000278
 8001318:	20000274 	.word	0x20000274
 800131c:	08009ef8 	.word	0x08009ef8

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a8      	sub	sp, #160	; 0xa0
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132a:	2238      	movs	r2, #56	; 0x38
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f98c 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2254      	movs	r2, #84	; 0x54
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 f97e 	bl	800564c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001350:	2000      	movs	r0, #0
 8001352:	f002 fafd 	bl	8003950 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	2301      	movs	r3, #1
 8001358:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800136c:	2306      	movs	r3, #6
 800136e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001372:	2355      	movs	r3, #85	; 0x55
 8001374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fb92 	bl	8003ab8 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800139a:	f000 f82a 	bl	80013f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2303      	movs	r3, #3
 80013a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fe95 	bl	80040e8 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80013c4:	f000 f815 	bl	80013f2 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12;
 80013c8:	f248 0320 	movw	r3, #32800	; 0x8020
 80013cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f8a0 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013e6:	f000 f804 	bl	80013f2 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	37a0      	adds	r7, #160	; 0xa0
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
}
 80013f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fa:	e7fe      	b.n	80013fa <Error_Handler+0x8>

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6613      	str	r3, [r2, #96]	; 0x60
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x44>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001432:	f002 fb31 	bl	8003a98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f9fc 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800149c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a0:	f002 fa32 	bl	8003908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_kill>:

int _kill(int pid, int sig)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c2:	f004 f899 	bl	80055f8 <__errno>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2216      	movs	r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
	return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffe7 	bl	80014b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ea:	e7fe      	b.n	80014ea <_exit+0x12>

080014ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
	}

return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e009      	b.n	800154c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f915 	bl	8001770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <_write+0x12>
	}
	return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_close>:

int _close(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	605a      	str	r2, [r3, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f003 fffe 	bl	80055f8 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20020000 	.word	0x20020000
 8001628:	00000400 	.word	0x00000400
 800162c:	200001fc 	.word	0x200001fc
 8001630:	20000320 	.word	0x20000320

08001634 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <MX_LPUART1_UART_Init+0x90>)
 8001660:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800169a:	4812      	ldr	r0, [pc, #72]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 800169c:	f003 f98c 	bl	80049b8 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f7ff fea4 	bl	80013f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 80016ae:	f003 fed9 	bl	8005464 <HAL_UARTEx_SetTxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016b8:	f7ff fe9b 	bl	80013f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	f003 ff0e 	bl	80054e0 <HAL_UARTEx_SetRxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ca:	f7ff fe92 	bl	80013f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_LPUART1_UART_Init+0x8c>)
 80016d0:	f003 fe8f 	bl	80053f2 <HAL_UARTEx_DisableFifoMode>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016da:	f7ff fe8a 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000027c 	.word	0x2000027c
 80016e8:	40008000 	.word	0x40008000

080016ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x7c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d128      	bne.n	8001760 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_UART_MspInit+0x80>)
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_UART_MspInit+0x80>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	65d3      	str	r3, [r2, #92]	; 0x5c
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_UART_MspInit+0x80>)
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_UART_MspInit+0x80>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_UART_MspInit+0x80>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_UART_MspInit+0x80>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800173e:	230c      	movs	r3, #12
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800174e:	230c      	movs	r3, #12
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f001 ff3a 	bl	80035d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40008000 	.word	0x40008000
 800176c:	40021000 	.word	0x40021000

08001770 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8001778:	1d39      	adds	r1, r7, #4
 800177a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177e:	2201      	movs	r2, #1
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <__io_putchar+0x20>)
 8001782:	f003 f969 	bl	8004a58 <HAL_UART_Transmit>
  return ch;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000027c 	.word	0x2000027c

08001794 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001796:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490e      	ldr	r1, [pc, #56]	; (80017d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0b      	ldr	r4, [pc, #44]	; (80017e0 <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017be:	f7ff ff39 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f003 ff1f 	bl	8005604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c6:	f7ff fd5f 	bl	8001288 <main>

080017ca <LoopForever>:

LoopForever:
    b LoopForever
 80017ca:	e7fe      	b.n	80017ca <LoopForever>
  ldr   r0, =_estack
 80017cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017d8:	0800a404 	.word	0x0800a404
  ldr r2, =_sbss
 80017dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017e0:	20000320 	.word	0x20000320

080017e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_2_IRQHandler>

080017e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f001 feaf 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f80e 	bl	8001818 <HAL_InitTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001808:	f7ff fdf8 	bl	80013fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800180c:	79fb      	ldrb	r3, [r7, #7]

}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_InitTick+0x68>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d022      	beq.n	8001872 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_InitTick+0x6c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_InitTick+0x68>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001838:	fbb1 f3f3 	udiv	r3, r1, r3
 800183c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f001 feba 	bl	80035ba <HAL_SYSTICK_Config>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	d809      	bhi.n	8001866 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001852:	2200      	movs	r2, #0
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	f04f 30ff 	mov.w	r0, #4294967295
 800185a:	f001 fe86 	bl	800356a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_InitTick+0x70>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e007      	b.n	8001876 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e004      	b.n	8001876 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000008 	.word	0x20000008
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x1c>)
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	2000030c 	.word	0x2000030c
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000030c 	.word	0x2000030c

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d004      	beq.n	80018ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_Delay+0x40>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ec:	bf00      	nop
 80018ee:	f7ff ffdf 	bl	80018b0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d8f7      	bhi.n	80018ee <HAL_Delay+0x26>
  {
  }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000008 	.word	0x20000008

0800190c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3360      	adds	r3, #96	; 0x60
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <LL_ADC_SetOffset+0x44>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	03fff000 	.word	0x03fff000

080019bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3360      	adds	r3, #96	; 0x60
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b087      	sub	sp, #28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3360      	adds	r3, #96	; 0x60
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b087      	sub	sp, #28
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3330      	adds	r3, #48	; 0x30
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	4413      	add	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	211f      	movs	r1, #31
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	f003 011f 	and.w	r1, r3, #31
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0e5b      	lsrs	r3, r3, #25
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0d1b      	lsrs	r3, r3, #20
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2107      	movs	r1, #7
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	0d1b      	lsrs	r3, r3, #20
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0318 	and.w	r3, r3, #24
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba8:	40d9      	lsrs	r1, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	400b      	ands	r3, r1
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	0007ffff 	.word	0x0007ffff

08001bcc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6093      	str	r3, [r2, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <LL_ADC_IsEnabled+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_ADC_IsEnabled+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsDisableOngoing+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsDisableOngoing+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc6:	f043 0220 	orr.w	r2, r3, #32
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1af      	b.n	800217a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff f97f 	bl	800112c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fef1 	bl	8001c28 <LL_ADC_IsDeepPowerDownEnabled>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fed7 	bl	8001c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff0c 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fef0 	bl	8001c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e70:	4b9f      	ldr	r3, [pc, #636]	; (80020f0 <HAL_ADC_Init+0x2f0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	4a9f      	ldr	r2, [pc, #636]	; (80020f4 <HAL_ADC_Init+0x2f4>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff feee 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff62 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8148 	bne.w	8002168 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8144 	bne.w	8002168 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ee8:	f043 0202 	orr.w	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fefb 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d141      	bne.n	8001f84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f08:	d004      	beq.n	8001f14 <HAL_ADC_Init+0x114>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_ADC_Init+0x2f8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10f      	bne.n	8001f34 <HAL_ADC_Init+0x134>
 8001f14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f18:	f7ff feea 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	4876      	ldr	r0, [pc, #472]	; (80020f8 <HAL_ADC_Init+0x2f8>)
 8001f20:	f7ff fee6 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4323      	orrs	r3, r4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e012      	b.n	8001f5a <HAL_ADC_Init+0x15a>
 8001f34:	4871      	ldr	r0, [pc, #452]	; (80020fc <HAL_ADC_Init+0x2fc>)
 8001f36:	f7ff fedb 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4870      	ldr	r0, [pc, #448]	; (8002100 <HAL_ADC_Init+0x300>)
 8001f3e:	f7ff fed7 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	431c      	orrs	r4, r3
 8001f46:	486f      	ldr	r0, [pc, #444]	; (8002104 <HAL_ADC_Init+0x304>)
 8001f48:	f7ff fed2 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4323      	orrs	r3, r4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x172>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a62      	ldr	r2, [pc, #392]	; (80020f8 <HAL_ADC_Init+0x2f8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x176>
 8001f72:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_ADC_Init+0x308>)
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Init+0x178>
 8001f76:	4a65      	ldr	r2, [pc, #404]	; (800210c <HAL_ADC_Init+0x30c>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7ff fcc4 	bl	800190c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7f5b      	ldrb	r3, [r3, #29]
 8001f88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	045b      	lsls	r3, r3, #17
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_ADC_Init+0x310>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff febe 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002010:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fedf 	bl	8001dda <LL_ADC_INJ_IsConversionOngoing>
 800201c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d17f      	bne.n	8002124 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d17c      	bne.n	8002124 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800202e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002036:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	430b      	orrs	r3, r1
 8002052:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d017      	beq.n	800208c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800206a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002074:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6911      	ldr	r1, [r2, #16]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800208a:	e013      	b.n	80020b4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800209a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12a      	bne.n	8002114 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e0:	430a      	orrs	r2, r1
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	e019      	b.n	8002124 <HAL_ADC_Init+0x324>
 80020f0:	20000000 	.word	0x20000000
 80020f4:	053e2d63 	.word	0x053e2d63
 80020f8:	50000100 	.word	0x50000100
 80020fc:	50000400 	.word	0x50000400
 8002100:	50000500 	.word	0x50000500
 8002104:	50000600 	.word	0x50000600
 8002108:	50000300 	.word	0x50000300
 800210c:	50000700 	.word	0x50000700
 8002110:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10c      	bne.n	8002146 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f023 010f 	bic.w	r1, r3, #15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
 8002144:	e007      	b.n	8002156 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020f 	bic.w	r2, r2, #15
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c
 8002166:	e007      	b.n	8002178 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	f043 0210 	orr.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002178:	7ffb      	ldrb	r3, [r7, #31]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop

08002184 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_Start+0x1c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_ADC_Start+0x1b4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_Start+0x20>
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_ADC_Start+0x1b8>)
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_Start+0x22>
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_ADC_Start+0x1bc>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fd10 	bl	8001bcc <LL_ADC_GetMultimode>
 80021ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fdea 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80b4 	bne.w	8002328 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Start+0x4a>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0af      	b.n	800232e <HAL_ADC_Start+0x1aa>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fefc 	bl	8002fd4 <ADC_Enable>
 80021dc:	4603      	mov	r3, r0
 80021de:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 809b 	bne.w	800231e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_ADC_Start+0x1b4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_ADC_Start+0x96>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_ADC_Start+0x1c0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d002      	beq.n	8002216 <HAL_ADC_Start+0x92>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	e003      	b.n	800221e <HAL_ADC_Start+0x9a>
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_ADC_Start+0x1c4>)
 8002218:	e001      	b.n	800221e <HAL_ADC_Start+0x9a>
 800221a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4293      	cmp	r3, r2
 8002224:	d002      	beq.n	800222c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002244:	d106      	bne.n	8002254 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	f023 0206 	bic.w	r2, r3, #6
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	661a      	str	r2, [r3, #96]	; 0x60
 8002252:	e002      	b.n	800225a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	221c      	movs	r2, #28
 8002260:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a32      	ldr	r2, [pc, #200]	; (8002338 <HAL_ADC_Start+0x1b4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_ADC_Start+0x104>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_ADC_Start+0x1c0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d002      	beq.n	8002284 <HAL_ADC_Start+0x100>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	e003      	b.n	800228c <HAL_ADC_Start+0x108>
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_ADC_Start+0x1c4>)
 8002286:	e001      	b.n	800228c <HAL_ADC_Start+0x108>
 8002288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4293      	cmp	r3, r2
 8002292:	d008      	beq.n	80022a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d002      	beq.n	80022a6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d114      	bne.n	80022d0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fd37 	bl	8001d3c <LL_ADC_REG_StartConversion>
 80022ce:	e02d      	b.n	800232c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_ADC_Start+0x1b4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_ADC_Start+0x176>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_ADC_Start+0x1c0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_Start+0x172>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e003      	b.n	80022fe <HAL_ADC_Start+0x17a>
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_ADC_Start+0x1c4>)
 80022f8:	e001      	b.n	80022fe <HAL_ADC_Start+0x17a>
 80022fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022fe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00f      	beq.n	800232c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
 800231c:	e006      	b.n	800232c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002326:	e001      	b.n	800232c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800232c:	7dfb      	ldrb	r3, [r7, #23]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	50000100 	.word	0x50000100
 800233c:	50000300 	.word	0x50000300
 8002340:	50000700 	.word	0x50000700
 8002344:	50000500 	.word	0x50000500
 8002348:	50000400 	.word	0x50000400

0800234c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Stop+0x16>
 800235e:	2302      	movs	r3, #2
 8002360:	e023      	b.n	80023aa <HAL_ADC_Stop+0x5e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800236a:	2103      	movs	r1, #3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fd75 	bl	8002e5c <ADC_ConversionStop>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fe8b 	bl	8003098 <ADC_Disable>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x1e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_ADC_PollForConversion+0x1f8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x22>
 80023d2:	4b77      	ldr	r3, [pc, #476]	; (80025b0 <HAL_ADC_PollForConversion+0x1fc>)
 80023d4:	e000      	b.n	80023d8 <HAL_ADC_PollForConversion+0x24>
 80023d6:	4b77      	ldr	r3, [pc, #476]	; (80025b4 <HAL_ADC_PollForConversion+0x200>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fbf7 	bl	8001bcc <LL_ADC_GetMultimode>
 80023de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d102      	bne.n	80023ee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023e8:	2308      	movs	r3, #8
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	e037      	b.n	800245e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d002      	beq.n	8002400 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	d111      	bne.n	8002424 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0c1      	b.n	80025a2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800241e:	2304      	movs	r3, #4
 8002420:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002422:	e01c      	b.n	800245e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d004      	beq.n	8002438 <HAL_ADC_PollForConversion+0x84>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5e      	ldr	r2, [pc, #376]	; (80025ac <HAL_ADC_PollForConversion+0x1f8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_ADC_PollForConversion+0x88>
 8002438:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_ADC_PollForConversion+0x1fc>)
 800243a:	e000      	b.n	800243e <HAL_ADC_PollForConversion+0x8a>
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_ADC_PollForConversion+0x200>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fbd2 	bl	8001be8 <LL_ADC_GetMultiDMATransfer>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0a3      	b.n	80025a2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800245a:	2304      	movs	r3, #4
 800245c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800245e:	f7ff fa27 	bl	80018b0 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002464:	e021      	b.n	80024aa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d01d      	beq.n	80024aa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800246e:	f7ff fa1f 	bl	80018b0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <HAL_ADC_PollForConversion+0xd0>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d112      	bne.n	80024aa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e07b      	b.n	80025a2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0d6      	beq.n	8002466 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff faf1 	bl	8001ab0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7f5b      	ldrb	r3, [r3, #29]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d118      	bne.n	800250e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d111      	bne.n	800250e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_ADC_PollForConversion+0x1f8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_ADC_PollForConversion+0x178>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_ADC_PollForConversion+0x204>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d002      	beq.n	8002528 <HAL_ADC_PollForConversion+0x174>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e003      	b.n	8002530 <HAL_ADC_PollForConversion+0x17c>
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_ADC_PollForConversion+0x208>)
 800252a:	e001      	b.n	8002530 <HAL_ADC_PollForConversion+0x17c>
 800252c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	4293      	cmp	r3, r2
 8002536:	d008      	beq.n	800254a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d002      	beq.n	800254a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b09      	cmp	r3, #9
 8002548:	d104      	bne.n	8002554 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e014      	b.n	800257e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_ADC_PollForConversion+0x1f8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_ADC_PollForConversion+0x1be>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_ADC_PollForConversion+0x204>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_ADC_PollForConversion+0x1ba>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e003      	b.n	8002576 <HAL_ADC_PollForConversion+0x1c2>
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_ADC_PollForConversion+0x208>)
 8002570:	e001      	b.n	8002576 <HAL_ADC_PollForConversion+0x1c2>
 8002572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002576:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d104      	bne.n	800258e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2208      	movs	r2, #8
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e008      	b.n	80025a0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	220c      	movs	r2, #12
 800259e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	50000100 	.word	0x50000100
 80025b0:	50000300 	.word	0x50000300
 80025b4:	50000700 	.word	0x50000700
 80025b8:	50000500 	.word	0x50000500
 80025bc:	50000400 	.word	0x50000400

080025c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b6      	sub	sp, #216	; 0xd8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x24>
 80025fa:	2302      	movs	r3, #2
 80025fc:	f000 bc13 	b.w	8002e26 <HAL_ADC_ConfigChannel+0x84a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fbbd 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 83f3 	bne.w	8002e00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff fa55 	bl	8001ad6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fbab 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002636:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fbcb 	bl	8001dda <LL_ADC_INJ_IsConversionOngoing>
 8002644:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002648:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 81d9 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 81d4 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002664:	d10f      	bne.n	8002686 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff fa5c 	bl	8001b2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa03 	bl	8001a8a <LL_ADC_SetSamplingTimeCommonConfig>
 8002684:	e00e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	461a      	mov	r2, r3
 8002694:	f7ff fa4b 	bl	8001b2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f9f3 	bl	8001a8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d022      	beq.n	800270c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026d6:	f7ff f94d 	bl	8001974 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff f999 	bl	8001a1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7f1b      	ldrb	r3, [r3, #28]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x126>
 80026fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x128>
 8002702:	2300      	movs	r3, #0
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff f9a5 	bl	8001a54 <LL_ADC_SetOffsetSaturation>
 800270a:	e17b      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f952 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x15c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f947 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	e01e      	b.n	8002776 <HAL_ADC_ConfigChannel+0x19a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f93c 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800275a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800275e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800276a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1b2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f90b 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f8ef 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x222>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8e4 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x260>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f8d9 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800281c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x278>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e018      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002868:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800286c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e004      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800287c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8a8 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f88c 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2e8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f881 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	e01e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x326>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f876 	bl	80019bc <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e004      	b.n	8002900 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x33e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	e016      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800292c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800292e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800293e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f847 	bl	80019e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f82b 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x3aa>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2103      	movs	r1, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f820 	bl	80019bc <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	e017      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x3da>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f815 	bl	80019bc <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x3f2>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e011      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2103      	movs	r1, #3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fff2 	bl	80019e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f971 	bl	8001cf0 <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 813d 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff f8ae 	bl	8001b84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4aa2      	ldr	r2, [pc, #648]	; (8002cb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	f040 812e 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x480>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e019      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x4b4>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	bf94      	ite	ls
 8002a8a:	2301      	movls	r3, #1
 8002a8c:	2300      	movhi	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d079      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x4d4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	069b      	lsls	r3, r3, #26
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	e015      	b.n	8002adc <HAL_ADC_ConfigChannel+0x500>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x520>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	e017      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x550>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x576>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	e018      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5a8>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b84:	430b      	orrs	r3, r1
 8002b86:	e07e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c8>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	069b      	lsls	r3, r3, #26
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba2:	e015      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5f4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x614>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	e017      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x644>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x670>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	3b1e      	subs	r3, #30
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	e01b      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x6a8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	613b      	str	r3, [r7, #16]
  return result;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	051b      	lsls	r3, r3, #20
 8002c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c84:	430b      	orrs	r3, r1
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	6892      	ldr	r2, [r2, #8]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fe ff4f 	bl	8001b2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_ADC_ConfigChannel+0x6e0>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80be 	beq.w	8002e1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_ConfigChannel+0x6d6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x6ec>
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cb4:	e009      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6ee>
 8002cb6:	bf00      	nop
 8002cb8:	407f0000 	.word	0x407f0000
 8002cbc:	80080000 	.word	0x80080000
 8002cc0:	50000100 	.word	0x50000100
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fe44 	bl	8001958 <LL_ADC_GetCommonPathInternalCh>
 8002cd0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_ADC_ConfigChannel+0x858>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x70c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a55      	ldr	r2, [pc, #340]	; (8002e38 <HAL_ADC_ConfigChannel+0x85c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d134      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d005      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x72e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_ADC_ConfigChannel+0x860>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f040 8085 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x742>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x746>
 8002d1e:	4a49      	ldr	r2, [pc, #292]	; (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x748>
 8002d22:	4a43      	ldr	r2, [pc, #268]	; (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7fe fdff 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d34:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <HAL_ADC_ConfigChannel+0x86c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <HAL_ADC_ConfigChannel+0x870>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f9      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5c:	e05a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <HAL_ADC_ConfigChannel+0x874>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a31      	ldr	r2, [pc, #196]	; (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d104      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7ac>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_ADC_ConfigChannel+0x878>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d047      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x7c0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x7c4>
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x7c6>
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7fe fdc0 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	e031      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_ADC_ConfigChannel+0x87c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12d      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d127      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x80c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x810>
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x812>
 8002dec:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7fe fd9a 	bl	8001932 <LL_ADC_SetCommonPathInternalCh>
 8002dfe:	e00c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e12:	e002      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37d8      	adds	r7, #216	; 0xd8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	50000700 	.word	0x50000700
 8002e34:	c3210000 	.word	0xc3210000
 8002e38:	90c00010 	.word	0x90c00010
 8002e3c:	50000600 	.word	0x50000600
 8002e40:	50000100 	.word	0x50000100
 8002e44:	50000300 	.word	0x50000300
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	053e2d63 	.word	0x053e2d63
 8002e50:	c7520000 	.word	0xc7520000
 8002e54:	50000500 	.word	0x50000500
 8002e58:	cb840000 	.word	0xcb840000

08002e5c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ff8a 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002e78:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ffab 	bl	8001dda <LL_ADC_INJ_IsConversionOngoing>
 8002e84:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8098 	beq.w	8002fc4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d02a      	beq.n	8002ef8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7f5b      	ldrb	r3, [r3, #29]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d126      	bne.n	8002ef8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d122      	bne.n	8002ef8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002eb6:	e014      	b.n	8002ee2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <ADC_ConversionStop+0x174>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d90d      	bls.n	8002edc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e074      	b.n	8002fc6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d1e3      	bne.n	8002eb8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d014      	beq.n	8002f28 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff42 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe feff 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe ff1e 	bl	8001d64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d014      	beq.n	8002f58 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe ff51 	bl	8001dda <LL_ADC_INJ_IsConversionOngoing>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fee7 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe ff2d 	bl	8001db2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d005      	beq.n	8002f6a <ADC_ConversionStop+0x10e>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d105      	bne.n	8002f70 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f64:	230c      	movs	r3, #12
 8002f66:	617b      	str	r3, [r7, #20]
        break;
 8002f68:	e005      	b.n	8002f76 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	e002      	b.n	8002f76 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f70:	2304      	movs	r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
        break;
 8002f74:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f76:	f7fe fc9b 	bl	80018b0 <HAL_GetTick>
 8002f7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f7c:	e01b      	b.n	8002fb6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f7e:	f7fe fc97 	bl	80018b0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d914      	bls.n	8002fb6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e007      	b.n	8002fc6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1dc      	bne.n	8002f7e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	a33fffff 	.word	0xa33fffff

08002fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fe85 	bl	8001cf0 <LL_ADC_IsEnabled>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d14d      	bne.n	8003088 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <ADC_Enable+0xc0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e039      	b.n	800308a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fe40 	bl	8001ca0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003020:	f7fe fc46 	bl	80018b0 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003026:	e028      	b.n	800307a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fe5f 	bl	8001cf0 <LL_ADC_IsEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fe2f 	bl	8001ca0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003042:	f7fe fc35 	bl	80018b0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d914      	bls.n	800307a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d00d      	beq.n	800307a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e007      	b.n	800308a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d1cf      	bne.n	8003028 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	8000003f 	.word	0x8000003f

08003098 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fe36 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 80030aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fe1d 	bl	8001cf0 <LL_ADC_IsEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d047      	beq.n	800314c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d144      	bne.n	800314c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030d 	and.w	r3, r3, #13
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10c      	bne.n	80030ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fdf7 	bl	8001cc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2203      	movs	r2, #3
 80030e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030e2:	f7fe fbe5 	bl	80018b0 <HAL_GetTick>
 80030e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e8:	e029      	b.n	800313e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e023      	b.n	800314e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003106:	f7fe fbd3 	bl	80018b0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d914      	bls.n	800313e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e007      	b.n	800314e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1dc      	bne.n	8003106 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <LL_ADC_IsEnabled>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <LL_ADC_IsEnabled+0x18>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_IsEnabled+0x1a>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_REG_IsConversionOngoing>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d101      	bne.n	8003194 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b0a1      	sub	sp, #132	; 0x84
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0e7      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031ca:	2300      	movs	r3, #0
 80031cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031ce:	2300      	movs	r3, #0
 80031d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031da:	d102      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e009      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031ec:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e001      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0be      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ffb0 	bl	800317c <LL_ADC_REG_IsConversionOngoing>
 800321c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ffaa 	bl	800317c <LL_ADC_REG_IsConversionOngoing>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 80a0 	bne.w	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 809c 	bne.w	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003240:	d004      	beq.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a55      	ldr	r2, [pc, #340]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800324c:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800324e:	e000      	b.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003250:	4b56      	ldr	r3, [pc, #344]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003252:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d04b      	beq.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800326e:	035b      	lsls	r3, r3, #13
 8003270:	430b      	orrs	r3, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003276:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d004      	beq.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a45      	ldr	r2, [pc, #276]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10f      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800328c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003290:	f7ff ff61 	bl	8003156 <LL_ADC_IsEnabled>
 8003294:	4604      	mov	r4, r0
 8003296:	4841      	ldr	r0, [pc, #260]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003298:	f7ff ff5d 	bl	8003156 <LL_ADC_IsEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	4323      	orrs	r3, r4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e012      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80032ac:	483c      	ldr	r0, [pc, #240]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032ae:	f7ff ff52 	bl	8003156 <LL_ADC_IsEnabled>
 80032b2:	4604      	mov	r4, r0
 80032b4:	483b      	ldr	r0, [pc, #236]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032b6:	f7ff ff4e 	bl	8003156 <LL_ADC_IsEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	431c      	orrs	r4, r3
 80032be:	483c      	ldr	r0, [pc, #240]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032c0:	f7ff ff49 	bl	8003156 <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4323      	orrs	r3, r4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d056      	beq.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032de:	f023 030f 	bic.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	6811      	ldr	r1, [r2, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	6892      	ldr	r2, [r2, #8]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	431a      	orrs	r2, r3
 80032ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f2:	e047      	b.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003308:	d004      	beq.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10f      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003314:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003318:	f7ff ff1d 	bl	8003156 <LL_ADC_IsEnabled>
 800331c:	4604      	mov	r4, r0
 800331e:	481f      	ldr	r0, [pc, #124]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003320:	f7ff ff19 	bl	8003156 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	4323      	orrs	r3, r4
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e012      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003334:	481a      	ldr	r0, [pc, #104]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003336:	f7ff ff0e 	bl	8003156 <LL_ADC_IsEnabled>
 800333a:	4604      	mov	r4, r0
 800333c:	4819      	ldr	r0, [pc, #100]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800333e:	f7ff ff0a 	bl	8003156 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	431c      	orrs	r4, r3
 8003346:	481a      	ldr	r0, [pc, #104]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003348:	f7ff ff05 	bl	8003156 <LL_ADC_IsEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	4323      	orrs	r3, r4
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d012      	beq.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003366:	f023 030f 	bic.w	r3, r3, #15
 800336a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800336c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336e:	e009      	b.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003382:	e000      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003384:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800338e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003392:	4618      	mov	r0, r3
 8003394:	3784      	adds	r7, #132	; 0x84
 8003396:	46bd      	mov	sp, r7
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	bf00      	nop
 800339c:	50000100 	.word	0x50000100
 80033a0:	50000400 	.word	0x50000400
 80033a4:	50000500 	.word	0x50000500
 80033a8:	50000300 	.word	0x50000300
 80033ac:	50000700 	.word	0x50000700
 80033b0:	50000600 	.word	0x50000600

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4907      	ldr	r1, [pc, #28]	; (8003450 <__NVIC_EnableIRQ+0x38>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db0a      	blt.n	800347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <__NVIC_SetPriority+0x4c>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	440b      	add	r3, r1
 8003478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800347c:	e00a      	b.n	8003494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4908      	ldr	r1, [pc, #32]	; (80034a4 <__NVIC_SetPriority+0x50>)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	3b04      	subs	r3, #4
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	440b      	add	r3, r1
 8003492:	761a      	strb	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf28      	it	cs
 80034c6:	2304      	movcs	r3, #4
 80034c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d902      	bls.n	80034d8 <NVIC_EncodePriority+0x30>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3b03      	subs	r3, #3
 80034d6:	e000      	b.n	80034da <NVIC_EncodePriority+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	4313      	orrs	r3, r2
         );
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	; 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff8e 	bl	8003454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff29 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff40 	bl	80033fc <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff90 	bl	80034a8 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5f 	bl	8003454 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff33 	bl	8003418 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa4 	bl	8003510 <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035e2:	e15a      	b.n	800389a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 814c 	beq.w	8003894 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00b      	beq.n	800361c <HAL_GPIO_Init+0x48>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003610:	2b11      	cmp	r3, #17
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b12      	cmp	r3, #18
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0xea>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d123      	bne.n	8003706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	6939      	ldr	r1, [r7, #16]
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a6 	beq.w	8003894 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003748:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <HAL_GPIO_Init+0x2e4>)
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <HAL_GPIO_Init+0x2e4>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6613      	str	r3, [r2, #96]	; 0x60
 8003754:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_GPIO_Init+0x2e4>)
 8003756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003760:	4a56      	ldr	r2, [pc, #344]	; (80038bc <HAL_GPIO_Init+0x2e8>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800378a:	d01f      	beq.n	80037cc <HAL_GPIO_Init+0x1f8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_GPIO_Init+0x2ec>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d019      	beq.n	80037c8 <HAL_GPIO_Init+0x1f4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a4b      	ldr	r2, [pc, #300]	; (80038c4 <HAL_GPIO_Init+0x2f0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_GPIO_Init+0x1f0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_GPIO_Init+0x2f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00d      	beq.n	80037c0 <HAL_GPIO_Init+0x1ec>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <HAL_GPIO_Init+0x2f8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <HAL_GPIO_Init+0x1e8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_GPIO_Init+0x2fc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_GPIO_Init+0x1e4>
 80037b4:	2305      	movs	r3, #5
 80037b6:	e00a      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037b8:	2306      	movs	r3, #6
 80037ba:	e008      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037bc:	2304      	movs	r3, #4
 80037be:	e006      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037c0:	2303      	movs	r3, #3
 80037c2:	e004      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e002      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_GPIO_Init+0x1fa>
 80037cc:	2300      	movs	r3, #0
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	f002 0203 	and.w	r2, r2, #3
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	4093      	lsls	r3, r2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037de:	4937      	ldr	r1, [pc, #220]	; (80038bc <HAL_GPIO_Init+0x2e8>)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_GPIO_Init+0x300>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_GPIO_Init+0x300>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x300>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800383a:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_GPIO_Init+0x300>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_GPIO_Init+0x300>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_GPIO_Init+0x300>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_GPIO_Init+0x300>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800388e:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_GPIO_Init+0x300>)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3301      	adds	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f ae9d 	bne.w	80035e4 <HAL_GPIO_Init+0x10>
  }
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40010000 	.word	0x40010000
 80038c0:	48000400 	.word	0x48000400
 80038c4:	48000800 	.word	0x48000800
 80038c8:	48000c00 	.word	0x48000c00
 80038cc:	48001000 	.word	0x48001000
 80038d0:	48001400 	.word	0x48001400
 80038d4:	40010400 	.word	0x40010400

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f806 	bl	8003938 <HAL_GPIO_EXTI_Callback>
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d141      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800395e:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d131      	bne.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800396c:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003972:	4a46      	ldr	r2, [pc, #280]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800397c:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003984:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2232      	movs	r2, #50	; 0x32
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	4a3f      	ldr	r2, [pc, #252]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	0c9b      	lsrs	r3, r3, #18
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a2:	e002      	b.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d102      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f2      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039be:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ca:	d158      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e057      	b.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039d0:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d6:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039e0:	e04d      	b.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d141      	bne.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	d131      	bne.n	8003a5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fe:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a10:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2232      	movs	r2, #50	; 0x32
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	0c9b      	lsrs	r3, r3, #18
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2e:	e002      	b.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d102      	bne.n	8003a4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f2      	bne.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a56:	d112      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e011      	b.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a6c:	e007      	b.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	20000000 	.word	0x20000000
 8003a94:	431bde83 	.word	0x431bde83

08003a98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa6:	6093      	str	r3, [r2, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40007000 	.word	0x40007000

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e308      	b.n	80040dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d075      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4ba3      	ldr	r3, [pc, #652]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3e>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_OscConfig+0x44>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	4b99      	ldr	r3, [pc, #612]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05b      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x108>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d157      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e2e3      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCC_OscConfig+0x74>
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a90      	ldr	r2, [pc, #576]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x98>
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a8a      	ldr	r2, [pc, #552]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a87      	ldr	r2, [pc, #540]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xb0>
 8003b50:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a83      	ldr	r2, [pc, #524]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a80      	ldr	r2, [pc, #512]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fe9e 	bl	80018b0 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fd fe9a 	bl	80018b0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e2a8      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xc0>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fe8a 	bl	80018b0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fe86 	bl	80018b0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e294      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xe8>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bce:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd8:	4b62      	ldr	r3, [pc, #392]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_OscConfig+0x136>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x13c>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11f      	bne.n	8003c34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_OscConfig+0x154>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e267      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	4952      	ldr	r1, [pc, #328]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x2b0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd fdf7 	bl	8001818 <HAL_InitTick>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d043      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e253      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fe32 	bl	80018b0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd fe2e 	bl	80018b0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e23c      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c62:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	4939      	ldr	r1, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
 8003c82:	e01a      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c84:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a36      	ldr	r2, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fe0e 	bl	80018b0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fd fe0a 	bl	80018b0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e218      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003caa:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1e0>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd fde7 	bl	80018b0 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fde3 	bl	80018b0 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1f1      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x22e>
 8003d06:	e01b      	b.n	8003d40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd fdca 	bl	80018b0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fd fdc6 	bl	80018b0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1d4      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ef      	bne.n	8003d20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80ab 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2b4>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e005      	b.n	8003d6e <HAL_RCC_OscConfig+0x2b6>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	20000004 	.word	0x20000004
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	4baf      	ldr	r3, [pc, #700]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4aae      	ldr	r2, [pc, #696]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7e:	4bac      	ldr	r3, [pc, #688]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8e:	4ba9      	ldr	r3, [pc, #676]	; (8004034 <HAL_RCC_OscConfig+0x57c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9a:	4ba6      	ldr	r3, [pc, #664]	; (8004034 <HAL_RCC_OscConfig+0x57c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4aa5      	ldr	r2, [pc, #660]	; (8004034 <HAL_RCC_OscConfig+0x57c>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fd fd83 	bl	80018b0 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fd fd7f 	bl	80018b0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e18d      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc0:	4b9c      	ldr	r3, [pc, #624]	; (8004034 <HAL_RCC_OscConfig+0x57c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d108      	bne.n	8003de6 <HAL_RCC_OscConfig+0x32e>
 8003dd4:	4b96      	ldr	r3, [pc, #600]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a95      	ldr	r2, [pc, #596]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	e024      	b.n	8003e30 <HAL_RCC_OscConfig+0x378>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d110      	bne.n	8003e10 <HAL_RCC_OscConfig+0x358>
 8003dee:	4b90      	ldr	r3, [pc, #576]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	4a8e      	ldr	r2, [pc, #568]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfe:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	4a8a      	ldr	r2, [pc, #552]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCC_OscConfig+0x378>
 8003e10:	4b87      	ldr	r3, [pc, #540]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a86      	ldr	r2, [pc, #536]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e20:	4b83      	ldr	r3, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a82      	ldr	r2, [pc, #520]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d016      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd fd3a 	bl	80018b0 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd fd36 	bl	80018b0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e142      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ed      	beq.n	8003e40 <HAL_RCC_OscConfig+0x388>
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fd fd23 	bl	80018b0 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd fd1f 	bl	80018b0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e12b      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ed      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e98:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a64      	ldr	r2, [pc, #400]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003eb8:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ebe:	4a5c      	ldr	r2, [pc, #368]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fcf2 	bl	80018b0 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed0:	f7fd fcee 	bl	80018b0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0fc      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee2:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ef      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x418>
 8003ef0:	e01b      	b.n	8003f2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ef2:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fcd5 	bl	80018b0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0a:	f7fd fcd1 	bl	80018b0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0df      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ef      	bne.n	8003f0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80d3 	beq.w	80040da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	f000 808d 	beq.w	800405c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d15a      	bne.n	8004000 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a38      	ldr	r2, [pc, #224]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fcab 	bl	80018b0 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fca7 	bl	80018b0 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0b5      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_RCC_OscConfig+0x580>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6a11      	ldr	r1, [r2, #32]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f8c:	3a01      	subs	r2, #1
 8003f8e:	0112      	lsls	r2, r2, #4
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f96:	0212      	lsls	r2, r2, #8
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	0552      	lsls	r2, r2, #21
 8003fa4:	4311      	orrs	r1, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003faa:	0852      	lsrs	r2, r2, #1
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fb6:	06d2      	lsls	r2, r2, #27
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	491d      	ldr	r1, [pc, #116]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fc6a 	bl	80018b0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fd fc66 	bl	80018b0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e074      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x528>
 8003ffe:	e06c      	b.n	80040da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_RCC_OscConfig+0x578>)
 800401e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fc42 	bl	80018b0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402e:	e00e      	b.n	800404e <HAL_RCC_OscConfig+0x596>
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
 8004038:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fc38 	bl	80018b0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e046      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404e:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_OscConfig+0x62c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x584>
 800405a:	e03e      	b.n	80040da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e039      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004068:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <HAL_RCC_OscConfig+0x62c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	429a      	cmp	r2, r3
 800407a:	d12c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	3b01      	subs	r3, #1
 8004088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d123      	bne.n	80040d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11b      	bne.n	80040d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d113      	bne.n	80040d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d001      	beq.n	80040da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e11e      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004100:	4b91      	ldr	r3, [pc, #580]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d910      	bls.n	8004130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b8e      	ldr	r3, [pc, #568]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 020f 	bic.w	r2, r3, #15
 8004116:	498c      	ldr	r1, [pc, #560]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e106      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d073      	beq.n	8004224 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d129      	bne.n	8004198 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004144:	4b81      	ldr	r3, [pc, #516]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0f4      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004154:	f000 f99e 	bl	8004494 <RCC_GetSysClockFreqFromPLLSource>
 8004158:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <HAL_RCC_ClockConfig+0x268>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d93f      	bls.n	80041e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004162:	4b7a      	ldr	r3, [pc, #488]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	d033      	beq.n	80041e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	d12f      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004182:	4b72      	ldr	r3, [pc, #456]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418a:	4a70      	ldr	r2, [pc, #448]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e024      	b.n	80041e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0c6      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0be      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041c0:	f000 f8ce 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4a61      	ldr	r2, [pc, #388]	; (8004350 <HAL_RCC_ClockConfig+0x268>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d909      	bls.n	80041e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d6:	4a5d      	ldr	r2, [pc, #372]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b5a      	ldr	r3, [pc, #360]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4957      	ldr	r1, [pc, #348]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd fb5c 	bl	80018b0 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fd fb58 	bl	80018b0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e095      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b4e      	ldr	r3, [pc, #312]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d023      	beq.n	8004278 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a42      	ldr	r2, [pc, #264]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004246:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004254:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800425c:	4a3b      	ldr	r2, [pc, #236]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 800425e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004262:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4936      	ldr	r1, [pc, #216]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
 8004276:	e008      	b.n	800428a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d105      	bne.n	800428a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800427e:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004288:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800428a:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d21d      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004298:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f023 020f 	bic.w	r2, r3, #15
 80042a0:	4929      	ldr	r1, [pc, #164]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042a8:	f7fd fb02 	bl	80018b0 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fd fafe 	bl	80018b0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e03b      	b.n	800433e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1ed      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4917      	ldr	r1, [pc, #92]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490f      	ldr	r1, [pc, #60]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004312:	f000 f825 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCC_ClockConfig+0x264>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490c      	ldr	r1, [pc, #48]	; (8004354 <HAL_RCC_ClockConfig+0x26c>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	fa22 f303 	lsr.w	r3, r2, r3
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <HAL_RCC_ClockConfig+0x270>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_RCC_ClockConfig+0x274>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa6e 	bl	8001818 <HAL_InitTick>
 800433c:	4603      	mov	r3, r0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40022000 	.word	0x40022000
 800434c:	40021000 	.word	0x40021000
 8004350:	04c4b400 	.word	0x04c4b400
 8004354:	08009f00 	.word	0x08009f00
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004366:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d102      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e047      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004378:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d102      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004384:	4b26      	ldr	r3, [pc, #152]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e03e      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d136      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3301      	adds	r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d10c      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043be:	68d2      	ldr	r2, [r2, #12]
 80043c0:	0a12      	lsrs	r2, r2, #8
 80043c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
      break;
 80043cc:	e00c      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d8:	68d2      	ldr	r2, [r2, #12]
 80043da:	0a12      	lsrs	r2, r2, #8
 80043dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e0:	fb02 f303 	mul.w	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
      break;
 80043e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0e5b      	lsrs	r3, r3, #25
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e001      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004408:	693b      	ldr	r3, [r7, #16]
}
 800440a:	4618      	mov	r0, r3
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	00f42400 	.word	0x00f42400
 8004420:	016e3600 	.word	0x016e3600

08004424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000000 	.word	0x20000000

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	08009f10 	.word	0x08009f10

08004468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800446c:	f7ff ffda 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0adb      	lsrs	r3, r3, #11
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	08009f10 	.word	0x08009f10

08004494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d10c      	bne.n	80044d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044b8:	4a17      	ldr	r2, [pc, #92]	; (8004518 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044c2:	68d2      	ldr	r2, [r2, #12]
 80044c4:	0a12      	lsrs	r2, r2, #8
 80044c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	617b      	str	r3, [r7, #20]
    break;
 80044d0:	e00c      	b.n	80044ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044d2:	4a12      	ldr	r2, [pc, #72]	; (800451c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	0a12      	lsrs	r2, r2, #8
 80044e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
    break;
 80044ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0e5b      	lsrs	r3, r3, #25
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004506:	687b      	ldr	r3, [r7, #4]
}
 8004508:	4618      	mov	r0, r3
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40021000 	.word	0x40021000
 8004518:	016e3600 	.word	0x016e3600
 800451c:	00f42400 	.word	0x00f42400

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452c:	2300      	movs	r3, #0
 800452e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8098 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453e:	2300      	movs	r3, #0
 8004540:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004542:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4b40      	ldr	r3, [pc, #256]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a3f      	ldr	r2, [pc, #252]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
 800455a:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004566:	2301      	movs	r3, #1
 8004568:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800456a:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a39      	ldr	r2, [pc, #228]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004576:	f7fd f99b 	bl	80018b0 <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457c:	e009      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fd f997 	bl	80018b0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	74fb      	strb	r3, [r7, #19]
        break;
 8004590:	e005      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004592:	4b30      	ldr	r3, [pc, #192]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ef      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d159      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d019      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045dc:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd f957 	bl	80018b0 <HAL_GetTick>
 8004602:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	e00b      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fd f953 	bl	80018b0 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	4293      	cmp	r3, r2
 8004616:	d902      	bls.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	74fb      	strb	r3, [r7, #19]
            break;
 800461c:	e006      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ec      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	74bb      	strb	r3, [r7, #18]
 800464e:	e005      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465c:	7c7b      	ldrb	r3, [r7, #17]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4baf      	ldr	r3, [pc, #700]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	4aae      	ldr	r2, [pc, #696]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800467a:	4ba9      	ldr	r3, [pc, #676]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 0203 	bic.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	49a5      	ldr	r1, [pc, #660]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800469c:	4ba0      	ldr	r3, [pc, #640]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 020c 	bic.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	499d      	ldr	r1, [pc, #628]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046be:	4b98      	ldr	r3, [pc, #608]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4994      	ldr	r1, [pc, #592]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e0:	4b8f      	ldr	r3, [pc, #572]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	498c      	ldr	r1, [pc, #560]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004702:	4b87      	ldr	r3, [pc, #540]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4983      	ldr	r1, [pc, #524]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004724:	4b7e      	ldr	r3, [pc, #504]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	497b      	ldr	r1, [pc, #492]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004746:	4b76      	ldr	r3, [pc, #472]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4972      	ldr	r1, [pc, #456]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004768:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	496a      	ldr	r1, [pc, #424]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800478a:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	4961      	ldr	r1, [pc, #388]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ac:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	4959      	ldr	r1, [pc, #356]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4950      	ldr	r1, [pc, #320]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f0:	4b4b      	ldr	r3, [pc, #300]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4948      	ldr	r1, [pc, #288]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a42      	ldr	r2, [pc, #264]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004828:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	493a      	ldr	r1, [pc, #232]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d105      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a34      	ldr	r2, [pc, #208]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	492c      	ldr	r1, [pc, #176]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800488a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	491e      	ldr	r1, [pc, #120]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4910      	ldr	r1, [pc, #64]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	4902      	ldr	r1, [pc, #8]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800491e:	e001      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004920:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492c:	d105      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d015      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004946:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	4917      	ldr	r1, [pc, #92]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d105      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004970:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	4909      	ldr	r1, [pc, #36]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499c:	d105      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000

080049b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e042      	b.n	8004a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc fe85 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2224      	movs	r2, #36	; 0x24
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8c2 	bl	8004b84 <UART_SetConfig>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e022      	b.n	8004a50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb80 	bl	8005118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fc07 	bl	800525c <UART_CheckIdleState>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	f040 8083 	bne.w	8004b7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Transmit+0x28>
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e07b      	b.n	8004b7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Transmit+0x3a>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e074      	b.n	8004b7c <HAL_UART_Transmit+0x124>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2221      	movs	r2, #33	; 0x21
 8004aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aaa:	f7fc ff01 	bl	80018b0 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d108      	bne.n	8004adc <HAL_UART_Transmit+0x84>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e003      	b.n	8004ae4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004aec:	e02c      	b.n	8004b48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fbfa 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e039      	b.n	8004b7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	3302      	adds	r3, #2
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e007      	b.n	8004b36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	3301      	adds	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1cc      	bne.n	8004aee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fbc7 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e006      	b.n	8004b7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b5b0      	push	{r4, r5, r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4bb1      	ldr	r3, [pc, #708]	; (8004e74 <UART_SetConfig+0x2f0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4aa6      	ldr	r2, [pc, #664]	; (8004e78 <UART_SetConfig+0x2f4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f023 010f 	bic.w	r1, r3, #15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a97      	ldr	r2, [pc, #604]	; (8004e7c <UART_SetConfig+0x2f8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d120      	bne.n	8004c66 <UART_SetConfig+0xe2>
 8004c24:	4b96      	ldr	r3, [pc, #600]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d816      	bhi.n	8004c60 <UART_SetConfig+0xdc>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0xb4>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c55 	.word	0x08004c55
 8004c40:	08004c4f 	.word	0x08004c4f
 8004c44:	08004c5b 	.word	0x08004c5b
 8004c48:	2301      	movs	r3, #1
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	e0e7      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	76fb      	strb	r3, [r7, #27]
 8004c52:	e0e4      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004c54:	2304      	movs	r3, #4
 8004c56:	76fb      	strb	r3, [r7, #27]
 8004c58:	e0e1      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	76fb      	strb	r3, [r7, #27]
 8004c5e:	e0de      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004c60:	2310      	movs	r3, #16
 8004c62:	76fb      	strb	r3, [r7, #27]
 8004c64:	e0db      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a86      	ldr	r2, [pc, #536]	; (8004e84 <UART_SetConfig+0x300>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d132      	bne.n	8004cd6 <UART_SetConfig+0x152>
 8004c70:	4b83      	ldr	r3, [pc, #524]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d828      	bhi.n	8004cd0 <UART_SetConfig+0x14c>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x100>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004cd1 	.word	0x08004cd1
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cd1 	.word	0x08004cd1
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004cd1 	.word	0x08004cd1
 8004ca4:	08004cbf 	.word	0x08004cbf
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd1 	.word	0x08004cd1
 8004cb4:	08004ccb 	.word	0x08004ccb
 8004cb8:	2300      	movs	r3, #0
 8004cba:	76fb      	strb	r3, [r7, #27]
 8004cbc:	e0af      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	76fb      	strb	r3, [r7, #27]
 8004cc2:	e0ac      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	76fb      	strb	r3, [r7, #27]
 8004cc8:	e0a9      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	76fb      	strb	r3, [r7, #27]
 8004cce:	e0a6      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	e0a3      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a6b      	ldr	r2, [pc, #428]	; (8004e88 <UART_SetConfig+0x304>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d120      	bne.n	8004d22 <UART_SetConfig+0x19e>
 8004ce0:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d013      	beq.n	8004d16 <UART_SetConfig+0x192>
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d814      	bhi.n	8004d1c <UART_SetConfig+0x198>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d009      	beq.n	8004d0a <UART_SetConfig+0x186>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d810      	bhi.n	8004d1c <UART_SetConfig+0x198>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x180>
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d006      	beq.n	8004d10 <UART_SetConfig+0x18c>
 8004d02:	e00b      	b.n	8004d1c <UART_SetConfig+0x198>
 8004d04:	2300      	movs	r3, #0
 8004d06:	76fb      	strb	r3, [r7, #27]
 8004d08:	e089      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e086      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d10:	2304      	movs	r3, #4
 8004d12:	76fb      	strb	r3, [r7, #27]
 8004d14:	e083      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d16:	2308      	movs	r3, #8
 8004d18:	76fb      	strb	r3, [r7, #27]
 8004d1a:	e080      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	76fb      	strb	r3, [r7, #27]
 8004d20:	e07d      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a59      	ldr	r2, [pc, #356]	; (8004e8c <UART_SetConfig+0x308>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d120      	bne.n	8004d6e <UART_SetConfig+0x1ea>
 8004d2c:	4b54      	ldr	r3, [pc, #336]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d36:	2bc0      	cmp	r3, #192	; 0xc0
 8004d38:	d013      	beq.n	8004d62 <UART_SetConfig+0x1de>
 8004d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d3c:	d814      	bhi.n	8004d68 <UART_SetConfig+0x1e4>
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d009      	beq.n	8004d56 <UART_SetConfig+0x1d2>
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d810      	bhi.n	8004d68 <UART_SetConfig+0x1e4>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <UART_SetConfig+0x1cc>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d006      	beq.n	8004d5c <UART_SetConfig+0x1d8>
 8004d4e:	e00b      	b.n	8004d68 <UART_SetConfig+0x1e4>
 8004d50:	2300      	movs	r3, #0
 8004d52:	76fb      	strb	r3, [r7, #27]
 8004d54:	e063      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d56:	2302      	movs	r3, #2
 8004d58:	76fb      	strb	r3, [r7, #27]
 8004d5a:	e060      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	76fb      	strb	r3, [r7, #27]
 8004d60:	e05d      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d62:	2308      	movs	r3, #8
 8004d64:	76fb      	strb	r3, [r7, #27]
 8004d66:	e05a      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e057      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a47      	ldr	r2, [pc, #284]	; (8004e90 <UART_SetConfig+0x30c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d125      	bne.n	8004dc4 <UART_SetConfig+0x240>
 8004d78:	4b41      	ldr	r3, [pc, #260]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d86:	d017      	beq.n	8004db8 <UART_SetConfig+0x234>
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d817      	bhi.n	8004dbe <UART_SetConfig+0x23a>
 8004d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d92:	d00b      	beq.n	8004dac <UART_SetConfig+0x228>
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d98:	d811      	bhi.n	8004dbe <UART_SetConfig+0x23a>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <UART_SetConfig+0x222>
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d006      	beq.n	8004db2 <UART_SetConfig+0x22e>
 8004da4:	e00b      	b.n	8004dbe <UART_SetConfig+0x23a>
 8004da6:	2300      	movs	r3, #0
 8004da8:	76fb      	strb	r3, [r7, #27]
 8004daa:	e038      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004dac:	2302      	movs	r3, #2
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e035      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004db2:	2304      	movs	r3, #4
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e032      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004db8:	2308      	movs	r3, #8
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e02f      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e02c      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <UART_SetConfig+0x2f4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d125      	bne.n	8004e1a <UART_SetConfig+0x296>
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <UART_SetConfig+0x2fc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ddc:	d017      	beq.n	8004e0e <UART_SetConfig+0x28a>
 8004dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004de2:	d817      	bhi.n	8004e14 <UART_SetConfig+0x290>
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de8:	d00b      	beq.n	8004e02 <UART_SetConfig+0x27e>
 8004dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dee:	d811      	bhi.n	8004e14 <UART_SetConfig+0x290>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <UART_SetConfig+0x278>
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df8:	d006      	beq.n	8004e08 <UART_SetConfig+0x284>
 8004dfa:	e00b      	b.n	8004e14 <UART_SetConfig+0x290>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	76fb      	strb	r3, [r7, #27]
 8004e00:	e00d      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004e02:	2302      	movs	r3, #2
 8004e04:	76fb      	strb	r3, [r7, #27]
 8004e06:	e00a      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	76fb      	strb	r3, [r7, #27]
 8004e0c:	e007      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	76fb      	strb	r3, [r7, #27]
 8004e12:	e004      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004e14:	2310      	movs	r3, #16
 8004e16:	76fb      	strb	r3, [r7, #27]
 8004e18:	e001      	b.n	8004e1e <UART_SetConfig+0x29a>
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <UART_SetConfig+0x2f4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	f040 809f 	bne.w	8004f68 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e2a:	7efb      	ldrb	r3, [r7, #27]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d837      	bhi.n	8004ea0 <UART_SetConfig+0x31c>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x2b4>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004ea1 	.word	0x08004ea1
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004e6b 	.word	0x08004e6b
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004ea1 	.word	0x08004ea1
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004e99 	.word	0x08004e99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7ff faee 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8004e60:	6178      	str	r0, [r7, #20]
        break;
 8004e62:	e022      	b.n	8004eaa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <UART_SetConfig+0x310>)
 8004e66:	617b      	str	r3, [r7, #20]
        break;
 8004e68:	e01f      	b.n	8004eaa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7ff fa79 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8004e6e:	6178      	str	r0, [r7, #20]
        break;
 8004e70:	e01b      	b.n	8004eaa <UART_SetConfig+0x326>
 8004e72:	bf00      	nop
 8004e74:	cfff69f3 	.word	0xcfff69f3
 8004e78:	40008000 	.word	0x40008000
 8004e7c:	40013800 	.word	0x40013800
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40004400 	.word	0x40004400
 8004e88:	40004800 	.word	0x40004800
 8004e8c:	40004c00 	.word	0x40004c00
 8004e90:	40005000 	.word	0x40005000
 8004e94:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9c:	617b      	str	r3, [r7, #20]
        break;
 8004e9e:	e004      	b.n	8004eaa <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	76bb      	strb	r3, [r7, #26]
        break;
 8004ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 811b 	beq.w	80050e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	4a96      	ldr	r2, [pc, #600]	; (8005110 <UART_SetConfig+0x58c>)
 8004eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d305      	bcc.n	8004ee2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	76bb      	strb	r3, [r7, #26]
 8004ee6:	e0ff      	b.n	80050e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4a86      	ldr	r2, [pc, #536]	; (8005110 <UART_SetConfig+0x58c>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f7fb feea 	bl	8000cd8 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	020b      	lsls	r3, r1, #8
 8004f16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f1a:	0202      	lsls	r2, r0, #8
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	6849      	ldr	r1, [r1, #4]
 8004f20:	0849      	lsrs	r1, r1, #1
 8004f22:	4608      	mov	r0, r1
 8004f24:	f04f 0100 	mov.w	r1, #0
 8004f28:	1814      	adds	r4, r2, r0
 8004f2a:	eb43 0501 	adc.w	r5, r3, r1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb fecc 	bl	8000cd8 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4613      	mov	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d308      	bcc.n	8004f62 <UART_SetConfig+0x3de>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f56:	d204      	bcs.n	8004f62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	60da      	str	r2, [r3, #12]
 8004f60:	e0c2      	b.n	80050e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	76bb      	strb	r3, [r7, #26]
 8004f66:	e0bf      	b.n	80050e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f70:	d165      	bne.n	800503e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8004f72:	7efb      	ldrb	r3, [r7, #27]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d828      	bhi.n	8004fca <UART_SetConfig+0x446>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x3fc>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fbb 	.word	0x08004fbb
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fcb 	.word	0x08004fcb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7ff fa4a 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8004fa8:	6178      	str	r0, [r7, #20]
        break;
 8004faa:	e013      	b.n	8004fd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7ff fa5c 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 8004fb0:	6178      	str	r0, [r7, #20]
        break;
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b57      	ldr	r3, [pc, #348]	; (8005114 <UART_SetConfig+0x590>)
 8004fb6:	617b      	str	r3, [r7, #20]
        break;
 8004fb8:	e00c      	b.n	8004fd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7ff f9d1 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8004fbe:	6178      	str	r0, [r7, #20]
        break;
 8004fc0:	e008      	b.n	8004fd4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	617b      	str	r3, [r7, #20]
        break;
 8004fc8:	e004      	b.n	8004fd4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	76bb      	strb	r3, [r7, #26]
        break;
 8004fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8086 	beq.w	80050e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4a4b      	ldr	r2, [pc, #300]	; (8005110 <UART_SetConfig+0x58c>)
 8004fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fee:	005a      	lsls	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	b29b      	uxth	r3, r3
 8005002:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d916      	bls.n	8005038 <UART_SetConfig+0x4b4>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d212      	bcs.n	8005038 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f023 030f 	bic.w	r3, r3, #15
 800501a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	b29a      	uxth	r2, r3
 8005028:	89fb      	ldrh	r3, [r7, #14]
 800502a:	4313      	orrs	r3, r2
 800502c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	89fa      	ldrh	r2, [r7, #14]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e057      	b.n	80050e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	76bb      	strb	r3, [r7, #26]
 800503c:	e054      	b.n	80050e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800503e:	7efb      	ldrb	r3, [r7, #27]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d828      	bhi.n	8005096 <UART_SetConfig+0x512>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x4c8>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	08005097 	.word	0x08005097
 800505c:	08005087 	.word	0x08005087
 8005060:	08005097 	.word	0x08005097
 8005064:	08005097 	.word	0x08005097
 8005068:	08005097 	.word	0x08005097
 800506c:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005070:	f7ff f9e4 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8005074:	6178      	str	r0, [r7, #20]
        break;
 8005076:	e013      	b.n	80050a0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7ff f9f6 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 800507c:	6178      	str	r0, [r7, #20]
        break;
 800507e:	e00f      	b.n	80050a0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b24      	ldr	r3, [pc, #144]	; (8005114 <UART_SetConfig+0x590>)
 8005082:	617b      	str	r3, [r7, #20]
        break;
 8005084:	e00c      	b.n	80050a0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7ff f96b 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800508a:	6178      	str	r0, [r7, #20]
        break;
 800508c:	e008      	b.n	80050a0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	617b      	str	r3, [r7, #20]
        break;
 8005094:	e004      	b.n	80050a0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	76bb      	strb	r3, [r7, #26]
        break;
 800509e:	bf00      	nop
    }

    if (pclk != 0U)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	4a19      	ldr	r2, [pc, #100]	; (8005110 <UART_SetConfig+0x58c>)
 80050ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b0:	461a      	mov	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	441a      	add	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d908      	bls.n	80050e4 <UART_SetConfig+0x560>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d204      	bcs.n	80050e4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e001      	b.n	80050e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005104:	7ebb      	ldrb	r3, [r7, #26]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bdb0      	pop	{r4, r5, r7, pc}
 800510e:	bf00      	nop
 8005110:	08009f18 	.word	0x08009f18
 8005114:	00f42400 	.word	0x00f42400

08005118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01a      	beq.n	800522e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	d10a      	bne.n	800522e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800526c:	f7fc fb20 	bl	80018b0 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d10e      	bne.n	800529e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f82f 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e025      	b.n	80052ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d10e      	bne.n	80052ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f819 	bl	80052f2 <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e00f      	b.n	80052ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005302:	e062      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d05e      	beq.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530c:	f7fc fad0 	bl	80018b0 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <UART_WaitOnFlagUntilTimeout+0x30>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005330:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e045      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02e      	beq.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537a:	d126      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005384:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005394:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e00f      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d08d      	beq.n	8005304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_UARTEx_DisableFifoMode+0x16>
 8005404:	2302      	movs	r3, #2
 8005406:	e027      	b.n	8005458 <HAL_UARTEx_DisableFifoMode+0x66>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005436:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e02d      	b.n	80054d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f84f 	bl	800555c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e02d      	b.n	8005554 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	; 0x24
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f811 	bl	800555c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800557c:	e031      	b.n	80055e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800557e:	2308      	movs	r3, #8
 8005580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005582:	2308      	movs	r3, #8
 8005584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	0e5b      	lsrs	r3, r3, #25
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	0f5b      	lsrs	r3, r3, #29
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055a6:	7bbb      	ldrb	r3, [r7, #14]
 80055a8:	7b3a      	ldrb	r2, [r7, #12]
 80055aa:	4911      	ldr	r1, [pc, #68]	; (80055f0 <UARTEx_SetNbDataToProcess+0x94>)
 80055ac:	5c8a      	ldrb	r2, [r1, r2]
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055b2:	7b3a      	ldrb	r2, [r7, #12]
 80055b4:	490f      	ldr	r1, [pc, #60]	; (80055f4 <UARTEx_SetNbDataToProcess+0x98>)
 80055b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	7b7a      	ldrb	r2, [r7, #13]
 80055c8:	4909      	ldr	r1, [pc, #36]	; (80055f0 <UARTEx_SetNbDataToProcess+0x94>)
 80055ca:	5c8a      	ldrb	r2, [r1, r2]
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055d0:	7b7a      	ldrb	r2, [r7, #13]
 80055d2:	4908      	ldr	r1, [pc, #32]	; (80055f4 <UARTEx_SetNbDataToProcess+0x98>)
 80055d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	08009f30 	.word	0x08009f30
 80055f4:	08009f38 	.word	0x08009f38

080055f8 <__errno>:
 80055f8:	4b01      	ldr	r3, [pc, #4]	; (8005600 <__errno+0x8>)
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000000c 	.word	0x2000000c

08005604 <__libc_init_array>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	4d0d      	ldr	r5, [pc, #52]	; (800563c <__libc_init_array+0x38>)
 8005608:	4c0d      	ldr	r4, [pc, #52]	; (8005640 <__libc_init_array+0x3c>)
 800560a:	1b64      	subs	r4, r4, r5
 800560c:	10a4      	asrs	r4, r4, #2
 800560e:	2600      	movs	r6, #0
 8005610:	42a6      	cmp	r6, r4
 8005612:	d109      	bne.n	8005628 <__libc_init_array+0x24>
 8005614:	4d0b      	ldr	r5, [pc, #44]	; (8005644 <__libc_init_array+0x40>)
 8005616:	4c0c      	ldr	r4, [pc, #48]	; (8005648 <__libc_init_array+0x44>)
 8005618:	f004 fc60 	bl	8009edc <_init>
 800561c:	1b64      	subs	r4, r4, r5
 800561e:	10a4      	asrs	r4, r4, #2
 8005620:	2600      	movs	r6, #0
 8005622:	42a6      	cmp	r6, r4
 8005624:	d105      	bne.n	8005632 <__libc_init_array+0x2e>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	f855 3b04 	ldr.w	r3, [r5], #4
 800562c:	4798      	blx	r3
 800562e:	3601      	adds	r6, #1
 8005630:	e7ee      	b.n	8005610 <__libc_init_array+0xc>
 8005632:	f855 3b04 	ldr.w	r3, [r5], #4
 8005636:	4798      	blx	r3
 8005638:	3601      	adds	r6, #1
 800563a:	e7f2      	b.n	8005622 <__libc_init_array+0x1e>
 800563c:	0800a3fc 	.word	0x0800a3fc
 8005640:	0800a3fc 	.word	0x0800a3fc
 8005644:	0800a3fc 	.word	0x0800a3fc
 8005648:	0800a400 	.word	0x0800a400

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <__cvt>:
 800565c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	ec55 4b10 	vmov	r4, r5, d0
 8005664:	2d00      	cmp	r5, #0
 8005666:	460e      	mov	r6, r1
 8005668:	4619      	mov	r1, r3
 800566a:	462b      	mov	r3, r5
 800566c:	bfbb      	ittet	lt
 800566e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005672:	461d      	movlt	r5, r3
 8005674:	2300      	movge	r3, #0
 8005676:	232d      	movlt	r3, #45	; 0x2d
 8005678:	700b      	strb	r3, [r1, #0]
 800567a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800567c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005680:	4691      	mov	r9, r2
 8005682:	f023 0820 	bic.w	r8, r3, #32
 8005686:	bfbc      	itt	lt
 8005688:	4622      	movlt	r2, r4
 800568a:	4614      	movlt	r4, r2
 800568c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005690:	d005      	beq.n	800569e <__cvt+0x42>
 8005692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005696:	d100      	bne.n	800569a <__cvt+0x3e>
 8005698:	3601      	adds	r6, #1
 800569a:	2102      	movs	r1, #2
 800569c:	e000      	b.n	80056a0 <__cvt+0x44>
 800569e:	2103      	movs	r1, #3
 80056a0:	ab03      	add	r3, sp, #12
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	ab02      	add	r3, sp, #8
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	ec45 4b10 	vmov	d0, r4, r5
 80056ac:	4653      	mov	r3, sl
 80056ae:	4632      	mov	r2, r6
 80056b0:	f001 fdce 	bl	8007250 <_dtoa_r>
 80056b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056b8:	4607      	mov	r7, r0
 80056ba:	d102      	bne.n	80056c2 <__cvt+0x66>
 80056bc:	f019 0f01 	tst.w	r9, #1
 80056c0:	d022      	beq.n	8005708 <__cvt+0xac>
 80056c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056c6:	eb07 0906 	add.w	r9, r7, r6
 80056ca:	d110      	bne.n	80056ee <__cvt+0x92>
 80056cc:	783b      	ldrb	r3, [r7, #0]
 80056ce:	2b30      	cmp	r3, #48	; 0x30
 80056d0:	d10a      	bne.n	80056e8 <__cvt+0x8c>
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb fa1d 	bl	8000b18 <__aeabi_dcmpeq>
 80056de:	b918      	cbnz	r0, 80056e8 <__cvt+0x8c>
 80056e0:	f1c6 0601 	rsb	r6, r6, #1
 80056e4:	f8ca 6000 	str.w	r6, [sl]
 80056e8:	f8da 3000 	ldr.w	r3, [sl]
 80056ec:	4499      	add	r9, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	2300      	movs	r3, #0
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fb fa0f 	bl	8000b18 <__aeabi_dcmpeq>
 80056fa:	b108      	cbz	r0, 8005700 <__cvt+0xa4>
 80056fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005700:	2230      	movs	r2, #48	; 0x30
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	454b      	cmp	r3, r9
 8005706:	d307      	bcc.n	8005718 <__cvt+0xbc>
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800570c:	1bdb      	subs	r3, r3, r7
 800570e:	4638      	mov	r0, r7
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	b004      	add	sp, #16
 8005714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	9103      	str	r1, [sp, #12]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e7f0      	b.n	8005702 <__cvt+0xa6>

08005720 <__exponent>:
 8005720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005722:	4603      	mov	r3, r0
 8005724:	2900      	cmp	r1, #0
 8005726:	bfb8      	it	lt
 8005728:	4249      	neglt	r1, r1
 800572a:	f803 2b02 	strb.w	r2, [r3], #2
 800572e:	bfb4      	ite	lt
 8005730:	222d      	movlt	r2, #45	; 0x2d
 8005732:	222b      	movge	r2, #43	; 0x2b
 8005734:	2909      	cmp	r1, #9
 8005736:	7042      	strb	r2, [r0, #1]
 8005738:	dd2a      	ble.n	8005790 <__exponent+0x70>
 800573a:	f10d 0407 	add.w	r4, sp, #7
 800573e:	46a4      	mov	ip, r4
 8005740:	270a      	movs	r7, #10
 8005742:	46a6      	mov	lr, r4
 8005744:	460a      	mov	r2, r1
 8005746:	fb91 f6f7 	sdiv	r6, r1, r7
 800574a:	fb07 1516 	mls	r5, r7, r6, r1
 800574e:	3530      	adds	r5, #48	; 0x30
 8005750:	2a63      	cmp	r2, #99	; 0x63
 8005752:	f104 34ff 	add.w	r4, r4, #4294967295
 8005756:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800575a:	4631      	mov	r1, r6
 800575c:	dcf1      	bgt.n	8005742 <__exponent+0x22>
 800575e:	3130      	adds	r1, #48	; 0x30
 8005760:	f1ae 0502 	sub.w	r5, lr, #2
 8005764:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005768:	1c44      	adds	r4, r0, #1
 800576a:	4629      	mov	r1, r5
 800576c:	4561      	cmp	r1, ip
 800576e:	d30a      	bcc.n	8005786 <__exponent+0x66>
 8005770:	f10d 0209 	add.w	r2, sp, #9
 8005774:	eba2 020e 	sub.w	r2, r2, lr
 8005778:	4565      	cmp	r5, ip
 800577a:	bf88      	it	hi
 800577c:	2200      	movhi	r2, #0
 800577e:	4413      	add	r3, r2
 8005780:	1a18      	subs	r0, r3, r0
 8005782:	b003      	add	sp, #12
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800578e:	e7ed      	b.n	800576c <__exponent+0x4c>
 8005790:	2330      	movs	r3, #48	; 0x30
 8005792:	3130      	adds	r1, #48	; 0x30
 8005794:	7083      	strb	r3, [r0, #2]
 8005796:	70c1      	strb	r1, [r0, #3]
 8005798:	1d03      	adds	r3, r0, #4
 800579a:	e7f1      	b.n	8005780 <__exponent+0x60>

0800579c <_printf_float>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	ed2d 8b02 	vpush	{d8}
 80057a4:	b08d      	sub	sp, #52	; 0x34
 80057a6:	460c      	mov	r4, r1
 80057a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057ac:	4616      	mov	r6, r2
 80057ae:	461f      	mov	r7, r3
 80057b0:	4605      	mov	r5, r0
 80057b2:	f002 ff9d 	bl	80086f0 <_localeconv_r>
 80057b6:	f8d0 a000 	ldr.w	sl, [r0]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f7fa fd30 	bl	8000220 <strlen>
 80057c0:	2300      	movs	r3, #0
 80057c2:	930a      	str	r3, [sp, #40]	; 0x28
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	9305      	str	r3, [sp, #20]
 80057c8:	f8d8 3000 	ldr.w	r3, [r8]
 80057cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	f103 0208 	add.w	r2, r3, #8
 80057da:	f8c8 2000 	str.w	r2, [r8]
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057f4:	ee08 0a10 	vmov	s16, r0
 80057f8:	4b9f      	ldr	r3, [pc, #636]	; (8005a78 <_printf_float+0x2dc>)
 80057fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	f7fb f9bb 	bl	8000b7c <__aeabi_dcmpun>
 8005806:	bb88      	cbnz	r0, 800586c <_printf_float+0xd0>
 8005808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580c:	4b9a      	ldr	r3, [pc, #616]	; (8005a78 <_printf_float+0x2dc>)
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	f7fb f995 	bl	8000b40 <__aeabi_dcmple>
 8005816:	bb48      	cbnz	r0, 800586c <_printf_float+0xd0>
 8005818:	2200      	movs	r2, #0
 800581a:	2300      	movs	r3, #0
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fb f984 	bl	8000b2c <__aeabi_dcmplt>
 8005824:	b110      	cbz	r0, 800582c <_printf_float+0x90>
 8005826:	232d      	movs	r3, #45	; 0x2d
 8005828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582c:	4b93      	ldr	r3, [pc, #588]	; (8005a7c <_printf_float+0x2e0>)
 800582e:	4894      	ldr	r0, [pc, #592]	; (8005a80 <_printf_float+0x2e4>)
 8005830:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005834:	bf94      	ite	ls
 8005836:	4698      	movls	r8, r3
 8005838:	4680      	movhi	r8, r0
 800583a:	2303      	movs	r3, #3
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	9b05      	ldr	r3, [sp, #20]
 8005840:	f023 0204 	bic.w	r2, r3, #4
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	9700      	str	r7, [sp, #0]
 800584c:	4633      	mov	r3, r6
 800584e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f9d8 	bl	8005c08 <_printf_common>
 8005858:	3001      	adds	r0, #1
 800585a:	f040 8090 	bne.w	800597e <_printf_float+0x1e2>
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	b00d      	add	sp, #52	; 0x34
 8005864:	ecbd 8b02 	vpop	{d8}
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	4640      	mov	r0, r8
 8005872:	4649      	mov	r1, r9
 8005874:	f7fb f982 	bl	8000b7c <__aeabi_dcmpun>
 8005878:	b140      	cbz	r0, 800588c <_printf_float+0xf0>
 800587a:	464b      	mov	r3, r9
 800587c:	2b00      	cmp	r3, #0
 800587e:	bfbc      	itt	lt
 8005880:	232d      	movlt	r3, #45	; 0x2d
 8005882:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005886:	487f      	ldr	r0, [pc, #508]	; (8005a84 <_printf_float+0x2e8>)
 8005888:	4b7f      	ldr	r3, [pc, #508]	; (8005a88 <_printf_float+0x2ec>)
 800588a:	e7d1      	b.n	8005830 <_printf_float+0x94>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005892:	9206      	str	r2, [sp, #24]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	d13f      	bne.n	8005918 <_printf_float+0x17c>
 8005898:	2306      	movs	r3, #6
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	9b05      	ldr	r3, [sp, #20]
 800589e:	6861      	ldr	r1, [r4, #4]
 80058a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058a4:	2300      	movs	r3, #0
 80058a6:	9303      	str	r3, [sp, #12]
 80058a8:	ab0a      	add	r3, sp, #40	; 0x28
 80058aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058ae:	ab09      	add	r3, sp, #36	; 0x24
 80058b0:	ec49 8b10 	vmov	d0, r8, r9
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058bc:	4628      	mov	r0, r5
 80058be:	f7ff fecd 	bl	800565c <__cvt>
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c6:	2b47      	cmp	r3, #71	; 0x47
 80058c8:	4680      	mov	r8, r0
 80058ca:	d108      	bne.n	80058de <_printf_float+0x142>
 80058cc:	1cc8      	adds	r0, r1, #3
 80058ce:	db02      	blt.n	80058d6 <_printf_float+0x13a>
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	4299      	cmp	r1, r3
 80058d4:	dd41      	ble.n	800595a <_printf_float+0x1be>
 80058d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80058da:	fa5f fb8b 	uxtb.w	fp, fp
 80058de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058e2:	d820      	bhi.n	8005926 <_printf_float+0x18a>
 80058e4:	3901      	subs	r1, #1
 80058e6:	465a      	mov	r2, fp
 80058e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058ec:	9109      	str	r1, [sp, #36]	; 0x24
 80058ee:	f7ff ff17 	bl	8005720 <__exponent>
 80058f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f4:	1813      	adds	r3, r2, r0
 80058f6:	2a01      	cmp	r2, #1
 80058f8:	4681      	mov	r9, r0
 80058fa:	6123      	str	r3, [r4, #16]
 80058fc:	dc02      	bgt.n	8005904 <_printf_float+0x168>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	07d2      	lsls	r2, r2, #31
 8005902:	d501      	bpl.n	8005908 <_printf_float+0x16c>
 8005904:	3301      	adds	r3, #1
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800590c:	2b00      	cmp	r3, #0
 800590e:	d09c      	beq.n	800584a <_printf_float+0xae>
 8005910:	232d      	movs	r3, #45	; 0x2d
 8005912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005916:	e798      	b.n	800584a <_printf_float+0xae>
 8005918:	9a06      	ldr	r2, [sp, #24]
 800591a:	2a47      	cmp	r2, #71	; 0x47
 800591c:	d1be      	bne.n	800589c <_printf_float+0x100>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1bc      	bne.n	800589c <_printf_float+0x100>
 8005922:	2301      	movs	r3, #1
 8005924:	e7b9      	b.n	800589a <_printf_float+0xfe>
 8005926:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800592a:	d118      	bne.n	800595e <_printf_float+0x1c2>
 800592c:	2900      	cmp	r1, #0
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	dd0b      	ble.n	800594a <_printf_float+0x1ae>
 8005932:	6121      	str	r1, [r4, #16]
 8005934:	b913      	cbnz	r3, 800593c <_printf_float+0x1a0>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	07d0      	lsls	r0, r2, #31
 800593a:	d502      	bpl.n	8005942 <_printf_float+0x1a6>
 800593c:	3301      	adds	r3, #1
 800593e:	440b      	add	r3, r1
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	65a1      	str	r1, [r4, #88]	; 0x58
 8005944:	f04f 0900 	mov.w	r9, #0
 8005948:	e7de      	b.n	8005908 <_printf_float+0x16c>
 800594a:	b913      	cbnz	r3, 8005952 <_printf_float+0x1b6>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	07d2      	lsls	r2, r2, #31
 8005950:	d501      	bpl.n	8005956 <_printf_float+0x1ba>
 8005952:	3302      	adds	r3, #2
 8005954:	e7f4      	b.n	8005940 <_printf_float+0x1a4>
 8005956:	2301      	movs	r3, #1
 8005958:	e7f2      	b.n	8005940 <_printf_float+0x1a4>
 800595a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005960:	4299      	cmp	r1, r3
 8005962:	db05      	blt.n	8005970 <_printf_float+0x1d4>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	6121      	str	r1, [r4, #16]
 8005968:	07d8      	lsls	r0, r3, #31
 800596a:	d5ea      	bpl.n	8005942 <_printf_float+0x1a6>
 800596c:	1c4b      	adds	r3, r1, #1
 800596e:	e7e7      	b.n	8005940 <_printf_float+0x1a4>
 8005970:	2900      	cmp	r1, #0
 8005972:	bfd4      	ite	le
 8005974:	f1c1 0202 	rsble	r2, r1, #2
 8005978:	2201      	movgt	r2, #1
 800597a:	4413      	add	r3, r2
 800597c:	e7e0      	b.n	8005940 <_printf_float+0x1a4>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	055a      	lsls	r2, r3, #21
 8005982:	d407      	bmi.n	8005994 <_printf_float+0x1f8>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	4642      	mov	r2, r8
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	d12c      	bne.n	80059ec <_printf_float+0x250>
 8005992:	e764      	b.n	800585e <_printf_float+0xc2>
 8005994:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005998:	f240 80e0 	bls.w	8005b5c <_printf_float+0x3c0>
 800599c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f7fb f8b8 	bl	8000b18 <__aeabi_dcmpeq>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d034      	beq.n	8005a16 <_printf_float+0x27a>
 80059ac:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <_printf_float+0x2f0>)
 80059ae:	2301      	movs	r3, #1
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f af51 	beq.w	800585e <_printf_float+0xc2>
 80059bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c0:	429a      	cmp	r2, r3
 80059c2:	db02      	blt.n	80059ca <_printf_float+0x22e>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07d8      	lsls	r0, r3, #31
 80059c8:	d510      	bpl.n	80059ec <_printf_float+0x250>
 80059ca:	ee18 3a10 	vmov	r3, s16
 80059ce:	4652      	mov	r2, sl
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f af41 	beq.w	800585e <_printf_float+0xc2>
 80059dc:	f04f 0800 	mov.w	r8, #0
 80059e0:	f104 091a 	add.w	r9, r4, #26
 80059e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4543      	cmp	r3, r8
 80059ea:	dc09      	bgt.n	8005a00 <_printf_float+0x264>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	079b      	lsls	r3, r3, #30
 80059f0:	f100 8105 	bmi.w	8005bfe <_printf_float+0x462>
 80059f4:	68e0      	ldr	r0, [r4, #12]
 80059f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f8:	4298      	cmp	r0, r3
 80059fa:	bfb8      	it	lt
 80059fc:	4618      	movlt	r0, r3
 80059fe:	e730      	b.n	8005862 <_printf_float+0xc6>
 8005a00:	2301      	movs	r3, #1
 8005a02:	464a      	mov	r2, r9
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f af27 	beq.w	800585e <_printf_float+0xc2>
 8005a10:	f108 0801 	add.w	r8, r8, #1
 8005a14:	e7e6      	b.n	80059e4 <_printf_float+0x248>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc39      	bgt.n	8005a90 <_printf_float+0x2f4>
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <_printf_float+0x2f0>)
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f af19 	beq.w	800585e <_printf_float+0xc2>
 8005a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a30:	4313      	orrs	r3, r2
 8005a32:	d102      	bne.n	8005a3a <_printf_float+0x29e>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d5d8      	bpl.n	80059ec <_printf_float+0x250>
 8005a3a:	ee18 3a10 	vmov	r3, s16
 8005a3e:	4652      	mov	r2, sl
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af09 	beq.w	800585e <_printf_float+0xc2>
 8005a4c:	f04f 0900 	mov.w	r9, #0
 8005a50:	f104 0a1a 	add.w	sl, r4, #26
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	425b      	negs	r3, r3
 8005a58:	454b      	cmp	r3, r9
 8005a5a:	dc01      	bgt.n	8005a60 <_printf_float+0x2c4>
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	e792      	b.n	8005986 <_printf_float+0x1ea>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f aef7 	beq.w	800585e <_printf_float+0xc2>
 8005a70:	f109 0901 	add.w	r9, r9, #1
 8005a74:	e7ee      	b.n	8005a54 <_printf_float+0x2b8>
 8005a76:	bf00      	nop
 8005a78:	7fefffff 	.word	0x7fefffff
 8005a7c:	08009f44 	.word	0x08009f44
 8005a80:	08009f48 	.word	0x08009f48
 8005a84:	08009f50 	.word	0x08009f50
 8005a88:	08009f4c 	.word	0x08009f4c
 8005a8c:	08009f54 	.word	0x08009f54
 8005a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bfa8      	it	ge
 8005a98:	461a      	movge	r2, r3
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	4691      	mov	r9, r2
 8005a9e:	dc37      	bgt.n	8005b10 <_printf_float+0x374>
 8005aa0:	f04f 0b00 	mov.w	fp, #0
 8005aa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aa8:	f104 021a 	add.w	r2, r4, #26
 8005aac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	eba3 0309 	sub.w	r3, r3, r9
 8005ab4:	455b      	cmp	r3, fp
 8005ab6:	dc33      	bgt.n	8005b20 <_printf_float+0x384>
 8005ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005abc:	429a      	cmp	r2, r3
 8005abe:	db3b      	blt.n	8005b38 <_printf_float+0x39c>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	d438      	bmi.n	8005b38 <_printf_float+0x39c>
 8005ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ac8:	9b05      	ldr	r3, [sp, #20]
 8005aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	eba2 0901 	sub.w	r9, r2, r1
 8005ad2:	4599      	cmp	r9, r3
 8005ad4:	bfa8      	it	ge
 8005ad6:	4699      	movge	r9, r3
 8005ad8:	f1b9 0f00 	cmp.w	r9, #0
 8005adc:	dc35      	bgt.n	8005b4a <_printf_float+0x3ae>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae6:	f104 0a1a 	add.w	sl, r4, #26
 8005aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	eba3 0309 	sub.w	r3, r3, r9
 8005af4:	4543      	cmp	r3, r8
 8005af6:	f77f af79 	ble.w	80059ec <_printf_float+0x250>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f aeaa 	beq.w	800585e <_printf_float+0xc2>
 8005b0a:	f108 0801 	add.w	r8, r8, #1
 8005b0e:	e7ec      	b.n	8005aea <_printf_float+0x34e>
 8005b10:	4613      	mov	r3, r2
 8005b12:	4631      	mov	r1, r6
 8005b14:	4642      	mov	r2, r8
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d1c0      	bne.n	8005aa0 <_printf_float+0x304>
 8005b1e:	e69e      	b.n	800585e <_printf_float+0xc2>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	9205      	str	r2, [sp, #20]
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f ae97 	beq.w	800585e <_printf_float+0xc2>
 8005b30:	9a05      	ldr	r2, [sp, #20]
 8005b32:	f10b 0b01 	add.w	fp, fp, #1
 8005b36:	e7b9      	b.n	8005aac <_printf_float+0x310>
 8005b38:	ee18 3a10 	vmov	r3, s16
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1be      	bne.n	8005ac6 <_printf_float+0x32a>
 8005b48:	e689      	b.n	800585e <_printf_float+0xc2>
 8005b4a:	9a05      	ldr	r2, [sp, #20]
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	4442      	add	r2, r8
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	d1c1      	bne.n	8005ade <_printf_float+0x342>
 8005b5a:	e680      	b.n	800585e <_printf_float+0xc2>
 8005b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b5e:	2a01      	cmp	r2, #1
 8005b60:	dc01      	bgt.n	8005b66 <_printf_float+0x3ca>
 8005b62:	07db      	lsls	r3, r3, #31
 8005b64:	d538      	bpl.n	8005bd8 <_printf_float+0x43c>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f ae74 	beq.w	800585e <_printf_float+0xc2>
 8005b76:	ee18 3a10 	vmov	r3, s16
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f ae6b 	beq.w	800585e <_printf_float+0xc2>
 8005b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f7fa ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 8005b94:	b9d8      	cbnz	r0, 8005bce <_printf_float+0x432>
 8005b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b98:	f108 0201 	add.w	r2, r8, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d10e      	bne.n	8005bc6 <_printf_float+0x42a>
 8005ba8:	e659      	b.n	800585e <_printf_float+0xc2>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4652      	mov	r2, sl
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae52 	beq.w	800585e <_printf_float+0xc2>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4543      	cmp	r3, r8
 8005bc4:	dcf1      	bgt.n	8005baa <_printf_float+0x40e>
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bcc:	e6dc      	b.n	8005988 <_printf_float+0x1ec>
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	f104 0a1a 	add.w	sl, r4, #26
 8005bd6:	e7f2      	b.n	8005bbe <_printf_float+0x422>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	e7df      	b.n	8005b9e <_printf_float+0x402>
 8005bde:	2301      	movs	r3, #1
 8005be0:	464a      	mov	r2, r9
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f ae38 	beq.w	800585e <_printf_float+0xc2>
 8005bee:	f108 0801 	add.w	r8, r8, #1
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	4543      	cmp	r3, r8
 8005bfa:	dcf0      	bgt.n	8005bde <_printf_float+0x442>
 8005bfc:	e6fa      	b.n	80059f4 <_printf_float+0x258>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	f104 0919 	add.w	r9, r4, #25
 8005c06:	e7f4      	b.n	8005bf2 <_printf_float+0x456>

08005c08 <_printf_common>:
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	4699      	mov	r9, r3
 8005c10:	688a      	ldr	r2, [r1, #8]
 8005c12:	690b      	ldr	r3, [r1, #16]
 8005c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	bfb8      	it	lt
 8005c1c:	4613      	movlt	r3, r2
 8005c1e:	6033      	str	r3, [r6, #0]
 8005c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c24:	4607      	mov	r7, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	b10a      	cbz	r2, 8005c2e <_printf_common+0x26>
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	0699      	lsls	r1, r3, #26
 8005c32:	bf42      	ittt	mi
 8005c34:	6833      	ldrmi	r3, [r6, #0]
 8005c36:	3302      	addmi	r3, #2
 8005c38:	6033      	strmi	r3, [r6, #0]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	f015 0506 	ands.w	r5, r5, #6
 8005c40:	d106      	bne.n	8005c50 <_printf_common+0x48>
 8005c42:	f104 0a19 	add.w	sl, r4, #25
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	6832      	ldr	r2, [r6, #0]
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dc26      	bgt.n	8005c9e <_printf_common+0x96>
 8005c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c54:	1e13      	subs	r3, r2, #0
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	bf18      	it	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	0692      	lsls	r2, r2, #26
 8005c5e:	d42b      	bmi.n	8005cb8 <_printf_common+0xb0>
 8005c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c64:	4649      	mov	r1, r9
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c0      	blx	r8
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d01e      	beq.n	8005cac <_printf_common+0xa4>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	68e5      	ldr	r5, [r4, #12]
 8005c72:	6832      	ldr	r2, [r6, #0]
 8005c74:	f003 0306 	and.w	r3, r3, #6
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	bf08      	it	eq
 8005c7c:	1aad      	subeq	r5, r5, r2
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	6922      	ldr	r2, [r4, #16]
 8005c82:	bf0c      	ite	eq
 8005c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c88:	2500      	movne	r5, #0
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	bfc4      	itt	gt
 8005c8e:	1a9b      	subgt	r3, r3, r2
 8005c90:	18ed      	addgt	r5, r5, r3
 8005c92:	2600      	movs	r6, #0
 8005c94:	341a      	adds	r4, #26
 8005c96:	42b5      	cmp	r5, r6
 8005c98:	d11a      	bne.n	8005cd0 <_printf_common+0xc8>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e008      	b.n	8005cb0 <_printf_common+0xa8>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	47c0      	blx	r8
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d103      	bne.n	8005cb4 <_printf_common+0xac>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	e7c6      	b.n	8005c46 <_printf_common+0x3e>
 8005cb8:	18e1      	adds	r1, r4, r3
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	2030      	movs	r0, #48	; 0x30
 8005cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cc2:	4422      	add	r2, r4
 8005cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ccc:	3302      	adds	r3, #2
 8005cce:	e7c7      	b.n	8005c60 <_printf_common+0x58>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c0      	blx	r8
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d0e6      	beq.n	8005cac <_printf_common+0xa4>
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7d9      	b.n	8005c96 <_printf_common+0x8e>
	...

08005ce4 <_printf_i>:
 8005ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	460c      	mov	r4, r1
 8005cea:	4691      	mov	r9, r2
 8005cec:	7e27      	ldrb	r7, [r4, #24]
 8005cee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cf0:	2f78      	cmp	r7, #120	; 0x78
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	469a      	mov	sl, r3
 8005cf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cfa:	d807      	bhi.n	8005d0c <_printf_i+0x28>
 8005cfc:	2f62      	cmp	r7, #98	; 0x62
 8005cfe:	d80a      	bhi.n	8005d16 <_printf_i+0x32>
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	f000 80d8 	beq.w	8005eb6 <_printf_i+0x1d2>
 8005d06:	2f58      	cmp	r7, #88	; 0x58
 8005d08:	f000 80a3 	beq.w	8005e52 <_printf_i+0x16e>
 8005d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d14:	e03a      	b.n	8005d8c <_printf_i+0xa8>
 8005d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d1a:	2b15      	cmp	r3, #21
 8005d1c:	d8f6      	bhi.n	8005d0c <_printf_i+0x28>
 8005d1e:	a001      	add	r0, pc, #4	; (adr r0, 8005d24 <_printf_i+0x40>)
 8005d20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d0d 	.word	0x08005d0d
 8005d30:	08005d0d 	.word	0x08005d0d
 8005d34:	08005d0d 	.word	0x08005d0d
 8005d38:	08005d0d 	.word	0x08005d0d
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d0d 	.word	0x08005d0d
 8005d44:	08005d0d 	.word	0x08005d0d
 8005d48:	08005d0d 	.word	0x08005d0d
 8005d4c:	08005d0d 	.word	0x08005d0d
 8005d50:	08005e9d 	.word	0x08005e9d
 8005d54:	08005dc1 	.word	0x08005dc1
 8005d58:	08005e7f 	.word	0x08005e7f
 8005d5c:	08005d0d 	.word	0x08005d0d
 8005d60:	08005d0d 	.word	0x08005d0d
 8005d64:	08005ebf 	.word	0x08005ebf
 8005d68:	08005d0d 	.word	0x08005d0d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d0d 	.word	0x08005d0d
 8005d74:	08005d0d 	.word	0x08005d0d
 8005d78:	08005e87 	.word	0x08005e87
 8005d7c:	680b      	ldr	r3, [r1, #0]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	600a      	str	r2, [r1, #0]
 8005d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0a3      	b.n	8005ed8 <_printf_i+0x1f4>
 8005d90:	6825      	ldr	r5, [r4, #0]
 8005d92:	6808      	ldr	r0, [r1, #0]
 8005d94:	062e      	lsls	r6, r5, #24
 8005d96:	f100 0304 	add.w	r3, r0, #4
 8005d9a:	d50a      	bpl.n	8005db2 <_printf_i+0xce>
 8005d9c:	6805      	ldr	r5, [r0, #0]
 8005d9e:	600b      	str	r3, [r1, #0]
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	da03      	bge.n	8005dac <_printf_i+0xc8>
 8005da4:	232d      	movs	r3, #45	; 0x2d
 8005da6:	426d      	negs	r5, r5
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	485e      	ldr	r0, [pc, #376]	; (8005f28 <_printf_i+0x244>)
 8005dae:	230a      	movs	r3, #10
 8005db0:	e019      	b.n	8005de6 <_printf_i+0x102>
 8005db2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005db6:	6805      	ldr	r5, [r0, #0]
 8005db8:	600b      	str	r3, [r1, #0]
 8005dba:	bf18      	it	ne
 8005dbc:	b22d      	sxthne	r5, r5
 8005dbe:	e7ef      	b.n	8005da0 <_printf_i+0xbc>
 8005dc0:	680b      	ldr	r3, [r1, #0]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	1d18      	adds	r0, r3, #4
 8005dc6:	6008      	str	r0, [r1, #0]
 8005dc8:	0628      	lsls	r0, r5, #24
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0xec>
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <_printf_i+0xf2>
 8005dd0:	0669      	lsls	r1, r5, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0xe8>
 8005dd4:	881d      	ldrh	r5, [r3, #0]
 8005dd6:	4854      	ldr	r0, [pc, #336]	; (8005f28 <_printf_i+0x244>)
 8005dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dda:	bf0c      	ite	eq
 8005ddc:	2308      	moveq	r3, #8
 8005dde:	230a      	movne	r3, #10
 8005de0:	2100      	movs	r1, #0
 8005de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005de6:	6866      	ldr	r6, [r4, #4]
 8005de8:	60a6      	str	r6, [r4, #8]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	bfa2      	ittt	ge
 8005dee:	6821      	ldrge	r1, [r4, #0]
 8005df0:	f021 0104 	bicge.w	r1, r1, #4
 8005df4:	6021      	strge	r1, [r4, #0]
 8005df6:	b90d      	cbnz	r5, 8005dfc <_printf_i+0x118>
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	d04d      	beq.n	8005e98 <_printf_i+0x1b4>
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e02:	fb03 5711 	mls	r7, r3, r1, r5
 8005e06:	5dc7      	ldrb	r7, [r0, r7]
 8005e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e0c:	462f      	mov	r7, r5
 8005e0e:	42bb      	cmp	r3, r7
 8005e10:	460d      	mov	r5, r1
 8005e12:	d9f4      	bls.n	8005dfe <_printf_i+0x11a>
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d10b      	bne.n	8005e30 <_printf_i+0x14c>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07df      	lsls	r7, r3, #31
 8005e1c:	d508      	bpl.n	8005e30 <_printf_i+0x14c>
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	6861      	ldr	r1, [r4, #4]
 8005e22:	4299      	cmp	r1, r3
 8005e24:	bfde      	ittt	le
 8005e26:	2330      	movle	r3, #48	; 0x30
 8005e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e30:	1b92      	subs	r2, r2, r6
 8005e32:	6122      	str	r2, [r4, #16]
 8005e34:	f8cd a000 	str.w	sl, [sp]
 8005e38:	464b      	mov	r3, r9
 8005e3a:	aa03      	add	r2, sp, #12
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fee2 	bl	8005c08 <_printf_common>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d14c      	bne.n	8005ee2 <_printf_i+0x1fe>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	b004      	add	sp, #16
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	4835      	ldr	r0, [pc, #212]	; (8005f28 <_printf_i+0x244>)
 8005e54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	680e      	ldr	r6, [r1, #0]
 8005e5c:	061f      	lsls	r7, r3, #24
 8005e5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e62:	600e      	str	r6, [r1, #0]
 8005e64:	d514      	bpl.n	8005e90 <_printf_i+0x1ac>
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	bf44      	itt	mi
 8005e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e6e:	6023      	strmi	r3, [r4, #0]
 8005e70:	b91d      	cbnz	r5, 8005e7a <_printf_i+0x196>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f023 0320 	bic.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	e7b0      	b.n	8005de0 <_printf_i+0xfc>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	2378      	movs	r3, #120	; 0x78
 8005e88:	4828      	ldr	r0, [pc, #160]	; (8005f2c <_printf_i+0x248>)
 8005e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e8e:	e7e3      	b.n	8005e58 <_printf_i+0x174>
 8005e90:	065e      	lsls	r6, r3, #25
 8005e92:	bf48      	it	mi
 8005e94:	b2ad      	uxthmi	r5, r5
 8005e96:	e7e6      	b.n	8005e66 <_printf_i+0x182>
 8005e98:	4616      	mov	r6, r2
 8005e9a:	e7bb      	b.n	8005e14 <_printf_i+0x130>
 8005e9c:	680b      	ldr	r3, [r1, #0]
 8005e9e:	6826      	ldr	r6, [r4, #0]
 8005ea0:	6960      	ldr	r0, [r4, #20]
 8005ea2:	1d1d      	adds	r5, r3, #4
 8005ea4:	600d      	str	r5, [r1, #0]
 8005ea6:	0635      	lsls	r5, r6, #24
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0x1cc>
 8005eac:	6018      	str	r0, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <_printf_i+0x1d2>
 8005eb0:	0671      	lsls	r1, r6, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0x1c8>
 8005eb4:	8018      	strh	r0, [r3, #0]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	4616      	mov	r6, r2
 8005ebc:	e7ba      	b.n	8005e34 <_printf_i+0x150>
 8005ebe:	680b      	ldr	r3, [r1, #0]
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	600a      	str	r2, [r1, #0]
 8005ec4:	681e      	ldr	r6, [r3, #0]
 8005ec6:	6862      	ldr	r2, [r4, #4]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7fa f9b0 	bl	8000230 <memchr>
 8005ed0:	b108      	cbz	r0, 8005ed6 <_printf_i+0x1f2>
 8005ed2:	1b80      	subs	r0, r0, r6
 8005ed4:	6060      	str	r0, [r4, #4]
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	2300      	movs	r3, #0
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	e7a8      	b.n	8005e34 <_printf_i+0x150>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4640      	mov	r0, r8
 8005eea:	47d0      	blx	sl
 8005eec:	3001      	adds	r0, #1
 8005eee:	d0ab      	beq.n	8005e48 <_printf_i+0x164>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	079b      	lsls	r3, r3, #30
 8005ef4:	d413      	bmi.n	8005f1e <_printf_i+0x23a>
 8005ef6:	68e0      	ldr	r0, [r4, #12]
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	4298      	cmp	r0, r3
 8005efc:	bfb8      	it	lt
 8005efe:	4618      	movlt	r0, r3
 8005f00:	e7a4      	b.n	8005e4c <_printf_i+0x168>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4632      	mov	r2, r6
 8005f06:	4649      	mov	r1, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	47d0      	blx	sl
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d09b      	beq.n	8005e48 <_printf_i+0x164>
 8005f10:	3501      	adds	r5, #1
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	1a5b      	subs	r3, r3, r1
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dcf2      	bgt.n	8005f02 <_printf_i+0x21e>
 8005f1c:	e7eb      	b.n	8005ef6 <_printf_i+0x212>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	f104 0619 	add.w	r6, r4, #25
 8005f24:	e7f5      	b.n	8005f12 <_printf_i+0x22e>
 8005f26:	bf00      	nop
 8005f28:	08009f56 	.word	0x08009f56
 8005f2c:	08009f67 	.word	0x08009f67

08005f30 <_scanf_float>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	b087      	sub	sp, #28
 8005f36:	4617      	mov	r7, r2
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	688b      	ldr	r3, [r1, #8]
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f42:	bf83      	ittte	hi
 8005f44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f48:	195b      	addhi	r3, r3, r5
 8005f4a:	9302      	strhi	r3, [sp, #8]
 8005f4c:	2300      	movls	r3, #0
 8005f4e:	bf86      	itte	hi
 8005f50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f54:	608b      	strhi	r3, [r1, #8]
 8005f56:	9302      	strls	r3, [sp, #8]
 8005f58:	680b      	ldr	r3, [r1, #0]
 8005f5a:	468b      	mov	fp, r1
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f62:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	465e      	mov	r6, fp
 8005f70:	46aa      	mov	sl, r5
 8005f72:	46a9      	mov	r9, r5
 8005f74:	9501      	str	r5, [sp, #4]
 8005f76:	68a2      	ldr	r2, [r4, #8]
 8005f78:	b152      	cbz	r2, 8005f90 <_scanf_float+0x60>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b4e      	cmp	r3, #78	; 0x4e
 8005f80:	d864      	bhi.n	800604c <_scanf_float+0x11c>
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d83c      	bhi.n	8006000 <_scanf_float+0xd0>
 8005f86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f8a:	b2c8      	uxtb	r0, r1
 8005f8c:	280e      	cmp	r0, #14
 8005f8e:	d93a      	bls.n	8006006 <_scanf_float+0xd6>
 8005f90:	f1b9 0f00 	cmp.w	r9, #0
 8005f94:	d003      	beq.n	8005f9e <_scanf_float+0x6e>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fa2:	f1ba 0f01 	cmp.w	sl, #1
 8005fa6:	f200 8113 	bhi.w	80061d0 <_scanf_float+0x2a0>
 8005faa:	455e      	cmp	r6, fp
 8005fac:	f200 8105 	bhi.w	80061ba <_scanf_float+0x28a>
 8005fb0:	2501      	movs	r5, #1
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	b007      	add	sp, #28
 8005fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005fbe:	2a0d      	cmp	r2, #13
 8005fc0:	d8e6      	bhi.n	8005f90 <_scanf_float+0x60>
 8005fc2:	a101      	add	r1, pc, #4	; (adr r1, 8005fc8 <_scanf_float+0x98>)
 8005fc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fc8:	08006107 	.word	0x08006107
 8005fcc:	08005f91 	.word	0x08005f91
 8005fd0:	08005f91 	.word	0x08005f91
 8005fd4:	08005f91 	.word	0x08005f91
 8005fd8:	08006167 	.word	0x08006167
 8005fdc:	0800613f 	.word	0x0800613f
 8005fe0:	08005f91 	.word	0x08005f91
 8005fe4:	08005f91 	.word	0x08005f91
 8005fe8:	08006115 	.word	0x08006115
 8005fec:	08005f91 	.word	0x08005f91
 8005ff0:	08005f91 	.word	0x08005f91
 8005ff4:	08005f91 	.word	0x08005f91
 8005ff8:	08005f91 	.word	0x08005f91
 8005ffc:	080060cd 	.word	0x080060cd
 8006000:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006004:	e7db      	b.n	8005fbe <_scanf_float+0x8e>
 8006006:	290e      	cmp	r1, #14
 8006008:	d8c2      	bhi.n	8005f90 <_scanf_float+0x60>
 800600a:	a001      	add	r0, pc, #4	; (adr r0, 8006010 <_scanf_float+0xe0>)
 800600c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006010:	080060bf 	.word	0x080060bf
 8006014:	08005f91 	.word	0x08005f91
 8006018:	080060bf 	.word	0x080060bf
 800601c:	08006153 	.word	0x08006153
 8006020:	08005f91 	.word	0x08005f91
 8006024:	0800606d 	.word	0x0800606d
 8006028:	080060a9 	.word	0x080060a9
 800602c:	080060a9 	.word	0x080060a9
 8006030:	080060a9 	.word	0x080060a9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	2b6e      	cmp	r3, #110	; 0x6e
 800604e:	d809      	bhi.n	8006064 <_scanf_float+0x134>
 8006050:	2b60      	cmp	r3, #96	; 0x60
 8006052:	d8b2      	bhi.n	8005fba <_scanf_float+0x8a>
 8006054:	2b54      	cmp	r3, #84	; 0x54
 8006056:	d077      	beq.n	8006148 <_scanf_float+0x218>
 8006058:	2b59      	cmp	r3, #89	; 0x59
 800605a:	d199      	bne.n	8005f90 <_scanf_float+0x60>
 800605c:	2d07      	cmp	r5, #7
 800605e:	d197      	bne.n	8005f90 <_scanf_float+0x60>
 8006060:	2508      	movs	r5, #8
 8006062:	e029      	b.n	80060b8 <_scanf_float+0x188>
 8006064:	2b74      	cmp	r3, #116	; 0x74
 8006066:	d06f      	beq.n	8006148 <_scanf_float+0x218>
 8006068:	2b79      	cmp	r3, #121	; 0x79
 800606a:	e7f6      	b.n	800605a <_scanf_float+0x12a>
 800606c:	6821      	ldr	r1, [r4, #0]
 800606e:	05c8      	lsls	r0, r1, #23
 8006070:	d51a      	bpl.n	80060a8 <_scanf_float+0x178>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006078:	6021      	str	r1, [r4, #0]
 800607a:	f109 0901 	add.w	r9, r9, #1
 800607e:	b11b      	cbz	r3, 8006088 <_scanf_float+0x158>
 8006080:	3b01      	subs	r3, #1
 8006082:	3201      	adds	r2, #1
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	60a2      	str	r2, [r4, #8]
 8006088:	68a3      	ldr	r3, [r4, #8]
 800608a:	3b01      	subs	r3, #1
 800608c:	60a3      	str	r3, [r4, #8]
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	3301      	adds	r3, #1
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	f340 8084 	ble.w	80061a8 <_scanf_float+0x278>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	e766      	b.n	8005f76 <_scanf_float+0x46>
 80060a8:	eb1a 0f05 	cmn.w	sl, r5
 80060ac:	f47f af70 	bne.w	8005f90 <_scanf_float+0x60>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	f806 3b01 	strb.w	r3, [r6], #1
 80060bc:	e7e4      	b.n	8006088 <_scanf_float+0x158>
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	0610      	lsls	r0, r2, #24
 80060c2:	f57f af65 	bpl.w	8005f90 <_scanf_float+0x60>
 80060c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ca:	e7f4      	b.n	80060b6 <_scanf_float+0x186>
 80060cc:	f1ba 0f00 	cmp.w	sl, #0
 80060d0:	d10e      	bne.n	80060f0 <_scanf_float+0x1c0>
 80060d2:	f1b9 0f00 	cmp.w	r9, #0
 80060d6:	d10e      	bne.n	80060f6 <_scanf_float+0x1c6>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060e2:	d108      	bne.n	80060f6 <_scanf_float+0x1c6>
 80060e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	f04f 0a01 	mov.w	sl, #1
 80060ee:	e7e3      	b.n	80060b8 <_scanf_float+0x188>
 80060f0:	f1ba 0f02 	cmp.w	sl, #2
 80060f4:	d055      	beq.n	80061a2 <_scanf_float+0x272>
 80060f6:	2d01      	cmp	r5, #1
 80060f8:	d002      	beq.n	8006100 <_scanf_float+0x1d0>
 80060fa:	2d04      	cmp	r5, #4
 80060fc:	f47f af48 	bne.w	8005f90 <_scanf_float+0x60>
 8006100:	3501      	adds	r5, #1
 8006102:	b2ed      	uxtb	r5, r5
 8006104:	e7d8      	b.n	80060b8 <_scanf_float+0x188>
 8006106:	f1ba 0f01 	cmp.w	sl, #1
 800610a:	f47f af41 	bne.w	8005f90 <_scanf_float+0x60>
 800610e:	f04f 0a02 	mov.w	sl, #2
 8006112:	e7d1      	b.n	80060b8 <_scanf_float+0x188>
 8006114:	b97d      	cbnz	r5, 8006136 <_scanf_float+0x206>
 8006116:	f1b9 0f00 	cmp.w	r9, #0
 800611a:	f47f af3c 	bne.w	8005f96 <_scanf_float+0x66>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006124:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006128:	f47f af39 	bne.w	8005f9e <_scanf_float+0x6e>
 800612c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006130:	6022      	str	r2, [r4, #0]
 8006132:	2501      	movs	r5, #1
 8006134:	e7c0      	b.n	80060b8 <_scanf_float+0x188>
 8006136:	2d03      	cmp	r5, #3
 8006138:	d0e2      	beq.n	8006100 <_scanf_float+0x1d0>
 800613a:	2d05      	cmp	r5, #5
 800613c:	e7de      	b.n	80060fc <_scanf_float+0x1cc>
 800613e:	2d02      	cmp	r5, #2
 8006140:	f47f af26 	bne.w	8005f90 <_scanf_float+0x60>
 8006144:	2503      	movs	r5, #3
 8006146:	e7b7      	b.n	80060b8 <_scanf_float+0x188>
 8006148:	2d06      	cmp	r5, #6
 800614a:	f47f af21 	bne.w	8005f90 <_scanf_float+0x60>
 800614e:	2507      	movs	r5, #7
 8006150:	e7b2      	b.n	80060b8 <_scanf_float+0x188>
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	0591      	lsls	r1, r2, #22
 8006156:	f57f af1b 	bpl.w	8005f90 <_scanf_float+0x60>
 800615a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800615e:	6022      	str	r2, [r4, #0]
 8006160:	f8cd 9004 	str.w	r9, [sp, #4]
 8006164:	e7a8      	b.n	80060b8 <_scanf_float+0x188>
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800616c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006170:	d006      	beq.n	8006180 <_scanf_float+0x250>
 8006172:	0550      	lsls	r0, r2, #21
 8006174:	f57f af0c 	bpl.w	8005f90 <_scanf_float+0x60>
 8006178:	f1b9 0f00 	cmp.w	r9, #0
 800617c:	f43f af0f 	beq.w	8005f9e <_scanf_float+0x6e>
 8006180:	0591      	lsls	r1, r2, #22
 8006182:	bf58      	it	pl
 8006184:	9901      	ldrpl	r1, [sp, #4]
 8006186:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800618a:	bf58      	it	pl
 800618c:	eba9 0101 	subpl.w	r1, r9, r1
 8006190:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006194:	bf58      	it	pl
 8006196:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	f04f 0900 	mov.w	r9, #0
 80061a0:	e78a      	b.n	80060b8 <_scanf_float+0x188>
 80061a2:	f04f 0a03 	mov.w	sl, #3
 80061a6:	e787      	b.n	80060b8 <_scanf_float+0x188>
 80061a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061ac:	4639      	mov	r1, r7
 80061ae:	4640      	mov	r0, r8
 80061b0:	4798      	blx	r3
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f43f aedf 	beq.w	8005f76 <_scanf_float+0x46>
 80061b8:	e6ea      	b.n	8005f90 <_scanf_float+0x60>
 80061ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061c2:	463a      	mov	r2, r7
 80061c4:	4640      	mov	r0, r8
 80061c6:	4798      	blx	r3
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	e6ec      	b.n	8005faa <_scanf_float+0x7a>
 80061d0:	1e6b      	subs	r3, r5, #1
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d825      	bhi.n	8006222 <_scanf_float+0x2f2>
 80061d6:	2d02      	cmp	r5, #2
 80061d8:	d836      	bhi.n	8006248 <_scanf_float+0x318>
 80061da:	455e      	cmp	r6, fp
 80061dc:	f67f aee8 	bls.w	8005fb0 <_scanf_float+0x80>
 80061e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061e8:	463a      	mov	r2, r7
 80061ea:	4640      	mov	r0, r8
 80061ec:	4798      	blx	r3
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	e7f1      	b.n	80061da <_scanf_float+0x2aa>
 80061f6:	9802      	ldr	r0, [sp, #8]
 80061f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	463a      	mov	r2, r7
 8006204:	4640      	mov	r0, r8
 8006206:	4798      	blx	r3
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	3b01      	subs	r3, #1
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006212:	fa5f fa8a 	uxtb.w	sl, sl
 8006216:	f1ba 0f02 	cmp.w	sl, #2
 800621a:	d1ec      	bne.n	80061f6 <_scanf_float+0x2c6>
 800621c:	3d03      	subs	r5, #3
 800621e:	b2ed      	uxtb	r5, r5
 8006220:	1b76      	subs	r6, r6, r5
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	05da      	lsls	r2, r3, #23
 8006226:	d52f      	bpl.n	8006288 <_scanf_float+0x358>
 8006228:	055b      	lsls	r3, r3, #21
 800622a:	d510      	bpl.n	800624e <_scanf_float+0x31e>
 800622c:	455e      	cmp	r6, fp
 800622e:	f67f aebf 	bls.w	8005fb0 <_scanf_float+0x80>
 8006232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800623a:	463a      	mov	r2, r7
 800623c:	4640      	mov	r0, r8
 800623e:	4798      	blx	r3
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	3b01      	subs	r3, #1
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	e7f1      	b.n	800622c <_scanf_float+0x2fc>
 8006248:	46aa      	mov	sl, r5
 800624a:	9602      	str	r6, [sp, #8]
 800624c:	e7df      	b.n	800620e <_scanf_float+0x2de>
 800624e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	2965      	cmp	r1, #101	; 0x65
 8006256:	f103 33ff 	add.w	r3, r3, #4294967295
 800625a:	f106 35ff 	add.w	r5, r6, #4294967295
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	d00c      	beq.n	800627c <_scanf_float+0x34c>
 8006262:	2945      	cmp	r1, #69	; 0x45
 8006264:	d00a      	beq.n	800627c <_scanf_float+0x34c>
 8006266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800626a:	463a      	mov	r2, r7
 800626c:	4640      	mov	r0, r8
 800626e:	4798      	blx	r3
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006276:	3b01      	subs	r3, #1
 8006278:	1eb5      	subs	r5, r6, #2
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006280:	463a      	mov	r2, r7
 8006282:	4640      	mov	r0, r8
 8006284:	4798      	blx	r3
 8006286:	462e      	mov	r6, r5
 8006288:	6825      	ldr	r5, [r4, #0]
 800628a:	f015 0510 	ands.w	r5, r5, #16
 800628e:	d158      	bne.n	8006342 <_scanf_float+0x412>
 8006290:	7035      	strb	r5, [r6, #0]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d11c      	bne.n	80062d8 <_scanf_float+0x3a8>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	454b      	cmp	r3, r9
 80062a2:	eba3 0209 	sub.w	r2, r3, r9
 80062a6:	d124      	bne.n	80062f2 <_scanf_float+0x3c2>
 80062a8:	2200      	movs	r2, #0
 80062aa:	4659      	mov	r1, fp
 80062ac:	4640      	mov	r0, r8
 80062ae:	f000 feb5 	bl	800701c <_strtod_r>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f011 0f02 	tst.w	r1, #2
 80062bc:	ec57 6b10 	vmov	r6, r7, d0
 80062c0:	f103 0204 	add.w	r2, r3, #4
 80062c4:	d020      	beq.n	8006308 <_scanf_float+0x3d8>
 80062c6:	9903      	ldr	r1, [sp, #12]
 80062c8:	600a      	str	r2, [r1, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	e9c3 6700 	strd	r6, r7, [r3]
 80062d0:	68e3      	ldr	r3, [r4, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60e3      	str	r3, [r4, #12]
 80062d6:	e66c      	b.n	8005fb2 <_scanf_float+0x82>
 80062d8:	9b04      	ldr	r3, [sp, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0e4      	beq.n	80062a8 <_scanf_float+0x378>
 80062de:	9905      	ldr	r1, [sp, #20]
 80062e0:	230a      	movs	r3, #10
 80062e2:	462a      	mov	r2, r5
 80062e4:	3101      	adds	r1, #1
 80062e6:	4640      	mov	r0, r8
 80062e8:	f000 ff22 	bl	8007130 <_strtol_r>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	9e05      	ldr	r6, [sp, #20]
 80062f0:	1ac2      	subs	r2, r0, r3
 80062f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062f6:	429e      	cmp	r6, r3
 80062f8:	bf28      	it	cs
 80062fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062fe:	4912      	ldr	r1, [pc, #72]	; (8006348 <_scanf_float+0x418>)
 8006300:	4630      	mov	r0, r6
 8006302:	f000 f843 	bl	800638c <siprintf>
 8006306:	e7cf      	b.n	80062a8 <_scanf_float+0x378>
 8006308:	f011 0f04 	tst.w	r1, #4
 800630c:	9903      	ldr	r1, [sp, #12]
 800630e:	600a      	str	r2, [r1, #0]
 8006310:	d1db      	bne.n	80062ca <_scanf_float+0x39a>
 8006312:	f8d3 8000 	ldr.w	r8, [r3]
 8006316:	ee10 2a10 	vmov	r2, s0
 800631a:	ee10 0a10 	vmov	r0, s0
 800631e:	463b      	mov	r3, r7
 8006320:	4639      	mov	r1, r7
 8006322:	f7fa fc2b 	bl	8000b7c <__aeabi_dcmpun>
 8006326:	b128      	cbz	r0, 8006334 <_scanf_float+0x404>
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <_scanf_float+0x41c>)
 800632a:	f000 f829 	bl	8006380 <nanf>
 800632e:	ed88 0a00 	vstr	s0, [r8]
 8006332:	e7cd      	b.n	80062d0 <_scanf_float+0x3a0>
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7fa fc7e 	bl	8000c38 <__aeabi_d2f>
 800633c:	f8c8 0000 	str.w	r0, [r8]
 8006340:	e7c6      	b.n	80062d0 <_scanf_float+0x3a0>
 8006342:	2500      	movs	r5, #0
 8006344:	e635      	b.n	8005fb2 <_scanf_float+0x82>
 8006346:	bf00      	nop
 8006348:	08009f78 	.word	0x08009f78
 800634c:	0800a3f0 	.word	0x0800a3f0

08006350 <iprintf>:
 8006350:	b40f      	push	{r0, r1, r2, r3}
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <iprintf+0x2c>)
 8006354:	b513      	push	{r0, r1, r4, lr}
 8006356:	681c      	ldr	r4, [r3, #0]
 8006358:	b124      	cbz	r4, 8006364 <iprintf+0x14>
 800635a:	69a3      	ldr	r3, [r4, #24]
 800635c:	b913      	cbnz	r3, 8006364 <iprintf+0x14>
 800635e:	4620      	mov	r0, r4
 8006360:	f001 fdba 	bl	8007ed8 <__sinit>
 8006364:	ab05      	add	r3, sp, #20
 8006366:	9a04      	ldr	r2, [sp, #16]
 8006368:	68a1      	ldr	r1, [r4, #8]
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	4620      	mov	r0, r4
 800636e:	f003 f8e9 	bl	8009544 <_vfiprintf_r>
 8006372:	b002      	add	sp, #8
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006378:	b004      	add	sp, #16
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c

08006380 <nanf>:
 8006380:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006388 <nanf+0x8>
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	7fc00000 	.word	0x7fc00000

0800638c <siprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b500      	push	{lr}
 8006390:	b09c      	sub	sp, #112	; 0x70
 8006392:	ab1d      	add	r3, sp, #116	; 0x74
 8006394:	9002      	str	r0, [sp, #8]
 8006396:	9006      	str	r0, [sp, #24]
 8006398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800639c:	4809      	ldr	r0, [pc, #36]	; (80063c4 <siprintf+0x38>)
 800639e:	9107      	str	r1, [sp, #28]
 80063a0:	9104      	str	r1, [sp, #16]
 80063a2:	4909      	ldr	r1, [pc, #36]	; (80063c8 <siprintf+0x3c>)
 80063a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	a902      	add	r1, sp, #8
 80063b0:	f002 ff9e 	bl	80092f0 <_svfiprintf_r>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	b01c      	add	sp, #112	; 0x70
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b003      	add	sp, #12
 80063c2:	4770      	bx	lr
 80063c4:	2000000c 	.word	0x2000000c
 80063c8:	ffff0208 	.word	0xffff0208

080063cc <sulp>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4604      	mov	r4, r0
 80063d0:	460d      	mov	r5, r1
 80063d2:	ec45 4b10 	vmov	d0, r4, r5
 80063d6:	4616      	mov	r6, r2
 80063d8:	f002 fd26 	bl	8008e28 <__ulp>
 80063dc:	ec51 0b10 	vmov	r0, r1, d0
 80063e0:	b17e      	cbz	r6, 8006402 <sulp+0x36>
 80063e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd09      	ble.n	8006402 <sulp+0x36>
 80063ee:	051b      	lsls	r3, r3, #20
 80063f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80063f4:	2400      	movs	r4, #0
 80063f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	f7fa f923 	bl	8000648 <__aeabi_dmul>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	0000      	movs	r0, r0
	...

08006408 <_strtod_l>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	b0a3      	sub	sp, #140	; 0x8c
 800640e:	461f      	mov	r7, r3
 8006410:	2300      	movs	r3, #0
 8006412:	931e      	str	r3, [sp, #120]	; 0x78
 8006414:	4ba4      	ldr	r3, [pc, #656]	; (80066a8 <_strtod_l+0x2a0>)
 8006416:	9219      	str	r2, [sp, #100]	; 0x64
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	9307      	str	r3, [sp, #28]
 800641c:	4604      	mov	r4, r0
 800641e:	4618      	mov	r0, r3
 8006420:	4688      	mov	r8, r1
 8006422:	f7f9 fefd 	bl	8000220 <strlen>
 8006426:	f04f 0a00 	mov.w	sl, #0
 800642a:	4605      	mov	r5, r0
 800642c:	f04f 0b00 	mov.w	fp, #0
 8006430:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	2a2b      	cmp	r2, #43	; 0x2b
 800643a:	d04c      	beq.n	80064d6 <_strtod_l+0xce>
 800643c:	d839      	bhi.n	80064b2 <_strtod_l+0xaa>
 800643e:	2a0d      	cmp	r2, #13
 8006440:	d832      	bhi.n	80064a8 <_strtod_l+0xa0>
 8006442:	2a08      	cmp	r2, #8
 8006444:	d832      	bhi.n	80064ac <_strtod_l+0xa4>
 8006446:	2a00      	cmp	r2, #0
 8006448:	d03c      	beq.n	80064c4 <_strtod_l+0xbc>
 800644a:	2300      	movs	r3, #0
 800644c:	930e      	str	r3, [sp, #56]	; 0x38
 800644e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006450:	7833      	ldrb	r3, [r6, #0]
 8006452:	2b30      	cmp	r3, #48	; 0x30
 8006454:	f040 80b4 	bne.w	80065c0 <_strtod_l+0x1b8>
 8006458:	7873      	ldrb	r3, [r6, #1]
 800645a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800645e:	2b58      	cmp	r3, #88	; 0x58
 8006460:	d16c      	bne.n	800653c <_strtod_l+0x134>
 8006462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	ab1e      	add	r3, sp, #120	; 0x78
 8006468:	9702      	str	r7, [sp, #8]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4a8f      	ldr	r2, [pc, #572]	; (80066ac <_strtod_l+0x2a4>)
 800646e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006470:	a91d      	add	r1, sp, #116	; 0x74
 8006472:	4620      	mov	r0, r4
 8006474:	f001 fe34 	bl	80080e0 <__gethex>
 8006478:	f010 0707 	ands.w	r7, r0, #7
 800647c:	4605      	mov	r5, r0
 800647e:	d005      	beq.n	800648c <_strtod_l+0x84>
 8006480:	2f06      	cmp	r7, #6
 8006482:	d12a      	bne.n	80064da <_strtod_l+0xd2>
 8006484:	3601      	adds	r6, #1
 8006486:	2300      	movs	r3, #0
 8006488:	961d      	str	r6, [sp, #116]	; 0x74
 800648a:	930e      	str	r3, [sp, #56]	; 0x38
 800648c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 8596 	bne.w	8006fc0 <_strtod_l+0xbb8>
 8006494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006496:	b1db      	cbz	r3, 80064d0 <_strtod_l+0xc8>
 8006498:	4652      	mov	r2, sl
 800649a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800649e:	ec43 2b10 	vmov	d0, r2, r3
 80064a2:	b023      	add	sp, #140	; 0x8c
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	2a20      	cmp	r2, #32
 80064aa:	d1ce      	bne.n	800644a <_strtod_l+0x42>
 80064ac:	3301      	adds	r3, #1
 80064ae:	931d      	str	r3, [sp, #116]	; 0x74
 80064b0:	e7c0      	b.n	8006434 <_strtod_l+0x2c>
 80064b2:	2a2d      	cmp	r2, #45	; 0x2d
 80064b4:	d1c9      	bne.n	800644a <_strtod_l+0x42>
 80064b6:	2201      	movs	r2, #1
 80064b8:	920e      	str	r2, [sp, #56]	; 0x38
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	921d      	str	r2, [sp, #116]	; 0x74
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1c4      	bne.n	800644e <_strtod_l+0x46>
 80064c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 8576 	bne.w	8006fbc <_strtod_l+0xbb4>
 80064d0:	4652      	mov	r2, sl
 80064d2:	465b      	mov	r3, fp
 80064d4:	e7e3      	b.n	800649e <_strtod_l+0x96>
 80064d6:	2200      	movs	r2, #0
 80064d8:	e7ee      	b.n	80064b8 <_strtod_l+0xb0>
 80064da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064dc:	b13a      	cbz	r2, 80064ee <_strtod_l+0xe6>
 80064de:	2135      	movs	r1, #53	; 0x35
 80064e0:	a820      	add	r0, sp, #128	; 0x80
 80064e2:	f002 fdac 	bl	800903e <__copybits>
 80064e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064e8:	4620      	mov	r0, r4
 80064ea:	f002 f971 	bl	80087d0 <_Bfree>
 80064ee:	3f01      	subs	r7, #1
 80064f0:	2f05      	cmp	r7, #5
 80064f2:	d807      	bhi.n	8006504 <_strtod_l+0xfc>
 80064f4:	e8df f007 	tbb	[pc, r7]
 80064f8:	1d180b0e 	.word	0x1d180b0e
 80064fc:	030e      	.short	0x030e
 80064fe:	f04f 0b00 	mov.w	fp, #0
 8006502:	46da      	mov	sl, fp
 8006504:	0728      	lsls	r0, r5, #28
 8006506:	d5c1      	bpl.n	800648c <_strtod_l+0x84>
 8006508:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800650c:	e7be      	b.n	800648c <_strtod_l+0x84>
 800650e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006512:	e7f7      	b.n	8006504 <_strtod_l+0xfc>
 8006514:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006518:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800651a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800651e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006522:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006526:	e7ed      	b.n	8006504 <_strtod_l+0xfc>
 8006528:	f8df b184 	ldr.w	fp, [pc, #388]	; 80066b0 <_strtod_l+0x2a8>
 800652c:	f04f 0a00 	mov.w	sl, #0
 8006530:	e7e8      	b.n	8006504 <_strtod_l+0xfc>
 8006532:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006536:	f04f 3aff 	mov.w	sl, #4294967295
 800653a:	e7e3      	b.n	8006504 <_strtod_l+0xfc>
 800653c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	921d      	str	r2, [sp, #116]	; 0x74
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d0f9      	beq.n	800653c <_strtod_l+0x134>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d09f      	beq.n	800648c <_strtod_l+0x84>
 800654c:	2301      	movs	r3, #1
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006556:	930a      	str	r3, [sp, #40]	; 0x28
 8006558:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800655c:	464f      	mov	r7, r9
 800655e:	220a      	movs	r2, #10
 8006560:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006562:	7806      	ldrb	r6, [r0, #0]
 8006564:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006568:	b2d9      	uxtb	r1, r3
 800656a:	2909      	cmp	r1, #9
 800656c:	d92a      	bls.n	80065c4 <_strtod_l+0x1bc>
 800656e:	9907      	ldr	r1, [sp, #28]
 8006570:	462a      	mov	r2, r5
 8006572:	f003 f974 	bl	800985e <strncmp>
 8006576:	b398      	cbz	r0, 80065e0 <_strtod_l+0x1d8>
 8006578:	2000      	movs	r0, #0
 800657a:	4633      	mov	r3, r6
 800657c:	463d      	mov	r5, r7
 800657e:	9007      	str	r0, [sp, #28]
 8006580:	4602      	mov	r2, r0
 8006582:	2b65      	cmp	r3, #101	; 0x65
 8006584:	d001      	beq.n	800658a <_strtod_l+0x182>
 8006586:	2b45      	cmp	r3, #69	; 0x45
 8006588:	d118      	bne.n	80065bc <_strtod_l+0x1b4>
 800658a:	b91d      	cbnz	r5, 8006594 <_strtod_l+0x18c>
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4303      	orrs	r3, r0
 8006590:	d098      	beq.n	80064c4 <_strtod_l+0xbc>
 8006592:	2500      	movs	r5, #0
 8006594:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006598:	f108 0301 	add.w	r3, r8, #1
 800659c:	931d      	str	r3, [sp, #116]	; 0x74
 800659e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065a2:	2b2b      	cmp	r3, #43	; 0x2b
 80065a4:	d075      	beq.n	8006692 <_strtod_l+0x28a>
 80065a6:	2b2d      	cmp	r3, #45	; 0x2d
 80065a8:	d07b      	beq.n	80066a2 <_strtod_l+0x29a>
 80065aa:	f04f 0c00 	mov.w	ip, #0
 80065ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80065b2:	2909      	cmp	r1, #9
 80065b4:	f240 8082 	bls.w	80066bc <_strtod_l+0x2b4>
 80065b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80065bc:	2600      	movs	r6, #0
 80065be:	e09d      	b.n	80066fc <_strtod_l+0x2f4>
 80065c0:	2300      	movs	r3, #0
 80065c2:	e7c4      	b.n	800654e <_strtod_l+0x146>
 80065c4:	2f08      	cmp	r7, #8
 80065c6:	bfd8      	it	le
 80065c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80065ca:	f100 0001 	add.w	r0, r0, #1
 80065ce:	bfda      	itte	le
 80065d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80065d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80065d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80065da:	3701      	adds	r7, #1
 80065dc:	901d      	str	r0, [sp, #116]	; 0x74
 80065de:	e7bf      	b.n	8006560 <_strtod_l+0x158>
 80065e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065e2:	195a      	adds	r2, r3, r5
 80065e4:	921d      	str	r2, [sp, #116]	; 0x74
 80065e6:	5d5b      	ldrb	r3, [r3, r5]
 80065e8:	2f00      	cmp	r7, #0
 80065ea:	d037      	beq.n	800665c <_strtod_l+0x254>
 80065ec:	9007      	str	r0, [sp, #28]
 80065ee:	463d      	mov	r5, r7
 80065f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80065f4:	2a09      	cmp	r2, #9
 80065f6:	d912      	bls.n	800661e <_strtod_l+0x216>
 80065f8:	2201      	movs	r2, #1
 80065fa:	e7c2      	b.n	8006582 <_strtod_l+0x17a>
 80065fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	921d      	str	r2, [sp, #116]	; 0x74
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	3001      	adds	r0, #1
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	d0f8      	beq.n	80065fc <_strtod_l+0x1f4>
 800660a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800660e:	2a08      	cmp	r2, #8
 8006610:	f200 84db 	bhi.w	8006fca <_strtod_l+0xbc2>
 8006614:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006616:	9007      	str	r0, [sp, #28]
 8006618:	2000      	movs	r0, #0
 800661a:	920a      	str	r2, [sp, #40]	; 0x28
 800661c:	4605      	mov	r5, r0
 800661e:	3b30      	subs	r3, #48	; 0x30
 8006620:	f100 0201 	add.w	r2, r0, #1
 8006624:	d014      	beq.n	8006650 <_strtod_l+0x248>
 8006626:	9907      	ldr	r1, [sp, #28]
 8006628:	4411      	add	r1, r2
 800662a:	9107      	str	r1, [sp, #28]
 800662c:	462a      	mov	r2, r5
 800662e:	eb00 0e05 	add.w	lr, r0, r5
 8006632:	210a      	movs	r1, #10
 8006634:	4572      	cmp	r2, lr
 8006636:	d113      	bne.n	8006660 <_strtod_l+0x258>
 8006638:	182a      	adds	r2, r5, r0
 800663a:	2a08      	cmp	r2, #8
 800663c:	f105 0501 	add.w	r5, r5, #1
 8006640:	4405      	add	r5, r0
 8006642:	dc1c      	bgt.n	800667e <_strtod_l+0x276>
 8006644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006646:	220a      	movs	r2, #10
 8006648:	fb02 3301 	mla	r3, r2, r1, r3
 800664c:	9309      	str	r3, [sp, #36]	; 0x24
 800664e:	2200      	movs	r2, #0
 8006650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	911d      	str	r1, [sp, #116]	; 0x74
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	4610      	mov	r0, r2
 800665a:	e7c9      	b.n	80065f0 <_strtod_l+0x1e8>
 800665c:	4638      	mov	r0, r7
 800665e:	e7d2      	b.n	8006606 <_strtod_l+0x1fe>
 8006660:	2a08      	cmp	r2, #8
 8006662:	dc04      	bgt.n	800666e <_strtod_l+0x266>
 8006664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006666:	434e      	muls	r6, r1
 8006668:	9609      	str	r6, [sp, #36]	; 0x24
 800666a:	3201      	adds	r2, #1
 800666c:	e7e2      	b.n	8006634 <_strtod_l+0x22c>
 800666e:	f102 0c01 	add.w	ip, r2, #1
 8006672:	f1bc 0f10 	cmp.w	ip, #16
 8006676:	bfd8      	it	le
 8006678:	fb01 f909 	mulle.w	r9, r1, r9
 800667c:	e7f5      	b.n	800666a <_strtod_l+0x262>
 800667e:	2d10      	cmp	r5, #16
 8006680:	bfdc      	itt	le
 8006682:	220a      	movle	r2, #10
 8006684:	fb02 3909 	mlale	r9, r2, r9, r3
 8006688:	e7e1      	b.n	800664e <_strtod_l+0x246>
 800668a:	2300      	movs	r3, #0
 800668c:	9307      	str	r3, [sp, #28]
 800668e:	2201      	movs	r2, #1
 8006690:	e77c      	b.n	800658c <_strtod_l+0x184>
 8006692:	f04f 0c00 	mov.w	ip, #0
 8006696:	f108 0302 	add.w	r3, r8, #2
 800669a:	931d      	str	r3, [sp, #116]	; 0x74
 800669c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80066a0:	e785      	b.n	80065ae <_strtod_l+0x1a6>
 80066a2:	f04f 0c01 	mov.w	ip, #1
 80066a6:	e7f6      	b.n	8006696 <_strtod_l+0x28e>
 80066a8:	0800a234 	.word	0x0800a234
 80066ac:	08009f80 	.word	0x08009f80
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	911d      	str	r1, [sp, #116]	; 0x74
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d0f9      	beq.n	80066b4 <_strtod_l+0x2ac>
 80066c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80066c4:	2908      	cmp	r1, #8
 80066c6:	f63f af79 	bhi.w	80065bc <_strtod_l+0x1b4>
 80066ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80066ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066d0:	9308      	str	r3, [sp, #32]
 80066d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	911d      	str	r1, [sp, #116]	; 0x74
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80066de:	2e09      	cmp	r6, #9
 80066e0:	d937      	bls.n	8006752 <_strtod_l+0x34a>
 80066e2:	9e08      	ldr	r6, [sp, #32]
 80066e4:	1b89      	subs	r1, r1, r6
 80066e6:	2908      	cmp	r1, #8
 80066e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80066ec:	dc02      	bgt.n	80066f4 <_strtod_l+0x2ec>
 80066ee:	4576      	cmp	r6, lr
 80066f0:	bfa8      	it	ge
 80066f2:	4676      	movge	r6, lr
 80066f4:	f1bc 0f00 	cmp.w	ip, #0
 80066f8:	d000      	beq.n	80066fc <_strtod_l+0x2f4>
 80066fa:	4276      	negs	r6, r6
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d14f      	bne.n	80067a0 <_strtod_l+0x398>
 8006700:	9904      	ldr	r1, [sp, #16]
 8006702:	4301      	orrs	r1, r0
 8006704:	f47f aec2 	bne.w	800648c <_strtod_l+0x84>
 8006708:	2a00      	cmp	r2, #0
 800670a:	f47f aedb 	bne.w	80064c4 <_strtod_l+0xbc>
 800670e:	2b69      	cmp	r3, #105	; 0x69
 8006710:	d027      	beq.n	8006762 <_strtod_l+0x35a>
 8006712:	dc24      	bgt.n	800675e <_strtod_l+0x356>
 8006714:	2b49      	cmp	r3, #73	; 0x49
 8006716:	d024      	beq.n	8006762 <_strtod_l+0x35a>
 8006718:	2b4e      	cmp	r3, #78	; 0x4e
 800671a:	f47f aed3 	bne.w	80064c4 <_strtod_l+0xbc>
 800671e:	499e      	ldr	r1, [pc, #632]	; (8006998 <_strtod_l+0x590>)
 8006720:	a81d      	add	r0, sp, #116	; 0x74
 8006722:	f001 ff35 	bl	8008590 <__match>
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f aecc 	beq.w	80064c4 <_strtod_l+0xbc>
 800672c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b28      	cmp	r3, #40	; 0x28
 8006732:	d12d      	bne.n	8006790 <_strtod_l+0x388>
 8006734:	4999      	ldr	r1, [pc, #612]	; (800699c <_strtod_l+0x594>)
 8006736:	aa20      	add	r2, sp, #128	; 0x80
 8006738:	a81d      	add	r0, sp, #116	; 0x74
 800673a:	f001 ff3d 	bl	80085b8 <__hexnan>
 800673e:	2805      	cmp	r0, #5
 8006740:	d126      	bne.n	8006790 <_strtod_l+0x388>
 8006742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006744:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006748:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800674c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006750:	e69c      	b.n	800648c <_strtod_l+0x84>
 8006752:	210a      	movs	r1, #10
 8006754:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006758:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800675c:	e7b9      	b.n	80066d2 <_strtod_l+0x2ca>
 800675e:	2b6e      	cmp	r3, #110	; 0x6e
 8006760:	e7db      	b.n	800671a <_strtod_l+0x312>
 8006762:	498f      	ldr	r1, [pc, #572]	; (80069a0 <_strtod_l+0x598>)
 8006764:	a81d      	add	r0, sp, #116	; 0x74
 8006766:	f001 ff13 	bl	8008590 <__match>
 800676a:	2800      	cmp	r0, #0
 800676c:	f43f aeaa 	beq.w	80064c4 <_strtod_l+0xbc>
 8006770:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006772:	498c      	ldr	r1, [pc, #560]	; (80069a4 <_strtod_l+0x59c>)
 8006774:	3b01      	subs	r3, #1
 8006776:	a81d      	add	r0, sp, #116	; 0x74
 8006778:	931d      	str	r3, [sp, #116]	; 0x74
 800677a:	f001 ff09 	bl	8008590 <__match>
 800677e:	b910      	cbnz	r0, 8006786 <_strtod_l+0x37e>
 8006780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006782:	3301      	adds	r3, #1
 8006784:	931d      	str	r3, [sp, #116]	; 0x74
 8006786:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80069b4 <_strtod_l+0x5ac>
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	e67d      	b.n	800648c <_strtod_l+0x84>
 8006790:	4885      	ldr	r0, [pc, #532]	; (80069a8 <_strtod_l+0x5a0>)
 8006792:	f003 f809 	bl	80097a8 <nan>
 8006796:	ed8d 0b04 	vstr	d0, [sp, #16]
 800679a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800679e:	e675      	b.n	800648c <_strtod_l+0x84>
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a4:	1af3      	subs	r3, r6, r3
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	bf08      	it	eq
 80067aa:	462f      	moveq	r7, r5
 80067ac:	2d10      	cmp	r5, #16
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	46a8      	mov	r8, r5
 80067b2:	bfa8      	it	ge
 80067b4:	f04f 0810 	movge.w	r8, #16
 80067b8:	f7f9 fecc 	bl	8000554 <__aeabi_ui2d>
 80067bc:	2d09      	cmp	r5, #9
 80067be:	4682      	mov	sl, r0
 80067c0:	468b      	mov	fp, r1
 80067c2:	dd13      	ble.n	80067ec <_strtod_l+0x3e4>
 80067c4:	4b79      	ldr	r3, [pc, #484]	; (80069ac <_strtod_l+0x5a4>)
 80067c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80067ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80067ce:	f7f9 ff3b 	bl	8000648 <__aeabi_dmul>
 80067d2:	4682      	mov	sl, r0
 80067d4:	4648      	mov	r0, r9
 80067d6:	468b      	mov	fp, r1
 80067d8:	f7f9 febc 	bl	8000554 <__aeabi_ui2d>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4650      	mov	r0, sl
 80067e2:	4659      	mov	r1, fp
 80067e4:	f7f9 fd7a 	bl	80002dc <__adddf3>
 80067e8:	4682      	mov	sl, r0
 80067ea:	468b      	mov	fp, r1
 80067ec:	2d0f      	cmp	r5, #15
 80067ee:	dc38      	bgt.n	8006862 <_strtod_l+0x45a>
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f43f ae4a 	beq.w	800648c <_strtod_l+0x84>
 80067f8:	dd24      	ble.n	8006844 <_strtod_l+0x43c>
 80067fa:	2b16      	cmp	r3, #22
 80067fc:	dc0b      	bgt.n	8006816 <_strtod_l+0x40e>
 80067fe:	4d6b      	ldr	r5, [pc, #428]	; (80069ac <_strtod_l+0x5a4>)
 8006800:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006804:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006808:	4652      	mov	r2, sl
 800680a:	465b      	mov	r3, fp
 800680c:	f7f9 ff1c 	bl	8000648 <__aeabi_dmul>
 8006810:	4682      	mov	sl, r0
 8006812:	468b      	mov	fp, r1
 8006814:	e63a      	b.n	800648c <_strtod_l+0x84>
 8006816:	9a08      	ldr	r2, [sp, #32]
 8006818:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800681c:	4293      	cmp	r3, r2
 800681e:	db20      	blt.n	8006862 <_strtod_l+0x45a>
 8006820:	4c62      	ldr	r4, [pc, #392]	; (80069ac <_strtod_l+0x5a4>)
 8006822:	f1c5 050f 	rsb	r5, r5, #15
 8006826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006832:	f7f9 ff09 	bl	8000648 <__aeabi_dmul>
 8006836:	9b08      	ldr	r3, [sp, #32]
 8006838:	1b5d      	subs	r5, r3, r5
 800683a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800683e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006842:	e7e3      	b.n	800680c <_strtod_l+0x404>
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	3316      	adds	r3, #22
 8006848:	db0b      	blt.n	8006862 <_strtod_l+0x45a>
 800684a:	9b07      	ldr	r3, [sp, #28]
 800684c:	4a57      	ldr	r2, [pc, #348]	; (80069ac <_strtod_l+0x5a4>)
 800684e:	1b9e      	subs	r6, r3, r6
 8006850:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006854:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006858:	4650      	mov	r0, sl
 800685a:	4659      	mov	r1, fp
 800685c:	f7fa f81e 	bl	800089c <__aeabi_ddiv>
 8006860:	e7d6      	b.n	8006810 <_strtod_l+0x408>
 8006862:	9b08      	ldr	r3, [sp, #32]
 8006864:	eba5 0808 	sub.w	r8, r5, r8
 8006868:	4498      	add	r8, r3
 800686a:	f1b8 0f00 	cmp.w	r8, #0
 800686e:	dd71      	ble.n	8006954 <_strtod_l+0x54c>
 8006870:	f018 030f 	ands.w	r3, r8, #15
 8006874:	d00a      	beq.n	800688c <_strtod_l+0x484>
 8006876:	494d      	ldr	r1, [pc, #308]	; (80069ac <_strtod_l+0x5a4>)
 8006878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800687c:	4652      	mov	r2, sl
 800687e:	465b      	mov	r3, fp
 8006880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006884:	f7f9 fee0 	bl	8000648 <__aeabi_dmul>
 8006888:	4682      	mov	sl, r0
 800688a:	468b      	mov	fp, r1
 800688c:	f038 080f 	bics.w	r8, r8, #15
 8006890:	d04d      	beq.n	800692e <_strtod_l+0x526>
 8006892:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006896:	dd22      	ble.n	80068de <_strtod_l+0x4d6>
 8006898:	2500      	movs	r5, #0
 800689a:	462e      	mov	r6, r5
 800689c:	9509      	str	r5, [sp, #36]	; 0x24
 800689e:	9507      	str	r5, [sp, #28]
 80068a0:	2322      	movs	r3, #34	; 0x22
 80068a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80069b4 <_strtod_l+0x5ac>
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	f04f 0a00 	mov.w	sl, #0
 80068ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f43f adec 	beq.w	800648c <_strtod_l+0x84>
 80068b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068b6:	4620      	mov	r0, r4
 80068b8:	f001 ff8a 	bl	80087d0 <_Bfree>
 80068bc:	9907      	ldr	r1, [sp, #28]
 80068be:	4620      	mov	r0, r4
 80068c0:	f001 ff86 	bl	80087d0 <_Bfree>
 80068c4:	4631      	mov	r1, r6
 80068c6:	4620      	mov	r0, r4
 80068c8:	f001 ff82 	bl	80087d0 <_Bfree>
 80068cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ce:	4620      	mov	r0, r4
 80068d0:	f001 ff7e 	bl	80087d0 <_Bfree>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4620      	mov	r0, r4
 80068d8:	f001 ff7a 	bl	80087d0 <_Bfree>
 80068dc:	e5d6      	b.n	800648c <_strtod_l+0x84>
 80068de:	2300      	movs	r3, #0
 80068e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80068e4:	4650      	mov	r0, sl
 80068e6:	4659      	mov	r1, fp
 80068e8:	4699      	mov	r9, r3
 80068ea:	f1b8 0f01 	cmp.w	r8, #1
 80068ee:	dc21      	bgt.n	8006934 <_strtod_l+0x52c>
 80068f0:	b10b      	cbz	r3, 80068f6 <_strtod_l+0x4ee>
 80068f2:	4682      	mov	sl, r0
 80068f4:	468b      	mov	fp, r1
 80068f6:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <_strtod_l+0x5a8>)
 80068f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80068fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006900:	4652      	mov	r2, sl
 8006902:	465b      	mov	r3, fp
 8006904:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006908:	f7f9 fe9e 	bl	8000648 <__aeabi_dmul>
 800690c:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <_strtod_l+0x5ac>)
 800690e:	460a      	mov	r2, r1
 8006910:	400b      	ands	r3, r1
 8006912:	4929      	ldr	r1, [pc, #164]	; (80069b8 <_strtod_l+0x5b0>)
 8006914:	428b      	cmp	r3, r1
 8006916:	4682      	mov	sl, r0
 8006918:	d8be      	bhi.n	8006898 <_strtod_l+0x490>
 800691a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800691e:	428b      	cmp	r3, r1
 8006920:	bf86      	itte	hi
 8006922:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80069bc <_strtod_l+0x5b4>
 8006926:	f04f 3aff 	movhi.w	sl, #4294967295
 800692a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800692e:	2300      	movs	r3, #0
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	e081      	b.n	8006a38 <_strtod_l+0x630>
 8006934:	f018 0f01 	tst.w	r8, #1
 8006938:	d007      	beq.n	800694a <_strtod_l+0x542>
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <_strtod_l+0x5a8>)
 800693c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fe80 	bl	8000648 <__aeabi_dmul>
 8006948:	2301      	movs	r3, #1
 800694a:	f109 0901 	add.w	r9, r9, #1
 800694e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006952:	e7ca      	b.n	80068ea <_strtod_l+0x4e2>
 8006954:	d0eb      	beq.n	800692e <_strtod_l+0x526>
 8006956:	f1c8 0800 	rsb	r8, r8, #0
 800695a:	f018 020f 	ands.w	r2, r8, #15
 800695e:	d00a      	beq.n	8006976 <_strtod_l+0x56e>
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <_strtod_l+0x5a4>)
 8006962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 ff95 	bl	800089c <__aeabi_ddiv>
 8006972:	4682      	mov	sl, r0
 8006974:	468b      	mov	fp, r1
 8006976:	ea5f 1828 	movs.w	r8, r8, asr #4
 800697a:	d0d8      	beq.n	800692e <_strtod_l+0x526>
 800697c:	f1b8 0f1f 	cmp.w	r8, #31
 8006980:	dd1e      	ble.n	80069c0 <_strtod_l+0x5b8>
 8006982:	2500      	movs	r5, #0
 8006984:	462e      	mov	r6, r5
 8006986:	9509      	str	r5, [sp, #36]	; 0x24
 8006988:	9507      	str	r5, [sp, #28]
 800698a:	2322      	movs	r3, #34	; 0x22
 800698c:	f04f 0a00 	mov.w	sl, #0
 8006990:	f04f 0b00 	mov.w	fp, #0
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	e789      	b.n	80068ac <_strtod_l+0x4a4>
 8006998:	08009f51 	.word	0x08009f51
 800699c:	08009f94 	.word	0x08009f94
 80069a0:	08009f49 	.word	0x08009f49
 80069a4:	0800a0d4 	.word	0x0800a0d4
 80069a8:	0800a3f0 	.word	0x0800a3f0
 80069ac:	0800a2d0 	.word	0x0800a2d0
 80069b0:	0800a2a8 	.word	0x0800a2a8
 80069b4:	7ff00000 	.word	0x7ff00000
 80069b8:	7ca00000 	.word	0x7ca00000
 80069bc:	7fefffff 	.word	0x7fefffff
 80069c0:	f018 0310 	ands.w	r3, r8, #16
 80069c4:	bf18      	it	ne
 80069c6:	236a      	movne	r3, #106	; 0x6a
 80069c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006d80 <_strtod_l+0x978>
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	4650      	mov	r0, sl
 80069d0:	4659      	mov	r1, fp
 80069d2:	2300      	movs	r3, #0
 80069d4:	f018 0f01 	tst.w	r8, #1
 80069d8:	d004      	beq.n	80069e4 <_strtod_l+0x5dc>
 80069da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069de:	f7f9 fe33 	bl	8000648 <__aeabi_dmul>
 80069e2:	2301      	movs	r3, #1
 80069e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80069e8:	f109 0908 	add.w	r9, r9, #8
 80069ec:	d1f2      	bne.n	80069d4 <_strtod_l+0x5cc>
 80069ee:	b10b      	cbz	r3, 80069f4 <_strtod_l+0x5ec>
 80069f0:	4682      	mov	sl, r0
 80069f2:	468b      	mov	fp, r1
 80069f4:	9b04      	ldr	r3, [sp, #16]
 80069f6:	b1bb      	cbz	r3, 8006a28 <_strtod_l+0x620>
 80069f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80069fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	4659      	mov	r1, fp
 8006a04:	dd10      	ble.n	8006a28 <_strtod_l+0x620>
 8006a06:	2b1f      	cmp	r3, #31
 8006a08:	f340 8128 	ble.w	8006c5c <_strtod_l+0x854>
 8006a0c:	2b34      	cmp	r3, #52	; 0x34
 8006a0e:	bfde      	ittt	le
 8006a10:	3b20      	suble	r3, #32
 8006a12:	f04f 32ff 	movle.w	r2, #4294967295
 8006a16:	fa02 f303 	lslle.w	r3, r2, r3
 8006a1a:	f04f 0a00 	mov.w	sl, #0
 8006a1e:	bfcc      	ite	gt
 8006a20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a24:	ea03 0b01 	andle.w	fp, r3, r1
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	4659      	mov	r1, fp
 8006a30:	f7fa f872 	bl	8000b18 <__aeabi_dcmpeq>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d1a4      	bne.n	8006982 <_strtod_l+0x57a>
 8006a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a3e:	462b      	mov	r3, r5
 8006a40:	463a      	mov	r2, r7
 8006a42:	4620      	mov	r0, r4
 8006a44:	f001 ff30 	bl	80088a8 <__s2b>
 8006a48:	9009      	str	r0, [sp, #36]	; 0x24
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f43f af24 	beq.w	8006898 <_strtod_l+0x490>
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	1b9e      	subs	r6, r3, r6
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bfb4      	ite	lt
 8006a5a:	4633      	movlt	r3, r6
 8006a5c:	2300      	movge	r3, #0
 8006a5e:	9310      	str	r3, [sp, #64]	; 0x40
 8006a60:	9b08      	ldr	r3, [sp, #32]
 8006a62:	2500      	movs	r5, #0
 8006a64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a68:	9318      	str	r3, [sp, #96]	; 0x60
 8006a6a:	462e      	mov	r6, r5
 8006a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6e:	4620      	mov	r0, r4
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	f001 fe6d 	bl	8008750 <_Balloc>
 8006a76:	9007      	str	r0, [sp, #28]
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f43f af11 	beq.w	80068a0 <_strtod_l+0x498>
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	3202      	adds	r2, #2
 8006a84:	f103 010c 	add.w	r1, r3, #12
 8006a88:	0092      	lsls	r2, r2, #2
 8006a8a:	300c      	adds	r0, #12
 8006a8c:	f001 fe52 	bl	8008734 <memcpy>
 8006a90:	ec4b ab10 	vmov	d0, sl, fp
 8006a94:	aa20      	add	r2, sp, #128	; 0x80
 8006a96:	a91f      	add	r1, sp, #124	; 0x7c
 8006a98:	4620      	mov	r0, r4
 8006a9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006a9e:	f002 fa3f 	bl	8008f20 <__d2b>
 8006aa2:	901e      	str	r0, [sp, #120]	; 0x78
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f43f aefb 	beq.w	80068a0 <_strtod_l+0x498>
 8006aaa:	2101      	movs	r1, #1
 8006aac:	4620      	mov	r0, r4
 8006aae:	f001 ff95 	bl	80089dc <__i2b>
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f43f aef3 	beq.w	80068a0 <_strtod_l+0x498>
 8006aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006abc:	9904      	ldr	r1, [sp, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bfab      	itete	ge
 8006ac2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006ac4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006ac6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006ac8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006acc:	bfac      	ite	ge
 8006ace:	eb03 0902 	addge.w	r9, r3, r2
 8006ad2:	1ad7      	sublt	r7, r2, r3
 8006ad4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ad6:	eba3 0801 	sub.w	r8, r3, r1
 8006ada:	4490      	add	r8, r2
 8006adc:	4ba3      	ldr	r3, [pc, #652]	; (8006d6c <_strtod_l+0x964>)
 8006ade:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ae2:	4598      	cmp	r8, r3
 8006ae4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ae8:	f280 80cc 	bge.w	8006c84 <_strtod_l+0x87c>
 8006aec:	eba3 0308 	sub.w	r3, r3, r8
 8006af0:	2b1f      	cmp	r3, #31
 8006af2:	eba2 0203 	sub.w	r2, r2, r3
 8006af6:	f04f 0101 	mov.w	r1, #1
 8006afa:	f300 80b6 	bgt.w	8006c6a <_strtod_l+0x862>
 8006afe:	fa01 f303 	lsl.w	r3, r1, r3
 8006b02:	9311      	str	r3, [sp, #68]	; 0x44
 8006b04:	2300      	movs	r3, #0
 8006b06:	930c      	str	r3, [sp, #48]	; 0x30
 8006b08:	eb09 0802 	add.w	r8, r9, r2
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	45c1      	cmp	r9, r8
 8006b10:	4417      	add	r7, r2
 8006b12:	441f      	add	r7, r3
 8006b14:	464b      	mov	r3, r9
 8006b16:	bfa8      	it	ge
 8006b18:	4643      	movge	r3, r8
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	bfa8      	it	ge
 8006b1e:	463b      	movge	r3, r7
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfc2      	ittt	gt
 8006b24:	eba8 0803 	subgt.w	r8, r8, r3
 8006b28:	1aff      	subgt	r7, r7, r3
 8006b2a:	eba9 0903 	subgt.w	r9, r9, r3
 8006b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dd17      	ble.n	8006b64 <_strtod_l+0x75c>
 8006b34:	4631      	mov	r1, r6
 8006b36:	461a      	mov	r2, r3
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f002 f80b 	bl	8008b54 <__pow5mult>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f43f aead 	beq.w	80068a0 <_strtod_l+0x498>
 8006b46:	4601      	mov	r1, r0
 8006b48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f001 ff5c 	bl	8008a08 <__multiply>
 8006b50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f43f aea4 	beq.w	80068a0 <_strtod_l+0x498>
 8006b58:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f001 fe38 	bl	80087d0 <_Bfree>
 8006b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b62:	931e      	str	r3, [sp, #120]	; 0x78
 8006b64:	f1b8 0f00 	cmp.w	r8, #0
 8006b68:	f300 8091 	bgt.w	8006c8e <_strtod_l+0x886>
 8006b6c:	9b08      	ldr	r3, [sp, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dd08      	ble.n	8006b84 <_strtod_l+0x77c>
 8006b72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b74:	9907      	ldr	r1, [sp, #28]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 ffec 	bl	8008b54 <__pow5mult>
 8006b7c:	9007      	str	r0, [sp, #28]
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f ae8e 	beq.w	80068a0 <_strtod_l+0x498>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	dd08      	ble.n	8006b9a <_strtod_l+0x792>
 8006b88:	9907      	ldr	r1, [sp, #28]
 8006b8a:	463a      	mov	r2, r7
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f002 f83b 	bl	8008c08 <__lshift>
 8006b92:	9007      	str	r0, [sp, #28]
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f ae83 	beq.w	80068a0 <_strtod_l+0x498>
 8006b9a:	f1b9 0f00 	cmp.w	r9, #0
 8006b9e:	dd08      	ble.n	8006bb2 <_strtod_l+0x7aa>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	464a      	mov	r2, r9
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f002 f82f 	bl	8008c08 <__lshift>
 8006baa:	4606      	mov	r6, r0
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f43f ae77 	beq.w	80068a0 <_strtod_l+0x498>
 8006bb2:	9a07      	ldr	r2, [sp, #28]
 8006bb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f002 f8ae 	bl	8008d18 <__mdiff>
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f ae6e 	beq.w	80068a0 <_strtod_l+0x498>
 8006bc4:	68c3      	ldr	r3, [r0, #12]
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60c3      	str	r3, [r0, #12]
 8006bcc:	4631      	mov	r1, r6
 8006bce:	f002 f887 	bl	8008ce0 <__mcmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	da65      	bge.n	8006ca2 <_strtod_l+0x89a>
 8006bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bd8:	ea53 030a 	orrs.w	r3, r3, sl
 8006bdc:	f040 8087 	bne.w	8006cee <_strtod_l+0x8e6>
 8006be0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f040 8082 	bne.w	8006cee <_strtod_l+0x8e6>
 8006bea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bee:	0d1b      	lsrs	r3, r3, #20
 8006bf0:	051b      	lsls	r3, r3, #20
 8006bf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006bf6:	d97a      	bls.n	8006cee <_strtod_l+0x8e6>
 8006bf8:	696b      	ldr	r3, [r5, #20]
 8006bfa:	b913      	cbnz	r3, 8006c02 <_strtod_l+0x7fa>
 8006bfc:	692b      	ldr	r3, [r5, #16]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	dd75      	ble.n	8006cee <_strtod_l+0x8e6>
 8006c02:	4629      	mov	r1, r5
 8006c04:	2201      	movs	r2, #1
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 fffe 	bl	8008c08 <__lshift>
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4605      	mov	r5, r0
 8006c10:	f002 f866 	bl	8008ce0 <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dd6a      	ble.n	8006cee <_strtod_l+0x8e6>
 8006c18:	9904      	ldr	r1, [sp, #16]
 8006c1a:	4a55      	ldr	r2, [pc, #340]	; (8006d70 <_strtod_l+0x968>)
 8006c1c:	465b      	mov	r3, fp
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	f000 8085 	beq.w	8006d2e <_strtod_l+0x926>
 8006c24:	ea02 010b 	and.w	r1, r2, fp
 8006c28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c2c:	dc7f      	bgt.n	8006d2e <_strtod_l+0x926>
 8006c2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c32:	f77f aeaa 	ble.w	800698a <_strtod_l+0x582>
 8006c36:	4a4f      	ldr	r2, [pc, #316]	; (8006d74 <_strtod_l+0x96c>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006c3e:	4650      	mov	r0, sl
 8006c40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006c44:	4659      	mov	r1, fp
 8006c46:	f7f9 fcff 	bl	8000648 <__aeabi_dmul>
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4303      	orrs	r3, r0
 8006c4e:	bf08      	it	eq
 8006c50:	2322      	moveq	r3, #34	; 0x22
 8006c52:	4682      	mov	sl, r0
 8006c54:	468b      	mov	fp, r1
 8006c56:	bf08      	it	eq
 8006c58:	6023      	streq	r3, [r4, #0]
 8006c5a:	e62b      	b.n	80068b4 <_strtod_l+0x4ac>
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	ea03 0a0a 	and.w	sl, r3, sl
 8006c68:	e6de      	b.n	8006a28 <_strtod_l+0x620>
 8006c6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006c6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006c72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006c76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006c7a:	fa01 f308 	lsl.w	r3, r1, r8
 8006c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c80:	9111      	str	r1, [sp, #68]	; 0x44
 8006c82:	e741      	b.n	8006b08 <_strtod_l+0x700>
 8006c84:	2300      	movs	r3, #0
 8006c86:	930c      	str	r3, [sp, #48]	; 0x30
 8006c88:	2301      	movs	r3, #1
 8006c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006c8c:	e73c      	b.n	8006b08 <_strtod_l+0x700>
 8006c8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c90:	4642      	mov	r2, r8
 8006c92:	4620      	mov	r0, r4
 8006c94:	f001 ffb8 	bl	8008c08 <__lshift>
 8006c98:	901e      	str	r0, [sp, #120]	; 0x78
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f47f af66 	bne.w	8006b6c <_strtod_l+0x764>
 8006ca0:	e5fe      	b.n	80068a0 <_strtod_l+0x498>
 8006ca2:	465f      	mov	r7, fp
 8006ca4:	d16e      	bne.n	8006d84 <_strtod_l+0x97c>
 8006ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cac:	b342      	cbz	r2, 8006d00 <_strtod_l+0x8f8>
 8006cae:	4a32      	ldr	r2, [pc, #200]	; (8006d78 <_strtod_l+0x970>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d128      	bne.n	8006d06 <_strtod_l+0x8fe>
 8006cb4:	9b04      	ldr	r3, [sp, #16]
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	b1eb      	cbz	r3, 8006cf6 <_strtod_l+0x8ee>
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <_strtod_l+0x968>)
 8006cbc:	403a      	ands	r2, r7
 8006cbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc6:	d819      	bhi.n	8006cfc <_strtod_l+0x8f4>
 8006cc8:	0d12      	lsrs	r2, r2, #20
 8006cca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd2:	4298      	cmp	r0, r3
 8006cd4:	d117      	bne.n	8006d06 <_strtod_l+0x8fe>
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <_strtod_l+0x974>)
 8006cd8:	429f      	cmp	r7, r3
 8006cda:	d102      	bne.n	8006ce2 <_strtod_l+0x8da>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f addf 	beq.w	80068a0 <_strtod_l+0x498>
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <_strtod_l+0x968>)
 8006ce4:	403b      	ands	r3, r7
 8006ce6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1a0      	bne.n	8006c36 <_strtod_l+0x82e>
 8006cf4:	e5de      	b.n	80068b4 <_strtod_l+0x4ac>
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	e7ea      	b.n	8006cd2 <_strtod_l+0x8ca>
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	e7e8      	b.n	8006cd2 <_strtod_l+0x8ca>
 8006d00:	ea53 030a 	orrs.w	r3, r3, sl
 8006d04:	d088      	beq.n	8006c18 <_strtod_l+0x810>
 8006d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d08:	b1db      	cbz	r3, 8006d42 <_strtod_l+0x93a>
 8006d0a:	423b      	tst	r3, r7
 8006d0c:	d0ef      	beq.n	8006cee <_strtod_l+0x8e6>
 8006d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d10:	9a04      	ldr	r2, [sp, #16]
 8006d12:	4650      	mov	r0, sl
 8006d14:	4659      	mov	r1, fp
 8006d16:	b1c3      	cbz	r3, 8006d4a <_strtod_l+0x942>
 8006d18:	f7ff fb58 	bl	80063cc <sulp>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d24:	f7f9 fada 	bl	80002dc <__adddf3>
 8006d28:	4682      	mov	sl, r0
 8006d2a:	468b      	mov	fp, r1
 8006d2c:	e7df      	b.n	8006cee <_strtod_l+0x8e6>
 8006d2e:	4013      	ands	r3, r2
 8006d30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d3c:	f04f 3aff 	mov.w	sl, #4294967295
 8006d40:	e7d5      	b.n	8006cee <_strtod_l+0x8e6>
 8006d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d44:	ea13 0f0a 	tst.w	r3, sl
 8006d48:	e7e0      	b.n	8006d0c <_strtod_l+0x904>
 8006d4a:	f7ff fb3f 	bl	80063cc <sulp>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d56:	f7f9 fabf 	bl	80002d8 <__aeabi_dsub>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4682      	mov	sl, r0
 8006d60:	468b      	mov	fp, r1
 8006d62:	f7f9 fed9 	bl	8000b18 <__aeabi_dcmpeq>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d0c1      	beq.n	8006cee <_strtod_l+0x8e6>
 8006d6a:	e60e      	b.n	800698a <_strtod_l+0x582>
 8006d6c:	fffffc02 	.word	0xfffffc02
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	39500000 	.word	0x39500000
 8006d78:	000fffff 	.word	0x000fffff
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	08009fa8 	.word	0x08009fa8
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	f002 f926 	bl	8008fd8 <__ratio>
 8006d8c:	ec59 8b10 	vmov	r8, r9, d0
 8006d90:	ee10 0a10 	vmov	r0, s0
 8006d94:	2200      	movs	r2, #0
 8006d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 fed0 	bl	8000b40 <__aeabi_dcmple>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d07c      	beq.n	8006e9e <_strtod_l+0xa96>
 8006da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04c      	beq.n	8006e44 <_strtod_l+0xa3c>
 8006daa:	4b95      	ldr	r3, [pc, #596]	; (8007000 <_strtod_l+0xbf8>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006db2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007000 <_strtod_l+0xbf8>
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	4b92      	ldr	r3, [pc, #584]	; (8007004 <_strtod_l+0xbfc>)
 8006dbc:	403b      	ands	r3, r7
 8006dbe:	9311      	str	r3, [sp, #68]	; 0x44
 8006dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dc2:	4b91      	ldr	r3, [pc, #580]	; (8007008 <_strtod_l+0xc00>)
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	f040 80b2 	bne.w	8006f2e <_strtod_l+0xb26>
 8006dca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006dd6:	ec4b ab10 	vmov	d0, sl, fp
 8006dda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006dde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006de2:	f002 f821 	bl	8008e28 <__ulp>
 8006de6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dea:	ec53 2b10 	vmov	r2, r3, d0
 8006dee:	f7f9 fc2b 	bl	8000648 <__aeabi_dmul>
 8006df2:	4652      	mov	r2, sl
 8006df4:	465b      	mov	r3, fp
 8006df6:	f7f9 fa71 	bl	80002dc <__adddf3>
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4981      	ldr	r1, [pc, #516]	; (8007004 <_strtod_l+0xbfc>)
 8006dfe:	4a83      	ldr	r2, [pc, #524]	; (800700c <_strtod_l+0xc04>)
 8006e00:	4019      	ands	r1, r3
 8006e02:	4291      	cmp	r1, r2
 8006e04:	4682      	mov	sl, r0
 8006e06:	d95e      	bls.n	8006ec6 <_strtod_l+0xabe>
 8006e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d103      	bne.n	8006e1a <_strtod_l+0xa12>
 8006e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e14:	3301      	adds	r3, #1
 8006e16:	f43f ad43 	beq.w	80068a0 <_strtod_l+0x498>
 8006e1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007018 <_strtod_l+0xc10>
 8006e1e:	f04f 3aff 	mov.w	sl, #4294967295
 8006e22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e24:	4620      	mov	r0, r4
 8006e26:	f001 fcd3 	bl	80087d0 <_Bfree>
 8006e2a:	9907      	ldr	r1, [sp, #28]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 fccf 	bl	80087d0 <_Bfree>
 8006e32:	4631      	mov	r1, r6
 8006e34:	4620      	mov	r0, r4
 8006e36:	f001 fccb 	bl	80087d0 <_Bfree>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f001 fcc7 	bl	80087d0 <_Bfree>
 8006e42:	e613      	b.n	8006a6c <_strtod_l+0x664>
 8006e44:	f1ba 0f00 	cmp.w	sl, #0
 8006e48:	d11b      	bne.n	8006e82 <_strtod_l+0xa7a>
 8006e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e4e:	b9f3      	cbnz	r3, 8006e8e <_strtod_l+0xa86>
 8006e50:	4b6b      	ldr	r3, [pc, #428]	; (8007000 <_strtod_l+0xbf8>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	4640      	mov	r0, r8
 8006e56:	4649      	mov	r1, r9
 8006e58:	f7f9 fe68 	bl	8000b2c <__aeabi_dcmplt>
 8006e5c:	b9d0      	cbnz	r0, 8006e94 <_strtod_l+0xa8c>
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	4b6b      	ldr	r3, [pc, #428]	; (8007010 <_strtod_l+0xc08>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	f7f9 fbef 	bl	8000648 <__aeabi_dmul>
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	4689      	mov	r9, r1
 8006e6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006e76:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006e7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e80:	e79b      	b.n	8006dba <_strtod_l+0x9b2>
 8006e82:	f1ba 0f01 	cmp.w	sl, #1
 8006e86:	d102      	bne.n	8006e8e <_strtod_l+0xa86>
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	f43f ad7e 	beq.w	800698a <_strtod_l+0x582>
 8006e8e:	4b61      	ldr	r3, [pc, #388]	; (8007014 <_strtod_l+0xc0c>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	e78c      	b.n	8006dae <_strtod_l+0x9a6>
 8006e94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007010 <_strtod_l+0xc08>
 8006e98:	f04f 0800 	mov.w	r8, #0
 8006e9c:	e7e7      	b.n	8006e6e <_strtod_l+0xa66>
 8006e9e:	4b5c      	ldr	r3, [pc, #368]	; (8007010 <_strtod_l+0xc08>)
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f7f9 fbcf 	bl	8000648 <__aeabi_dmul>
 8006eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	b933      	cbnz	r3, 8006ec0 <_strtod_l+0xab8>
 8006eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eb6:	9012      	str	r0, [sp, #72]	; 0x48
 8006eb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006ebe:	e7dd      	b.n	8006e7c <_strtod_l+0xa74>
 8006ec0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006ec4:	e7f9      	b.n	8006eba <_strtod_l+0xab2>
 8006ec6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006eca:	9b04      	ldr	r3, [sp, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1a8      	bne.n	8006e22 <_strtod_l+0xa1a>
 8006ed0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ed6:	0d1b      	lsrs	r3, r3, #20
 8006ed8:	051b      	lsls	r3, r3, #20
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d1a1      	bne.n	8006e22 <_strtod_l+0xa1a>
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 ff11 	bl	8000d08 <__aeabi_d2lz>
 8006ee6:	f7f9 fb81 	bl	80005ec <__aeabi_l2d>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 f9f1 	bl	80002d8 <__aeabi_dsub>
 8006ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006efc:	ea43 030a 	orr.w	r3, r3, sl
 8006f00:	4313      	orrs	r3, r2
 8006f02:	4680      	mov	r8, r0
 8006f04:	4689      	mov	r9, r1
 8006f06:	d053      	beq.n	8006fb0 <_strtod_l+0xba8>
 8006f08:	a335      	add	r3, pc, #212	; (adr r3, 8006fe0 <_strtod_l+0xbd8>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fe0d 	bl	8000b2c <__aeabi_dcmplt>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f47f acce 	bne.w	80068b4 <_strtod_l+0x4ac>
 8006f18:	a333      	add	r3, pc, #204	; (adr r3, 8006fe8 <_strtod_l+0xbe0>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 fe21 	bl	8000b68 <__aeabi_dcmpgt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f af7b 	beq.w	8006e22 <_strtod_l+0xa1a>
 8006f2c:	e4c2      	b.n	80068b4 <_strtod_l+0x4ac>
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	b333      	cbz	r3, 8006f80 <_strtod_l+0xb78>
 8006f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f38:	d822      	bhi.n	8006f80 <_strtod_l+0xb78>
 8006f3a:	a32d      	add	r3, pc, #180	; (adr r3, 8006ff0 <_strtod_l+0xbe8>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 fdfc 	bl	8000b40 <__aeabi_dcmple>
 8006f48:	b1a0      	cbz	r0, 8006f74 <_strtod_l+0xb6c>
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f7f9 fe53 	bl	8000bf8 <__aeabi_d2uiz>
 8006f52:	2801      	cmp	r0, #1
 8006f54:	bf38      	it	cc
 8006f56:	2001      	movcc	r0, #1
 8006f58:	f7f9 fafc 	bl	8000554 <__aeabi_ui2d>
 8006f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4689      	mov	r9, r1
 8006f62:	bb13      	cbnz	r3, 8006faa <_strtod_l+0xba2>
 8006f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f68:	9014      	str	r0, [sp, #80]	; 0x50
 8006f6a:	9315      	str	r3, [sp, #84]	; 0x54
 8006f6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f8c:	f001 ff4c 	bl	8008e28 <__ulp>
 8006f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f94:	ec53 2b10 	vmov	r2, r3, d0
 8006f98:	f7f9 fb56 	bl	8000648 <__aeabi_dmul>
 8006f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fa0:	f7f9 f99c 	bl	80002dc <__adddf3>
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	468b      	mov	fp, r1
 8006fa8:	e78f      	b.n	8006eca <_strtod_l+0xac2>
 8006faa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006fae:	e7dd      	b.n	8006f6c <_strtod_l+0xb64>
 8006fb0:	a311      	add	r3, pc, #68	; (adr r3, 8006ff8 <_strtod_l+0xbf0>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 fdb9 	bl	8000b2c <__aeabi_dcmplt>
 8006fba:	e7b4      	b.n	8006f26 <_strtod_l+0xb1e>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	f7ff ba65 	b.w	8006494 <_strtod_l+0x8c>
 8006fca:	2b65      	cmp	r3, #101	; 0x65
 8006fcc:	f43f ab5d 	beq.w	800668a <_strtod_l+0x282>
 8006fd0:	2b45      	cmp	r3, #69	; 0x45
 8006fd2:	f43f ab5a 	beq.w	800668a <_strtod_l+0x282>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f7ff bb92 	b.w	8006700 <_strtod_l+0x2f8>
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	94a03595 	.word	0x94a03595
 8006fe4:	3fdfffff 	.word	0x3fdfffff
 8006fe8:	35afe535 	.word	0x35afe535
 8006fec:	3fe00000 	.word	0x3fe00000
 8006ff0:	ffc00000 	.word	0xffc00000
 8006ff4:	41dfffff 	.word	0x41dfffff
 8006ff8:	94a03595 	.word	0x94a03595
 8006ffc:	3fcfffff 	.word	0x3fcfffff
 8007000:	3ff00000 	.word	0x3ff00000
 8007004:	7ff00000 	.word	0x7ff00000
 8007008:	7fe00000 	.word	0x7fe00000
 800700c:	7c9fffff 	.word	0x7c9fffff
 8007010:	3fe00000 	.word	0x3fe00000
 8007014:	bff00000 	.word	0xbff00000
 8007018:	7fefffff 	.word	0x7fefffff

0800701c <_strtod_r>:
 800701c:	4b01      	ldr	r3, [pc, #4]	; (8007024 <_strtod_r+0x8>)
 800701e:	f7ff b9f3 	b.w	8006408 <_strtod_l>
 8007022:	bf00      	nop
 8007024:	20000074 	.word	0x20000074

08007028 <_strtol_l.isra.0>:
 8007028:	2b01      	cmp	r3, #1
 800702a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702e:	d001      	beq.n	8007034 <_strtol_l.isra.0+0xc>
 8007030:	2b24      	cmp	r3, #36	; 0x24
 8007032:	d906      	bls.n	8007042 <_strtol_l.isra.0+0x1a>
 8007034:	f7fe fae0 	bl	80055f8 <__errno>
 8007038:	2316      	movs	r3, #22
 800703a:	6003      	str	r3, [r0, #0]
 800703c:	2000      	movs	r0, #0
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	4f3a      	ldr	r7, [pc, #232]	; (800712c <_strtol_l.isra.0+0x104>)
 8007044:	468e      	mov	lr, r1
 8007046:	4676      	mov	r6, lr
 8007048:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800704c:	5de5      	ldrb	r5, [r4, r7]
 800704e:	f015 0508 	ands.w	r5, r5, #8
 8007052:	d1f8      	bne.n	8007046 <_strtol_l.isra.0+0x1e>
 8007054:	2c2d      	cmp	r4, #45	; 0x2d
 8007056:	d134      	bne.n	80070c2 <_strtol_l.isra.0+0x9a>
 8007058:	f89e 4000 	ldrb.w	r4, [lr]
 800705c:	f04f 0801 	mov.w	r8, #1
 8007060:	f106 0e02 	add.w	lr, r6, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d05c      	beq.n	8007122 <_strtol_l.isra.0+0xfa>
 8007068:	2b10      	cmp	r3, #16
 800706a:	d10c      	bne.n	8007086 <_strtol_l.isra.0+0x5e>
 800706c:	2c30      	cmp	r4, #48	; 0x30
 800706e:	d10a      	bne.n	8007086 <_strtol_l.isra.0+0x5e>
 8007070:	f89e 4000 	ldrb.w	r4, [lr]
 8007074:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007078:	2c58      	cmp	r4, #88	; 0x58
 800707a:	d14d      	bne.n	8007118 <_strtol_l.isra.0+0xf0>
 800707c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007080:	2310      	movs	r3, #16
 8007082:	f10e 0e02 	add.w	lr, lr, #2
 8007086:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800708a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800708e:	2600      	movs	r6, #0
 8007090:	fbbc f9f3 	udiv	r9, ip, r3
 8007094:	4635      	mov	r5, r6
 8007096:	fb03 ca19 	mls	sl, r3, r9, ip
 800709a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800709e:	2f09      	cmp	r7, #9
 80070a0:	d818      	bhi.n	80070d4 <_strtol_l.isra.0+0xac>
 80070a2:	463c      	mov	r4, r7
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	dd24      	ble.n	80070f2 <_strtol_l.isra.0+0xca>
 80070a8:	2e00      	cmp	r6, #0
 80070aa:	db1f      	blt.n	80070ec <_strtol_l.isra.0+0xc4>
 80070ac:	45a9      	cmp	r9, r5
 80070ae:	d31d      	bcc.n	80070ec <_strtol_l.isra.0+0xc4>
 80070b0:	d101      	bne.n	80070b6 <_strtol_l.isra.0+0x8e>
 80070b2:	45a2      	cmp	sl, r4
 80070b4:	db1a      	blt.n	80070ec <_strtol_l.isra.0+0xc4>
 80070b6:	fb05 4503 	mla	r5, r5, r3, r4
 80070ba:	2601      	movs	r6, #1
 80070bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80070c0:	e7eb      	b.n	800709a <_strtol_l.isra.0+0x72>
 80070c2:	2c2b      	cmp	r4, #43	; 0x2b
 80070c4:	bf08      	it	eq
 80070c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80070ca:	46a8      	mov	r8, r5
 80070cc:	bf08      	it	eq
 80070ce:	f106 0e02 	addeq.w	lr, r6, #2
 80070d2:	e7c7      	b.n	8007064 <_strtol_l.isra.0+0x3c>
 80070d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80070d8:	2f19      	cmp	r7, #25
 80070da:	d801      	bhi.n	80070e0 <_strtol_l.isra.0+0xb8>
 80070dc:	3c37      	subs	r4, #55	; 0x37
 80070de:	e7e1      	b.n	80070a4 <_strtol_l.isra.0+0x7c>
 80070e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80070e4:	2f19      	cmp	r7, #25
 80070e6:	d804      	bhi.n	80070f2 <_strtol_l.isra.0+0xca>
 80070e8:	3c57      	subs	r4, #87	; 0x57
 80070ea:	e7db      	b.n	80070a4 <_strtol_l.isra.0+0x7c>
 80070ec:	f04f 36ff 	mov.w	r6, #4294967295
 80070f0:	e7e4      	b.n	80070bc <_strtol_l.isra.0+0x94>
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	da05      	bge.n	8007102 <_strtol_l.isra.0+0xda>
 80070f6:	2322      	movs	r3, #34	; 0x22
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	4665      	mov	r5, ip
 80070fc:	b942      	cbnz	r2, 8007110 <_strtol_l.isra.0+0xe8>
 80070fe:	4628      	mov	r0, r5
 8007100:	e79d      	b.n	800703e <_strtol_l.isra.0+0x16>
 8007102:	f1b8 0f00 	cmp.w	r8, #0
 8007106:	d000      	beq.n	800710a <_strtol_l.isra.0+0xe2>
 8007108:	426d      	negs	r5, r5
 800710a:	2a00      	cmp	r2, #0
 800710c:	d0f7      	beq.n	80070fe <_strtol_l.isra.0+0xd6>
 800710e:	b10e      	cbz	r6, 8007114 <_strtol_l.isra.0+0xec>
 8007110:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	e7f2      	b.n	80070fe <_strtol_l.isra.0+0xd6>
 8007118:	2430      	movs	r4, #48	; 0x30
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1b3      	bne.n	8007086 <_strtol_l.isra.0+0x5e>
 800711e:	2308      	movs	r3, #8
 8007120:	e7b1      	b.n	8007086 <_strtol_l.isra.0+0x5e>
 8007122:	2c30      	cmp	r4, #48	; 0x30
 8007124:	d0a4      	beq.n	8007070 <_strtol_l.isra.0+0x48>
 8007126:	230a      	movs	r3, #10
 8007128:	e7ad      	b.n	8007086 <_strtol_l.isra.0+0x5e>
 800712a:	bf00      	nop
 800712c:	08009fd1 	.word	0x08009fd1

08007130 <_strtol_r>:
 8007130:	f7ff bf7a 	b.w	8007028 <_strtol_l.isra.0>

08007134 <quorem>:
 8007134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	6903      	ldr	r3, [r0, #16]
 800713a:	690c      	ldr	r4, [r1, #16]
 800713c:	42a3      	cmp	r3, r4
 800713e:	4607      	mov	r7, r0
 8007140:	f2c0 8081 	blt.w	8007246 <quorem+0x112>
 8007144:	3c01      	subs	r4, #1
 8007146:	f101 0814 	add.w	r8, r1, #20
 800714a:	f100 0514 	add.w	r5, r0, #20
 800714e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715c:	3301      	adds	r3, #1
 800715e:	429a      	cmp	r2, r3
 8007160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007168:	fbb2 f6f3 	udiv	r6, r2, r3
 800716c:	d331      	bcc.n	80071d2 <quorem+0x9e>
 800716e:	f04f 0e00 	mov.w	lr, #0
 8007172:	4640      	mov	r0, r8
 8007174:	46ac      	mov	ip, r5
 8007176:	46f2      	mov	sl, lr
 8007178:	f850 2b04 	ldr.w	r2, [r0], #4
 800717c:	b293      	uxth	r3, r2
 800717e:	fb06 e303 	mla	r3, r6, r3, lr
 8007182:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007186:	b29b      	uxth	r3, r3
 8007188:	ebaa 0303 	sub.w	r3, sl, r3
 800718c:	0c12      	lsrs	r2, r2, #16
 800718e:	f8dc a000 	ldr.w	sl, [ip]
 8007192:	fb06 e202 	mla	r2, r6, r2, lr
 8007196:	fa13 f38a 	uxtah	r3, r3, sl
 800719a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800719e:	fa1f fa82 	uxth.w	sl, r2
 80071a2:	f8dc 2000 	ldr.w	r2, [ip]
 80071a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80071aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b4:	4581      	cmp	r9, r0
 80071b6:	f84c 3b04 	str.w	r3, [ip], #4
 80071ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071be:	d2db      	bcs.n	8007178 <quorem+0x44>
 80071c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80071c4:	b92b      	cbnz	r3, 80071d2 <quorem+0x9e>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d32e      	bcc.n	800722e <quorem+0xfa>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4638      	mov	r0, r7
 80071d4:	f001 fd84 	bl	8008ce0 <__mcmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	db24      	blt.n	8007226 <quorem+0xf2>
 80071dc:	3601      	adds	r6, #1
 80071de:	4628      	mov	r0, r5
 80071e0:	f04f 0c00 	mov.w	ip, #0
 80071e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071e8:	f8d0 e000 	ldr.w	lr, [r0]
 80071ec:	b293      	uxth	r3, r2
 80071ee:	ebac 0303 	sub.w	r3, ip, r3
 80071f2:	0c12      	lsrs	r2, r2, #16
 80071f4:	fa13 f38e 	uxtah	r3, r3, lr
 80071f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007206:	45c1      	cmp	r9, r8
 8007208:	f840 3b04 	str.w	r3, [r0], #4
 800720c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007210:	d2e8      	bcs.n	80071e4 <quorem+0xb0>
 8007212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800721a:	b922      	cbnz	r2, 8007226 <quorem+0xf2>
 800721c:	3b04      	subs	r3, #4
 800721e:	429d      	cmp	r5, r3
 8007220:	461a      	mov	r2, r3
 8007222:	d30a      	bcc.n	800723a <quorem+0x106>
 8007224:	613c      	str	r4, [r7, #16]
 8007226:	4630      	mov	r0, r6
 8007228:	b003      	add	sp, #12
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	3b04      	subs	r3, #4
 8007232:	2a00      	cmp	r2, #0
 8007234:	d1cc      	bne.n	80071d0 <quorem+0x9c>
 8007236:	3c01      	subs	r4, #1
 8007238:	e7c7      	b.n	80071ca <quorem+0x96>
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	3b04      	subs	r3, #4
 800723e:	2a00      	cmp	r2, #0
 8007240:	d1f0      	bne.n	8007224 <quorem+0xf0>
 8007242:	3c01      	subs	r4, #1
 8007244:	e7eb      	b.n	800721e <quorem+0xea>
 8007246:	2000      	movs	r0, #0
 8007248:	e7ee      	b.n	8007228 <quorem+0xf4>
 800724a:	0000      	movs	r0, r0
 800724c:	0000      	movs	r0, r0
	...

08007250 <_dtoa_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b02 	vpush	{d8}
 8007258:	ec57 6b10 	vmov	r6, r7, d0
 800725c:	b095      	sub	sp, #84	; 0x54
 800725e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800726a:	4604      	mov	r4, r0
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007270:	b975      	cbnz	r5, 8007290 <_dtoa_r+0x40>
 8007272:	2010      	movs	r0, #16
 8007274:	f001 fa44 	bl	8008700 <malloc>
 8007278:	4602      	mov	r2, r0
 800727a:	6260      	str	r0, [r4, #36]	; 0x24
 800727c:	b920      	cbnz	r0, 8007288 <_dtoa_r+0x38>
 800727e:	4bb2      	ldr	r3, [pc, #712]	; (8007548 <_dtoa_r+0x2f8>)
 8007280:	21ea      	movs	r1, #234	; 0xea
 8007282:	48b2      	ldr	r0, [pc, #712]	; (800754c <_dtoa_r+0x2fc>)
 8007284:	f002 fbde 	bl	8009a44 <__assert_func>
 8007288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800728c:	6005      	str	r5, [r0, #0]
 800728e:	60c5      	str	r5, [r0, #12]
 8007290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007292:	6819      	ldr	r1, [r3, #0]
 8007294:	b151      	cbz	r1, 80072ac <_dtoa_r+0x5c>
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	604a      	str	r2, [r1, #4]
 800729a:	2301      	movs	r3, #1
 800729c:	4093      	lsls	r3, r2
 800729e:	608b      	str	r3, [r1, #8]
 80072a0:	4620      	mov	r0, r4
 80072a2:	f001 fa95 	bl	80087d0 <_Bfree>
 80072a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	1e3b      	subs	r3, r7, #0
 80072ae:	bfb9      	ittee	lt
 80072b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072b4:	9303      	strlt	r3, [sp, #12]
 80072b6:	2300      	movge	r3, #0
 80072b8:	f8c8 3000 	strge.w	r3, [r8]
 80072bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80072c0:	4ba3      	ldr	r3, [pc, #652]	; (8007550 <_dtoa_r+0x300>)
 80072c2:	bfbc      	itt	lt
 80072c4:	2201      	movlt	r2, #1
 80072c6:	f8c8 2000 	strlt.w	r2, [r8]
 80072ca:	ea33 0309 	bics.w	r3, r3, r9
 80072ce:	d11b      	bne.n	8007308 <_dtoa_r+0xb8>
 80072d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072dc:	4333      	orrs	r3, r6
 80072de:	f000 857a 	beq.w	8007dd6 <_dtoa_r+0xb86>
 80072e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e4:	b963      	cbnz	r3, 8007300 <_dtoa_r+0xb0>
 80072e6:	4b9b      	ldr	r3, [pc, #620]	; (8007554 <_dtoa_r+0x304>)
 80072e8:	e024      	b.n	8007334 <_dtoa_r+0xe4>
 80072ea:	4b9b      	ldr	r3, [pc, #620]	; (8007558 <_dtoa_r+0x308>)
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	9800      	ldr	r0, [sp, #0]
 80072f6:	b015      	add	sp, #84	; 0x54
 80072f8:	ecbd 8b02 	vpop	{d8}
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	4b94      	ldr	r3, [pc, #592]	; (8007554 <_dtoa_r+0x304>)
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	3303      	adds	r3, #3
 8007306:	e7f3      	b.n	80072f0 <_dtoa_r+0xa0>
 8007308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800730c:	2200      	movs	r2, #0
 800730e:	ec51 0b17 	vmov	r0, r1, d7
 8007312:	2300      	movs	r3, #0
 8007314:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007318:	f7f9 fbfe 	bl	8000b18 <__aeabi_dcmpeq>
 800731c:	4680      	mov	r8, r0
 800731e:	b158      	cbz	r0, 8007338 <_dtoa_r+0xe8>
 8007320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007322:	2301      	movs	r3, #1
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8551 	beq.w	8007dd0 <_dtoa_r+0xb80>
 800732e:	488b      	ldr	r0, [pc, #556]	; (800755c <_dtoa_r+0x30c>)
 8007330:	6018      	str	r0, [r3, #0]
 8007332:	1e43      	subs	r3, r0, #1
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	e7dd      	b.n	80072f4 <_dtoa_r+0xa4>
 8007338:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800733c:	aa12      	add	r2, sp, #72	; 0x48
 800733e:	a913      	add	r1, sp, #76	; 0x4c
 8007340:	4620      	mov	r0, r4
 8007342:	f001 fded 	bl	8008f20 <__d2b>
 8007346:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800734a:	4683      	mov	fp, r0
 800734c:	2d00      	cmp	r5, #0
 800734e:	d07c      	beq.n	800744a <_dtoa_r+0x1fa>
 8007350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007352:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800735a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800735e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800736a:	4b7d      	ldr	r3, [pc, #500]	; (8007560 <_dtoa_r+0x310>)
 800736c:	2200      	movs	r2, #0
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 ffb1 	bl	80002d8 <__aeabi_dsub>
 8007376:	a36e      	add	r3, pc, #440	; (adr r3, 8007530 <_dtoa_r+0x2e0>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f964 	bl	8000648 <__aeabi_dmul>
 8007380:	a36d      	add	r3, pc, #436	; (adr r3, 8007538 <_dtoa_r+0x2e8>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f8 ffa9 	bl	80002dc <__adddf3>
 800738a:	4606      	mov	r6, r0
 800738c:	4628      	mov	r0, r5
 800738e:	460f      	mov	r7, r1
 8007390:	f7f9 f8f0 	bl	8000574 <__aeabi_i2d>
 8007394:	a36a      	add	r3, pc, #424	; (adr r3, 8007540 <_dtoa_r+0x2f0>)
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f7f9 f955 	bl	8000648 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f8 ff99 	bl	80002dc <__adddf3>
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	f7f9 fbfb 	bl	8000ba8 <__aeabi_d2iz>
 80073b2:	2200      	movs	r2, #0
 80073b4:	4682      	mov	sl, r0
 80073b6:	2300      	movs	r3, #0
 80073b8:	4630      	mov	r0, r6
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 fbb6 	bl	8000b2c <__aeabi_dcmplt>
 80073c0:	b148      	cbz	r0, 80073d6 <_dtoa_r+0x186>
 80073c2:	4650      	mov	r0, sl
 80073c4:	f7f9 f8d6 	bl	8000574 <__aeabi_i2d>
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	f7f9 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 80073d0:	b908      	cbnz	r0, 80073d6 <_dtoa_r+0x186>
 80073d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073d6:	f1ba 0f16 	cmp.w	sl, #22
 80073da:	d854      	bhi.n	8007486 <_dtoa_r+0x236>
 80073dc:	4b61      	ldr	r3, [pc, #388]	; (8007564 <_dtoa_r+0x314>)
 80073de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073ea:	f7f9 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d04b      	beq.n	800748a <_dtoa_r+0x23a>
 80073f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f6:	2300      	movs	r3, #0
 80073f8:	930e      	str	r3, [sp, #56]	; 0x38
 80073fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073fc:	1b5d      	subs	r5, r3, r5
 80073fe:	1e6b      	subs	r3, r5, #1
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	bf43      	ittte	mi
 8007404:	2300      	movmi	r3, #0
 8007406:	f1c5 0801 	rsbmi	r8, r5, #1
 800740a:	9304      	strmi	r3, [sp, #16]
 800740c:	f04f 0800 	movpl.w	r8, #0
 8007410:	f1ba 0f00 	cmp.w	sl, #0
 8007414:	db3b      	blt.n	800748e <_dtoa_r+0x23e>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800741c:	4453      	add	r3, sl
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	2300      	movs	r3, #0
 8007422:	9306      	str	r3, [sp, #24]
 8007424:	9b05      	ldr	r3, [sp, #20]
 8007426:	2b09      	cmp	r3, #9
 8007428:	d869      	bhi.n	80074fe <_dtoa_r+0x2ae>
 800742a:	2b05      	cmp	r3, #5
 800742c:	bfc4      	itt	gt
 800742e:	3b04      	subgt	r3, #4
 8007430:	9305      	strgt	r3, [sp, #20]
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	f1a3 0302 	sub.w	r3, r3, #2
 8007438:	bfcc      	ite	gt
 800743a:	2500      	movgt	r5, #0
 800743c:	2501      	movle	r5, #1
 800743e:	2b03      	cmp	r3, #3
 8007440:	d869      	bhi.n	8007516 <_dtoa_r+0x2c6>
 8007442:	e8df f003 	tbb	[pc, r3]
 8007446:	4e2c      	.short	0x4e2c
 8007448:	5a4c      	.short	0x5a4c
 800744a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800744e:	441d      	add	r5, r3
 8007450:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007454:	2b20      	cmp	r3, #32
 8007456:	bfc1      	itttt	gt
 8007458:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800745c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007460:	fa09 f303 	lslgt.w	r3, r9, r3
 8007464:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007468:	bfda      	itte	le
 800746a:	f1c3 0320 	rsble	r3, r3, #32
 800746e:	fa06 f003 	lslle.w	r0, r6, r3
 8007472:	4318      	orrgt	r0, r3
 8007474:	f7f9 f86e 	bl	8000554 <__aeabi_ui2d>
 8007478:	2301      	movs	r3, #1
 800747a:	4606      	mov	r6, r0
 800747c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007480:	3d01      	subs	r5, #1
 8007482:	9310      	str	r3, [sp, #64]	; 0x40
 8007484:	e771      	b.n	800736a <_dtoa_r+0x11a>
 8007486:	2301      	movs	r3, #1
 8007488:	e7b6      	b.n	80073f8 <_dtoa_r+0x1a8>
 800748a:	900e      	str	r0, [sp, #56]	; 0x38
 800748c:	e7b5      	b.n	80073fa <_dtoa_r+0x1aa>
 800748e:	f1ca 0300 	rsb	r3, sl, #0
 8007492:	9306      	str	r3, [sp, #24]
 8007494:	2300      	movs	r3, #0
 8007496:	eba8 080a 	sub.w	r8, r8, sl
 800749a:	930d      	str	r3, [sp, #52]	; 0x34
 800749c:	e7c2      	b.n	8007424 <_dtoa_r+0x1d4>
 800749e:	2300      	movs	r3, #0
 80074a0:	9308      	str	r3, [sp, #32]
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dc39      	bgt.n	800751c <_dtoa_r+0x2cc>
 80074a8:	f04f 0901 	mov.w	r9, #1
 80074ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80074b0:	464b      	mov	r3, r9
 80074b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80074b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074b8:	2200      	movs	r2, #0
 80074ba:	6042      	str	r2, [r0, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	f102 0614 	add.w	r6, r2, #20
 80074c2:	429e      	cmp	r6, r3
 80074c4:	6841      	ldr	r1, [r0, #4]
 80074c6:	d92f      	bls.n	8007528 <_dtoa_r+0x2d8>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f001 f941 	bl	8008750 <_Balloc>
 80074ce:	9000      	str	r0, [sp, #0]
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d14b      	bne.n	800756c <_dtoa_r+0x31c>
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <_dtoa_r+0x318>)
 80074d6:	4602      	mov	r2, r0
 80074d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074dc:	e6d1      	b.n	8007282 <_dtoa_r+0x32>
 80074de:	2301      	movs	r3, #1
 80074e0:	e7de      	b.n	80074a0 <_dtoa_r+0x250>
 80074e2:	2300      	movs	r3, #0
 80074e4:	9308      	str	r3, [sp, #32]
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	eb0a 0903 	add.w	r9, sl, r3
 80074ec:	f109 0301 	add.w	r3, r9, #1
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	bfb8      	it	lt
 80074f6:	2301      	movlt	r3, #1
 80074f8:	e7dd      	b.n	80074b6 <_dtoa_r+0x266>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e7f2      	b.n	80074e4 <_dtoa_r+0x294>
 80074fe:	2501      	movs	r5, #1
 8007500:	2300      	movs	r3, #0
 8007502:	9305      	str	r3, [sp, #20]
 8007504:	9508      	str	r5, [sp, #32]
 8007506:	f04f 39ff 	mov.w	r9, #4294967295
 800750a:	2200      	movs	r2, #0
 800750c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007510:	2312      	movs	r3, #18
 8007512:	9209      	str	r2, [sp, #36]	; 0x24
 8007514:	e7cf      	b.n	80074b6 <_dtoa_r+0x266>
 8007516:	2301      	movs	r3, #1
 8007518:	9308      	str	r3, [sp, #32]
 800751a:	e7f4      	b.n	8007506 <_dtoa_r+0x2b6>
 800751c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007520:	f8cd 9004 	str.w	r9, [sp, #4]
 8007524:	464b      	mov	r3, r9
 8007526:	e7c6      	b.n	80074b6 <_dtoa_r+0x266>
 8007528:	3101      	adds	r1, #1
 800752a:	6041      	str	r1, [r0, #4]
 800752c:	0052      	lsls	r2, r2, #1
 800752e:	e7c6      	b.n	80074be <_dtoa_r+0x26e>
 8007530:	636f4361 	.word	0x636f4361
 8007534:	3fd287a7 	.word	0x3fd287a7
 8007538:	8b60c8b3 	.word	0x8b60c8b3
 800753c:	3fc68a28 	.word	0x3fc68a28
 8007540:	509f79fb 	.word	0x509f79fb
 8007544:	3fd34413 	.word	0x3fd34413
 8007548:	0800a0de 	.word	0x0800a0de
 800754c:	0800a0f5 	.word	0x0800a0f5
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	0800a0da 	.word	0x0800a0da
 8007558:	0800a0d1 	.word	0x0800a0d1
 800755c:	08009f55 	.word	0x08009f55
 8007560:	3ff80000 	.word	0x3ff80000
 8007564:	0800a2d0 	.word	0x0800a2d0
 8007568:	0800a154 	.word	0x0800a154
 800756c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756e:	9a00      	ldr	r2, [sp, #0]
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	2b0e      	cmp	r3, #14
 8007576:	f200 80ad 	bhi.w	80076d4 <_dtoa_r+0x484>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f000 80aa 	beq.w	80076d4 <_dtoa_r+0x484>
 8007580:	f1ba 0f00 	cmp.w	sl, #0
 8007584:	dd36      	ble.n	80075f4 <_dtoa_r+0x3a4>
 8007586:	4ac3      	ldr	r2, [pc, #780]	; (8007894 <_dtoa_r+0x644>)
 8007588:	f00a 030f 	and.w	r3, sl, #15
 800758c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007590:	ed93 7b00 	vldr	d7, [r3]
 8007594:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007598:	ea4f 172a 	mov.w	r7, sl, asr #4
 800759c:	eeb0 8a47 	vmov.f32	s16, s14
 80075a0:	eef0 8a67 	vmov.f32	s17, s15
 80075a4:	d016      	beq.n	80075d4 <_dtoa_r+0x384>
 80075a6:	4bbc      	ldr	r3, [pc, #752]	; (8007898 <_dtoa_r+0x648>)
 80075a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b0:	f7f9 f974 	bl	800089c <__aeabi_ddiv>
 80075b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b8:	f007 070f 	and.w	r7, r7, #15
 80075bc:	2503      	movs	r5, #3
 80075be:	4eb6      	ldr	r6, [pc, #728]	; (8007898 <_dtoa_r+0x648>)
 80075c0:	b957      	cbnz	r7, 80075d8 <_dtoa_r+0x388>
 80075c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c6:	ec53 2b18 	vmov	r2, r3, d8
 80075ca:	f7f9 f967 	bl	800089c <__aeabi_ddiv>
 80075ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d2:	e029      	b.n	8007628 <_dtoa_r+0x3d8>
 80075d4:	2502      	movs	r5, #2
 80075d6:	e7f2      	b.n	80075be <_dtoa_r+0x36e>
 80075d8:	07f9      	lsls	r1, r7, #31
 80075da:	d508      	bpl.n	80075ee <_dtoa_r+0x39e>
 80075dc:	ec51 0b18 	vmov	r0, r1, d8
 80075e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075e4:	f7f9 f830 	bl	8000648 <__aeabi_dmul>
 80075e8:	ec41 0b18 	vmov	d8, r0, r1
 80075ec:	3501      	adds	r5, #1
 80075ee:	107f      	asrs	r7, r7, #1
 80075f0:	3608      	adds	r6, #8
 80075f2:	e7e5      	b.n	80075c0 <_dtoa_r+0x370>
 80075f4:	f000 80a6 	beq.w	8007744 <_dtoa_r+0x4f4>
 80075f8:	f1ca 0600 	rsb	r6, sl, #0
 80075fc:	4ba5      	ldr	r3, [pc, #660]	; (8007894 <_dtoa_r+0x644>)
 80075fe:	4fa6      	ldr	r7, [pc, #664]	; (8007898 <_dtoa_r+0x648>)
 8007600:	f006 020f 	and.w	r2, r6, #15
 8007604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007610:	f7f9 f81a 	bl	8000648 <__aeabi_dmul>
 8007614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007618:	1136      	asrs	r6, r6, #4
 800761a:	2300      	movs	r3, #0
 800761c:	2502      	movs	r5, #2
 800761e:	2e00      	cmp	r6, #0
 8007620:	f040 8085 	bne.w	800772e <_dtoa_r+0x4de>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1d2      	bne.n	80075ce <_dtoa_r+0x37e>
 8007628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 808c 	beq.w	8007748 <_dtoa_r+0x4f8>
 8007630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007634:	4b99      	ldr	r3, [pc, #612]	; (800789c <_dtoa_r+0x64c>)
 8007636:	2200      	movs	r2, #0
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f9 fa76 	bl	8000b2c <__aeabi_dcmplt>
 8007640:	2800      	cmp	r0, #0
 8007642:	f000 8081 	beq.w	8007748 <_dtoa_r+0x4f8>
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d07d      	beq.n	8007748 <_dtoa_r+0x4f8>
 800764c:	f1b9 0f00 	cmp.w	r9, #0
 8007650:	dd3c      	ble.n	80076cc <_dtoa_r+0x47c>
 8007652:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	4b91      	ldr	r3, [pc, #580]	; (80078a0 <_dtoa_r+0x650>)
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fff2 	bl	8000648 <__aeabi_dmul>
 8007664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007668:	3501      	adds	r5, #1
 800766a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800766e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007672:	4628      	mov	r0, r5
 8007674:	f7f8 ff7e 	bl	8000574 <__aeabi_i2d>
 8007678:	4632      	mov	r2, r6
 800767a:	463b      	mov	r3, r7
 800767c:	f7f8 ffe4 	bl	8000648 <__aeabi_dmul>
 8007680:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <_dtoa_r+0x654>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 fe2a 	bl	80002dc <__adddf3>
 8007688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800768c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007694:	2b00      	cmp	r3, #0
 8007696:	d15c      	bne.n	8007752 <_dtoa_r+0x502>
 8007698:	4b83      	ldr	r3, [pc, #524]	; (80078a8 <_dtoa_r+0x658>)
 800769a:	2200      	movs	r2, #0
 800769c:	4630      	mov	r0, r6
 800769e:	4639      	mov	r1, r7
 80076a0:	f7f8 fe1a 	bl	80002d8 <__aeabi_dsub>
 80076a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076a8:	4606      	mov	r6, r0
 80076aa:	460f      	mov	r7, r1
 80076ac:	f7f9 fa5c 	bl	8000b68 <__aeabi_dcmpgt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f040 8296 	bne.w	8007be2 <_dtoa_r+0x992>
 80076b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076ba:	4630      	mov	r0, r6
 80076bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f9 fa33 	bl	8000b2c <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8288 	bne.w	8007bdc <_dtoa_r+0x98c>
 80076cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f2c0 8158 	blt.w	800798c <_dtoa_r+0x73c>
 80076dc:	f1ba 0f0e 	cmp.w	sl, #14
 80076e0:	f300 8154 	bgt.w	800798c <_dtoa_r+0x73c>
 80076e4:	4b6b      	ldr	r3, [pc, #428]	; (8007894 <_dtoa_r+0x644>)
 80076e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f280 80e3 	bge.w	80078bc <_dtoa_r+0x66c>
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f300 80df 	bgt.w	80078bc <_dtoa_r+0x66c>
 80076fe:	f040 826d 	bne.w	8007bdc <_dtoa_r+0x98c>
 8007702:	4b69      	ldr	r3, [pc, #420]	; (80078a8 <_dtoa_r+0x658>)
 8007704:	2200      	movs	r2, #0
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f8 ff9d 	bl	8000648 <__aeabi_dmul>
 800770e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007712:	f7f9 fa1f 	bl	8000b54 <__aeabi_dcmpge>
 8007716:	9e01      	ldr	r6, [sp, #4]
 8007718:	4637      	mov	r7, r6
 800771a:	2800      	cmp	r0, #0
 800771c:	f040 8243 	bne.w	8007ba6 <_dtoa_r+0x956>
 8007720:	9d00      	ldr	r5, [sp, #0]
 8007722:	2331      	movs	r3, #49	; 0x31
 8007724:	f805 3b01 	strb.w	r3, [r5], #1
 8007728:	f10a 0a01 	add.w	sl, sl, #1
 800772c:	e23f      	b.n	8007bae <_dtoa_r+0x95e>
 800772e:	07f2      	lsls	r2, r6, #31
 8007730:	d505      	bpl.n	800773e <_dtoa_r+0x4ee>
 8007732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007736:	f7f8 ff87 	bl	8000648 <__aeabi_dmul>
 800773a:	3501      	adds	r5, #1
 800773c:	2301      	movs	r3, #1
 800773e:	1076      	asrs	r6, r6, #1
 8007740:	3708      	adds	r7, #8
 8007742:	e76c      	b.n	800761e <_dtoa_r+0x3ce>
 8007744:	2502      	movs	r5, #2
 8007746:	e76f      	b.n	8007628 <_dtoa_r+0x3d8>
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	f8cd a01c 	str.w	sl, [sp, #28]
 800774e:	930c      	str	r3, [sp, #48]	; 0x30
 8007750:	e78d      	b.n	800766e <_dtoa_r+0x41e>
 8007752:	9900      	ldr	r1, [sp, #0]
 8007754:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007758:	4b4e      	ldr	r3, [pc, #312]	; (8007894 <_dtoa_r+0x644>)
 800775a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800775e:	4401      	add	r1, r0
 8007760:	9102      	str	r1, [sp, #8]
 8007762:	9908      	ldr	r1, [sp, #32]
 8007764:	eeb0 8a47 	vmov.f32	s16, s14
 8007768:	eef0 8a67 	vmov.f32	s17, s15
 800776c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007774:	2900      	cmp	r1, #0
 8007776:	d045      	beq.n	8007804 <_dtoa_r+0x5b4>
 8007778:	494c      	ldr	r1, [pc, #304]	; (80078ac <_dtoa_r+0x65c>)
 800777a:	2000      	movs	r0, #0
 800777c:	f7f9 f88e 	bl	800089c <__aeabi_ddiv>
 8007780:	ec53 2b18 	vmov	r2, r3, d8
 8007784:	f7f8 fda8 	bl	80002d8 <__aeabi_dsub>
 8007788:	9d00      	ldr	r5, [sp, #0]
 800778a:	ec41 0b18 	vmov	d8, r0, r1
 800778e:	4639      	mov	r1, r7
 8007790:	4630      	mov	r0, r6
 8007792:	f7f9 fa09 	bl	8000ba8 <__aeabi_d2iz>
 8007796:	900c      	str	r0, [sp, #48]	; 0x30
 8007798:	f7f8 feec 	bl	8000574 <__aeabi_i2d>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fd98 	bl	80002d8 <__aeabi_dsub>
 80077a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077aa:	3330      	adds	r3, #48	; 0x30
 80077ac:	f805 3b01 	strb.w	r3, [r5], #1
 80077b0:	ec53 2b18 	vmov	r2, r3, d8
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	f7f9 f9b8 	bl	8000b2c <__aeabi_dcmplt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d165      	bne.n	800788c <_dtoa_r+0x63c>
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	4935      	ldr	r1, [pc, #212]	; (800789c <_dtoa_r+0x64c>)
 80077c6:	2000      	movs	r0, #0
 80077c8:	f7f8 fd86 	bl	80002d8 <__aeabi_dsub>
 80077cc:	ec53 2b18 	vmov	r2, r3, d8
 80077d0:	f7f9 f9ac 	bl	8000b2c <__aeabi_dcmplt>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f040 80b9 	bne.w	800794c <_dtoa_r+0x6fc>
 80077da:	9b02      	ldr	r3, [sp, #8]
 80077dc:	429d      	cmp	r5, r3
 80077de:	f43f af75 	beq.w	80076cc <_dtoa_r+0x47c>
 80077e2:	4b2f      	ldr	r3, [pc, #188]	; (80078a0 <_dtoa_r+0x650>)
 80077e4:	ec51 0b18 	vmov	r0, r1, d8
 80077e8:	2200      	movs	r2, #0
 80077ea:	f7f8 ff2d 	bl	8000648 <__aeabi_dmul>
 80077ee:	4b2c      	ldr	r3, [pc, #176]	; (80078a0 <_dtoa_r+0x650>)
 80077f0:	ec41 0b18 	vmov	d8, r0, r1
 80077f4:	2200      	movs	r2, #0
 80077f6:	4630      	mov	r0, r6
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f8 ff25 	bl	8000648 <__aeabi_dmul>
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	e7c4      	b.n	800778e <_dtoa_r+0x53e>
 8007804:	ec51 0b17 	vmov	r0, r1, d7
 8007808:	f7f8 ff1e 	bl	8000648 <__aeabi_dmul>
 800780c:	9b02      	ldr	r3, [sp, #8]
 800780e:	9d00      	ldr	r5, [sp, #0]
 8007810:	930c      	str	r3, [sp, #48]	; 0x30
 8007812:	ec41 0b18 	vmov	d8, r0, r1
 8007816:	4639      	mov	r1, r7
 8007818:	4630      	mov	r0, r6
 800781a:	f7f9 f9c5 	bl	8000ba8 <__aeabi_d2iz>
 800781e:	9011      	str	r0, [sp, #68]	; 0x44
 8007820:	f7f8 fea8 	bl	8000574 <__aeabi_i2d>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fd54 	bl	80002d8 <__aeabi_dsub>
 8007830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007832:	3330      	adds	r3, #48	; 0x30
 8007834:	f805 3b01 	strb.w	r3, [r5], #1
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	429d      	cmp	r5, r3
 800783c:	4606      	mov	r6, r0
 800783e:	460f      	mov	r7, r1
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	d134      	bne.n	80078b0 <_dtoa_r+0x660>
 8007846:	4b19      	ldr	r3, [pc, #100]	; (80078ac <_dtoa_r+0x65c>)
 8007848:	ec51 0b18 	vmov	r0, r1, d8
 800784c:	f7f8 fd46 	bl	80002dc <__adddf3>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f9 f986 	bl	8000b68 <__aeabi_dcmpgt>
 800785c:	2800      	cmp	r0, #0
 800785e:	d175      	bne.n	800794c <_dtoa_r+0x6fc>
 8007860:	ec53 2b18 	vmov	r2, r3, d8
 8007864:	4911      	ldr	r1, [pc, #68]	; (80078ac <_dtoa_r+0x65c>)
 8007866:	2000      	movs	r0, #0
 8007868:	f7f8 fd36 	bl	80002d8 <__aeabi_dsub>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7f9 f95a 	bl	8000b2c <__aeabi_dcmplt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f43f af27 	beq.w	80076cc <_dtoa_r+0x47c>
 800787e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007880:	1e6b      	subs	r3, r5, #1
 8007882:	930c      	str	r3, [sp, #48]	; 0x30
 8007884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007888:	2b30      	cmp	r3, #48	; 0x30
 800788a:	d0f8      	beq.n	800787e <_dtoa_r+0x62e>
 800788c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007890:	e04a      	b.n	8007928 <_dtoa_r+0x6d8>
 8007892:	bf00      	nop
 8007894:	0800a2d0 	.word	0x0800a2d0
 8007898:	0800a2a8 	.word	0x0800a2a8
 800789c:	3ff00000 	.word	0x3ff00000
 80078a0:	40240000 	.word	0x40240000
 80078a4:	401c0000 	.word	0x401c0000
 80078a8:	40140000 	.word	0x40140000
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	4baf      	ldr	r3, [pc, #700]	; (8007b70 <_dtoa_r+0x920>)
 80078b2:	f7f8 fec9 	bl	8000648 <__aeabi_dmul>
 80078b6:	4606      	mov	r6, r0
 80078b8:	460f      	mov	r7, r1
 80078ba:	e7ac      	b.n	8007816 <_dtoa_r+0x5c6>
 80078bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078c0:	9d00      	ldr	r5, [sp, #0]
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 ffe7 	bl	800089c <__aeabi_ddiv>
 80078ce:	f7f9 f96b 	bl	8000ba8 <__aeabi_d2iz>
 80078d2:	9002      	str	r0, [sp, #8]
 80078d4:	f7f8 fe4e 	bl	8000574 <__aeabi_i2d>
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	f7f8 feb4 	bl	8000648 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f8 fcf6 	bl	80002d8 <__aeabi_dsub>
 80078ec:	9e02      	ldr	r6, [sp, #8]
 80078ee:	9f01      	ldr	r7, [sp, #4]
 80078f0:	3630      	adds	r6, #48	; 0x30
 80078f2:	f805 6b01 	strb.w	r6, [r5], #1
 80078f6:	9e00      	ldr	r6, [sp, #0]
 80078f8:	1bae      	subs	r6, r5, r6
 80078fa:	42b7      	cmp	r7, r6
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	d137      	bne.n	8007972 <_dtoa_r+0x722>
 8007902:	f7f8 fceb 	bl	80002dc <__adddf3>
 8007906:	4642      	mov	r2, r8
 8007908:	464b      	mov	r3, r9
 800790a:	4606      	mov	r6, r0
 800790c:	460f      	mov	r7, r1
 800790e:	f7f9 f92b 	bl	8000b68 <__aeabi_dcmpgt>
 8007912:	b9c8      	cbnz	r0, 8007948 <_dtoa_r+0x6f8>
 8007914:	4642      	mov	r2, r8
 8007916:	464b      	mov	r3, r9
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f7f9 f8fc 	bl	8000b18 <__aeabi_dcmpeq>
 8007920:	b110      	cbz	r0, 8007928 <_dtoa_r+0x6d8>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	07d9      	lsls	r1, r3, #31
 8007926:	d40f      	bmi.n	8007948 <_dtoa_r+0x6f8>
 8007928:	4620      	mov	r0, r4
 800792a:	4659      	mov	r1, fp
 800792c:	f000 ff50 	bl	80087d0 <_Bfree>
 8007930:	2300      	movs	r3, #0
 8007932:	702b      	strb	r3, [r5, #0]
 8007934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007936:	f10a 0001 	add.w	r0, sl, #1
 800793a:	6018      	str	r0, [r3, #0]
 800793c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800793e:	2b00      	cmp	r3, #0
 8007940:	f43f acd8 	beq.w	80072f4 <_dtoa_r+0xa4>
 8007944:	601d      	str	r5, [r3, #0]
 8007946:	e4d5      	b.n	80072f4 <_dtoa_r+0xa4>
 8007948:	f8cd a01c 	str.w	sl, [sp, #28]
 800794c:	462b      	mov	r3, r5
 800794e:	461d      	mov	r5, r3
 8007950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007954:	2a39      	cmp	r2, #57	; 0x39
 8007956:	d108      	bne.n	800796a <_dtoa_r+0x71a>
 8007958:	9a00      	ldr	r2, [sp, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d1f7      	bne.n	800794e <_dtoa_r+0x6fe>
 800795e:	9a07      	ldr	r2, [sp, #28]
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	3201      	adds	r2, #1
 8007964:	9207      	str	r2, [sp, #28]
 8007966:	2230      	movs	r2, #48	; 0x30
 8007968:	700a      	strb	r2, [r1, #0]
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	3201      	adds	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e78c      	b.n	800788c <_dtoa_r+0x63c>
 8007972:	4b7f      	ldr	r3, [pc, #508]	; (8007b70 <_dtoa_r+0x920>)
 8007974:	2200      	movs	r2, #0
 8007976:	f7f8 fe67 	bl	8000648 <__aeabi_dmul>
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	4606      	mov	r6, r0
 8007980:	460f      	mov	r7, r1
 8007982:	f7f9 f8c9 	bl	8000b18 <__aeabi_dcmpeq>
 8007986:	2800      	cmp	r0, #0
 8007988:	d09b      	beq.n	80078c2 <_dtoa_r+0x672>
 800798a:	e7cd      	b.n	8007928 <_dtoa_r+0x6d8>
 800798c:	9a08      	ldr	r2, [sp, #32]
 800798e:	2a00      	cmp	r2, #0
 8007990:	f000 80c4 	beq.w	8007b1c <_dtoa_r+0x8cc>
 8007994:	9a05      	ldr	r2, [sp, #20]
 8007996:	2a01      	cmp	r2, #1
 8007998:	f300 80a8 	bgt.w	8007aec <_dtoa_r+0x89c>
 800799c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800799e:	2a00      	cmp	r2, #0
 80079a0:	f000 80a0 	beq.w	8007ae4 <_dtoa_r+0x894>
 80079a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079a8:	9e06      	ldr	r6, [sp, #24]
 80079aa:	4645      	mov	r5, r8
 80079ac:	9a04      	ldr	r2, [sp, #16]
 80079ae:	2101      	movs	r1, #1
 80079b0:	441a      	add	r2, r3
 80079b2:	4620      	mov	r0, r4
 80079b4:	4498      	add	r8, r3
 80079b6:	9204      	str	r2, [sp, #16]
 80079b8:	f001 f810 	bl	80089dc <__i2b>
 80079bc:	4607      	mov	r7, r0
 80079be:	2d00      	cmp	r5, #0
 80079c0:	dd0b      	ble.n	80079da <_dtoa_r+0x78a>
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd08      	ble.n	80079da <_dtoa_r+0x78a>
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	bfa8      	it	ge
 80079ce:	462b      	movge	r3, r5
 80079d0:	eba8 0803 	sub.w	r8, r8, r3
 80079d4:	1aed      	subs	r5, r5, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	b1fb      	cbz	r3, 8007a1e <_dtoa_r+0x7ce>
 80079de:	9b08      	ldr	r3, [sp, #32]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 809f 	beq.w	8007b24 <_dtoa_r+0x8d4>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	dd11      	ble.n	8007a0e <_dtoa_r+0x7be>
 80079ea:	4639      	mov	r1, r7
 80079ec:	4632      	mov	r2, r6
 80079ee:	4620      	mov	r0, r4
 80079f0:	f001 f8b0 	bl	8008b54 <__pow5mult>
 80079f4:	465a      	mov	r2, fp
 80079f6:	4601      	mov	r1, r0
 80079f8:	4607      	mov	r7, r0
 80079fa:	4620      	mov	r0, r4
 80079fc:	f001 f804 	bl	8008a08 <__multiply>
 8007a00:	4659      	mov	r1, fp
 8007a02:	9007      	str	r0, [sp, #28]
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fee3 	bl	80087d0 <_Bfree>
 8007a0a:	9b07      	ldr	r3, [sp, #28]
 8007a0c:	469b      	mov	fp, r3
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	1b9a      	subs	r2, r3, r6
 8007a12:	d004      	beq.n	8007a1e <_dtoa_r+0x7ce>
 8007a14:	4659      	mov	r1, fp
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 f89c 	bl	8008b54 <__pow5mult>
 8007a1c:	4683      	mov	fp, r0
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 ffdb 	bl	80089dc <__i2b>
 8007a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	dd7c      	ble.n	8007b28 <_dtoa_r+0x8d8>
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4601      	mov	r1, r0
 8007a32:	4620      	mov	r0, r4
 8007a34:	f001 f88e 	bl	8008b54 <__pow5mult>
 8007a38:	9b05      	ldr	r3, [sp, #20]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	dd76      	ble.n	8007b2e <_dtoa_r+0x8de>
 8007a40:	2300      	movs	r3, #0
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	6933      	ldr	r3, [r6, #16]
 8007a46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a4a:	6918      	ldr	r0, [r3, #16]
 8007a4c:	f000 ff76 	bl	800893c <__hi0bits>
 8007a50:	f1c0 0020 	rsb	r0, r0, #32
 8007a54:	9b04      	ldr	r3, [sp, #16]
 8007a56:	4418      	add	r0, r3
 8007a58:	f010 001f 	ands.w	r0, r0, #31
 8007a5c:	f000 8086 	beq.w	8007b6c <_dtoa_r+0x91c>
 8007a60:	f1c0 0320 	rsb	r3, r0, #32
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	dd7f      	ble.n	8007b68 <_dtoa_r+0x918>
 8007a68:	f1c0 001c 	rsb	r0, r0, #28
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	4403      	add	r3, r0
 8007a70:	4480      	add	r8, r0
 8007a72:	4405      	add	r5, r0
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	f1b8 0f00 	cmp.w	r8, #0
 8007a7a:	dd05      	ble.n	8007a88 <_dtoa_r+0x838>
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	4642      	mov	r2, r8
 8007a80:	4620      	mov	r0, r4
 8007a82:	f001 f8c1 	bl	8008c08 <__lshift>
 8007a86:	4683      	mov	fp, r0
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd05      	ble.n	8007a9a <_dtoa_r+0x84a>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	461a      	mov	r2, r3
 8007a92:	4620      	mov	r0, r4
 8007a94:	f001 f8b8 	bl	8008c08 <__lshift>
 8007a98:	4606      	mov	r6, r0
 8007a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d069      	beq.n	8007b74 <_dtoa_r+0x924>
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4658      	mov	r0, fp
 8007aa4:	f001 f91c 	bl	8008ce0 <__mcmp>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	da63      	bge.n	8007b74 <_dtoa_r+0x924>
 8007aac:	2300      	movs	r3, #0
 8007aae:	4659      	mov	r1, fp
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 feae 	bl	8008814 <__multadd>
 8007ab8:	9b08      	ldr	r3, [sp, #32]
 8007aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007abe:	4683      	mov	fp, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 818f 	beq.w	8007de4 <_dtoa_r+0xb94>
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fea1 	bl	8008814 <__multadd>
 8007ad2:	f1b9 0f00 	cmp.w	r9, #0
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	f300 808e 	bgt.w	8007bf8 <_dtoa_r+0x9a8>
 8007adc:	9b05      	ldr	r3, [sp, #20]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	dc50      	bgt.n	8007b84 <_dtoa_r+0x934>
 8007ae2:	e089      	b.n	8007bf8 <_dtoa_r+0x9a8>
 8007ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007aea:	e75d      	b.n	80079a8 <_dtoa_r+0x758>
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	1e5e      	subs	r6, r3, #1
 8007af0:	9b06      	ldr	r3, [sp, #24]
 8007af2:	42b3      	cmp	r3, r6
 8007af4:	bfbf      	itttt	lt
 8007af6:	9b06      	ldrlt	r3, [sp, #24]
 8007af8:	9606      	strlt	r6, [sp, #24]
 8007afa:	1af2      	sublt	r2, r6, r3
 8007afc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007afe:	bfb6      	itet	lt
 8007b00:	189b      	addlt	r3, r3, r2
 8007b02:	1b9e      	subge	r6, r3, r6
 8007b04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	bfb8      	it	lt
 8007b0a:	2600      	movlt	r6, #0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfb5      	itete	lt
 8007b10:	eba8 0503 	sublt.w	r5, r8, r3
 8007b14:	9b01      	ldrge	r3, [sp, #4]
 8007b16:	2300      	movlt	r3, #0
 8007b18:	4645      	movge	r5, r8
 8007b1a:	e747      	b.n	80079ac <_dtoa_r+0x75c>
 8007b1c:	9e06      	ldr	r6, [sp, #24]
 8007b1e:	9f08      	ldr	r7, [sp, #32]
 8007b20:	4645      	mov	r5, r8
 8007b22:	e74c      	b.n	80079be <_dtoa_r+0x76e>
 8007b24:	9a06      	ldr	r2, [sp, #24]
 8007b26:	e775      	b.n	8007a14 <_dtoa_r+0x7c4>
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	dc18      	bgt.n	8007b60 <_dtoa_r+0x910>
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	b9b3      	cbnz	r3, 8007b60 <_dtoa_r+0x910>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b38:	b9a3      	cbnz	r3, 8007b64 <_dtoa_r+0x914>
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b40:	0d1b      	lsrs	r3, r3, #20
 8007b42:	051b      	lsls	r3, r3, #20
 8007b44:	b12b      	cbz	r3, 8007b52 <_dtoa_r+0x902>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	f108 0801 	add.w	r8, r8, #1
 8007b50:	2301      	movs	r3, #1
 8007b52:	9306      	str	r3, [sp, #24]
 8007b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f47f af74 	bne.w	8007a44 <_dtoa_r+0x7f4>
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e779      	b.n	8007a54 <_dtoa_r+0x804>
 8007b60:	2300      	movs	r3, #0
 8007b62:	e7f6      	b.n	8007b52 <_dtoa_r+0x902>
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	e7f4      	b.n	8007b52 <_dtoa_r+0x902>
 8007b68:	d085      	beq.n	8007a76 <_dtoa_r+0x826>
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	301c      	adds	r0, #28
 8007b6e:	e77d      	b.n	8007a6c <_dtoa_r+0x81c>
 8007b70:	40240000 	.word	0x40240000
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dc38      	bgt.n	8007bec <_dtoa_r+0x99c>
 8007b7a:	9b05      	ldr	r3, [sp, #20]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	dd35      	ble.n	8007bec <_dtoa_r+0x99c>
 8007b80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b84:	f1b9 0f00 	cmp.w	r9, #0
 8007b88:	d10d      	bne.n	8007ba6 <_dtoa_r+0x956>
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	2205      	movs	r2, #5
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fe3f 	bl	8008814 <__multadd>
 8007b96:	4601      	mov	r1, r0
 8007b98:	4606      	mov	r6, r0
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f001 f8a0 	bl	8008ce0 <__mcmp>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f73f adbd 	bgt.w	8007720 <_dtoa_r+0x4d0>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	9d00      	ldr	r5, [sp, #0]
 8007baa:	ea6f 0a03 	mvn.w	sl, r3
 8007bae:	f04f 0800 	mov.w	r8, #0
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fe0b 	bl	80087d0 <_Bfree>
 8007bba:	2f00      	cmp	r7, #0
 8007bbc:	f43f aeb4 	beq.w	8007928 <_dtoa_r+0x6d8>
 8007bc0:	f1b8 0f00 	cmp.w	r8, #0
 8007bc4:	d005      	beq.n	8007bd2 <_dtoa_r+0x982>
 8007bc6:	45b8      	cmp	r8, r7
 8007bc8:	d003      	beq.n	8007bd2 <_dtoa_r+0x982>
 8007bca:	4641      	mov	r1, r8
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fdff 	bl	80087d0 <_Bfree>
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fdfb 	bl	80087d0 <_Bfree>
 8007bda:	e6a5      	b.n	8007928 <_dtoa_r+0x6d8>
 8007bdc:	2600      	movs	r6, #0
 8007bde:	4637      	mov	r7, r6
 8007be0:	e7e1      	b.n	8007ba6 <_dtoa_r+0x956>
 8007be2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007be4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007be8:	4637      	mov	r7, r6
 8007bea:	e599      	b.n	8007720 <_dtoa_r+0x4d0>
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80fd 	beq.w	8007df2 <_dtoa_r+0xba2>
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	dd05      	ble.n	8007c08 <_dtoa_r+0x9b8>
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4620      	mov	r0, r4
 8007c02:	f001 f801 	bl	8008c08 <__lshift>
 8007c06:	4607      	mov	r7, r0
 8007c08:	9b06      	ldr	r3, [sp, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d05c      	beq.n	8007cc8 <_dtoa_r+0xa78>
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fd9d 	bl	8008750 <_Balloc>
 8007c16:	4605      	mov	r5, r0
 8007c18:	b928      	cbnz	r0, 8007c26 <_dtoa_r+0x9d6>
 8007c1a:	4b80      	ldr	r3, [pc, #512]	; (8007e1c <_dtoa_r+0xbcc>)
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c22:	f7ff bb2e 	b.w	8007282 <_dtoa_r+0x32>
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	3202      	adds	r2, #2
 8007c2a:	0092      	lsls	r2, r2, #2
 8007c2c:	f107 010c 	add.w	r1, r7, #12
 8007c30:	300c      	adds	r0, #12
 8007c32:	f000 fd7f 	bl	8008734 <memcpy>
 8007c36:	2201      	movs	r2, #1
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 ffe4 	bl	8008c08 <__lshift>
 8007c40:	9b00      	ldr	r3, [sp, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	444b      	add	r3, r9
 8007c4a:	9307      	str	r3, [sp, #28]
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	46b8      	mov	r8, r7
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	4607      	mov	r7, r0
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4658      	mov	r0, fp
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	f7ff fa67 	bl	8007134 <quorem>
 8007c66:	4603      	mov	r3, r0
 8007c68:	3330      	adds	r3, #48	; 0x30
 8007c6a:	9004      	str	r0, [sp, #16]
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	4658      	mov	r0, fp
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	f001 f835 	bl	8008ce0 <__mcmp>
 8007c76:	463a      	mov	r2, r7
 8007c78:	4681      	mov	r9, r0
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f001 f84b 	bl	8008d18 <__mdiff>
 8007c82:	68c2      	ldr	r2, [r0, #12]
 8007c84:	9b08      	ldr	r3, [sp, #32]
 8007c86:	4605      	mov	r5, r0
 8007c88:	bb02      	cbnz	r2, 8007ccc <_dtoa_r+0xa7c>
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	f001 f827 	bl	8008ce0 <__mcmp>
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	4602      	mov	r2, r0
 8007c96:	4629      	mov	r1, r5
 8007c98:	4620      	mov	r0, r4
 8007c9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c9e:	f000 fd97 	bl	80087d0 <_Bfree>
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca6:	9d01      	ldr	r5, [sp, #4]
 8007ca8:	ea43 0102 	orr.w	r1, r3, r2
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	d10d      	bne.n	8007cd0 <_dtoa_r+0xa80>
 8007cb4:	2b39      	cmp	r3, #57	; 0x39
 8007cb6:	d029      	beq.n	8007d0c <_dtoa_r+0xabc>
 8007cb8:	f1b9 0f00 	cmp.w	r9, #0
 8007cbc:	dd01      	ble.n	8007cc2 <_dtoa_r+0xa72>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	3331      	adds	r3, #49	; 0x31
 8007cc2:	9a02      	ldr	r2, [sp, #8]
 8007cc4:	7013      	strb	r3, [r2, #0]
 8007cc6:	e774      	b.n	8007bb2 <_dtoa_r+0x962>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	e7b9      	b.n	8007c40 <_dtoa_r+0x9f0>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	e7e2      	b.n	8007c96 <_dtoa_r+0xa46>
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	db06      	blt.n	8007ce4 <_dtoa_r+0xa94>
 8007cd6:	9905      	ldr	r1, [sp, #20]
 8007cd8:	ea41 0909 	orr.w	r9, r1, r9
 8007cdc:	9906      	ldr	r1, [sp, #24]
 8007cde:	ea59 0101 	orrs.w	r1, r9, r1
 8007ce2:	d120      	bne.n	8007d26 <_dtoa_r+0xad6>
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	ddec      	ble.n	8007cc2 <_dtoa_r+0xa72>
 8007ce8:	4659      	mov	r1, fp
 8007cea:	2201      	movs	r2, #1
 8007cec:	4620      	mov	r0, r4
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	f000 ff8a 	bl	8008c08 <__lshift>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4683      	mov	fp, r0
 8007cf8:	f000 fff2 	bl	8008ce0 <__mcmp>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	dc02      	bgt.n	8007d08 <_dtoa_r+0xab8>
 8007d02:	d1de      	bne.n	8007cc2 <_dtoa_r+0xa72>
 8007d04:	07da      	lsls	r2, r3, #31
 8007d06:	d5dc      	bpl.n	8007cc2 <_dtoa_r+0xa72>
 8007d08:	2b39      	cmp	r3, #57	; 0x39
 8007d0a:	d1d8      	bne.n	8007cbe <_dtoa_r+0xa6e>
 8007d0c:	9a02      	ldr	r2, [sp, #8]
 8007d0e:	2339      	movs	r3, #57	; 0x39
 8007d10:	7013      	strb	r3, [r2, #0]
 8007d12:	462b      	mov	r3, r5
 8007d14:	461d      	mov	r5, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d1c:	2a39      	cmp	r2, #57	; 0x39
 8007d1e:	d050      	beq.n	8007dc2 <_dtoa_r+0xb72>
 8007d20:	3201      	adds	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e745      	b.n	8007bb2 <_dtoa_r+0x962>
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	dd03      	ble.n	8007d32 <_dtoa_r+0xae2>
 8007d2a:	2b39      	cmp	r3, #57	; 0x39
 8007d2c:	d0ee      	beq.n	8007d0c <_dtoa_r+0xabc>
 8007d2e:	3301      	adds	r3, #1
 8007d30:	e7c7      	b.n	8007cc2 <_dtoa_r+0xa72>
 8007d32:	9a01      	ldr	r2, [sp, #4]
 8007d34:	9907      	ldr	r1, [sp, #28]
 8007d36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d3a:	428a      	cmp	r2, r1
 8007d3c:	d02a      	beq.n	8007d94 <_dtoa_r+0xb44>
 8007d3e:	4659      	mov	r1, fp
 8007d40:	2300      	movs	r3, #0
 8007d42:	220a      	movs	r2, #10
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 fd65 	bl	8008814 <__multadd>
 8007d4a:	45b8      	cmp	r8, r7
 8007d4c:	4683      	mov	fp, r0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	f04f 020a 	mov.w	r2, #10
 8007d56:	4641      	mov	r1, r8
 8007d58:	4620      	mov	r0, r4
 8007d5a:	d107      	bne.n	8007d6c <_dtoa_r+0xb1c>
 8007d5c:	f000 fd5a 	bl	8008814 <__multadd>
 8007d60:	4680      	mov	r8, r0
 8007d62:	4607      	mov	r7, r0
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	e775      	b.n	8007c58 <_dtoa_r+0xa08>
 8007d6c:	f000 fd52 	bl	8008814 <__multadd>
 8007d70:	4639      	mov	r1, r7
 8007d72:	4680      	mov	r8, r0
 8007d74:	2300      	movs	r3, #0
 8007d76:	220a      	movs	r2, #10
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fd4b 	bl	8008814 <__multadd>
 8007d7e:	4607      	mov	r7, r0
 8007d80:	e7f0      	b.n	8007d64 <_dtoa_r+0xb14>
 8007d82:	f1b9 0f00 	cmp.w	r9, #0
 8007d86:	9a00      	ldr	r2, [sp, #0]
 8007d88:	bfcc      	ite	gt
 8007d8a:	464d      	movgt	r5, r9
 8007d8c:	2501      	movle	r5, #1
 8007d8e:	4415      	add	r5, r2
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	4659      	mov	r1, fp
 8007d96:	2201      	movs	r2, #1
 8007d98:	4620      	mov	r0, r4
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	f000 ff34 	bl	8008c08 <__lshift>
 8007da0:	4631      	mov	r1, r6
 8007da2:	4683      	mov	fp, r0
 8007da4:	f000 ff9c 	bl	8008ce0 <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	dcb2      	bgt.n	8007d12 <_dtoa_r+0xac2>
 8007dac:	d102      	bne.n	8007db4 <_dtoa_r+0xb64>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	07db      	lsls	r3, r3, #31
 8007db2:	d4ae      	bmi.n	8007d12 <_dtoa_r+0xac2>
 8007db4:	462b      	mov	r3, r5
 8007db6:	461d      	mov	r5, r3
 8007db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dbc:	2a30      	cmp	r2, #48	; 0x30
 8007dbe:	d0fa      	beq.n	8007db6 <_dtoa_r+0xb66>
 8007dc0:	e6f7      	b.n	8007bb2 <_dtoa_r+0x962>
 8007dc2:	9a00      	ldr	r2, [sp, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d1a5      	bne.n	8007d14 <_dtoa_r+0xac4>
 8007dc8:	f10a 0a01 	add.w	sl, sl, #1
 8007dcc:	2331      	movs	r3, #49	; 0x31
 8007dce:	e779      	b.n	8007cc4 <_dtoa_r+0xa74>
 8007dd0:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <_dtoa_r+0xbd0>)
 8007dd2:	f7ff baaf 	b.w	8007334 <_dtoa_r+0xe4>
 8007dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f47f aa86 	bne.w	80072ea <_dtoa_r+0x9a>
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <_dtoa_r+0xbd4>)
 8007de0:	f7ff baa8 	b.w	8007334 <_dtoa_r+0xe4>
 8007de4:	f1b9 0f00 	cmp.w	r9, #0
 8007de8:	dc03      	bgt.n	8007df2 <_dtoa_r+0xba2>
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	f73f aec9 	bgt.w	8007b84 <_dtoa_r+0x934>
 8007df2:	9d00      	ldr	r5, [sp, #0]
 8007df4:	4631      	mov	r1, r6
 8007df6:	4658      	mov	r0, fp
 8007df8:	f7ff f99c 	bl	8007134 <quorem>
 8007dfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e00:	f805 3b01 	strb.w	r3, [r5], #1
 8007e04:	9a00      	ldr	r2, [sp, #0]
 8007e06:	1aaa      	subs	r2, r5, r2
 8007e08:	4591      	cmp	r9, r2
 8007e0a:	ddba      	ble.n	8007d82 <_dtoa_r+0xb32>
 8007e0c:	4659      	mov	r1, fp
 8007e0e:	2300      	movs	r3, #0
 8007e10:	220a      	movs	r2, #10
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fcfe 	bl	8008814 <__multadd>
 8007e18:	4683      	mov	fp, r0
 8007e1a:	e7eb      	b.n	8007df4 <_dtoa_r+0xba4>
 8007e1c:	0800a154 	.word	0x0800a154
 8007e20:	08009f54 	.word	0x08009f54
 8007e24:	0800a0d1 	.word	0x0800a0d1

08007e28 <std>:
 8007e28:	2300      	movs	r3, #0
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e36:	6083      	str	r3, [r0, #8]
 8007e38:	8181      	strh	r1, [r0, #12]
 8007e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e3c:	81c2      	strh	r2, [r0, #14]
 8007e3e:	6183      	str	r3, [r0, #24]
 8007e40:	4619      	mov	r1, r3
 8007e42:	2208      	movs	r2, #8
 8007e44:	305c      	adds	r0, #92	; 0x5c
 8007e46:	f7fd fc01 	bl	800564c <memset>
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x38>)
 8007e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <std+0x3c>)
 8007e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <std+0x40>)
 8007e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x44>)
 8007e58:	6224      	str	r4, [r4, #32]
 8007e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	080097d9 	.word	0x080097d9
 8007e64:	080097fb 	.word	0x080097fb
 8007e68:	08009833 	.word	0x08009833
 8007e6c:	08009857 	.word	0x08009857

08007e70 <_cleanup_r>:
 8007e70:	4901      	ldr	r1, [pc, #4]	; (8007e78 <_cleanup_r+0x8>)
 8007e72:	f000 b8af 	b.w	8007fd4 <_fwalk_reent>
 8007e76:	bf00      	nop
 8007e78:	08009bad 	.word	0x08009bad

08007e7c <__sfmoreglue>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	1e4a      	subs	r2, r1, #1
 8007e80:	2568      	movs	r5, #104	; 0x68
 8007e82:	4355      	muls	r5, r2
 8007e84:	460e      	mov	r6, r1
 8007e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e8a:	f001 f97b 	bl	8009184 <_malloc_r>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	b140      	cbz	r0, 8007ea4 <__sfmoreglue+0x28>
 8007e92:	2100      	movs	r1, #0
 8007e94:	e9c0 1600 	strd	r1, r6, [r0]
 8007e98:	300c      	adds	r0, #12
 8007e9a:	60a0      	str	r0, [r4, #8]
 8007e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ea0:	f7fd fbd4 	bl	800564c <memset>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}

08007ea8 <__sfp_lock_acquire>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_acquire+0x8>)
 8007eaa:	f000 bc26 	b.w	80086fa <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000318 	.word	0x20000318

08007eb4 <__sfp_lock_release>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sfp_lock_release+0x8>)
 8007eb6:	f000 bc21 	b.w	80086fc <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000318 	.word	0x20000318

08007ec0 <__sinit_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sinit_lock_acquire+0x8>)
 8007ec2:	f000 bc1a 	b.w	80086fa <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000313 	.word	0x20000313

08007ecc <__sinit_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__sinit_lock_release+0x8>)
 8007ece:	f000 bc15 	b.w	80086fc <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20000313 	.word	0x20000313

08007ed8 <__sinit>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	f7ff fff0 	bl	8007ec0 <__sinit_lock_acquire>
 8007ee0:	69a3      	ldr	r3, [r4, #24]
 8007ee2:	b11b      	cbz	r3, 8007eec <__sinit+0x14>
 8007ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee8:	f7ff bff0 	b.w	8007ecc <__sinit_lock_release>
 8007eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <__sinit+0x68>)
 8007ef4:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <__sinit+0x6c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	bf04      	itt	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	61a3      	streq	r3, [r4, #24]
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f820 	bl	8007f48 <__sfp>
 8007f08:	6060      	str	r0, [r4, #4]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f81c 	bl	8007f48 <__sfp>
 8007f10:	60a0      	str	r0, [r4, #8]
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f818 	bl	8007f48 <__sfp>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	60e0      	str	r0, [r4, #12]
 8007f1c:	2104      	movs	r1, #4
 8007f1e:	6860      	ldr	r0, [r4, #4]
 8007f20:	f7ff ff82 	bl	8007e28 <std>
 8007f24:	68a0      	ldr	r0, [r4, #8]
 8007f26:	2201      	movs	r2, #1
 8007f28:	2109      	movs	r1, #9
 8007f2a:	f7ff ff7d 	bl	8007e28 <std>
 8007f2e:	68e0      	ldr	r0, [r4, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	2112      	movs	r1, #18
 8007f34:	f7ff ff78 	bl	8007e28 <std>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61a3      	str	r3, [r4, #24]
 8007f3c:	e7d2      	b.n	8007ee4 <__sinit+0xc>
 8007f3e:	bf00      	nop
 8007f40:	08009f40 	.word	0x08009f40
 8007f44:	08007e71 	.word	0x08007e71

08007f48 <__sfp>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	f7ff ffac 	bl	8007ea8 <__sfp_lock_acquire>
 8007f50:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <__sfp+0x84>)
 8007f52:	681e      	ldr	r6, [r3, #0]
 8007f54:	69b3      	ldr	r3, [r6, #24]
 8007f56:	b913      	cbnz	r3, 8007f5e <__sfp+0x16>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff ffbd 	bl	8007ed8 <__sinit>
 8007f5e:	3648      	adds	r6, #72	; 0x48
 8007f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	d503      	bpl.n	8007f70 <__sfp+0x28>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	b30b      	cbz	r3, 8007fb0 <__sfp+0x68>
 8007f6c:	6836      	ldr	r6, [r6, #0]
 8007f6e:	e7f7      	b.n	8007f60 <__sfp+0x18>
 8007f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f74:	b9d5      	cbnz	r5, 8007fac <__sfp+0x64>
 8007f76:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <__sfp+0x88>)
 8007f78:	60e3      	str	r3, [r4, #12]
 8007f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f80:	f000 fbba 	bl	80086f8 <__retarget_lock_init_recursive>
 8007f84:	f7ff ff96 	bl	8007eb4 <__sfp_lock_release>
 8007f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	61a5      	str	r5, [r4, #24]
 8007f94:	2208      	movs	r2, #8
 8007f96:	4629      	mov	r1, r5
 8007f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f9c:	f7fd fb56 	bl	800564c <memset>
 8007fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fa8:	4620      	mov	r0, r4
 8007faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fac:	3468      	adds	r4, #104	; 0x68
 8007fae:	e7d9      	b.n	8007f64 <__sfp+0x1c>
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	f7ff ff62 	bl	8007e7c <__sfmoreglue>
 8007fb8:	4604      	mov	r4, r0
 8007fba:	6030      	str	r0, [r6, #0]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1d5      	bne.n	8007f6c <__sfp+0x24>
 8007fc0:	f7ff ff78 	bl	8007eb4 <__sfp_lock_release>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	e7ee      	b.n	8007fa8 <__sfp+0x60>
 8007fca:	bf00      	nop
 8007fcc:	08009f40 	.word	0x08009f40
 8007fd0:	ffff0001 	.word	0xffff0001

08007fd4 <_fwalk_reent>:
 8007fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	4606      	mov	r6, r0
 8007fda:	4688      	mov	r8, r1
 8007fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fe0:	2700      	movs	r7, #0
 8007fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fea:	d505      	bpl.n	8007ff8 <_fwalk_reent+0x24>
 8007fec:	6824      	ldr	r4, [r4, #0]
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d1f7      	bne.n	8007fe2 <_fwalk_reent+0xe>
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff8:	89ab      	ldrh	r3, [r5, #12]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d907      	bls.n	800800e <_fwalk_reent+0x3a>
 8007ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008002:	3301      	adds	r3, #1
 8008004:	d003      	beq.n	800800e <_fwalk_reent+0x3a>
 8008006:	4629      	mov	r1, r5
 8008008:	4630      	mov	r0, r6
 800800a:	47c0      	blx	r8
 800800c:	4307      	orrs	r7, r0
 800800e:	3568      	adds	r5, #104	; 0x68
 8008010:	e7e9      	b.n	8007fe6 <_fwalk_reent+0x12>

08008012 <rshift>:
 8008012:	6903      	ldr	r3, [r0, #16]
 8008014:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800801c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008020:	f100 0414 	add.w	r4, r0, #20
 8008024:	dd45      	ble.n	80080b2 <rshift+0xa0>
 8008026:	f011 011f 	ands.w	r1, r1, #31
 800802a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800802e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008032:	d10c      	bne.n	800804e <rshift+0x3c>
 8008034:	f100 0710 	add.w	r7, r0, #16
 8008038:	4629      	mov	r1, r5
 800803a:	42b1      	cmp	r1, r6
 800803c:	d334      	bcc.n	80080a8 <rshift+0x96>
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	1eea      	subs	r2, r5, #3
 8008044:	4296      	cmp	r6, r2
 8008046:	bf38      	it	cc
 8008048:	2300      	movcc	r3, #0
 800804a:	4423      	add	r3, r4
 800804c:	e015      	b.n	800807a <rshift+0x68>
 800804e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008052:	f1c1 0820 	rsb	r8, r1, #32
 8008056:	40cf      	lsrs	r7, r1
 8008058:	f105 0e04 	add.w	lr, r5, #4
 800805c:	46a1      	mov	r9, r4
 800805e:	4576      	cmp	r6, lr
 8008060:	46f4      	mov	ip, lr
 8008062:	d815      	bhi.n	8008090 <rshift+0x7e>
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	009a      	lsls	r2, r3, #2
 8008068:	3a04      	subs	r2, #4
 800806a:	3501      	adds	r5, #1
 800806c:	42ae      	cmp	r6, r5
 800806e:	bf38      	it	cc
 8008070:	2200      	movcc	r2, #0
 8008072:	18a3      	adds	r3, r4, r2
 8008074:	50a7      	str	r7, [r4, r2]
 8008076:	b107      	cbz	r7, 800807a <rshift+0x68>
 8008078:	3304      	adds	r3, #4
 800807a:	1b1a      	subs	r2, r3, r4
 800807c:	42a3      	cmp	r3, r4
 800807e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008082:	bf08      	it	eq
 8008084:	2300      	moveq	r3, #0
 8008086:	6102      	str	r2, [r0, #16]
 8008088:	bf08      	it	eq
 800808a:	6143      	streq	r3, [r0, #20]
 800808c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008090:	f8dc c000 	ldr.w	ip, [ip]
 8008094:	fa0c fc08 	lsl.w	ip, ip, r8
 8008098:	ea4c 0707 	orr.w	r7, ip, r7
 800809c:	f849 7b04 	str.w	r7, [r9], #4
 80080a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080a4:	40cf      	lsrs	r7, r1
 80080a6:	e7da      	b.n	800805e <rshift+0x4c>
 80080a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80080ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80080b0:	e7c3      	b.n	800803a <rshift+0x28>
 80080b2:	4623      	mov	r3, r4
 80080b4:	e7e1      	b.n	800807a <rshift+0x68>

080080b6 <__hexdig_fun>:
 80080b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	d802      	bhi.n	80080c4 <__hexdig_fun+0xe>
 80080be:	3820      	subs	r0, #32
 80080c0:	b2c0      	uxtb	r0, r0
 80080c2:	4770      	bx	lr
 80080c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080c8:	2b05      	cmp	r3, #5
 80080ca:	d801      	bhi.n	80080d0 <__hexdig_fun+0x1a>
 80080cc:	3847      	subs	r0, #71	; 0x47
 80080ce:	e7f7      	b.n	80080c0 <__hexdig_fun+0xa>
 80080d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	d801      	bhi.n	80080dc <__hexdig_fun+0x26>
 80080d8:	3827      	subs	r0, #39	; 0x27
 80080da:	e7f1      	b.n	80080c0 <__hexdig_fun+0xa>
 80080dc:	2000      	movs	r0, #0
 80080de:	4770      	bx	lr

080080e0 <__gethex>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	ed2d 8b02 	vpush	{d8}
 80080e8:	b089      	sub	sp, #36	; 0x24
 80080ea:	ee08 0a10 	vmov	s16, r0
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	4bbc      	ldr	r3, [pc, #752]	; (80083e4 <__gethex+0x304>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	4618      	mov	r0, r3
 80080f8:	468b      	mov	fp, r1
 80080fa:	4690      	mov	r8, r2
 80080fc:	f7f8 f890 	bl	8000220 <strlen>
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	f8db 2000 	ldr.w	r2, [fp]
 8008106:	4403      	add	r3, r0
 8008108:	4682      	mov	sl, r0
 800810a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800810e:	9305      	str	r3, [sp, #20]
 8008110:	1c93      	adds	r3, r2, #2
 8008112:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008116:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800811a:	32fe      	adds	r2, #254	; 0xfe
 800811c:	18d1      	adds	r1, r2, r3
 800811e:	461f      	mov	r7, r3
 8008120:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008124:	9100      	str	r1, [sp, #0]
 8008126:	2830      	cmp	r0, #48	; 0x30
 8008128:	d0f8      	beq.n	800811c <__gethex+0x3c>
 800812a:	f7ff ffc4 	bl	80080b6 <__hexdig_fun>
 800812e:	4604      	mov	r4, r0
 8008130:	2800      	cmp	r0, #0
 8008132:	d13a      	bne.n	80081aa <__gethex+0xca>
 8008134:	9901      	ldr	r1, [sp, #4]
 8008136:	4652      	mov	r2, sl
 8008138:	4638      	mov	r0, r7
 800813a:	f001 fb90 	bl	800985e <strncmp>
 800813e:	4605      	mov	r5, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	d168      	bne.n	8008216 <__gethex+0x136>
 8008144:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008148:	eb07 060a 	add.w	r6, r7, sl
 800814c:	f7ff ffb3 	bl	80080b6 <__hexdig_fun>
 8008150:	2800      	cmp	r0, #0
 8008152:	d062      	beq.n	800821a <__gethex+0x13a>
 8008154:	4633      	mov	r3, r6
 8008156:	7818      	ldrb	r0, [r3, #0]
 8008158:	2830      	cmp	r0, #48	; 0x30
 800815a:	461f      	mov	r7, r3
 800815c:	f103 0301 	add.w	r3, r3, #1
 8008160:	d0f9      	beq.n	8008156 <__gethex+0x76>
 8008162:	f7ff ffa8 	bl	80080b6 <__hexdig_fun>
 8008166:	2301      	movs	r3, #1
 8008168:	fab0 f480 	clz	r4, r0
 800816c:	0964      	lsrs	r4, r4, #5
 800816e:	4635      	mov	r5, r6
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	463a      	mov	r2, r7
 8008174:	4616      	mov	r6, r2
 8008176:	3201      	adds	r2, #1
 8008178:	7830      	ldrb	r0, [r6, #0]
 800817a:	f7ff ff9c 	bl	80080b6 <__hexdig_fun>
 800817e:	2800      	cmp	r0, #0
 8008180:	d1f8      	bne.n	8008174 <__gethex+0x94>
 8008182:	9901      	ldr	r1, [sp, #4]
 8008184:	4652      	mov	r2, sl
 8008186:	4630      	mov	r0, r6
 8008188:	f001 fb69 	bl	800985e <strncmp>
 800818c:	b980      	cbnz	r0, 80081b0 <__gethex+0xd0>
 800818e:	b94d      	cbnz	r5, 80081a4 <__gethex+0xc4>
 8008190:	eb06 050a 	add.w	r5, r6, sl
 8008194:	462a      	mov	r2, r5
 8008196:	4616      	mov	r6, r2
 8008198:	3201      	adds	r2, #1
 800819a:	7830      	ldrb	r0, [r6, #0]
 800819c:	f7ff ff8b 	bl	80080b6 <__hexdig_fun>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1f8      	bne.n	8008196 <__gethex+0xb6>
 80081a4:	1bad      	subs	r5, r5, r6
 80081a6:	00ad      	lsls	r5, r5, #2
 80081a8:	e004      	b.n	80081b4 <__gethex+0xd4>
 80081aa:	2400      	movs	r4, #0
 80081ac:	4625      	mov	r5, r4
 80081ae:	e7e0      	b.n	8008172 <__gethex+0x92>
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	d1f7      	bne.n	80081a4 <__gethex+0xc4>
 80081b4:	7833      	ldrb	r3, [r6, #0]
 80081b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081ba:	2b50      	cmp	r3, #80	; 0x50
 80081bc:	d13b      	bne.n	8008236 <__gethex+0x156>
 80081be:	7873      	ldrb	r3, [r6, #1]
 80081c0:	2b2b      	cmp	r3, #43	; 0x2b
 80081c2:	d02c      	beq.n	800821e <__gethex+0x13e>
 80081c4:	2b2d      	cmp	r3, #45	; 0x2d
 80081c6:	d02e      	beq.n	8008226 <__gethex+0x146>
 80081c8:	1c71      	adds	r1, r6, #1
 80081ca:	f04f 0900 	mov.w	r9, #0
 80081ce:	7808      	ldrb	r0, [r1, #0]
 80081d0:	f7ff ff71 	bl	80080b6 <__hexdig_fun>
 80081d4:	1e43      	subs	r3, r0, #1
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b18      	cmp	r3, #24
 80081da:	d82c      	bhi.n	8008236 <__gethex+0x156>
 80081dc:	f1a0 0210 	sub.w	r2, r0, #16
 80081e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081e4:	f7ff ff67 	bl	80080b6 <__hexdig_fun>
 80081e8:	1e43      	subs	r3, r0, #1
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b18      	cmp	r3, #24
 80081ee:	d91d      	bls.n	800822c <__gethex+0x14c>
 80081f0:	f1b9 0f00 	cmp.w	r9, #0
 80081f4:	d000      	beq.n	80081f8 <__gethex+0x118>
 80081f6:	4252      	negs	r2, r2
 80081f8:	4415      	add	r5, r2
 80081fa:	f8cb 1000 	str.w	r1, [fp]
 80081fe:	b1e4      	cbz	r4, 800823a <__gethex+0x15a>
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	bf14      	ite	ne
 8008206:	2700      	movne	r7, #0
 8008208:	2706      	moveq	r7, #6
 800820a:	4638      	mov	r0, r7
 800820c:	b009      	add	sp, #36	; 0x24
 800820e:	ecbd 8b02 	vpop	{d8}
 8008212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008216:	463e      	mov	r6, r7
 8008218:	4625      	mov	r5, r4
 800821a:	2401      	movs	r4, #1
 800821c:	e7ca      	b.n	80081b4 <__gethex+0xd4>
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	1cb1      	adds	r1, r6, #2
 8008224:	e7d3      	b.n	80081ce <__gethex+0xee>
 8008226:	f04f 0901 	mov.w	r9, #1
 800822a:	e7fa      	b.n	8008222 <__gethex+0x142>
 800822c:	230a      	movs	r3, #10
 800822e:	fb03 0202 	mla	r2, r3, r2, r0
 8008232:	3a10      	subs	r2, #16
 8008234:	e7d4      	b.n	80081e0 <__gethex+0x100>
 8008236:	4631      	mov	r1, r6
 8008238:	e7df      	b.n	80081fa <__gethex+0x11a>
 800823a:	1bf3      	subs	r3, r6, r7
 800823c:	3b01      	subs	r3, #1
 800823e:	4621      	mov	r1, r4
 8008240:	2b07      	cmp	r3, #7
 8008242:	dc0b      	bgt.n	800825c <__gethex+0x17c>
 8008244:	ee18 0a10 	vmov	r0, s16
 8008248:	f000 fa82 	bl	8008750 <_Balloc>
 800824c:	4604      	mov	r4, r0
 800824e:	b940      	cbnz	r0, 8008262 <__gethex+0x182>
 8008250:	4b65      	ldr	r3, [pc, #404]	; (80083e8 <__gethex+0x308>)
 8008252:	4602      	mov	r2, r0
 8008254:	21de      	movs	r1, #222	; 0xde
 8008256:	4865      	ldr	r0, [pc, #404]	; (80083ec <__gethex+0x30c>)
 8008258:	f001 fbf4 	bl	8009a44 <__assert_func>
 800825c:	3101      	adds	r1, #1
 800825e:	105b      	asrs	r3, r3, #1
 8008260:	e7ee      	b.n	8008240 <__gethex+0x160>
 8008262:	f100 0914 	add.w	r9, r0, #20
 8008266:	f04f 0b00 	mov.w	fp, #0
 800826a:	f1ca 0301 	rsb	r3, sl, #1
 800826e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008272:	f8cd b000 	str.w	fp, [sp]
 8008276:	9306      	str	r3, [sp, #24]
 8008278:	42b7      	cmp	r7, r6
 800827a:	d340      	bcc.n	80082fe <__gethex+0x21e>
 800827c:	9802      	ldr	r0, [sp, #8]
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	f840 3b04 	str.w	r3, [r0], #4
 8008284:	eba0 0009 	sub.w	r0, r0, r9
 8008288:	1080      	asrs	r0, r0, #2
 800828a:	0146      	lsls	r6, r0, #5
 800828c:	6120      	str	r0, [r4, #16]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fb54 	bl	800893c <__hi0bits>
 8008294:	1a30      	subs	r0, r6, r0
 8008296:	f8d8 6000 	ldr.w	r6, [r8]
 800829a:	42b0      	cmp	r0, r6
 800829c:	dd63      	ble.n	8008366 <__gethex+0x286>
 800829e:	1b87      	subs	r7, r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 feee 	bl	8009084 <__any_on>
 80082a8:	4682      	mov	sl, r0
 80082aa:	b1a8      	cbz	r0, 80082d8 <__gethex+0x1f8>
 80082ac:	1e7b      	subs	r3, r7, #1
 80082ae:	1159      	asrs	r1, r3, #5
 80082b0:	f003 021f 	and.w	r2, r3, #31
 80082b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082b8:	f04f 0a01 	mov.w	sl, #1
 80082bc:	fa0a f202 	lsl.w	r2, sl, r2
 80082c0:	420a      	tst	r2, r1
 80082c2:	d009      	beq.n	80082d8 <__gethex+0x1f8>
 80082c4:	4553      	cmp	r3, sl
 80082c6:	dd05      	ble.n	80082d4 <__gethex+0x1f4>
 80082c8:	1eb9      	subs	r1, r7, #2
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 feda 	bl	8009084 <__any_on>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d145      	bne.n	8008360 <__gethex+0x280>
 80082d4:	f04f 0a02 	mov.w	sl, #2
 80082d8:	4639      	mov	r1, r7
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff fe99 	bl	8008012 <rshift>
 80082e0:	443d      	add	r5, r7
 80082e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e6:	42ab      	cmp	r3, r5
 80082e8:	da4c      	bge.n	8008384 <__gethex+0x2a4>
 80082ea:	ee18 0a10 	vmov	r0, s16
 80082ee:	4621      	mov	r1, r4
 80082f0:	f000 fa6e 	bl	80087d0 <_Bfree>
 80082f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082f6:	2300      	movs	r3, #0
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	27a3      	movs	r7, #163	; 0xa3
 80082fc:	e785      	b.n	800820a <__gethex+0x12a>
 80082fe:	1e73      	subs	r3, r6, #1
 8008300:	9a05      	ldr	r2, [sp, #20]
 8008302:	9303      	str	r3, [sp, #12]
 8008304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008308:	4293      	cmp	r3, r2
 800830a:	d019      	beq.n	8008340 <__gethex+0x260>
 800830c:	f1bb 0f20 	cmp.w	fp, #32
 8008310:	d107      	bne.n	8008322 <__gethex+0x242>
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	9a00      	ldr	r2, [sp, #0]
 8008316:	f843 2b04 	str.w	r2, [r3], #4
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	2300      	movs	r3, #0
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	469b      	mov	fp, r3
 8008322:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008326:	f7ff fec6 	bl	80080b6 <__hexdig_fun>
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	f000 000f 	and.w	r0, r0, #15
 8008330:	fa00 f00b 	lsl.w	r0, r0, fp
 8008334:	4303      	orrs	r3, r0
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	f10b 0b04 	add.w	fp, fp, #4
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	e00d      	b.n	800835c <__gethex+0x27c>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	9a06      	ldr	r2, [sp, #24]
 8008344:	4413      	add	r3, r2
 8008346:	42bb      	cmp	r3, r7
 8008348:	d3e0      	bcc.n	800830c <__gethex+0x22c>
 800834a:	4618      	mov	r0, r3
 800834c:	9901      	ldr	r1, [sp, #4]
 800834e:	9307      	str	r3, [sp, #28]
 8008350:	4652      	mov	r2, sl
 8008352:	f001 fa84 	bl	800985e <strncmp>
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	2800      	cmp	r0, #0
 800835a:	d1d7      	bne.n	800830c <__gethex+0x22c>
 800835c:	461e      	mov	r6, r3
 800835e:	e78b      	b.n	8008278 <__gethex+0x198>
 8008360:	f04f 0a03 	mov.w	sl, #3
 8008364:	e7b8      	b.n	80082d8 <__gethex+0x1f8>
 8008366:	da0a      	bge.n	800837e <__gethex+0x29e>
 8008368:	1a37      	subs	r7, r6, r0
 800836a:	4621      	mov	r1, r4
 800836c:	ee18 0a10 	vmov	r0, s16
 8008370:	463a      	mov	r2, r7
 8008372:	f000 fc49 	bl	8008c08 <__lshift>
 8008376:	1bed      	subs	r5, r5, r7
 8008378:	4604      	mov	r4, r0
 800837a:	f100 0914 	add.w	r9, r0, #20
 800837e:	f04f 0a00 	mov.w	sl, #0
 8008382:	e7ae      	b.n	80082e2 <__gethex+0x202>
 8008384:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008388:	42a8      	cmp	r0, r5
 800838a:	dd72      	ble.n	8008472 <__gethex+0x392>
 800838c:	1b45      	subs	r5, r0, r5
 800838e:	42ae      	cmp	r6, r5
 8008390:	dc36      	bgt.n	8008400 <__gethex+0x320>
 8008392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d02a      	beq.n	80083f0 <__gethex+0x310>
 800839a:	2b03      	cmp	r3, #3
 800839c:	d02c      	beq.n	80083f8 <__gethex+0x318>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d115      	bne.n	80083ce <__gethex+0x2ee>
 80083a2:	42ae      	cmp	r6, r5
 80083a4:	d113      	bne.n	80083ce <__gethex+0x2ee>
 80083a6:	2e01      	cmp	r6, #1
 80083a8:	d10b      	bne.n	80083c2 <__gethex+0x2e2>
 80083aa:	9a04      	ldr	r2, [sp, #16]
 80083ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	2301      	movs	r3, #1
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	f8c9 3000 	str.w	r3, [r9]
 80083ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083bc:	2762      	movs	r7, #98	; 0x62
 80083be:	601c      	str	r4, [r3, #0]
 80083c0:	e723      	b.n	800820a <__gethex+0x12a>
 80083c2:	1e71      	subs	r1, r6, #1
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fe5d 	bl	8009084 <__any_on>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d1ed      	bne.n	80083aa <__gethex+0x2ca>
 80083ce:	ee18 0a10 	vmov	r0, s16
 80083d2:	4621      	mov	r1, r4
 80083d4:	f000 f9fc 	bl	80087d0 <_Bfree>
 80083d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083da:	2300      	movs	r3, #0
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	2750      	movs	r7, #80	; 0x50
 80083e0:	e713      	b.n	800820a <__gethex+0x12a>
 80083e2:	bf00      	nop
 80083e4:	0800a234 	.word	0x0800a234
 80083e8:	0800a154 	.word	0x0800a154
 80083ec:	0800a1c8 	.word	0x0800a1c8
 80083f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1eb      	bne.n	80083ce <__gethex+0x2ee>
 80083f6:	e7d8      	b.n	80083aa <__gethex+0x2ca>
 80083f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1d5      	bne.n	80083aa <__gethex+0x2ca>
 80083fe:	e7e6      	b.n	80083ce <__gethex+0x2ee>
 8008400:	1e6f      	subs	r7, r5, #1
 8008402:	f1ba 0f00 	cmp.w	sl, #0
 8008406:	d131      	bne.n	800846c <__gethex+0x38c>
 8008408:	b127      	cbz	r7, 8008414 <__gethex+0x334>
 800840a:	4639      	mov	r1, r7
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fe39 	bl	8009084 <__any_on>
 8008412:	4682      	mov	sl, r0
 8008414:	117b      	asrs	r3, r7, #5
 8008416:	2101      	movs	r1, #1
 8008418:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800841c:	f007 071f 	and.w	r7, r7, #31
 8008420:	fa01 f707 	lsl.w	r7, r1, r7
 8008424:	421f      	tst	r7, r3
 8008426:	4629      	mov	r1, r5
 8008428:	4620      	mov	r0, r4
 800842a:	bf18      	it	ne
 800842c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008430:	1b76      	subs	r6, r6, r5
 8008432:	f7ff fdee 	bl	8008012 <rshift>
 8008436:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800843a:	2702      	movs	r7, #2
 800843c:	f1ba 0f00 	cmp.w	sl, #0
 8008440:	d048      	beq.n	80084d4 <__gethex+0x3f4>
 8008442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d015      	beq.n	8008476 <__gethex+0x396>
 800844a:	2b03      	cmp	r3, #3
 800844c:	d017      	beq.n	800847e <__gethex+0x39e>
 800844e:	2b01      	cmp	r3, #1
 8008450:	d109      	bne.n	8008466 <__gethex+0x386>
 8008452:	f01a 0f02 	tst.w	sl, #2
 8008456:	d006      	beq.n	8008466 <__gethex+0x386>
 8008458:	f8d9 0000 	ldr.w	r0, [r9]
 800845c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008460:	f01a 0f01 	tst.w	sl, #1
 8008464:	d10e      	bne.n	8008484 <__gethex+0x3a4>
 8008466:	f047 0710 	orr.w	r7, r7, #16
 800846a:	e033      	b.n	80084d4 <__gethex+0x3f4>
 800846c:	f04f 0a01 	mov.w	sl, #1
 8008470:	e7d0      	b.n	8008414 <__gethex+0x334>
 8008472:	2701      	movs	r7, #1
 8008474:	e7e2      	b.n	800843c <__gethex+0x35c>
 8008476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008478:	f1c3 0301 	rsb	r3, r3, #1
 800847c:	9315      	str	r3, [sp, #84]	; 0x54
 800847e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <__gethex+0x386>
 8008484:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008488:	f104 0314 	add.w	r3, r4, #20
 800848c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008490:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008494:	f04f 0c00 	mov.w	ip, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80084a2:	d01c      	beq.n	80084de <__gethex+0x3fe>
 80084a4:	3201      	adds	r2, #1
 80084a6:	6002      	str	r2, [r0, #0]
 80084a8:	2f02      	cmp	r7, #2
 80084aa:	f104 0314 	add.w	r3, r4, #20
 80084ae:	d13f      	bne.n	8008530 <__gethex+0x450>
 80084b0:	f8d8 2000 	ldr.w	r2, [r8]
 80084b4:	3a01      	subs	r2, #1
 80084b6:	42b2      	cmp	r2, r6
 80084b8:	d10a      	bne.n	80084d0 <__gethex+0x3f0>
 80084ba:	1171      	asrs	r1, r6, #5
 80084bc:	2201      	movs	r2, #1
 80084be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084c2:	f006 061f 	and.w	r6, r6, #31
 80084c6:	fa02 f606 	lsl.w	r6, r2, r6
 80084ca:	421e      	tst	r6, r3
 80084cc:	bf18      	it	ne
 80084ce:	4617      	movne	r7, r2
 80084d0:	f047 0720 	orr.w	r7, r7, #32
 80084d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084d6:	601c      	str	r4, [r3, #0]
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	601d      	str	r5, [r3, #0]
 80084dc:	e695      	b.n	800820a <__gethex+0x12a>
 80084de:	4299      	cmp	r1, r3
 80084e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80084e4:	d8d8      	bhi.n	8008498 <__gethex+0x3b8>
 80084e6:	68a3      	ldr	r3, [r4, #8]
 80084e8:	459b      	cmp	fp, r3
 80084ea:	db19      	blt.n	8008520 <__gethex+0x440>
 80084ec:	6861      	ldr	r1, [r4, #4]
 80084ee:	ee18 0a10 	vmov	r0, s16
 80084f2:	3101      	adds	r1, #1
 80084f4:	f000 f92c 	bl	8008750 <_Balloc>
 80084f8:	4681      	mov	r9, r0
 80084fa:	b918      	cbnz	r0, 8008504 <__gethex+0x424>
 80084fc:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <__gethex+0x488>)
 80084fe:	4602      	mov	r2, r0
 8008500:	2184      	movs	r1, #132	; 0x84
 8008502:	e6a8      	b.n	8008256 <__gethex+0x176>
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	3202      	adds	r2, #2
 8008508:	f104 010c 	add.w	r1, r4, #12
 800850c:	0092      	lsls	r2, r2, #2
 800850e:	300c      	adds	r0, #12
 8008510:	f000 f910 	bl	8008734 <memcpy>
 8008514:	4621      	mov	r1, r4
 8008516:	ee18 0a10 	vmov	r0, s16
 800851a:	f000 f959 	bl	80087d0 <_Bfree>
 800851e:	464c      	mov	r4, r9
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008528:	6122      	str	r2, [r4, #16]
 800852a:	2201      	movs	r2, #1
 800852c:	615a      	str	r2, [r3, #20]
 800852e:	e7bb      	b.n	80084a8 <__gethex+0x3c8>
 8008530:	6922      	ldr	r2, [r4, #16]
 8008532:	455a      	cmp	r2, fp
 8008534:	dd0b      	ble.n	800854e <__gethex+0x46e>
 8008536:	2101      	movs	r1, #1
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff fd6a 	bl	8008012 <rshift>
 800853e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008542:	3501      	adds	r5, #1
 8008544:	42ab      	cmp	r3, r5
 8008546:	f6ff aed0 	blt.w	80082ea <__gethex+0x20a>
 800854a:	2701      	movs	r7, #1
 800854c:	e7c0      	b.n	80084d0 <__gethex+0x3f0>
 800854e:	f016 061f 	ands.w	r6, r6, #31
 8008552:	d0fa      	beq.n	800854a <__gethex+0x46a>
 8008554:	449a      	add	sl, r3
 8008556:	f1c6 0620 	rsb	r6, r6, #32
 800855a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800855e:	f000 f9ed 	bl	800893c <__hi0bits>
 8008562:	42b0      	cmp	r0, r6
 8008564:	dbe7      	blt.n	8008536 <__gethex+0x456>
 8008566:	e7f0      	b.n	800854a <__gethex+0x46a>
 8008568:	0800a154 	.word	0x0800a154

0800856c <L_shift>:
 800856c:	f1c2 0208 	rsb	r2, r2, #8
 8008570:	0092      	lsls	r2, r2, #2
 8008572:	b570      	push	{r4, r5, r6, lr}
 8008574:	f1c2 0620 	rsb	r6, r2, #32
 8008578:	6843      	ldr	r3, [r0, #4]
 800857a:	6804      	ldr	r4, [r0, #0]
 800857c:	fa03 f506 	lsl.w	r5, r3, r6
 8008580:	432c      	orrs	r4, r5
 8008582:	40d3      	lsrs	r3, r2
 8008584:	6004      	str	r4, [r0, #0]
 8008586:	f840 3f04 	str.w	r3, [r0, #4]!
 800858a:	4288      	cmp	r0, r1
 800858c:	d3f4      	bcc.n	8008578 <L_shift+0xc>
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <__match>:
 8008590:	b530      	push	{r4, r5, lr}
 8008592:	6803      	ldr	r3, [r0, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	b914      	cbnz	r4, 80085a2 <__match+0x12>
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	2001      	movs	r0, #1
 80085a0:	bd30      	pop	{r4, r5, pc}
 80085a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80085aa:	2d19      	cmp	r5, #25
 80085ac:	bf98      	it	ls
 80085ae:	3220      	addls	r2, #32
 80085b0:	42a2      	cmp	r2, r4
 80085b2:	d0f0      	beq.n	8008596 <__match+0x6>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7f3      	b.n	80085a0 <__match+0x10>

080085b8 <__hexnan>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	680b      	ldr	r3, [r1, #0]
 80085be:	6801      	ldr	r1, [r0, #0]
 80085c0:	115e      	asrs	r6, r3, #5
 80085c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085c6:	f013 031f 	ands.w	r3, r3, #31
 80085ca:	b087      	sub	sp, #28
 80085cc:	bf18      	it	ne
 80085ce:	3604      	addne	r6, #4
 80085d0:	2500      	movs	r5, #0
 80085d2:	1f37      	subs	r7, r6, #4
 80085d4:	4682      	mov	sl, r0
 80085d6:	4690      	mov	r8, r2
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f846 5c04 	str.w	r5, [r6, #-4]
 80085de:	46b9      	mov	r9, r7
 80085e0:	463c      	mov	r4, r7
 80085e2:	9502      	str	r5, [sp, #8]
 80085e4:	46ab      	mov	fp, r5
 80085e6:	784a      	ldrb	r2, [r1, #1]
 80085e8:	1c4b      	adds	r3, r1, #1
 80085ea:	9303      	str	r3, [sp, #12]
 80085ec:	b342      	cbz	r2, 8008640 <__hexnan+0x88>
 80085ee:	4610      	mov	r0, r2
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	9204      	str	r2, [sp, #16]
 80085f4:	f7ff fd5f 	bl	80080b6 <__hexdig_fun>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d14f      	bne.n	800869c <__hexnan+0xe4>
 80085fc:	9a04      	ldr	r2, [sp, #16]
 80085fe:	9905      	ldr	r1, [sp, #20]
 8008600:	2a20      	cmp	r2, #32
 8008602:	d818      	bhi.n	8008636 <__hexnan+0x7e>
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	459b      	cmp	fp, r3
 8008608:	dd13      	ble.n	8008632 <__hexnan+0x7a>
 800860a:	454c      	cmp	r4, r9
 800860c:	d206      	bcs.n	800861c <__hexnan+0x64>
 800860e:	2d07      	cmp	r5, #7
 8008610:	dc04      	bgt.n	800861c <__hexnan+0x64>
 8008612:	462a      	mov	r2, r5
 8008614:	4649      	mov	r1, r9
 8008616:	4620      	mov	r0, r4
 8008618:	f7ff ffa8 	bl	800856c <L_shift>
 800861c:	4544      	cmp	r4, r8
 800861e:	d950      	bls.n	80086c2 <__hexnan+0x10a>
 8008620:	2300      	movs	r3, #0
 8008622:	f1a4 0904 	sub.w	r9, r4, #4
 8008626:	f844 3c04 	str.w	r3, [r4, #-4]
 800862a:	f8cd b008 	str.w	fp, [sp, #8]
 800862e:	464c      	mov	r4, r9
 8008630:	461d      	mov	r5, r3
 8008632:	9903      	ldr	r1, [sp, #12]
 8008634:	e7d7      	b.n	80085e6 <__hexnan+0x2e>
 8008636:	2a29      	cmp	r2, #41	; 0x29
 8008638:	d156      	bne.n	80086e8 <__hexnan+0x130>
 800863a:	3102      	adds	r1, #2
 800863c:	f8ca 1000 	str.w	r1, [sl]
 8008640:	f1bb 0f00 	cmp.w	fp, #0
 8008644:	d050      	beq.n	80086e8 <__hexnan+0x130>
 8008646:	454c      	cmp	r4, r9
 8008648:	d206      	bcs.n	8008658 <__hexnan+0xa0>
 800864a:	2d07      	cmp	r5, #7
 800864c:	dc04      	bgt.n	8008658 <__hexnan+0xa0>
 800864e:	462a      	mov	r2, r5
 8008650:	4649      	mov	r1, r9
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff ff8a 	bl	800856c <L_shift>
 8008658:	4544      	cmp	r4, r8
 800865a:	d934      	bls.n	80086c6 <__hexnan+0x10e>
 800865c:	f1a8 0204 	sub.w	r2, r8, #4
 8008660:	4623      	mov	r3, r4
 8008662:	f853 1b04 	ldr.w	r1, [r3], #4
 8008666:	f842 1f04 	str.w	r1, [r2, #4]!
 800866a:	429f      	cmp	r7, r3
 800866c:	d2f9      	bcs.n	8008662 <__hexnan+0xaa>
 800866e:	1b3b      	subs	r3, r7, r4
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	3304      	adds	r3, #4
 8008676:	3401      	adds	r4, #1
 8008678:	3e03      	subs	r6, #3
 800867a:	42b4      	cmp	r4, r6
 800867c:	bf88      	it	hi
 800867e:	2304      	movhi	r3, #4
 8008680:	4443      	add	r3, r8
 8008682:	2200      	movs	r2, #0
 8008684:	f843 2b04 	str.w	r2, [r3], #4
 8008688:	429f      	cmp	r7, r3
 800868a:	d2fb      	bcs.n	8008684 <__hexnan+0xcc>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	b91b      	cbnz	r3, 8008698 <__hexnan+0xe0>
 8008690:	4547      	cmp	r7, r8
 8008692:	d127      	bne.n	80086e4 <__hexnan+0x12c>
 8008694:	2301      	movs	r3, #1
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	2005      	movs	r0, #5
 800869a:	e026      	b.n	80086ea <__hexnan+0x132>
 800869c:	3501      	adds	r5, #1
 800869e:	2d08      	cmp	r5, #8
 80086a0:	f10b 0b01 	add.w	fp, fp, #1
 80086a4:	dd06      	ble.n	80086b4 <__hexnan+0xfc>
 80086a6:	4544      	cmp	r4, r8
 80086a8:	d9c3      	bls.n	8008632 <__hexnan+0x7a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80086b0:	2501      	movs	r5, #1
 80086b2:	3c04      	subs	r4, #4
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	f000 000f 	and.w	r0, r0, #15
 80086ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	e7b7      	b.n	8008632 <__hexnan+0x7a>
 80086c2:	2508      	movs	r5, #8
 80086c4:	e7b5      	b.n	8008632 <__hexnan+0x7a>
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0df      	beq.n	800868c <__hexnan+0xd4>
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295
 80086d0:	f1c3 0320 	rsb	r3, r3, #32
 80086d4:	fa22 f303 	lsr.w	r3, r2, r3
 80086d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086dc:	401a      	ands	r2, r3
 80086de:	f846 2c04 	str.w	r2, [r6, #-4]
 80086e2:	e7d3      	b.n	800868c <__hexnan+0xd4>
 80086e4:	3f04      	subs	r7, #4
 80086e6:	e7d1      	b.n	800868c <__hexnan+0xd4>
 80086e8:	2004      	movs	r0, #4
 80086ea:	b007      	add	sp, #28
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086f0 <_localeconv_r>:
 80086f0:	4800      	ldr	r0, [pc, #0]	; (80086f4 <_localeconv_r+0x4>)
 80086f2:	4770      	bx	lr
 80086f4:	20000164 	.word	0x20000164

080086f8 <__retarget_lock_init_recursive>:
 80086f8:	4770      	bx	lr

080086fa <__retarget_lock_acquire_recursive>:
 80086fa:	4770      	bx	lr

080086fc <__retarget_lock_release_recursive>:
 80086fc:	4770      	bx	lr
	...

08008700 <malloc>:
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <malloc+0xc>)
 8008702:	4601      	mov	r1, r0
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f000 bd3d 	b.w	8009184 <_malloc_r>
 800870a:	bf00      	nop
 800870c:	2000000c 	.word	0x2000000c

08008710 <__ascii_mbtowc>:
 8008710:	b082      	sub	sp, #8
 8008712:	b901      	cbnz	r1, 8008716 <__ascii_mbtowc+0x6>
 8008714:	a901      	add	r1, sp, #4
 8008716:	b142      	cbz	r2, 800872a <__ascii_mbtowc+0x1a>
 8008718:	b14b      	cbz	r3, 800872e <__ascii_mbtowc+0x1e>
 800871a:	7813      	ldrb	r3, [r2, #0]
 800871c:	600b      	str	r3, [r1, #0]
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	1e10      	subs	r0, r2, #0
 8008722:	bf18      	it	ne
 8008724:	2001      	movne	r0, #1
 8008726:	b002      	add	sp, #8
 8008728:	4770      	bx	lr
 800872a:	4610      	mov	r0, r2
 800872c:	e7fb      	b.n	8008726 <__ascii_mbtowc+0x16>
 800872e:	f06f 0001 	mvn.w	r0, #1
 8008732:	e7f8      	b.n	8008726 <__ascii_mbtowc+0x16>

08008734 <memcpy>:
 8008734:	440a      	add	r2, r1
 8008736:	4291      	cmp	r1, r2
 8008738:	f100 33ff 	add.w	r3, r0, #4294967295
 800873c:	d100      	bne.n	8008740 <memcpy+0xc>
 800873e:	4770      	bx	lr
 8008740:	b510      	push	{r4, lr}
 8008742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800874a:	4291      	cmp	r1, r2
 800874c:	d1f9      	bne.n	8008742 <memcpy+0xe>
 800874e:	bd10      	pop	{r4, pc}

08008750 <_Balloc>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
 8008758:	b976      	cbnz	r6, 8008778 <_Balloc+0x28>
 800875a:	2010      	movs	r0, #16
 800875c:	f7ff ffd0 	bl	8008700 <malloc>
 8008760:	4602      	mov	r2, r0
 8008762:	6260      	str	r0, [r4, #36]	; 0x24
 8008764:	b920      	cbnz	r0, 8008770 <_Balloc+0x20>
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <_Balloc+0x78>)
 8008768:	4818      	ldr	r0, [pc, #96]	; (80087cc <_Balloc+0x7c>)
 800876a:	2166      	movs	r1, #102	; 0x66
 800876c:	f001 f96a 	bl	8009a44 <__assert_func>
 8008770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008774:	6006      	str	r6, [r0, #0]
 8008776:	60c6      	str	r6, [r0, #12]
 8008778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800877a:	68f3      	ldr	r3, [r6, #12]
 800877c:	b183      	cbz	r3, 80087a0 <_Balloc+0x50>
 800877e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008786:	b9b8      	cbnz	r0, 80087b8 <_Balloc+0x68>
 8008788:	2101      	movs	r1, #1
 800878a:	fa01 f605 	lsl.w	r6, r1, r5
 800878e:	1d72      	adds	r2, r6, #5
 8008790:	0092      	lsls	r2, r2, #2
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fc97 	bl	80090c6 <_calloc_r>
 8008798:	b160      	cbz	r0, 80087b4 <_Balloc+0x64>
 800879a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800879e:	e00e      	b.n	80087be <_Balloc+0x6e>
 80087a0:	2221      	movs	r2, #33	; 0x21
 80087a2:	2104      	movs	r1, #4
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 fc8e 	bl	80090c6 <_calloc_r>
 80087aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ac:	60f0      	str	r0, [r6, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e4      	bne.n	800877e <_Balloc+0x2e>
 80087b4:	2000      	movs	r0, #0
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	6802      	ldr	r2, [r0, #0]
 80087ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087be:	2300      	movs	r3, #0
 80087c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087c4:	e7f7      	b.n	80087b6 <_Balloc+0x66>
 80087c6:	bf00      	nop
 80087c8:	0800a0de 	.word	0x0800a0de
 80087cc:	0800a248 	.word	0x0800a248

080087d0 <_Bfree>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	b976      	cbnz	r6, 80087f8 <_Bfree+0x28>
 80087da:	2010      	movs	r0, #16
 80087dc:	f7ff ff90 	bl	8008700 <malloc>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6268      	str	r0, [r5, #36]	; 0x24
 80087e4:	b920      	cbnz	r0, 80087f0 <_Bfree+0x20>
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <_Bfree+0x3c>)
 80087e8:	4809      	ldr	r0, [pc, #36]	; (8008810 <_Bfree+0x40>)
 80087ea:	218a      	movs	r1, #138	; 0x8a
 80087ec:	f001 f92a 	bl	8009a44 <__assert_func>
 80087f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087f4:	6006      	str	r6, [r0, #0]
 80087f6:	60c6      	str	r6, [r0, #12]
 80087f8:	b13c      	cbz	r4, 800880a <_Bfree+0x3a>
 80087fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087fc:	6862      	ldr	r2, [r4, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008804:	6021      	str	r1, [r4, #0]
 8008806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	0800a0de 	.word	0x0800a0de
 8008810:	0800a248 	.word	0x0800a248

08008814 <__multadd>:
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	690e      	ldr	r6, [r1, #16]
 800881a:	4607      	mov	r7, r0
 800881c:	4698      	mov	r8, r3
 800881e:	460c      	mov	r4, r1
 8008820:	f101 0014 	add.w	r0, r1, #20
 8008824:	2300      	movs	r3, #0
 8008826:	6805      	ldr	r5, [r0, #0]
 8008828:	b2a9      	uxth	r1, r5
 800882a:	fb02 8101 	mla	r1, r2, r1, r8
 800882e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008832:	0c2d      	lsrs	r5, r5, #16
 8008834:	fb02 c505 	mla	r5, r2, r5, ip
 8008838:	b289      	uxth	r1, r1
 800883a:	3301      	adds	r3, #1
 800883c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008840:	429e      	cmp	r6, r3
 8008842:	f840 1b04 	str.w	r1, [r0], #4
 8008846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800884a:	dcec      	bgt.n	8008826 <__multadd+0x12>
 800884c:	f1b8 0f00 	cmp.w	r8, #0
 8008850:	d022      	beq.n	8008898 <__multadd+0x84>
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	42b3      	cmp	r3, r6
 8008856:	dc19      	bgt.n	800888c <__multadd+0x78>
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4638      	mov	r0, r7
 800885c:	3101      	adds	r1, #1
 800885e:	f7ff ff77 	bl	8008750 <_Balloc>
 8008862:	4605      	mov	r5, r0
 8008864:	b928      	cbnz	r0, 8008872 <__multadd+0x5e>
 8008866:	4602      	mov	r2, r0
 8008868:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <__multadd+0x8c>)
 800886a:	480e      	ldr	r0, [pc, #56]	; (80088a4 <__multadd+0x90>)
 800886c:	21b5      	movs	r1, #181	; 0xb5
 800886e:	f001 f8e9 	bl	8009a44 <__assert_func>
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	3202      	adds	r2, #2
 8008876:	f104 010c 	add.w	r1, r4, #12
 800887a:	0092      	lsls	r2, r2, #2
 800887c:	300c      	adds	r0, #12
 800887e:	f7ff ff59 	bl	8008734 <memcpy>
 8008882:	4621      	mov	r1, r4
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff ffa3 	bl	80087d0 <_Bfree>
 800888a:	462c      	mov	r4, r5
 800888c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008890:	3601      	adds	r6, #1
 8008892:	f8c3 8014 	str.w	r8, [r3, #20]
 8008896:	6126      	str	r6, [r4, #16]
 8008898:	4620      	mov	r0, r4
 800889a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800889e:	bf00      	nop
 80088a0:	0800a154 	.word	0x0800a154
 80088a4:	0800a248 	.word	0x0800a248

080088a8 <__s2b>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	4615      	mov	r5, r2
 80088b0:	461f      	mov	r7, r3
 80088b2:	2209      	movs	r2, #9
 80088b4:	3308      	adds	r3, #8
 80088b6:	4606      	mov	r6, r0
 80088b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80088bc:	2100      	movs	r1, #0
 80088be:	2201      	movs	r2, #1
 80088c0:	429a      	cmp	r2, r3
 80088c2:	db09      	blt.n	80088d8 <__s2b+0x30>
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff ff43 	bl	8008750 <_Balloc>
 80088ca:	b940      	cbnz	r0, 80088de <__s2b+0x36>
 80088cc:	4602      	mov	r2, r0
 80088ce:	4b19      	ldr	r3, [pc, #100]	; (8008934 <__s2b+0x8c>)
 80088d0:	4819      	ldr	r0, [pc, #100]	; (8008938 <__s2b+0x90>)
 80088d2:	21ce      	movs	r1, #206	; 0xce
 80088d4:	f001 f8b6 	bl	8009a44 <__assert_func>
 80088d8:	0052      	lsls	r2, r2, #1
 80088da:	3101      	adds	r1, #1
 80088dc:	e7f0      	b.n	80088c0 <__s2b+0x18>
 80088de:	9b08      	ldr	r3, [sp, #32]
 80088e0:	6143      	str	r3, [r0, #20]
 80088e2:	2d09      	cmp	r5, #9
 80088e4:	f04f 0301 	mov.w	r3, #1
 80088e8:	6103      	str	r3, [r0, #16]
 80088ea:	dd16      	ble.n	800891a <__s2b+0x72>
 80088ec:	f104 0909 	add.w	r9, r4, #9
 80088f0:	46c8      	mov	r8, r9
 80088f2:	442c      	add	r4, r5
 80088f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088f8:	4601      	mov	r1, r0
 80088fa:	3b30      	subs	r3, #48	; 0x30
 80088fc:	220a      	movs	r2, #10
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff ff88 	bl	8008814 <__multadd>
 8008904:	45a0      	cmp	r8, r4
 8008906:	d1f5      	bne.n	80088f4 <__s2b+0x4c>
 8008908:	f1a5 0408 	sub.w	r4, r5, #8
 800890c:	444c      	add	r4, r9
 800890e:	1b2d      	subs	r5, r5, r4
 8008910:	1963      	adds	r3, r4, r5
 8008912:	42bb      	cmp	r3, r7
 8008914:	db04      	blt.n	8008920 <__s2b+0x78>
 8008916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800891a:	340a      	adds	r4, #10
 800891c:	2509      	movs	r5, #9
 800891e:	e7f6      	b.n	800890e <__s2b+0x66>
 8008920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008924:	4601      	mov	r1, r0
 8008926:	3b30      	subs	r3, #48	; 0x30
 8008928:	220a      	movs	r2, #10
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ff72 	bl	8008814 <__multadd>
 8008930:	e7ee      	b.n	8008910 <__s2b+0x68>
 8008932:	bf00      	nop
 8008934:	0800a154 	.word	0x0800a154
 8008938:	0800a248 	.word	0x0800a248

0800893c <__hi0bits>:
 800893c:	0c03      	lsrs	r3, r0, #16
 800893e:	041b      	lsls	r3, r3, #16
 8008940:	b9d3      	cbnz	r3, 8008978 <__hi0bits+0x3c>
 8008942:	0400      	lsls	r0, r0, #16
 8008944:	2310      	movs	r3, #16
 8008946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800894a:	bf04      	itt	eq
 800894c:	0200      	lsleq	r0, r0, #8
 800894e:	3308      	addeq	r3, #8
 8008950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008954:	bf04      	itt	eq
 8008956:	0100      	lsleq	r0, r0, #4
 8008958:	3304      	addeq	r3, #4
 800895a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800895e:	bf04      	itt	eq
 8008960:	0080      	lsleq	r0, r0, #2
 8008962:	3302      	addeq	r3, #2
 8008964:	2800      	cmp	r0, #0
 8008966:	db05      	blt.n	8008974 <__hi0bits+0x38>
 8008968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800896c:	f103 0301 	add.w	r3, r3, #1
 8008970:	bf08      	it	eq
 8008972:	2320      	moveq	r3, #32
 8008974:	4618      	mov	r0, r3
 8008976:	4770      	bx	lr
 8008978:	2300      	movs	r3, #0
 800897a:	e7e4      	b.n	8008946 <__hi0bits+0xa>

0800897c <__lo0bits>:
 800897c:	6803      	ldr	r3, [r0, #0]
 800897e:	f013 0207 	ands.w	r2, r3, #7
 8008982:	4601      	mov	r1, r0
 8008984:	d00b      	beq.n	800899e <__lo0bits+0x22>
 8008986:	07da      	lsls	r2, r3, #31
 8008988:	d424      	bmi.n	80089d4 <__lo0bits+0x58>
 800898a:	0798      	lsls	r0, r3, #30
 800898c:	bf49      	itett	mi
 800898e:	085b      	lsrmi	r3, r3, #1
 8008990:	089b      	lsrpl	r3, r3, #2
 8008992:	2001      	movmi	r0, #1
 8008994:	600b      	strmi	r3, [r1, #0]
 8008996:	bf5c      	itt	pl
 8008998:	600b      	strpl	r3, [r1, #0]
 800899a:	2002      	movpl	r0, #2
 800899c:	4770      	bx	lr
 800899e:	b298      	uxth	r0, r3
 80089a0:	b9b0      	cbnz	r0, 80089d0 <__lo0bits+0x54>
 80089a2:	0c1b      	lsrs	r3, r3, #16
 80089a4:	2010      	movs	r0, #16
 80089a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80089aa:	bf04      	itt	eq
 80089ac:	0a1b      	lsreq	r3, r3, #8
 80089ae:	3008      	addeq	r0, #8
 80089b0:	071a      	lsls	r2, r3, #28
 80089b2:	bf04      	itt	eq
 80089b4:	091b      	lsreq	r3, r3, #4
 80089b6:	3004      	addeq	r0, #4
 80089b8:	079a      	lsls	r2, r3, #30
 80089ba:	bf04      	itt	eq
 80089bc:	089b      	lsreq	r3, r3, #2
 80089be:	3002      	addeq	r0, #2
 80089c0:	07da      	lsls	r2, r3, #31
 80089c2:	d403      	bmi.n	80089cc <__lo0bits+0x50>
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f100 0001 	add.w	r0, r0, #1
 80089ca:	d005      	beq.n	80089d8 <__lo0bits+0x5c>
 80089cc:	600b      	str	r3, [r1, #0]
 80089ce:	4770      	bx	lr
 80089d0:	4610      	mov	r0, r2
 80089d2:	e7e8      	b.n	80089a6 <__lo0bits+0x2a>
 80089d4:	2000      	movs	r0, #0
 80089d6:	4770      	bx	lr
 80089d8:	2020      	movs	r0, #32
 80089da:	4770      	bx	lr

080089dc <__i2b>:
 80089dc:	b510      	push	{r4, lr}
 80089de:	460c      	mov	r4, r1
 80089e0:	2101      	movs	r1, #1
 80089e2:	f7ff feb5 	bl	8008750 <_Balloc>
 80089e6:	4602      	mov	r2, r0
 80089e8:	b928      	cbnz	r0, 80089f6 <__i2b+0x1a>
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <__i2b+0x24>)
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <__i2b+0x28>)
 80089ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089f2:	f001 f827 	bl	8009a44 <__assert_func>
 80089f6:	2301      	movs	r3, #1
 80089f8:	6144      	str	r4, [r0, #20]
 80089fa:	6103      	str	r3, [r0, #16]
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	bf00      	nop
 8008a00:	0800a154 	.word	0x0800a154
 8008a04:	0800a248 	.word	0x0800a248

08008a08 <__multiply>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	690a      	ldr	r2, [r1, #16]
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	bfb8      	it	lt
 8008a16:	460b      	movlt	r3, r1
 8008a18:	460d      	mov	r5, r1
 8008a1a:	bfbc      	itt	lt
 8008a1c:	4625      	movlt	r5, r4
 8008a1e:	461c      	movlt	r4, r3
 8008a20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a28:	68ab      	ldr	r3, [r5, #8]
 8008a2a:	6869      	ldr	r1, [r5, #4]
 8008a2c:	eb0a 0709 	add.w	r7, sl, r9
 8008a30:	42bb      	cmp	r3, r7
 8008a32:	b085      	sub	sp, #20
 8008a34:	bfb8      	it	lt
 8008a36:	3101      	addlt	r1, #1
 8008a38:	f7ff fe8a 	bl	8008750 <_Balloc>
 8008a3c:	b930      	cbnz	r0, 8008a4c <__multiply+0x44>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	4b42      	ldr	r3, [pc, #264]	; (8008b4c <__multiply+0x144>)
 8008a42:	4843      	ldr	r0, [pc, #268]	; (8008b50 <__multiply+0x148>)
 8008a44:	f240 115d 	movw	r1, #349	; 0x15d
 8008a48:	f000 fffc 	bl	8009a44 <__assert_func>
 8008a4c:	f100 0614 	add.w	r6, r0, #20
 8008a50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a54:	4633      	mov	r3, r6
 8008a56:	2200      	movs	r2, #0
 8008a58:	4543      	cmp	r3, r8
 8008a5a:	d31e      	bcc.n	8008a9a <__multiply+0x92>
 8008a5c:	f105 0c14 	add.w	ip, r5, #20
 8008a60:	f104 0314 	add.w	r3, r4, #20
 8008a64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a6c:	9202      	str	r2, [sp, #8]
 8008a6e:	ebac 0205 	sub.w	r2, ip, r5
 8008a72:	3a15      	subs	r2, #21
 8008a74:	f022 0203 	bic.w	r2, r2, #3
 8008a78:	3204      	adds	r2, #4
 8008a7a:	f105 0115 	add.w	r1, r5, #21
 8008a7e:	458c      	cmp	ip, r1
 8008a80:	bf38      	it	cc
 8008a82:	2204      	movcc	r2, #4
 8008a84:	9201      	str	r2, [sp, #4]
 8008a86:	9a02      	ldr	r2, [sp, #8]
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d808      	bhi.n	8008aa0 <__multiply+0x98>
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	dc55      	bgt.n	8008b3e <__multiply+0x136>
 8008a92:	6107      	str	r7, [r0, #16]
 8008a94:	b005      	add	sp, #20
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	f843 2b04 	str.w	r2, [r3], #4
 8008a9e:	e7db      	b.n	8008a58 <__multiply+0x50>
 8008aa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aa4:	f1ba 0f00 	cmp.w	sl, #0
 8008aa8:	d020      	beq.n	8008aec <__multiply+0xe4>
 8008aaa:	f105 0e14 	add.w	lr, r5, #20
 8008aae:	46b1      	mov	r9, r6
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ab6:	f8d9 b000 	ldr.w	fp, [r9]
 8008aba:	b2a1      	uxth	r1, r4
 8008abc:	fa1f fb8b 	uxth.w	fp, fp
 8008ac0:	fb0a b101 	mla	r1, sl, r1, fp
 8008ac4:	4411      	add	r1, r2
 8008ac6:	f8d9 2000 	ldr.w	r2, [r9]
 8008aca:	0c24      	lsrs	r4, r4, #16
 8008acc:	0c12      	lsrs	r2, r2, #16
 8008ace:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ad2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ad6:	b289      	uxth	r1, r1
 8008ad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008adc:	45f4      	cmp	ip, lr
 8008ade:	f849 1b04 	str.w	r1, [r9], #4
 8008ae2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ae6:	d8e4      	bhi.n	8008ab2 <__multiply+0xaa>
 8008ae8:	9901      	ldr	r1, [sp, #4]
 8008aea:	5072      	str	r2, [r6, r1]
 8008aec:	9a03      	ldr	r2, [sp, #12]
 8008aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008af2:	3304      	adds	r3, #4
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	d01f      	beq.n	8008b3a <__multiply+0x132>
 8008afa:	6834      	ldr	r4, [r6, #0]
 8008afc:	f105 0114 	add.w	r1, r5, #20
 8008b00:	46b6      	mov	lr, r6
 8008b02:	f04f 0a00 	mov.w	sl, #0
 8008b06:	880a      	ldrh	r2, [r1, #0]
 8008b08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b0c:	fb09 b202 	mla	r2, r9, r2, fp
 8008b10:	4492      	add	sl, r2
 8008b12:	b2a4      	uxth	r4, r4
 8008b14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b18:	f84e 4b04 	str.w	r4, [lr], #4
 8008b1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b20:	f8be 2000 	ldrh.w	r2, [lr]
 8008b24:	0c24      	lsrs	r4, r4, #16
 8008b26:	fb09 2404 	mla	r4, r9, r4, r2
 8008b2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b2e:	458c      	cmp	ip, r1
 8008b30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b34:	d8e7      	bhi.n	8008b06 <__multiply+0xfe>
 8008b36:	9a01      	ldr	r2, [sp, #4]
 8008b38:	50b4      	str	r4, [r6, r2]
 8008b3a:	3604      	adds	r6, #4
 8008b3c:	e7a3      	b.n	8008a86 <__multiply+0x7e>
 8008b3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1a5      	bne.n	8008a92 <__multiply+0x8a>
 8008b46:	3f01      	subs	r7, #1
 8008b48:	e7a1      	b.n	8008a8e <__multiply+0x86>
 8008b4a:	bf00      	nop
 8008b4c:	0800a154 	.word	0x0800a154
 8008b50:	0800a248 	.word	0x0800a248

08008b54 <__pow5mult>:
 8008b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b58:	4615      	mov	r5, r2
 8008b5a:	f012 0203 	ands.w	r2, r2, #3
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	d007      	beq.n	8008b74 <__pow5mult+0x20>
 8008b64:	4c25      	ldr	r4, [pc, #148]	; (8008bfc <__pow5mult+0xa8>)
 8008b66:	3a01      	subs	r2, #1
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b6e:	f7ff fe51 	bl	8008814 <__multadd>
 8008b72:	4607      	mov	r7, r0
 8008b74:	10ad      	asrs	r5, r5, #2
 8008b76:	d03d      	beq.n	8008bf4 <__pow5mult+0xa0>
 8008b78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b7a:	b97c      	cbnz	r4, 8008b9c <__pow5mult+0x48>
 8008b7c:	2010      	movs	r0, #16
 8008b7e:	f7ff fdbf 	bl	8008700 <malloc>
 8008b82:	4602      	mov	r2, r0
 8008b84:	6270      	str	r0, [r6, #36]	; 0x24
 8008b86:	b928      	cbnz	r0, 8008b94 <__pow5mult+0x40>
 8008b88:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <__pow5mult+0xac>)
 8008b8a:	481e      	ldr	r0, [pc, #120]	; (8008c04 <__pow5mult+0xb0>)
 8008b8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b90:	f000 ff58 	bl	8009a44 <__assert_func>
 8008b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b98:	6004      	str	r4, [r0, #0]
 8008b9a:	60c4      	str	r4, [r0, #12]
 8008b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ba4:	b94c      	cbnz	r4, 8008bba <__pow5mult+0x66>
 8008ba6:	f240 2171 	movw	r1, #625	; 0x271
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ff16 	bl	80089dc <__i2b>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	07eb      	lsls	r3, r5, #31
 8008bc0:	d50a      	bpl.n	8008bd8 <__pow5mult+0x84>
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7ff ff1e 	bl	8008a08 <__multiply>
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4680      	mov	r8, r0
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff fdfd 	bl	80087d0 <_Bfree>
 8008bd6:	4647      	mov	r7, r8
 8008bd8:	106d      	asrs	r5, r5, #1
 8008bda:	d00b      	beq.n	8008bf4 <__pow5mult+0xa0>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	b938      	cbnz	r0, 8008bf0 <__pow5mult+0x9c>
 8008be0:	4622      	mov	r2, r4
 8008be2:	4621      	mov	r1, r4
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff ff0f 	bl	8008a08 <__multiply>
 8008bea:	6020      	str	r0, [r4, #0]
 8008bec:	f8c0 9000 	str.w	r9, [r0]
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	e7e4      	b.n	8008bbe <__pow5mult+0x6a>
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfa:	bf00      	nop
 8008bfc:	0800a398 	.word	0x0800a398
 8008c00:	0800a0de 	.word	0x0800a0de
 8008c04:	0800a248 	.word	0x0800a248

08008c08 <__lshift>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	6849      	ldr	r1, [r1, #4]
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	4607      	mov	r7, r0
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c20:	f108 0601 	add.w	r6, r8, #1
 8008c24:	42b3      	cmp	r3, r6
 8008c26:	db0b      	blt.n	8008c40 <__lshift+0x38>
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff fd91 	bl	8008750 <_Balloc>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	b948      	cbnz	r0, 8008c46 <__lshift+0x3e>
 8008c32:	4602      	mov	r2, r0
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <__lshift+0xd0>)
 8008c36:	4829      	ldr	r0, [pc, #164]	; (8008cdc <__lshift+0xd4>)
 8008c38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c3c:	f000 ff02 	bl	8009a44 <__assert_func>
 8008c40:	3101      	adds	r1, #1
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	e7ee      	b.n	8008c24 <__lshift+0x1c>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f100 0114 	add.w	r1, r0, #20
 8008c4c:	f100 0210 	add.w	r2, r0, #16
 8008c50:	4618      	mov	r0, r3
 8008c52:	4553      	cmp	r3, sl
 8008c54:	db33      	blt.n	8008cbe <__lshift+0xb6>
 8008c56:	6920      	ldr	r0, [r4, #16]
 8008c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c5c:	f104 0314 	add.w	r3, r4, #20
 8008c60:	f019 091f 	ands.w	r9, r9, #31
 8008c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c6c:	d02b      	beq.n	8008cc6 <__lshift+0xbe>
 8008c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008c72:	468a      	mov	sl, r1
 8008c74:	2200      	movs	r2, #0
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	fa00 f009 	lsl.w	r0, r0, r9
 8008c7c:	4302      	orrs	r2, r0
 8008c7e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	459c      	cmp	ip, r3
 8008c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c8c:	d8f3      	bhi.n	8008c76 <__lshift+0x6e>
 8008c8e:	ebac 0304 	sub.w	r3, ip, r4
 8008c92:	3b15      	subs	r3, #21
 8008c94:	f023 0303 	bic.w	r3, r3, #3
 8008c98:	3304      	adds	r3, #4
 8008c9a:	f104 0015 	add.w	r0, r4, #21
 8008c9e:	4584      	cmp	ip, r0
 8008ca0:	bf38      	it	cc
 8008ca2:	2304      	movcc	r3, #4
 8008ca4:	50ca      	str	r2, [r1, r3]
 8008ca6:	b10a      	cbz	r2, 8008cac <__lshift+0xa4>
 8008ca8:	f108 0602 	add.w	r6, r8, #2
 8008cac:	3e01      	subs	r6, #1
 8008cae:	4638      	mov	r0, r7
 8008cb0:	612e      	str	r6, [r5, #16]
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f7ff fd8c 	bl	80087d0 <_Bfree>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	e7c5      	b.n	8008c52 <__lshift+0x4a>
 8008cc6:	3904      	subs	r1, #4
 8008cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cd0:	459c      	cmp	ip, r3
 8008cd2:	d8f9      	bhi.n	8008cc8 <__lshift+0xc0>
 8008cd4:	e7ea      	b.n	8008cac <__lshift+0xa4>
 8008cd6:	bf00      	nop
 8008cd8:	0800a154 	.word	0x0800a154
 8008cdc:	0800a248 	.word	0x0800a248

08008ce0 <__mcmp>:
 8008ce0:	b530      	push	{r4, r5, lr}
 8008ce2:	6902      	ldr	r2, [r0, #16]
 8008ce4:	690c      	ldr	r4, [r1, #16]
 8008ce6:	1b12      	subs	r2, r2, r4
 8008ce8:	d10e      	bne.n	8008d08 <__mcmp+0x28>
 8008cea:	f100 0314 	add.w	r3, r0, #20
 8008cee:	3114      	adds	r1, #20
 8008cf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d00:	42a5      	cmp	r5, r4
 8008d02:	d003      	beq.n	8008d0c <__mcmp+0x2c>
 8008d04:	d305      	bcc.n	8008d12 <__mcmp+0x32>
 8008d06:	2201      	movs	r2, #1
 8008d08:	4610      	mov	r0, r2
 8008d0a:	bd30      	pop	{r4, r5, pc}
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	d3f3      	bcc.n	8008cf8 <__mcmp+0x18>
 8008d10:	e7fa      	b.n	8008d08 <__mcmp+0x28>
 8008d12:	f04f 32ff 	mov.w	r2, #4294967295
 8008d16:	e7f7      	b.n	8008d08 <__mcmp+0x28>

08008d18 <__mdiff>:
 8008d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	4606      	mov	r6, r0
 8008d20:	4611      	mov	r1, r2
 8008d22:	4620      	mov	r0, r4
 8008d24:	4617      	mov	r7, r2
 8008d26:	f7ff ffdb 	bl	8008ce0 <__mcmp>
 8008d2a:	1e05      	subs	r5, r0, #0
 8008d2c:	d110      	bne.n	8008d50 <__mdiff+0x38>
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff fd0d 	bl	8008750 <_Balloc>
 8008d36:	b930      	cbnz	r0, 8008d46 <__mdiff+0x2e>
 8008d38:	4b39      	ldr	r3, [pc, #228]	; (8008e20 <__mdiff+0x108>)
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	f240 2132 	movw	r1, #562	; 0x232
 8008d40:	4838      	ldr	r0, [pc, #224]	; (8008e24 <__mdiff+0x10c>)
 8008d42:	f000 fe7f 	bl	8009a44 <__assert_func>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d50:	bfa4      	itt	ge
 8008d52:	463b      	movge	r3, r7
 8008d54:	4627      	movge	r7, r4
 8008d56:	4630      	mov	r0, r6
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	bfa6      	itte	ge
 8008d5c:	461c      	movge	r4, r3
 8008d5e:	2500      	movge	r5, #0
 8008d60:	2501      	movlt	r5, #1
 8008d62:	f7ff fcf5 	bl	8008750 <_Balloc>
 8008d66:	b920      	cbnz	r0, 8008d72 <__mdiff+0x5a>
 8008d68:	4b2d      	ldr	r3, [pc, #180]	; (8008e20 <__mdiff+0x108>)
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d70:	e7e6      	b.n	8008d40 <__mdiff+0x28>
 8008d72:	693e      	ldr	r6, [r7, #16]
 8008d74:	60c5      	str	r5, [r0, #12]
 8008d76:	6925      	ldr	r5, [r4, #16]
 8008d78:	f107 0114 	add.w	r1, r7, #20
 8008d7c:	f104 0914 	add.w	r9, r4, #20
 8008d80:	f100 0e14 	add.w	lr, r0, #20
 8008d84:	f107 0210 	add.w	r2, r7, #16
 8008d88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d90:	46f2      	mov	sl, lr
 8008d92:	2700      	movs	r7, #0
 8008d94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d9c:	fa1f f883 	uxth.w	r8, r3
 8008da0:	fa17 f78b 	uxtah	r7, r7, fp
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	eba7 0808 	sub.w	r8, r7, r8
 8008daa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008db2:	fa1f f888 	uxth.w	r8, r8
 8008db6:	141f      	asrs	r7, r3, #16
 8008db8:	454d      	cmp	r5, r9
 8008dba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008dbe:	f84a 3b04 	str.w	r3, [sl], #4
 8008dc2:	d8e7      	bhi.n	8008d94 <__mdiff+0x7c>
 8008dc4:	1b2b      	subs	r3, r5, r4
 8008dc6:	3b15      	subs	r3, #21
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	3304      	adds	r3, #4
 8008dce:	3415      	adds	r4, #21
 8008dd0:	42a5      	cmp	r5, r4
 8008dd2:	bf38      	it	cc
 8008dd4:	2304      	movcc	r3, #4
 8008dd6:	4419      	add	r1, r3
 8008dd8:	4473      	add	r3, lr
 8008dda:	469e      	mov	lr, r3
 8008ddc:	460d      	mov	r5, r1
 8008dde:	4565      	cmp	r5, ip
 8008de0:	d30e      	bcc.n	8008e00 <__mdiff+0xe8>
 8008de2:	f10c 0203 	add.w	r2, ip, #3
 8008de6:	1a52      	subs	r2, r2, r1
 8008de8:	f022 0203 	bic.w	r2, r2, #3
 8008dec:	3903      	subs	r1, #3
 8008dee:	458c      	cmp	ip, r1
 8008df0:	bf38      	it	cc
 8008df2:	2200      	movcc	r2, #0
 8008df4:	441a      	add	r2, r3
 8008df6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dfa:	b17b      	cbz	r3, 8008e1c <__mdiff+0x104>
 8008dfc:	6106      	str	r6, [r0, #16]
 8008dfe:	e7a5      	b.n	8008d4c <__mdiff+0x34>
 8008e00:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e04:	fa17 f488 	uxtah	r4, r7, r8
 8008e08:	1422      	asrs	r2, r4, #16
 8008e0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e0e:	b2a4      	uxth	r4, r4
 8008e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e14:	f84e 4b04 	str.w	r4, [lr], #4
 8008e18:	1417      	asrs	r7, r2, #16
 8008e1a:	e7e0      	b.n	8008dde <__mdiff+0xc6>
 8008e1c:	3e01      	subs	r6, #1
 8008e1e:	e7ea      	b.n	8008df6 <__mdiff+0xde>
 8008e20:	0800a154 	.word	0x0800a154
 8008e24:	0800a248 	.word	0x0800a248

08008e28 <__ulp>:
 8008e28:	b082      	sub	sp, #8
 8008e2a:	ed8d 0b00 	vstr	d0, [sp]
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	4912      	ldr	r1, [pc, #72]	; (8008e7c <__ulp+0x54>)
 8008e32:	4019      	ands	r1, r3
 8008e34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	dd05      	ble.n	8008e48 <__ulp+0x20>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	ec43 2b10 	vmov	d0, r2, r3
 8008e44:	b002      	add	sp, #8
 8008e46:	4770      	bx	lr
 8008e48:	4249      	negs	r1, r1
 8008e4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	da04      	bge.n	8008e66 <__ulp+0x3e>
 8008e5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e60:	fa41 f300 	asr.w	r3, r1, r0
 8008e64:	e7ec      	b.n	8008e40 <__ulp+0x18>
 8008e66:	f1a0 0114 	sub.w	r1, r0, #20
 8008e6a:	291e      	cmp	r1, #30
 8008e6c:	bfda      	itte	le
 8008e6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008e72:	fa20 f101 	lsrle.w	r1, r0, r1
 8008e76:	2101      	movgt	r1, #1
 8008e78:	460a      	mov	r2, r1
 8008e7a:	e7e1      	b.n	8008e40 <__ulp+0x18>
 8008e7c:	7ff00000 	.word	0x7ff00000

08008e80 <__b2d>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	6905      	ldr	r5, [r0, #16]
 8008e84:	f100 0714 	add.w	r7, r0, #20
 8008e88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e8c:	1f2e      	subs	r6, r5, #4
 8008e8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff fd52 	bl	800893c <__hi0bits>
 8008e98:	f1c0 0320 	rsb	r3, r0, #32
 8008e9c:	280a      	cmp	r0, #10
 8008e9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f1c <__b2d+0x9c>
 8008ea2:	600b      	str	r3, [r1, #0]
 8008ea4:	dc14      	bgt.n	8008ed0 <__b2d+0x50>
 8008ea6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008eaa:	fa24 f10e 	lsr.w	r1, r4, lr
 8008eae:	42b7      	cmp	r7, r6
 8008eb0:	ea41 030c 	orr.w	r3, r1, ip
 8008eb4:	bf34      	ite	cc
 8008eb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008eba:	2100      	movcs	r1, #0
 8008ebc:	3015      	adds	r0, #21
 8008ebe:	fa04 f000 	lsl.w	r0, r4, r0
 8008ec2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ec6:	ea40 0201 	orr.w	r2, r0, r1
 8008eca:	ec43 2b10 	vmov	d0, r2, r3
 8008ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed0:	42b7      	cmp	r7, r6
 8008ed2:	bf3a      	itte	cc
 8008ed4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ed8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008edc:	2100      	movcs	r1, #0
 8008ede:	380b      	subs	r0, #11
 8008ee0:	d017      	beq.n	8008f12 <__b2d+0x92>
 8008ee2:	f1c0 0c20 	rsb	ip, r0, #32
 8008ee6:	fa04 f500 	lsl.w	r5, r4, r0
 8008eea:	42be      	cmp	r6, r7
 8008eec:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ef0:	ea45 0504 	orr.w	r5, r5, r4
 8008ef4:	bf8c      	ite	hi
 8008ef6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008efa:	2400      	movls	r4, #0
 8008efc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008f00:	fa01 f000 	lsl.w	r0, r1, r0
 8008f04:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f0c:	ea40 0204 	orr.w	r2, r0, r4
 8008f10:	e7db      	b.n	8008eca <__b2d+0x4a>
 8008f12:	ea44 030c 	orr.w	r3, r4, ip
 8008f16:	460a      	mov	r2, r1
 8008f18:	e7d7      	b.n	8008eca <__b2d+0x4a>
 8008f1a:	bf00      	nop
 8008f1c:	3ff00000 	.word	0x3ff00000

08008f20 <__d2b>:
 8008f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4689      	mov	r9, r1
 8008f26:	2101      	movs	r1, #1
 8008f28:	ec57 6b10 	vmov	r6, r7, d0
 8008f2c:	4690      	mov	r8, r2
 8008f2e:	f7ff fc0f 	bl	8008750 <_Balloc>
 8008f32:	4604      	mov	r4, r0
 8008f34:	b930      	cbnz	r0, 8008f44 <__d2b+0x24>
 8008f36:	4602      	mov	r2, r0
 8008f38:	4b25      	ldr	r3, [pc, #148]	; (8008fd0 <__d2b+0xb0>)
 8008f3a:	4826      	ldr	r0, [pc, #152]	; (8008fd4 <__d2b+0xb4>)
 8008f3c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f40:	f000 fd80 	bl	8009a44 <__assert_func>
 8008f44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f4c:	bb35      	cbnz	r5, 8008f9c <__d2b+0x7c>
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	d028      	beq.n	8008fa6 <__d2b+0x86>
 8008f54:	4668      	mov	r0, sp
 8008f56:	9600      	str	r6, [sp, #0]
 8008f58:	f7ff fd10 	bl	800897c <__lo0bits>
 8008f5c:	9900      	ldr	r1, [sp, #0]
 8008f5e:	b300      	cbz	r0, 8008fa2 <__d2b+0x82>
 8008f60:	9a01      	ldr	r2, [sp, #4]
 8008f62:	f1c0 0320 	rsb	r3, r0, #32
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	40c2      	lsrs	r2, r0
 8008f6e:	6163      	str	r3, [r4, #20]
 8008f70:	9201      	str	r2, [sp, #4]
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	61a3      	str	r3, [r4, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bf14      	ite	ne
 8008f7a:	2202      	movne	r2, #2
 8008f7c:	2201      	moveq	r2, #1
 8008f7e:	6122      	str	r2, [r4, #16]
 8008f80:	b1d5      	cbz	r5, 8008fb8 <__d2b+0x98>
 8008f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f86:	4405      	add	r5, r0
 8008f88:	f8c9 5000 	str.w	r5, [r9]
 8008f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f90:	f8c8 0000 	str.w	r0, [r8]
 8008f94:	4620      	mov	r0, r4
 8008f96:	b003      	add	sp, #12
 8008f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fa0:	e7d5      	b.n	8008f4e <__d2b+0x2e>
 8008fa2:	6161      	str	r1, [r4, #20]
 8008fa4:	e7e5      	b.n	8008f72 <__d2b+0x52>
 8008fa6:	a801      	add	r0, sp, #4
 8008fa8:	f7ff fce8 	bl	800897c <__lo0bits>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	6163      	str	r3, [r4, #20]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	6122      	str	r2, [r4, #16]
 8008fb4:	3020      	adds	r0, #32
 8008fb6:	e7e3      	b.n	8008f80 <__d2b+0x60>
 8008fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fc0:	f8c9 0000 	str.w	r0, [r9]
 8008fc4:	6918      	ldr	r0, [r3, #16]
 8008fc6:	f7ff fcb9 	bl	800893c <__hi0bits>
 8008fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fce:	e7df      	b.n	8008f90 <__d2b+0x70>
 8008fd0:	0800a154 	.word	0x0800a154
 8008fd4:	0800a248 	.word	0x0800a248

08008fd8 <__ratio>:
 8008fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4688      	mov	r8, r1
 8008fde:	4669      	mov	r1, sp
 8008fe0:	4681      	mov	r9, r0
 8008fe2:	f7ff ff4d 	bl	8008e80 <__b2d>
 8008fe6:	a901      	add	r1, sp, #4
 8008fe8:	4640      	mov	r0, r8
 8008fea:	ec55 4b10 	vmov	r4, r5, d0
 8008fee:	f7ff ff47 	bl	8008e80 <__b2d>
 8008ff2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ff6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ffa:	eba3 0c02 	sub.w	ip, r3, r2
 8008ffe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009008:	ec51 0b10 	vmov	r0, r1, d0
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfd6      	itet	le
 8009010:	460a      	movle	r2, r1
 8009012:	462a      	movgt	r2, r5
 8009014:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009018:	468b      	mov	fp, r1
 800901a:	462f      	mov	r7, r5
 800901c:	bfd4      	ite	le
 800901e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009022:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009026:	4620      	mov	r0, r4
 8009028:	ee10 2a10 	vmov	r2, s0
 800902c:	465b      	mov	r3, fp
 800902e:	4639      	mov	r1, r7
 8009030:	f7f7 fc34 	bl	800089c <__aeabi_ddiv>
 8009034:	ec41 0b10 	vmov	d0, r0, r1
 8009038:	b003      	add	sp, #12
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800903e <__copybits>:
 800903e:	3901      	subs	r1, #1
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	1149      	asrs	r1, r1, #5
 8009044:	6914      	ldr	r4, [r2, #16]
 8009046:	3101      	adds	r1, #1
 8009048:	f102 0314 	add.w	r3, r2, #20
 800904c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009050:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009054:	1f05      	subs	r5, r0, #4
 8009056:	42a3      	cmp	r3, r4
 8009058:	d30c      	bcc.n	8009074 <__copybits+0x36>
 800905a:	1aa3      	subs	r3, r4, r2
 800905c:	3b11      	subs	r3, #17
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	3211      	adds	r2, #17
 8009064:	42a2      	cmp	r2, r4
 8009066:	bf88      	it	hi
 8009068:	2300      	movhi	r3, #0
 800906a:	4418      	add	r0, r3
 800906c:	2300      	movs	r3, #0
 800906e:	4288      	cmp	r0, r1
 8009070:	d305      	bcc.n	800907e <__copybits+0x40>
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	f853 6b04 	ldr.w	r6, [r3], #4
 8009078:	f845 6f04 	str.w	r6, [r5, #4]!
 800907c:	e7eb      	b.n	8009056 <__copybits+0x18>
 800907e:	f840 3b04 	str.w	r3, [r0], #4
 8009082:	e7f4      	b.n	800906e <__copybits+0x30>

08009084 <__any_on>:
 8009084:	f100 0214 	add.w	r2, r0, #20
 8009088:	6900      	ldr	r0, [r0, #16]
 800908a:	114b      	asrs	r3, r1, #5
 800908c:	4298      	cmp	r0, r3
 800908e:	b510      	push	{r4, lr}
 8009090:	db11      	blt.n	80090b6 <__any_on+0x32>
 8009092:	dd0a      	ble.n	80090aa <__any_on+0x26>
 8009094:	f011 011f 	ands.w	r1, r1, #31
 8009098:	d007      	beq.n	80090aa <__any_on+0x26>
 800909a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800909e:	fa24 f001 	lsr.w	r0, r4, r1
 80090a2:	fa00 f101 	lsl.w	r1, r0, r1
 80090a6:	428c      	cmp	r4, r1
 80090a8:	d10b      	bne.n	80090c2 <__any_on+0x3e>
 80090aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d803      	bhi.n	80090ba <__any_on+0x36>
 80090b2:	2000      	movs	r0, #0
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	4603      	mov	r3, r0
 80090b8:	e7f7      	b.n	80090aa <__any_on+0x26>
 80090ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090be:	2900      	cmp	r1, #0
 80090c0:	d0f5      	beq.n	80090ae <__any_on+0x2a>
 80090c2:	2001      	movs	r0, #1
 80090c4:	e7f6      	b.n	80090b4 <__any_on+0x30>

080090c6 <_calloc_r>:
 80090c6:	b513      	push	{r0, r1, r4, lr}
 80090c8:	434a      	muls	r2, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	9201      	str	r2, [sp, #4]
 80090ce:	f000 f859 	bl	8009184 <_malloc_r>
 80090d2:	4604      	mov	r4, r0
 80090d4:	b118      	cbz	r0, 80090de <_calloc_r+0x18>
 80090d6:	9a01      	ldr	r2, [sp, #4]
 80090d8:	2100      	movs	r1, #0
 80090da:	f7fc fab7 	bl	800564c <memset>
 80090de:	4620      	mov	r0, r4
 80090e0:	b002      	add	sp, #8
 80090e2:	bd10      	pop	{r4, pc}

080090e4 <_free_r>:
 80090e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d048      	beq.n	800917c <_free_r+0x98>
 80090ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ee:	9001      	str	r0, [sp, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f1a1 0404 	sub.w	r4, r1, #4
 80090f6:	bfb8      	it	lt
 80090f8:	18e4      	addlt	r4, r4, r3
 80090fa:	f000 fe35 	bl	8009d68 <__malloc_lock>
 80090fe:	4a20      	ldr	r2, [pc, #128]	; (8009180 <_free_r+0x9c>)
 8009100:	9801      	ldr	r0, [sp, #4]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	4615      	mov	r5, r2
 8009106:	b933      	cbnz	r3, 8009116 <_free_r+0x32>
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	6014      	str	r4, [r2, #0]
 800910c:	b003      	add	sp, #12
 800910e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009112:	f000 be2f 	b.w	8009d74 <__malloc_unlock>
 8009116:	42a3      	cmp	r3, r4
 8009118:	d90b      	bls.n	8009132 <_free_r+0x4e>
 800911a:	6821      	ldr	r1, [r4, #0]
 800911c:	1862      	adds	r2, r4, r1
 800911e:	4293      	cmp	r3, r2
 8009120:	bf04      	itt	eq
 8009122:	681a      	ldreq	r2, [r3, #0]
 8009124:	685b      	ldreq	r3, [r3, #4]
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	bf04      	itt	eq
 800912a:	1852      	addeq	r2, r2, r1
 800912c:	6022      	streq	r2, [r4, #0]
 800912e:	602c      	str	r4, [r5, #0]
 8009130:	e7ec      	b.n	800910c <_free_r+0x28>
 8009132:	461a      	mov	r2, r3
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	b10b      	cbz	r3, 800913c <_free_r+0x58>
 8009138:	42a3      	cmp	r3, r4
 800913a:	d9fa      	bls.n	8009132 <_free_r+0x4e>
 800913c:	6811      	ldr	r1, [r2, #0]
 800913e:	1855      	adds	r5, r2, r1
 8009140:	42a5      	cmp	r5, r4
 8009142:	d10b      	bne.n	800915c <_free_r+0x78>
 8009144:	6824      	ldr	r4, [r4, #0]
 8009146:	4421      	add	r1, r4
 8009148:	1854      	adds	r4, r2, r1
 800914a:	42a3      	cmp	r3, r4
 800914c:	6011      	str	r1, [r2, #0]
 800914e:	d1dd      	bne.n	800910c <_free_r+0x28>
 8009150:	681c      	ldr	r4, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	6053      	str	r3, [r2, #4]
 8009156:	4421      	add	r1, r4
 8009158:	6011      	str	r1, [r2, #0]
 800915a:	e7d7      	b.n	800910c <_free_r+0x28>
 800915c:	d902      	bls.n	8009164 <_free_r+0x80>
 800915e:	230c      	movs	r3, #12
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	e7d3      	b.n	800910c <_free_r+0x28>
 8009164:	6825      	ldr	r5, [r4, #0]
 8009166:	1961      	adds	r1, r4, r5
 8009168:	428b      	cmp	r3, r1
 800916a:	bf04      	itt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	bf04      	itt	eq
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	6054      	str	r4, [r2, #4]
 800917a:	e7c7      	b.n	800910c <_free_r+0x28>
 800917c:	b003      	add	sp, #12
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	20000200 	.word	0x20000200

08009184 <_malloc_r>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	1ccd      	adds	r5, r1, #3
 8009188:	f025 0503 	bic.w	r5, r5, #3
 800918c:	3508      	adds	r5, #8
 800918e:	2d0c      	cmp	r5, #12
 8009190:	bf38      	it	cc
 8009192:	250c      	movcc	r5, #12
 8009194:	2d00      	cmp	r5, #0
 8009196:	4606      	mov	r6, r0
 8009198:	db01      	blt.n	800919e <_malloc_r+0x1a>
 800919a:	42a9      	cmp	r1, r5
 800919c:	d903      	bls.n	80091a6 <_malloc_r+0x22>
 800919e:	230c      	movs	r3, #12
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	2000      	movs	r0, #0
 80091a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a6:	f000 fddf 	bl	8009d68 <__malloc_lock>
 80091aa:	4921      	ldr	r1, [pc, #132]	; (8009230 <_malloc_r+0xac>)
 80091ac:	680a      	ldr	r2, [r1, #0]
 80091ae:	4614      	mov	r4, r2
 80091b0:	b99c      	cbnz	r4, 80091da <_malloc_r+0x56>
 80091b2:	4f20      	ldr	r7, [pc, #128]	; (8009234 <_malloc_r+0xb0>)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	b923      	cbnz	r3, 80091c2 <_malloc_r+0x3e>
 80091b8:	4621      	mov	r1, r4
 80091ba:	4630      	mov	r0, r6
 80091bc:	f000 fafc 	bl	80097b8 <_sbrk_r>
 80091c0:	6038      	str	r0, [r7, #0]
 80091c2:	4629      	mov	r1, r5
 80091c4:	4630      	mov	r0, r6
 80091c6:	f000 faf7 	bl	80097b8 <_sbrk_r>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d123      	bne.n	8009216 <_malloc_r+0x92>
 80091ce:	230c      	movs	r3, #12
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 fdce 	bl	8009d74 <__malloc_unlock>
 80091d8:	e7e3      	b.n	80091a2 <_malloc_r+0x1e>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	1b5b      	subs	r3, r3, r5
 80091de:	d417      	bmi.n	8009210 <_malloc_r+0x8c>
 80091e0:	2b0b      	cmp	r3, #11
 80091e2:	d903      	bls.n	80091ec <_malloc_r+0x68>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	441c      	add	r4, r3
 80091e8:	6025      	str	r5, [r4, #0]
 80091ea:	e004      	b.n	80091f6 <_malloc_r+0x72>
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	42a2      	cmp	r2, r4
 80091f0:	bf0c      	ite	eq
 80091f2:	600b      	streq	r3, [r1, #0]
 80091f4:	6053      	strne	r3, [r2, #4]
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 fdbc 	bl	8009d74 <__malloc_unlock>
 80091fc:	f104 000b 	add.w	r0, r4, #11
 8009200:	1d23      	adds	r3, r4, #4
 8009202:	f020 0007 	bic.w	r0, r0, #7
 8009206:	1ac2      	subs	r2, r0, r3
 8009208:	d0cc      	beq.n	80091a4 <_malloc_r+0x20>
 800920a:	1a1b      	subs	r3, r3, r0
 800920c:	50a3      	str	r3, [r4, r2]
 800920e:	e7c9      	b.n	80091a4 <_malloc_r+0x20>
 8009210:	4622      	mov	r2, r4
 8009212:	6864      	ldr	r4, [r4, #4]
 8009214:	e7cc      	b.n	80091b0 <_malloc_r+0x2c>
 8009216:	1cc4      	adds	r4, r0, #3
 8009218:	f024 0403 	bic.w	r4, r4, #3
 800921c:	42a0      	cmp	r0, r4
 800921e:	d0e3      	beq.n	80091e8 <_malloc_r+0x64>
 8009220:	1a21      	subs	r1, r4, r0
 8009222:	4630      	mov	r0, r6
 8009224:	f000 fac8 	bl	80097b8 <_sbrk_r>
 8009228:	3001      	adds	r0, #1
 800922a:	d1dd      	bne.n	80091e8 <_malloc_r+0x64>
 800922c:	e7cf      	b.n	80091ce <_malloc_r+0x4a>
 800922e:	bf00      	nop
 8009230:	20000200 	.word	0x20000200
 8009234:	20000204 	.word	0x20000204

08009238 <__ssputs_r>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	688e      	ldr	r6, [r1, #8]
 800923e:	429e      	cmp	r6, r3
 8009240:	4682      	mov	sl, r0
 8009242:	460c      	mov	r4, r1
 8009244:	4690      	mov	r8, r2
 8009246:	461f      	mov	r7, r3
 8009248:	d838      	bhi.n	80092bc <__ssputs_r+0x84>
 800924a:	898a      	ldrh	r2, [r1, #12]
 800924c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009250:	d032      	beq.n	80092b8 <__ssputs_r+0x80>
 8009252:	6825      	ldr	r5, [r4, #0]
 8009254:	6909      	ldr	r1, [r1, #16]
 8009256:	eba5 0901 	sub.w	r9, r5, r1
 800925a:	6965      	ldr	r5, [r4, #20]
 800925c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009264:	3301      	adds	r3, #1
 8009266:	444b      	add	r3, r9
 8009268:	106d      	asrs	r5, r5, #1
 800926a:	429d      	cmp	r5, r3
 800926c:	bf38      	it	cc
 800926e:	461d      	movcc	r5, r3
 8009270:	0553      	lsls	r3, r2, #21
 8009272:	d531      	bpl.n	80092d8 <__ssputs_r+0xa0>
 8009274:	4629      	mov	r1, r5
 8009276:	f7ff ff85 	bl	8009184 <_malloc_r>
 800927a:	4606      	mov	r6, r0
 800927c:	b950      	cbnz	r0, 8009294 <__ssputs_r+0x5c>
 800927e:	230c      	movs	r3, #12
 8009280:	f8ca 3000 	str.w	r3, [sl]
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	6921      	ldr	r1, [r4, #16]
 8009296:	464a      	mov	r2, r9
 8009298:	f7ff fa4c 	bl	8008734 <memcpy>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	6126      	str	r6, [r4, #16]
 80092aa:	6165      	str	r5, [r4, #20]
 80092ac:	444e      	add	r6, r9
 80092ae:	eba5 0509 	sub.w	r5, r5, r9
 80092b2:	6026      	str	r6, [r4, #0]
 80092b4:	60a5      	str	r5, [r4, #8]
 80092b6:	463e      	mov	r6, r7
 80092b8:	42be      	cmp	r6, r7
 80092ba:	d900      	bls.n	80092be <__ssputs_r+0x86>
 80092bc:	463e      	mov	r6, r7
 80092be:	4632      	mov	r2, r6
 80092c0:	6820      	ldr	r0, [r4, #0]
 80092c2:	4641      	mov	r1, r8
 80092c4:	f000 fd36 	bl	8009d34 <memmove>
 80092c8:	68a3      	ldr	r3, [r4, #8]
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	1b9b      	subs	r3, r3, r6
 80092ce:	4432      	add	r2, r6
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7db      	b.n	8009290 <__ssputs_r+0x58>
 80092d8:	462a      	mov	r2, r5
 80092da:	f000 fd51 	bl	8009d80 <_realloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1e1      	bne.n	80092a8 <__ssputs_r+0x70>
 80092e4:	6921      	ldr	r1, [r4, #16]
 80092e6:	4650      	mov	r0, sl
 80092e8:	f7ff fefc 	bl	80090e4 <_free_r>
 80092ec:	e7c7      	b.n	800927e <__ssputs_r+0x46>
	...

080092f0 <_svfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	4698      	mov	r8, r3
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	b09d      	sub	sp, #116	; 0x74
 80092fc:	4607      	mov	r7, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	4614      	mov	r4, r2
 8009302:	d50e      	bpl.n	8009322 <_svfiprintf_r+0x32>
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b963      	cbnz	r3, 8009322 <_svfiprintf_r+0x32>
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	f7ff ff3b 	bl	8009184 <_malloc_r>
 800930e:	6028      	str	r0, [r5, #0]
 8009310:	6128      	str	r0, [r5, #16]
 8009312:	b920      	cbnz	r0, 800931e <_svfiprintf_r+0x2e>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e0d1      	b.n	80094c2 <_svfiprintf_r+0x1d2>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	616b      	str	r3, [r5, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	9309      	str	r3, [sp, #36]	; 0x24
 8009326:	2320      	movs	r3, #32
 8009328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800932c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009330:	2330      	movs	r3, #48	; 0x30
 8009332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094dc <_svfiprintf_r+0x1ec>
 8009336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800933a:	f04f 0901 	mov.w	r9, #1
 800933e:	4623      	mov	r3, r4
 8009340:	469a      	mov	sl, r3
 8009342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009346:	b10a      	cbz	r2, 800934c <_svfiprintf_r+0x5c>
 8009348:	2a25      	cmp	r2, #37	; 0x25
 800934a:	d1f9      	bne.n	8009340 <_svfiprintf_r+0x50>
 800934c:	ebba 0b04 	subs.w	fp, sl, r4
 8009350:	d00b      	beq.n	800936a <_svfiprintf_r+0x7a>
 8009352:	465b      	mov	r3, fp
 8009354:	4622      	mov	r2, r4
 8009356:	4629      	mov	r1, r5
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff ff6d 	bl	8009238 <__ssputs_r>
 800935e:	3001      	adds	r0, #1
 8009360:	f000 80aa 	beq.w	80094b8 <_svfiprintf_r+0x1c8>
 8009364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009366:	445a      	add	r2, fp
 8009368:	9209      	str	r2, [sp, #36]	; 0x24
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80a2 	beq.w	80094b8 <_svfiprintf_r+0x1c8>
 8009374:	2300      	movs	r3, #0
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937e:	f10a 0a01 	add.w	sl, sl, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800938a:	931a      	str	r3, [sp, #104]	; 0x68
 800938c:	4654      	mov	r4, sl
 800938e:	2205      	movs	r2, #5
 8009390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009394:	4851      	ldr	r0, [pc, #324]	; (80094dc <_svfiprintf_r+0x1ec>)
 8009396:	f7f6 ff4b 	bl	8000230 <memchr>
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	b9d8      	cbnz	r0, 80093d6 <_svfiprintf_r+0xe6>
 800939e:	06d0      	lsls	r0, r2, #27
 80093a0:	bf44      	itt	mi
 80093a2:	2320      	movmi	r3, #32
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a8:	0711      	lsls	r1, r2, #28
 80093aa:	bf44      	itt	mi
 80093ac:	232b      	movmi	r3, #43	; 0x2b
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
 80093b6:	2b2a      	cmp	r3, #42	; 0x2a
 80093b8:	d015      	beq.n	80093e6 <_svfiprintf_r+0xf6>
 80093ba:	9a07      	ldr	r2, [sp, #28]
 80093bc:	4654      	mov	r4, sl
 80093be:	2000      	movs	r0, #0
 80093c0:	f04f 0c0a 	mov.w	ip, #10
 80093c4:	4621      	mov	r1, r4
 80093c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ca:	3b30      	subs	r3, #48	; 0x30
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d94e      	bls.n	800946e <_svfiprintf_r+0x17e>
 80093d0:	b1b0      	cbz	r0, 8009400 <_svfiprintf_r+0x110>
 80093d2:	9207      	str	r2, [sp, #28]
 80093d4:	e014      	b.n	8009400 <_svfiprintf_r+0x110>
 80093d6:	eba0 0308 	sub.w	r3, r0, r8
 80093da:	fa09 f303 	lsl.w	r3, r9, r3
 80093de:	4313      	orrs	r3, r2
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	46a2      	mov	sl, r4
 80093e4:	e7d2      	b.n	800938c <_svfiprintf_r+0x9c>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	1d19      	adds	r1, r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	9103      	str	r1, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbb      	ittet	lt
 80093f2:	425b      	neglt	r3, r3
 80093f4:	f042 0202 	orrlt.w	r2, r2, #2
 80093f8:	9307      	strge	r3, [sp, #28]
 80093fa:	9307      	strlt	r3, [sp, #28]
 80093fc:	bfb8      	it	lt
 80093fe:	9204      	strlt	r2, [sp, #16]
 8009400:	7823      	ldrb	r3, [r4, #0]
 8009402:	2b2e      	cmp	r3, #46	; 0x2e
 8009404:	d10c      	bne.n	8009420 <_svfiprintf_r+0x130>
 8009406:	7863      	ldrb	r3, [r4, #1]
 8009408:	2b2a      	cmp	r3, #42	; 0x2a
 800940a:	d135      	bne.n	8009478 <_svfiprintf_r+0x188>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	9203      	str	r2, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfb8      	it	lt
 8009418:	f04f 33ff 	movlt.w	r3, #4294967295
 800941c:	3402      	adds	r4, #2
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094ec <_svfiprintf_r+0x1fc>
 8009424:	7821      	ldrb	r1, [r4, #0]
 8009426:	2203      	movs	r2, #3
 8009428:	4650      	mov	r0, sl
 800942a:	f7f6 ff01 	bl	8000230 <memchr>
 800942e:	b140      	cbz	r0, 8009442 <_svfiprintf_r+0x152>
 8009430:	2340      	movs	r3, #64	; 0x40
 8009432:	eba0 000a 	sub.w	r0, r0, sl
 8009436:	fa03 f000 	lsl.w	r0, r3, r0
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	4303      	orrs	r3, r0
 800943e:	3401      	adds	r4, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009446:	4826      	ldr	r0, [pc, #152]	; (80094e0 <_svfiprintf_r+0x1f0>)
 8009448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800944c:	2206      	movs	r2, #6
 800944e:	f7f6 feef 	bl	8000230 <memchr>
 8009452:	2800      	cmp	r0, #0
 8009454:	d038      	beq.n	80094c8 <_svfiprintf_r+0x1d8>
 8009456:	4b23      	ldr	r3, [pc, #140]	; (80094e4 <_svfiprintf_r+0x1f4>)
 8009458:	bb1b      	cbnz	r3, 80094a2 <_svfiprintf_r+0x1b2>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	3307      	adds	r3, #7
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	3308      	adds	r3, #8
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	4433      	add	r3, r6
 800946a:	9309      	str	r3, [sp, #36]	; 0x24
 800946c:	e767      	b.n	800933e <_svfiprintf_r+0x4e>
 800946e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009472:	460c      	mov	r4, r1
 8009474:	2001      	movs	r0, #1
 8009476:	e7a5      	b.n	80093c4 <_svfiprintf_r+0xd4>
 8009478:	2300      	movs	r3, #0
 800947a:	3401      	adds	r4, #1
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	4619      	mov	r1, r3
 8009480:	f04f 0c0a 	mov.w	ip, #10
 8009484:	4620      	mov	r0, r4
 8009486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800948a:	3a30      	subs	r2, #48	; 0x30
 800948c:	2a09      	cmp	r2, #9
 800948e:	d903      	bls.n	8009498 <_svfiprintf_r+0x1a8>
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0c5      	beq.n	8009420 <_svfiprintf_r+0x130>
 8009494:	9105      	str	r1, [sp, #20]
 8009496:	e7c3      	b.n	8009420 <_svfiprintf_r+0x130>
 8009498:	fb0c 2101 	mla	r1, ip, r1, r2
 800949c:	4604      	mov	r4, r0
 800949e:	2301      	movs	r3, #1
 80094a0:	e7f0      	b.n	8009484 <_svfiprintf_r+0x194>
 80094a2:	ab03      	add	r3, sp, #12
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	462a      	mov	r2, r5
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094aa:	a904      	add	r1, sp, #16
 80094ac:	4638      	mov	r0, r7
 80094ae:	f7fc f975 	bl	800579c <_printf_float>
 80094b2:	1c42      	adds	r2, r0, #1
 80094b4:	4606      	mov	r6, r0
 80094b6:	d1d6      	bne.n	8009466 <_svfiprintf_r+0x176>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	065b      	lsls	r3, r3, #25
 80094bc:	f53f af2c 	bmi.w	8009318 <_svfiprintf_r+0x28>
 80094c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c2:	b01d      	add	sp, #116	; 0x74
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7fc fc06 	bl	8005ce4 <_printf_i>
 80094d8:	e7eb      	b.n	80094b2 <_svfiprintf_r+0x1c2>
 80094da:	bf00      	nop
 80094dc:	0800a3a4 	.word	0x0800a3a4
 80094e0:	0800a3ae 	.word	0x0800a3ae
 80094e4:	0800579d 	.word	0x0800579d
 80094e8:	08009239 	.word	0x08009239
 80094ec:	0800a3aa 	.word	0x0800a3aa

080094f0 <__sfputc_r>:
 80094f0:	6893      	ldr	r3, [r2, #8]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	b410      	push	{r4}
 80094f8:	6093      	str	r3, [r2, #8]
 80094fa:	da08      	bge.n	800950e <__sfputc_r+0x1e>
 80094fc:	6994      	ldr	r4, [r2, #24]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	db01      	blt.n	8009506 <__sfputc_r+0x16>
 8009502:	290a      	cmp	r1, #10
 8009504:	d103      	bne.n	800950e <__sfputc_r+0x1e>
 8009506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950a:	f000 b9bb 	b.w	8009884 <__swbuf_r>
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	1c58      	adds	r0, r3, #1
 8009512:	6010      	str	r0, [r2, #0]
 8009514:	7019      	strb	r1, [r3, #0]
 8009516:	4608      	mov	r0, r1
 8009518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800951c:	4770      	bx	lr

0800951e <__sfputs_r>:
 800951e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	4614      	mov	r4, r2
 8009526:	18d5      	adds	r5, r2, r3
 8009528:	42ac      	cmp	r4, r5
 800952a:	d101      	bne.n	8009530 <__sfputs_r+0x12>
 800952c:	2000      	movs	r0, #0
 800952e:	e007      	b.n	8009540 <__sfputs_r+0x22>
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	463a      	mov	r2, r7
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ffda 	bl	80094f0 <__sfputc_r>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d1f3      	bne.n	8009528 <__sfputs_r+0xa>
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009544 <_vfiprintf_r>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	460d      	mov	r5, r1
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	4614      	mov	r4, r2
 800954e:	4698      	mov	r8, r3
 8009550:	4606      	mov	r6, r0
 8009552:	b118      	cbz	r0, 800955c <_vfiprintf_r+0x18>
 8009554:	6983      	ldr	r3, [r0, #24]
 8009556:	b90b      	cbnz	r3, 800955c <_vfiprintf_r+0x18>
 8009558:	f7fe fcbe 	bl	8007ed8 <__sinit>
 800955c:	4b89      	ldr	r3, [pc, #548]	; (8009784 <_vfiprintf_r+0x240>)
 800955e:	429d      	cmp	r5, r3
 8009560:	d11b      	bne.n	800959a <_vfiprintf_r+0x56>
 8009562:	6875      	ldr	r5, [r6, #4]
 8009564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009566:	07d9      	lsls	r1, r3, #31
 8009568:	d405      	bmi.n	8009576 <_vfiprintf_r+0x32>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	059a      	lsls	r2, r3, #22
 800956e:	d402      	bmi.n	8009576 <_vfiprintf_r+0x32>
 8009570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009572:	f7ff f8c2 	bl	80086fa <__retarget_lock_acquire_recursive>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	071b      	lsls	r3, r3, #28
 800957a:	d501      	bpl.n	8009580 <_vfiprintf_r+0x3c>
 800957c:	692b      	ldr	r3, [r5, #16]
 800957e:	b9eb      	cbnz	r3, 80095bc <_vfiprintf_r+0x78>
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	f000 f9f0 	bl	8009968 <__swsetup_r>
 8009588:	b1c0      	cbz	r0, 80095bc <_vfiprintf_r+0x78>
 800958a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800958c:	07dc      	lsls	r4, r3, #31
 800958e:	d50e      	bpl.n	80095ae <_vfiprintf_r+0x6a>
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	b01d      	add	sp, #116	; 0x74
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	4b7b      	ldr	r3, [pc, #492]	; (8009788 <_vfiprintf_r+0x244>)
 800959c:	429d      	cmp	r5, r3
 800959e:	d101      	bne.n	80095a4 <_vfiprintf_r+0x60>
 80095a0:	68b5      	ldr	r5, [r6, #8]
 80095a2:	e7df      	b.n	8009564 <_vfiprintf_r+0x20>
 80095a4:	4b79      	ldr	r3, [pc, #484]	; (800978c <_vfiprintf_r+0x248>)
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf08      	it	eq
 80095aa:	68f5      	ldreq	r5, [r6, #12]
 80095ac:	e7da      	b.n	8009564 <_vfiprintf_r+0x20>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	0598      	lsls	r0, r3, #22
 80095b2:	d4ed      	bmi.n	8009590 <_vfiprintf_r+0x4c>
 80095b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b6:	f7ff f8a1 	bl	80086fc <__retarget_lock_release_recursive>
 80095ba:	e7e9      	b.n	8009590 <_vfiprintf_r+0x4c>
 80095bc:	2300      	movs	r3, #0
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	2320      	movs	r3, #32
 80095c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ca:	2330      	movs	r3, #48	; 0x30
 80095cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009790 <_vfiprintf_r+0x24c>
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	f04f 0901 	mov.w	r9, #1
 80095d8:	4623      	mov	r3, r4
 80095da:	469a      	mov	sl, r3
 80095dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e0:	b10a      	cbz	r2, 80095e6 <_vfiprintf_r+0xa2>
 80095e2:	2a25      	cmp	r2, #37	; 0x25
 80095e4:	d1f9      	bne.n	80095da <_vfiprintf_r+0x96>
 80095e6:	ebba 0b04 	subs.w	fp, sl, r4
 80095ea:	d00b      	beq.n	8009604 <_vfiprintf_r+0xc0>
 80095ec:	465b      	mov	r3, fp
 80095ee:	4622      	mov	r2, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff ff93 	bl	800951e <__sfputs_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f000 80aa 	beq.w	8009752 <_vfiprintf_r+0x20e>
 80095fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009600:	445a      	add	r2, fp
 8009602:	9209      	str	r2, [sp, #36]	; 0x24
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a2 	beq.w	8009752 <_vfiprintf_r+0x20e>
 800960e:	2300      	movs	r3, #0
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009618:	f10a 0a01 	add.w	sl, sl, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009624:	931a      	str	r3, [sp, #104]	; 0x68
 8009626:	4654      	mov	r4, sl
 8009628:	2205      	movs	r2, #5
 800962a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962e:	4858      	ldr	r0, [pc, #352]	; (8009790 <_vfiprintf_r+0x24c>)
 8009630:	f7f6 fdfe 	bl	8000230 <memchr>
 8009634:	9a04      	ldr	r2, [sp, #16]
 8009636:	b9d8      	cbnz	r0, 8009670 <_vfiprintf_r+0x12c>
 8009638:	06d1      	lsls	r1, r2, #27
 800963a:	bf44      	itt	mi
 800963c:	2320      	movmi	r3, #32
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009642:	0713      	lsls	r3, r2, #28
 8009644:	bf44      	itt	mi
 8009646:	232b      	movmi	r3, #43	; 0x2b
 8009648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d015      	beq.n	8009680 <_vfiprintf_r+0x13c>
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	4654      	mov	r4, sl
 8009658:	2000      	movs	r0, #0
 800965a:	f04f 0c0a 	mov.w	ip, #10
 800965e:	4621      	mov	r1, r4
 8009660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009664:	3b30      	subs	r3, #48	; 0x30
 8009666:	2b09      	cmp	r3, #9
 8009668:	d94e      	bls.n	8009708 <_vfiprintf_r+0x1c4>
 800966a:	b1b0      	cbz	r0, 800969a <_vfiprintf_r+0x156>
 800966c:	9207      	str	r2, [sp, #28]
 800966e:	e014      	b.n	800969a <_vfiprintf_r+0x156>
 8009670:	eba0 0308 	sub.w	r3, r0, r8
 8009674:	fa09 f303 	lsl.w	r3, r9, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	46a2      	mov	sl, r4
 800967e:	e7d2      	b.n	8009626 <_vfiprintf_r+0xe2>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d19      	adds	r1, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9103      	str	r1, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfbb      	ittet	lt
 800968c:	425b      	neglt	r3, r3
 800968e:	f042 0202 	orrlt.w	r2, r2, #2
 8009692:	9307      	strge	r3, [sp, #28]
 8009694:	9307      	strlt	r3, [sp, #28]
 8009696:	bfb8      	it	lt
 8009698:	9204      	strlt	r2, [sp, #16]
 800969a:	7823      	ldrb	r3, [r4, #0]
 800969c:	2b2e      	cmp	r3, #46	; 0x2e
 800969e:	d10c      	bne.n	80096ba <_vfiprintf_r+0x176>
 80096a0:	7863      	ldrb	r3, [r4, #1]
 80096a2:	2b2a      	cmp	r3, #42	; 0x2a
 80096a4:	d135      	bne.n	8009712 <_vfiprintf_r+0x1ce>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9203      	str	r2, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b6:	3402      	adds	r4, #2
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097a0 <_vfiprintf_r+0x25c>
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	2203      	movs	r2, #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fdb4 	bl	8000230 <memchr>
 80096c8:	b140      	cbz	r0, 80096dc <_vfiprintf_r+0x198>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	fa03 f000 	lsl.w	r0, r3, r0
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4303      	orrs	r3, r0
 80096d8:	3401      	adds	r4, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e0:	482c      	ldr	r0, [pc, #176]	; (8009794 <_vfiprintf_r+0x250>)
 80096e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e6:	2206      	movs	r2, #6
 80096e8:	f7f6 fda2 	bl	8000230 <memchr>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d03f      	beq.n	8009770 <_vfiprintf_r+0x22c>
 80096f0:	4b29      	ldr	r3, [pc, #164]	; (8009798 <_vfiprintf_r+0x254>)
 80096f2:	bb1b      	cbnz	r3, 800973c <_vfiprintf_r+0x1f8>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	3307      	adds	r3, #7
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	3308      	adds	r3, #8
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	443b      	add	r3, r7
 8009704:	9309      	str	r3, [sp, #36]	; 0x24
 8009706:	e767      	b.n	80095d8 <_vfiprintf_r+0x94>
 8009708:	fb0c 3202 	mla	r2, ip, r2, r3
 800970c:	460c      	mov	r4, r1
 800970e:	2001      	movs	r0, #1
 8009710:	e7a5      	b.n	800965e <_vfiprintf_r+0x11a>
 8009712:	2300      	movs	r3, #0
 8009714:	3401      	adds	r4, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4619      	mov	r1, r3
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009724:	3a30      	subs	r2, #48	; 0x30
 8009726:	2a09      	cmp	r2, #9
 8009728:	d903      	bls.n	8009732 <_vfiprintf_r+0x1ee>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0c5      	beq.n	80096ba <_vfiprintf_r+0x176>
 800972e:	9105      	str	r1, [sp, #20]
 8009730:	e7c3      	b.n	80096ba <_vfiprintf_r+0x176>
 8009732:	fb0c 2101 	mla	r1, ip, r1, r2
 8009736:	4604      	mov	r4, r0
 8009738:	2301      	movs	r3, #1
 800973a:	e7f0      	b.n	800971e <_vfiprintf_r+0x1da>
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <_vfiprintf_r+0x258>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4630      	mov	r0, r6
 8009748:	f7fc f828 	bl	800579c <_printf_float>
 800974c:	4607      	mov	r7, r0
 800974e:	1c78      	adds	r0, r7, #1
 8009750:	d1d6      	bne.n	8009700 <_vfiprintf_r+0x1bc>
 8009752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009754:	07d9      	lsls	r1, r3, #31
 8009756:	d405      	bmi.n	8009764 <_vfiprintf_r+0x220>
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	059a      	lsls	r2, r3, #22
 800975c:	d402      	bmi.n	8009764 <_vfiprintf_r+0x220>
 800975e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009760:	f7fe ffcc 	bl	80086fc <__retarget_lock_release_recursive>
 8009764:	89ab      	ldrh	r3, [r5, #12]
 8009766:	065b      	lsls	r3, r3, #25
 8009768:	f53f af12 	bmi.w	8009590 <_vfiprintf_r+0x4c>
 800976c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800976e:	e711      	b.n	8009594 <_vfiprintf_r+0x50>
 8009770:	ab03      	add	r3, sp, #12
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	462a      	mov	r2, r5
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <_vfiprintf_r+0x258>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	4630      	mov	r0, r6
 800977c:	f7fc fab2 	bl	8005ce4 <_printf_i>
 8009780:	e7e4      	b.n	800974c <_vfiprintf_r+0x208>
 8009782:	bf00      	nop
 8009784:	0800a188 	.word	0x0800a188
 8009788:	0800a1a8 	.word	0x0800a1a8
 800978c:	0800a168 	.word	0x0800a168
 8009790:	0800a3a4 	.word	0x0800a3a4
 8009794:	0800a3ae 	.word	0x0800a3ae
 8009798:	0800579d 	.word	0x0800579d
 800979c:	0800951f 	.word	0x0800951f
 80097a0:	0800a3aa 	.word	0x0800a3aa
 80097a4:	00000000 	.word	0x00000000

080097a8 <nan>:
 80097a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097b0 <nan+0x8>
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	00000000 	.word	0x00000000
 80097b4:	7ff80000 	.word	0x7ff80000

080097b8 <_sbrk_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d06      	ldr	r5, [pc, #24]	; (80097d4 <_sbrk_r+0x1c>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7f7 ff00 	bl	80015c8 <_sbrk>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_sbrk_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_sbrk_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	2000031c 	.word	0x2000031c

080097d8 <__sread>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	460c      	mov	r4, r1
 80097dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e0:	f000 faf4 	bl	8009dcc <_read_r>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	bfab      	itete	ge
 80097e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ea:	89a3      	ldrhlt	r3, [r4, #12]
 80097ec:	181b      	addge	r3, r3, r0
 80097ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097f2:	bfac      	ite	ge
 80097f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80097f6:	81a3      	strhlt	r3, [r4, #12]
 80097f8:	bd10      	pop	{r4, pc}

080097fa <__swrite>:
 80097fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097fe:	461f      	mov	r7, r3
 8009800:	898b      	ldrh	r3, [r1, #12]
 8009802:	05db      	lsls	r3, r3, #23
 8009804:	4605      	mov	r5, r0
 8009806:	460c      	mov	r4, r1
 8009808:	4616      	mov	r6, r2
 800980a:	d505      	bpl.n	8009818 <__swrite+0x1e>
 800980c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009810:	2302      	movs	r3, #2
 8009812:	2200      	movs	r2, #0
 8009814:	f000 fa18 	bl	8009c48 <_lseek_r>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800981e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	4632      	mov	r2, r6
 8009826:	463b      	mov	r3, r7
 8009828:	4628      	mov	r0, r5
 800982a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800982e:	f000 b889 	b.w	8009944 <_write_r>

08009832 <__sseek>:
 8009832:	b510      	push	{r4, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983a:	f000 fa05 	bl	8009c48 <_lseek_r>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	bf15      	itete	ne
 8009844:	6560      	strne	r0, [r4, #84]	; 0x54
 8009846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800984a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800984e:	81a3      	strheq	r3, [r4, #12]
 8009850:	bf18      	it	ne
 8009852:	81a3      	strhne	r3, [r4, #12]
 8009854:	bd10      	pop	{r4, pc}

08009856 <__sclose>:
 8009856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985a:	f000 b911 	b.w	8009a80 <_close_r>

0800985e <strncmp>:
 800985e:	b510      	push	{r4, lr}
 8009860:	b16a      	cbz	r2, 800987e <strncmp+0x20>
 8009862:	3901      	subs	r1, #1
 8009864:	1884      	adds	r4, r0, r2
 8009866:	f810 3b01 	ldrb.w	r3, [r0], #1
 800986a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800986e:	4293      	cmp	r3, r2
 8009870:	d103      	bne.n	800987a <strncmp+0x1c>
 8009872:	42a0      	cmp	r0, r4
 8009874:	d001      	beq.n	800987a <strncmp+0x1c>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f5      	bne.n	8009866 <strncmp+0x8>
 800987a:	1a98      	subs	r0, r3, r2
 800987c:	bd10      	pop	{r4, pc}
 800987e:	4610      	mov	r0, r2
 8009880:	e7fc      	b.n	800987c <strncmp+0x1e>
	...

08009884 <__swbuf_r>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	460e      	mov	r6, r1
 8009888:	4614      	mov	r4, r2
 800988a:	4605      	mov	r5, r0
 800988c:	b118      	cbz	r0, 8009896 <__swbuf_r+0x12>
 800988e:	6983      	ldr	r3, [r0, #24]
 8009890:	b90b      	cbnz	r3, 8009896 <__swbuf_r+0x12>
 8009892:	f7fe fb21 	bl	8007ed8 <__sinit>
 8009896:	4b21      	ldr	r3, [pc, #132]	; (800991c <__swbuf_r+0x98>)
 8009898:	429c      	cmp	r4, r3
 800989a:	d12b      	bne.n	80098f4 <__swbuf_r+0x70>
 800989c:	686c      	ldr	r4, [r5, #4]
 800989e:	69a3      	ldr	r3, [r4, #24]
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	071a      	lsls	r2, r3, #28
 80098a6:	d52f      	bpl.n	8009908 <__swbuf_r+0x84>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	b36b      	cbz	r3, 8009908 <__swbuf_r+0x84>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	6820      	ldr	r0, [r4, #0]
 80098b0:	1ac0      	subs	r0, r0, r3
 80098b2:	6963      	ldr	r3, [r4, #20]
 80098b4:	b2f6      	uxtb	r6, r6
 80098b6:	4283      	cmp	r3, r0
 80098b8:	4637      	mov	r7, r6
 80098ba:	dc04      	bgt.n	80098c6 <__swbuf_r+0x42>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f974 	bl	8009bac <_fflush_r>
 80098c4:	bb30      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	60a3      	str	r3, [r4, #8]
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	701e      	strb	r6, [r3, #0]
 80098d4:	6963      	ldr	r3, [r4, #20]
 80098d6:	3001      	adds	r0, #1
 80098d8:	4283      	cmp	r3, r0
 80098da:	d004      	beq.n	80098e6 <__swbuf_r+0x62>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	07db      	lsls	r3, r3, #31
 80098e0:	d506      	bpl.n	80098f0 <__swbuf_r+0x6c>
 80098e2:	2e0a      	cmp	r6, #10
 80098e4:	d104      	bne.n	80098f0 <__swbuf_r+0x6c>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f95f 	bl	8009bac <_fflush_r>
 80098ee:	b988      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098f0:	4638      	mov	r0, r7
 80098f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <__swbuf_r+0x9c>)
 80098f6:	429c      	cmp	r4, r3
 80098f8:	d101      	bne.n	80098fe <__swbuf_r+0x7a>
 80098fa:	68ac      	ldr	r4, [r5, #8]
 80098fc:	e7cf      	b.n	800989e <__swbuf_r+0x1a>
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <__swbuf_r+0xa0>)
 8009900:	429c      	cmp	r4, r3
 8009902:	bf08      	it	eq
 8009904:	68ec      	ldreq	r4, [r5, #12]
 8009906:	e7ca      	b.n	800989e <__swbuf_r+0x1a>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f82c 	bl	8009968 <__swsetup_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	d0cb      	beq.n	80098ac <__swbuf_r+0x28>
 8009914:	f04f 37ff 	mov.w	r7, #4294967295
 8009918:	e7ea      	b.n	80098f0 <__swbuf_r+0x6c>
 800991a:	bf00      	nop
 800991c:	0800a188 	.word	0x0800a188
 8009920:	0800a1a8 	.word	0x0800a1a8
 8009924:	0800a168 	.word	0x0800a168

08009928 <__ascii_wctomb>:
 8009928:	b149      	cbz	r1, 800993e <__ascii_wctomb+0x16>
 800992a:	2aff      	cmp	r2, #255	; 0xff
 800992c:	bf85      	ittet	hi
 800992e:	238a      	movhi	r3, #138	; 0x8a
 8009930:	6003      	strhi	r3, [r0, #0]
 8009932:	700a      	strbls	r2, [r1, #0]
 8009934:	f04f 30ff 	movhi.w	r0, #4294967295
 8009938:	bf98      	it	ls
 800993a:	2001      	movls	r0, #1
 800993c:	4770      	bx	lr
 800993e:	4608      	mov	r0, r1
 8009940:	4770      	bx	lr
	...

08009944 <_write_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d07      	ldr	r5, [pc, #28]	; (8009964 <_write_r+0x20>)
 8009948:	4604      	mov	r4, r0
 800994a:	4608      	mov	r0, r1
 800994c:	4611      	mov	r1, r2
 800994e:	2200      	movs	r2, #0
 8009950:	602a      	str	r2, [r5, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f7f7 fde7 	bl	8001526 <_write>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_write_r+0x1e>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_write_r+0x1e>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	2000031c 	.word	0x2000031c

08009968 <__swsetup_r>:
 8009968:	4b32      	ldr	r3, [pc, #200]	; (8009a34 <__swsetup_r+0xcc>)
 800996a:	b570      	push	{r4, r5, r6, lr}
 800996c:	681d      	ldr	r5, [r3, #0]
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	b125      	cbz	r5, 800997e <__swsetup_r+0x16>
 8009974:	69ab      	ldr	r3, [r5, #24]
 8009976:	b913      	cbnz	r3, 800997e <__swsetup_r+0x16>
 8009978:	4628      	mov	r0, r5
 800997a:	f7fe faad 	bl	8007ed8 <__sinit>
 800997e:	4b2e      	ldr	r3, [pc, #184]	; (8009a38 <__swsetup_r+0xd0>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d10f      	bne.n	80099a4 <__swsetup_r+0x3c>
 8009984:	686c      	ldr	r4, [r5, #4]
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800998c:	0719      	lsls	r1, r3, #28
 800998e:	d42c      	bmi.n	80099ea <__swsetup_r+0x82>
 8009990:	06dd      	lsls	r5, r3, #27
 8009992:	d411      	bmi.n	80099b8 <__swsetup_r+0x50>
 8009994:	2309      	movs	r3, #9
 8009996:	6033      	str	r3, [r6, #0]
 8009998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	e03e      	b.n	8009a22 <__swsetup_r+0xba>
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <__swsetup_r+0xd4>)
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d101      	bne.n	80099ae <__swsetup_r+0x46>
 80099aa:	68ac      	ldr	r4, [r5, #8]
 80099ac:	e7eb      	b.n	8009986 <__swsetup_r+0x1e>
 80099ae:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <__swsetup_r+0xd8>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	bf08      	it	eq
 80099b4:	68ec      	ldreq	r4, [r5, #12]
 80099b6:	e7e6      	b.n	8009986 <__swsetup_r+0x1e>
 80099b8:	0758      	lsls	r0, r3, #29
 80099ba:	d512      	bpl.n	80099e2 <__swsetup_r+0x7a>
 80099bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099be:	b141      	cbz	r1, 80099d2 <__swsetup_r+0x6a>
 80099c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c4:	4299      	cmp	r1, r3
 80099c6:	d002      	beq.n	80099ce <__swsetup_r+0x66>
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff fb8b 	bl	80090e4 <_free_r>
 80099ce:	2300      	movs	r3, #0
 80099d0:	6363      	str	r3, [r4, #52]	; 0x34
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	2300      	movs	r3, #0
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f043 0308 	orr.w	r3, r3, #8
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	b94b      	cbnz	r3, 8009a02 <__swsetup_r+0x9a>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f8:	d003      	beq.n	8009a02 <__swsetup_r+0x9a>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 f959 	bl	8009cb4 <__smakebuf_r>
 8009a02:	89a0      	ldrh	r0, [r4, #12]
 8009a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a08:	f010 0301 	ands.w	r3, r0, #1
 8009a0c:	d00a      	beq.n	8009a24 <__swsetup_r+0xbc>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6963      	ldr	r3, [r4, #20]
 8009a14:	425b      	negs	r3, r3
 8009a16:	61a3      	str	r3, [r4, #24]
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	b943      	cbnz	r3, 8009a2e <__swsetup_r+0xc6>
 8009a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a20:	d1ba      	bne.n	8009998 <__swsetup_r+0x30>
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	0781      	lsls	r1, r0, #30
 8009a26:	bf58      	it	pl
 8009a28:	6963      	ldrpl	r3, [r4, #20]
 8009a2a:	60a3      	str	r3, [r4, #8]
 8009a2c:	e7f4      	b.n	8009a18 <__swsetup_r+0xb0>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e7f7      	b.n	8009a22 <__swsetup_r+0xba>
 8009a32:	bf00      	nop
 8009a34:	2000000c 	.word	0x2000000c
 8009a38:	0800a188 	.word	0x0800a188
 8009a3c:	0800a1a8 	.word	0x0800a1a8
 8009a40:	0800a168 	.word	0x0800a168

08009a44 <__assert_func>:
 8009a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a46:	4614      	mov	r4, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <__assert_func+0x2c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4605      	mov	r5, r0
 8009a50:	68d8      	ldr	r0, [r3, #12]
 8009a52:	b14c      	cbz	r4, 8009a68 <__assert_func+0x24>
 8009a54:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <__assert_func+0x30>)
 8009a56:	9100      	str	r1, [sp, #0]
 8009a58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a5c:	4906      	ldr	r1, [pc, #24]	; (8009a78 <__assert_func+0x34>)
 8009a5e:	462b      	mov	r3, r5
 8009a60:	f000 f8e0 	bl	8009c24 <fiprintf>
 8009a64:	f000 f9c4 	bl	8009df0 <abort>
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <__assert_func+0x38>)
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	e7f3      	b.n	8009a56 <__assert_func+0x12>
 8009a6e:	bf00      	nop
 8009a70:	2000000c 	.word	0x2000000c
 8009a74:	0800a3b5 	.word	0x0800a3b5
 8009a78:	0800a3c2 	.word	0x0800a3c2
 8009a7c:	0800a3f0 	.word	0x0800a3f0

08009a80 <_close_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_close_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f7 fd67 	bl	800155e <_close>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_close_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_close_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	2000031c 	.word	0x2000031c

08009aa0 <__sflush_r>:
 8009aa0:	898a      	ldrh	r2, [r1, #12]
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	0710      	lsls	r0, r2, #28
 8009aaa:	460c      	mov	r4, r1
 8009aac:	d458      	bmi.n	8009b60 <__sflush_r+0xc0>
 8009aae:	684b      	ldr	r3, [r1, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dc05      	bgt.n	8009ac0 <__sflush_r+0x20>
 8009ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc02      	bgt.n	8009ac0 <__sflush_r+0x20>
 8009aba:	2000      	movs	r0, #0
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d0f9      	beq.n	8009aba <__sflush_r+0x1a>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009acc:	682f      	ldr	r7, [r5, #0]
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	d032      	beq.n	8009b38 <__sflush_r+0x98>
 8009ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	075a      	lsls	r2, r3, #29
 8009ad8:	d505      	bpl.n	8009ae6 <__sflush_r+0x46>
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	1ac0      	subs	r0, r0, r3
 8009ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ae0:	b10b      	cbz	r3, 8009ae6 <__sflush_r+0x46>
 8009ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ae4:	1ac0      	subs	r0, r0, r3
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aec:	6a21      	ldr	r1, [r4, #32]
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b0      	blx	r6
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	d106      	bne.n	8009b06 <__sflush_r+0x66>
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	291d      	cmp	r1, #29
 8009afc:	d82c      	bhi.n	8009b58 <__sflush_r+0xb8>
 8009afe:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <__sflush_r+0x108>)
 8009b00:	40ca      	lsrs	r2, r1
 8009b02:	07d6      	lsls	r6, r2, #31
 8009b04:	d528      	bpl.n	8009b58 <__sflush_r+0xb8>
 8009b06:	2200      	movs	r2, #0
 8009b08:	6062      	str	r2, [r4, #4]
 8009b0a:	04d9      	lsls	r1, r3, #19
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	6022      	str	r2, [r4, #0]
 8009b10:	d504      	bpl.n	8009b1c <__sflush_r+0x7c>
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0x7a>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b903      	cbnz	r3, 8009b1c <__sflush_r+0x7c>
 8009b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b1e:	602f      	str	r7, [r5, #0]
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d0ca      	beq.n	8009aba <__sflush_r+0x1a>
 8009b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	d002      	beq.n	8009b32 <__sflush_r+0x92>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7ff fad9 	bl	80090e4 <_free_r>
 8009b32:	2000      	movs	r0, #0
 8009b34:	6360      	str	r0, [r4, #52]	; 0x34
 8009b36:	e7c1      	b.n	8009abc <__sflush_r+0x1c>
 8009b38:	6a21      	ldr	r1, [r4, #32]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b0      	blx	r6
 8009b40:	1c41      	adds	r1, r0, #1
 8009b42:	d1c7      	bne.n	8009ad4 <__sflush_r+0x34>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0c4      	beq.n	8009ad4 <__sflush_r+0x34>
 8009b4a:	2b1d      	cmp	r3, #29
 8009b4c:	d001      	beq.n	8009b52 <__sflush_r+0xb2>
 8009b4e:	2b16      	cmp	r3, #22
 8009b50:	d101      	bne.n	8009b56 <__sflush_r+0xb6>
 8009b52:	602f      	str	r7, [r5, #0]
 8009b54:	e7b1      	b.n	8009aba <__sflush_r+0x1a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	e7ad      	b.n	8009abc <__sflush_r+0x1c>
 8009b60:	690f      	ldr	r7, [r1, #16]
 8009b62:	2f00      	cmp	r7, #0
 8009b64:	d0a9      	beq.n	8009aba <__sflush_r+0x1a>
 8009b66:	0793      	lsls	r3, r2, #30
 8009b68:	680e      	ldr	r6, [r1, #0]
 8009b6a:	bf08      	it	eq
 8009b6c:	694b      	ldreq	r3, [r1, #20]
 8009b6e:	600f      	str	r7, [r1, #0]
 8009b70:	bf18      	it	ne
 8009b72:	2300      	movne	r3, #0
 8009b74:	eba6 0807 	sub.w	r8, r6, r7
 8009b78:	608b      	str	r3, [r1, #8]
 8009b7a:	f1b8 0f00 	cmp.w	r8, #0
 8009b7e:	dd9c      	ble.n	8009aba <__sflush_r+0x1a>
 8009b80:	6a21      	ldr	r1, [r4, #32]
 8009b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b84:	4643      	mov	r3, r8
 8009b86:	463a      	mov	r2, r7
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b0      	blx	r6
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	dc06      	bgt.n	8009b9e <__sflush_r+0xfe>
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	e78e      	b.n	8009abc <__sflush_r+0x1c>
 8009b9e:	4407      	add	r7, r0
 8009ba0:	eba8 0800 	sub.w	r8, r8, r0
 8009ba4:	e7e9      	b.n	8009b7a <__sflush_r+0xda>
 8009ba6:	bf00      	nop
 8009ba8:	20400001 	.word	0x20400001

08009bac <_fflush_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	b913      	cbnz	r3, 8009bbc <_fflush_r+0x10>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	4628      	mov	r0, r5
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	b118      	cbz	r0, 8009bc6 <_fflush_r+0x1a>
 8009bbe:	6983      	ldr	r3, [r0, #24]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <_fflush_r+0x1a>
 8009bc2:	f7fe f989 	bl	8007ed8 <__sinit>
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <_fflush_r+0x6c>)
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d11b      	bne.n	8009c04 <_fflush_r+0x58>
 8009bcc:	686c      	ldr	r4, [r5, #4]
 8009bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0ef      	beq.n	8009bb6 <_fflush_r+0xa>
 8009bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bd8:	07d0      	lsls	r0, r2, #31
 8009bda:	d404      	bmi.n	8009be6 <_fflush_r+0x3a>
 8009bdc:	0599      	lsls	r1, r3, #22
 8009bde:	d402      	bmi.n	8009be6 <_fflush_r+0x3a>
 8009be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be2:	f7fe fd8a 	bl	80086fa <__retarget_lock_acquire_recursive>
 8009be6:	4628      	mov	r0, r5
 8009be8:	4621      	mov	r1, r4
 8009bea:	f7ff ff59 	bl	8009aa0 <__sflush_r>
 8009bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bf0:	07da      	lsls	r2, r3, #31
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	d4e0      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	059b      	lsls	r3, r3, #22
 8009bfa:	d4dd      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bfe:	f7fe fd7d 	bl	80086fc <__retarget_lock_release_recursive>
 8009c02:	e7d9      	b.n	8009bb8 <_fflush_r+0xc>
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <_fflush_r+0x70>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <_fflush_r+0x62>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7df      	b.n	8009bce <_fflush_r+0x22>
 8009c0e:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <_fflush_r+0x74>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7da      	b.n	8009bce <_fflush_r+0x22>
 8009c18:	0800a188 	.word	0x0800a188
 8009c1c:	0800a1a8 	.word	0x0800a1a8
 8009c20:	0800a168 	.word	0x0800a168

08009c24 <fiprintf>:
 8009c24:	b40e      	push	{r1, r2, r3}
 8009c26:	b503      	push	{r0, r1, lr}
 8009c28:	4601      	mov	r1, r0
 8009c2a:	ab03      	add	r3, sp, #12
 8009c2c:	4805      	ldr	r0, [pc, #20]	; (8009c44 <fiprintf+0x20>)
 8009c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f7ff fc85 	bl	8009544 <_vfiprintf_r>
 8009c3a:	b002      	add	sp, #8
 8009c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c40:	b003      	add	sp, #12
 8009c42:	4770      	bx	lr
 8009c44:	2000000c 	.word	0x2000000c

08009c48 <_lseek_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	; (8009c68 <_lseek_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f7 fca8 	bl	80015ac <_lseek>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_lseek_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_lseek_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	2000031c 	.word	0x2000031c

08009c6c <__swhatbuf_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	460e      	mov	r6, r1
 8009c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c74:	2900      	cmp	r1, #0
 8009c76:	b096      	sub	sp, #88	; 0x58
 8009c78:	4614      	mov	r4, r2
 8009c7a:	461d      	mov	r5, r3
 8009c7c:	da07      	bge.n	8009c8e <__swhatbuf_r+0x22>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	89b3      	ldrh	r3, [r6, #12]
 8009c84:	061a      	lsls	r2, r3, #24
 8009c86:	d410      	bmi.n	8009caa <__swhatbuf_r+0x3e>
 8009c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8c:	e00e      	b.n	8009cac <__swhatbuf_r+0x40>
 8009c8e:	466a      	mov	r2, sp
 8009c90:	f000 f8b6 	bl	8009e00 <_fstat_r>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dbf2      	blt.n	8009c7e <__swhatbuf_r+0x12>
 8009c98:	9a01      	ldr	r2, [sp, #4]
 8009c9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ca2:	425a      	negs	r2, r3
 8009ca4:	415a      	adcs	r2, r3
 8009ca6:	602a      	str	r2, [r5, #0]
 8009ca8:	e7ee      	b.n	8009c88 <__swhatbuf_r+0x1c>
 8009caa:	2340      	movs	r3, #64	; 0x40
 8009cac:	2000      	movs	r0, #0
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	b016      	add	sp, #88	; 0x58
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}

08009cb4 <__smakebuf_r>:
 8009cb4:	898b      	ldrh	r3, [r1, #12]
 8009cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cb8:	079d      	lsls	r5, r3, #30
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	d507      	bpl.n	8009cd0 <__smakebuf_r+0x1c>
 8009cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	6123      	str	r3, [r4, #16]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	6163      	str	r3, [r4, #20]
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	ab01      	add	r3, sp, #4
 8009cd2:	466a      	mov	r2, sp
 8009cd4:	f7ff ffca 	bl	8009c6c <__swhatbuf_r>
 8009cd8:	9900      	ldr	r1, [sp, #0]
 8009cda:	4605      	mov	r5, r0
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff fa51 	bl	8009184 <_malloc_r>
 8009ce2:	b948      	cbnz	r0, 8009cf8 <__smakebuf_r+0x44>
 8009ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce8:	059a      	lsls	r2, r3, #22
 8009cea:	d4ef      	bmi.n	8009ccc <__smakebuf_r+0x18>
 8009cec:	f023 0303 	bic.w	r3, r3, #3
 8009cf0:	f043 0302 	orr.w	r3, r3, #2
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	e7e3      	b.n	8009cc0 <__smakebuf_r+0xc>
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <__smakebuf_r+0x7c>)
 8009cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	6020      	str	r0, [r4, #0]
 8009d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	6163      	str	r3, [r4, #20]
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	6120      	str	r0, [r4, #16]
 8009d0e:	b15b      	cbz	r3, 8009d28 <__smakebuf_r+0x74>
 8009d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 f885 	bl	8009e24 <_isatty_r>
 8009d1a:	b128      	cbz	r0, 8009d28 <__smakebuf_r+0x74>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f023 0303 	bic.w	r3, r3, #3
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	89a0      	ldrh	r0, [r4, #12]
 8009d2a:	4305      	orrs	r5, r0
 8009d2c:	81a5      	strh	r5, [r4, #12]
 8009d2e:	e7cd      	b.n	8009ccc <__smakebuf_r+0x18>
 8009d30:	08007e71 	.word	0x08007e71

08009d34 <memmove>:
 8009d34:	4288      	cmp	r0, r1
 8009d36:	b510      	push	{r4, lr}
 8009d38:	eb01 0402 	add.w	r4, r1, r2
 8009d3c:	d902      	bls.n	8009d44 <memmove+0x10>
 8009d3e:	4284      	cmp	r4, r0
 8009d40:	4623      	mov	r3, r4
 8009d42:	d807      	bhi.n	8009d54 <memmove+0x20>
 8009d44:	1e43      	subs	r3, r0, #1
 8009d46:	42a1      	cmp	r1, r4
 8009d48:	d008      	beq.n	8009d5c <memmove+0x28>
 8009d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d52:	e7f8      	b.n	8009d46 <memmove+0x12>
 8009d54:	4402      	add	r2, r0
 8009d56:	4601      	mov	r1, r0
 8009d58:	428a      	cmp	r2, r1
 8009d5a:	d100      	bne.n	8009d5e <memmove+0x2a>
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d66:	e7f7      	b.n	8009d58 <memmove+0x24>

08009d68 <__malloc_lock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_lock+0x8>)
 8009d6a:	f7fe bcc6 	b.w	80086fa <__retarget_lock_acquire_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20000314 	.word	0x20000314

08009d74 <__malloc_unlock>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__malloc_unlock+0x8>)
 8009d76:	f7fe bcc1 	b.w	80086fc <__retarget_lock_release_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20000314 	.word	0x20000314

08009d80 <_realloc_r>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	4607      	mov	r7, r0
 8009d84:	4614      	mov	r4, r2
 8009d86:	460e      	mov	r6, r1
 8009d88:	b921      	cbnz	r1, 8009d94 <_realloc_r+0x14>
 8009d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d8e:	4611      	mov	r1, r2
 8009d90:	f7ff b9f8 	b.w	8009184 <_malloc_r>
 8009d94:	b922      	cbnz	r2, 8009da0 <_realloc_r+0x20>
 8009d96:	f7ff f9a5 	bl	80090e4 <_free_r>
 8009d9a:	4625      	mov	r5, r4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da0:	f000 f850 	bl	8009e44 <_malloc_usable_size_r>
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d20f      	bcs.n	8009dc8 <_realloc_r+0x48>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4638      	mov	r0, r7
 8009dac:	f7ff f9ea 	bl	8009184 <_malloc_r>
 8009db0:	4605      	mov	r5, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0f2      	beq.n	8009d9c <_realloc_r+0x1c>
 8009db6:	4631      	mov	r1, r6
 8009db8:	4622      	mov	r2, r4
 8009dba:	f7fe fcbb 	bl	8008734 <memcpy>
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff f98f 	bl	80090e4 <_free_r>
 8009dc6:	e7e9      	b.n	8009d9c <_realloc_r+0x1c>
 8009dc8:	4635      	mov	r5, r6
 8009dca:	e7e7      	b.n	8009d9c <_realloc_r+0x1c>

08009dcc <_read_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d07      	ldr	r5, [pc, #28]	; (8009dec <_read_r+0x20>)
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	4608      	mov	r0, r1
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f7f7 fb86 	bl	80014ec <_read>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_read_r+0x1e>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_read_r+0x1e>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	2000031c 	.word	0x2000031c

08009df0 <abort>:
 8009df0:	b508      	push	{r3, lr}
 8009df2:	2006      	movs	r0, #6
 8009df4:	f000 f856 	bl	8009ea4 <raise>
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f7f7 fb6d 	bl	80014d8 <_exit>
	...

08009e00 <_fstat_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	; (8009e20 <_fstat_r+0x20>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	f7f7 fbb2 	bl	8001576 <_fstat>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d102      	bne.n	8009e1c <_fstat_r+0x1c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <_fstat_r+0x1c>
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	2000031c 	.word	0x2000031c

08009e24 <_isatty_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d06      	ldr	r5, [pc, #24]	; (8009e40 <_isatty_r+0x1c>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	f7f7 fbb1 	bl	8001596 <_isatty>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_isatty_r+0x1a>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_isatty_r+0x1a>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	2000031c 	.word	0x2000031c

08009e44 <_malloc_usable_size_r>:
 8009e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e48:	1f18      	subs	r0, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfbc      	itt	lt
 8009e4e:	580b      	ldrlt	r3, [r1, r0]
 8009e50:	18c0      	addlt	r0, r0, r3
 8009e52:	4770      	bx	lr

08009e54 <_raise_r>:
 8009e54:	291f      	cmp	r1, #31
 8009e56:	b538      	push	{r3, r4, r5, lr}
 8009e58:	4604      	mov	r4, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	d904      	bls.n	8009e68 <_raise_r+0x14>
 8009e5e:	2316      	movs	r3, #22
 8009e60:	6003      	str	r3, [r0, #0]
 8009e62:	f04f 30ff 	mov.w	r0, #4294967295
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e6a:	b112      	cbz	r2, 8009e72 <_raise_r+0x1e>
 8009e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e70:	b94b      	cbnz	r3, 8009e86 <_raise_r+0x32>
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f830 	bl	8009ed8 <_getpid_r>
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e82:	f000 b817 	b.w	8009eb4 <_kill_r>
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d00a      	beq.n	8009ea0 <_raise_r+0x4c>
 8009e8a:	1c59      	adds	r1, r3, #1
 8009e8c:	d103      	bne.n	8009e96 <_raise_r+0x42>
 8009e8e:	2316      	movs	r3, #22
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	2001      	movs	r0, #1
 8009e94:	e7e7      	b.n	8009e66 <_raise_r+0x12>
 8009e96:	2400      	movs	r4, #0
 8009e98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	4798      	blx	r3
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e7e0      	b.n	8009e66 <_raise_r+0x12>

08009ea4 <raise>:
 8009ea4:	4b02      	ldr	r3, [pc, #8]	; (8009eb0 <raise+0xc>)
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	f7ff bfd3 	b.w	8009e54 <_raise_r>
 8009eae:	bf00      	nop
 8009eb0:	2000000c 	.word	0x2000000c

08009eb4 <_kill_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d07      	ldr	r5, [pc, #28]	; (8009ed4 <_kill_r+0x20>)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	f7f7 faf9 	bl	80014b8 <_kill>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d102      	bne.n	8009ed0 <_kill_r+0x1c>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	b103      	cbz	r3, 8009ed0 <_kill_r+0x1c>
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	bd38      	pop	{r3, r4, r5, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2000031c 	.word	0x2000031c

08009ed8 <_getpid_r>:
 8009ed8:	f7f7 bae6 	b.w	80014a8 <_getpid>

08009edc <_init>:
 8009edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ede:	bf00      	nop
 8009ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee2:	bc08      	pop	{r3}
 8009ee4:	469e      	mov	lr, r3
 8009ee6:	4770      	bx	lr

08009ee8 <_fini>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	bf00      	nop
 8009eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eee:	bc08      	pop	{r3}
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	4770      	bx	lr
