
ADS9226_QSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800420c  0800420c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004284  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004284  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013560  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f5  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00036af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269fc  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e2a  00000000  00000000  0005dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea680  00000000  00000000  0006ee06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035bc  00000000  00000000  001594dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040cc 	.word	0x080040cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080040cc 	.word	0x080040cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <QSPI_Send_CMD>:
 *
 * @return  uint8_t			QSPI_OK:正常
 *                      QSPI_ERROR:错误
 */
uint8_t QSPI_Send_CMD(uint32_t dataSize)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef Cmdhandler;

    //没什么用的参数
    Cmdhandler.Instruction        = 0xFF;
 8000518:	23ff      	movs	r3, #255	; 0xff
 800051a:	60bb      	str	r3, [r7, #8]
    Cmdhandler.Address            = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
    Cmdhandler.AlternateBytes     = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
    Cmdhandler.AddressSize        = QSPI_ADDRESS_8_BITS;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]

    //没用的字段
    Cmdhandler.DummyCycles        = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
    Cmdhandler.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
    Cmdhandler.AddressMode        = QSPI_ADDRESS_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
    Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28

    //数据输入配置
    Cmdhandler.DataMode           = QSPI_DATA_2_LINES;
 800053e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
    Cmdhandler.NbData             = dataSize;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800054c:	2300      	movs	r3, #0
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_QSPI_Command(&hqspi1, &Cmdhandler, 5000) != HAL_OK)
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	f241 3288 	movw	r2, #5000	; 0x1388
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <QSPI_Send_CMD+0x68>)
 8000560:	f001 f856 	bl	8001610 <HAL_QSPI_Command>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <QSPI_Send_CMD+0x5e>
      return CMD_ERROR;
 800056a:	2304      	movs	r3, #4
 800056c:	e000      	b.n	8000570 <QSPI_Send_CMD+0x60>

    return CMD_OK;
 800056e:	2305      	movs	r3, #5
}
 8000570:	4618      	mov	r0, r3
 8000572:	3740      	adds	r7, #64	; 0x40
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000009c 	.word	0x2000009c

0800057c <ADS9226_ReadOnce>:

uint8_t ADS9226_ReadOnce(uint8_t *data,uint8_t size)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
	uint8_t state;

    if(QSPI_Send_CMD(size) == CMD_ERROR)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffc0 	bl	8000510 <QSPI_Send_CMD>
 8000590:	4603      	mov	r3, r0
 8000592:	2b04      	cmp	r3, #4
 8000594:	d101      	bne.n	800059a <ADS9226_ReadOnce+0x1e>
    	return CMD_ERROR;
 8000596:	2304      	movs	r3, #4
 8000598:	e008      	b.n	80005ac <ADS9226_ReadOnce+0x30>

    state = HAL_QSPI_Receive(&hqspi1, data, 5000);
 800059a:	f241 3288 	movw	r2, #5000	; 0x1388
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <ADS9226_ReadOnce+0x38>)
 80005a2:	f001 f893 	bl	80016cc <HAL_QSPI_Receive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	73fb      	strb	r3, [r7, #15]
    return state;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]



}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000009c 	.word	0x2000009c

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2e      	ldr	r2, [pc, #184]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_GPIO_Init+0xd4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_GPIO_Init+0xd4>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <MX_GPIO_Init+0xd4>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <MX_GPIO_Init+0xd4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <MX_GPIO_Init+0xd4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <MX_GPIO_Init+0xd4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_GPIO_Init+0xd4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_GPIO_Init+0xd4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_GPIO_Init+0xd4>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_GPIO_Init+0xd4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f000 fe73 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_GPIO_Init+0xd8>)
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_GPIO_Init+0xdc>)
 8000650:	f000 fce4 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fcd5 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2028      	movs	r0, #40	; 0x28
 8000678:	f000 fc9b 	bl	8000fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fcb2 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	10110000 	.word	0x10110000
 8000694:	48000800 	.word	0x48000800

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fb1a 	bl	8000cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f845 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f7ff ff87 	bl	80005b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006aa:	f000 fa4d 	bl	8000b48 <MX_LPUART1_UART_Init>
  MX_QUADSPI1_Init();
 80006ae:	f000 f8b1 	bl	8000814 <MX_QUADSPI1_Init>
  /* USER CODE BEGIN 2 */

  printf(" ADS9226 QuadSPI Test ....\r\n\r\n");
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <main+0x7c>)
 80006b4:	f003 f8b2 	bl	800381c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t state = ADS9226_ReadOnce(data,size);
 80006b8:	2104      	movs	r1, #4
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <main+0x80>)
 80006bc:	f7ff ff5e 	bl	800057c <ADS9226_ReadOnce>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]

	  if (state == ADS9226_HAL_OK)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <main+0x3a>
		  printf("ADS9226_HAL_OK\r\n");
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <main+0x84>)
 80006cc:	f003 f8a6 	bl	800381c <puts>
 80006d0:	e01a      	b.n	8000708 <main+0x70>
	  else if (state == ADS9226_HAL_ERROR)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d103      	bne.n	80006e0 <main+0x48>
		  printf("ADS9226_HAL_ERROR\r\n");
 80006d8:	4811      	ldr	r0, [pc, #68]	; (8000720 <main+0x88>)
 80006da:	f003 f89f 	bl	800381c <puts>
 80006de:	e013      	b.n	8000708 <main+0x70>
	  else if (state == ADS9226_HAL_BUSY)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d103      	bne.n	80006ee <main+0x56>
		  printf("ADS9226_HAL_BUSY\r\n");
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <main+0x8c>)
 80006e8:	f003 f898 	bl	800381c <puts>
 80006ec:	e00c      	b.n	8000708 <main+0x70>
	  else if (state == ADS9226_HAL_TIMEOUT)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	d103      	bne.n	80006fc <main+0x64>
		  printf("ADS9226_HAL_TIMEOUT\r\n");
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <main+0x90>)
 80006f6:	f003 f891 	bl	800381c <puts>
 80006fa:	e005      	b.n	8000708 <main+0x70>
	  else if (state == CMD_ERROR)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d102      	bne.n	8000708 <main+0x70>
		  printf("CMD_ERROR\r\n");
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x94>)
 8000704:	f003 f88a 	bl	800381c <puts>

	  HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f000 fb54 	bl	8000db8 <HAL_Delay>
  {
 8000710:	e7d2      	b.n	80006b8 <main+0x20>
 8000712:	bf00      	nop
 8000714:	080040e4 	.word	0x080040e4
 8000718:	2000008c 	.word	0x2000008c
 800071c:	08004104 	.word	0x08004104
 8000720:	08004114 	.word	0x08004114
 8000724:	08004128 	.word	0x08004128
 8000728:	0800413c 	.word	0x0800413c
 800072c:	08004154 	.word	0x08004154

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0a8      	sub	sp, #160	; 0xa0
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800073a:	2238      	movs	r2, #56	; 0x38
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fff6 	bl	8003730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2254      	movs	r2, #84	; 0x54
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 ffe8 	bl	8003730 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fe19 	bl	8001398 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000780:	2304      	movs	r3, #4
 8000782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000786:	2355      	movs	r3, #85	; 0x55
 8000788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f9fa 	bl	8001b9c <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ae:	f000 f82b 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2303      	movs	r3, #3
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ca:	2104      	movs	r1, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fcfd 	bl	80021cc <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d8:	f000 f816 	bl	8000808 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_QSPI;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <SystemClock_Config+0xd4>)
 80007de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 ff0a 	bl	8002604 <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 f807 	bl	8000808 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	37a0      	adds	r7, #160	; 0xa0
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	00040020 	.word	0x00040020

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_QUADSPI1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 170;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000820:	22aa      	movs	r2, #170	; 0xaa
 8000822:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000826:	2201      	movs	r2, #1
 8000828:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 800082c:	2210      	movs	r2, #16
 800082e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000832:	2201      	movs	r2, #1
 8000834:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000840:	2201      	movs	r2, #1
 8000842:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_QUADSPI1_Init+0x50>)
 8000852:	f000 fe55 	bl	8001500 <HAL_QSPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_QUADSPI1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f7ff ffd4 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000009c 	.word	0x2000009c
 8000868:	a0001000 	.word	0xa0001000

0800086c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a26      	ldr	r2, [pc, #152]	; (8000924 <HAL_QSPI_MspInit+0xb8>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d145      	bne.n	800091a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 8000890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 8000894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000898:	6513      	str	r3, [r2, #80]	; 0x50
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 800089c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800089e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_QSPI_MspInit+0xbc>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI1_BK1_IO1
    PB1     ------> QUADSPI1_BK1_IO0
    PB10     ------> QUADSPI1_CLK
    PB11     ------> QUADSPI1_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008e6:	230a      	movs	r3, #10
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fb92 	bl	800101c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80008f8:	f640 4303 	movw	r3, #3075	; 0xc03
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800090a:	230a      	movs	r3, #10
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_QSPI_MspInit+0xc0>)
 8000916:	f000 fb81 	bl	800101c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	a0001000 	.word	0xa0001000
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000966:	f000 fdbb 	bl	80014e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f9da 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d4:	f000 fcbc 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
	}

return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f915 	bl	8000c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <_write+0x12>
	}
	return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_close>:

int _close(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return -1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a76:	605a      	str	r2, [r3, #4]
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_isatty>:

int _isatty(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f002 fdf8 	bl	80036dc <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20020000 	.word	0x20020000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	20000090 	.word	0x20000090
 8000b20:	20000190 	.word	0x20000190

08000b24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_LPUART1_UART_Init+0x90>)
 8000b50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b8c:	f001 ff86 	bl	8002a9c <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f7ff fe37 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000b9e:	f002 fcd3 	bl	8003548 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ba8:	f7ff fe2e 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000bb0:	f002 fd08 	bl	80035c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000bba:	f7ff fe25 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_LPUART1_UART_Init+0x8c>)
 8000bc0:	f002 fc89 	bl	80034d6 <HAL_UARTEx_DisableFifoMode>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000bca:	f7ff fe1d 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000e8 	.word	0x200000e8
 8000bd8:	40008000 	.word	0x40008000

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x7c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d128      	bne.n	8000c50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4c:	f000 f9e6 	bl	800101c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40008000 	.word	0x40008000
 8000c5c:	40021000 	.word	0x40021000

08000c60 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <__io_putchar+0x20>)
 8000c72:	f001 ff63 	bl	8002b3c <HAL_UART_Transmit>
  return ch;
 8000c76:	687b      	ldr	r3, [r7, #4]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000e8 	.word	0x200000e8

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0b      	ldr	r4, [pc, #44]	; (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cae:	f7ff ff39 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f002 fd19 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff fcef 	bl	8000698 <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   r0, =_estack
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc8:	08004214 	.word	0x08004214
  ldr r2, =_sbss
 8000ccc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd0:	2000018c 	.word	0x2000018c

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>

08000cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f95b 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f80e 	bl	8000d08 <HAL_InitTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	e001      	b.n	8000cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf8:	f7ff fe1a 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_InitTick+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d022      	beq.n	8000d62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_InitTick+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f966 	bl	8001002 <HAL_SYSTICK_Config>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10f      	bne.n	8000d5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	d809      	bhi.n	8000d56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4a:	f000 f932 	bl	8000fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_InitTick+0x70>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e007      	b.n	8000d66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e004      	b.n	8000d66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e001      	b.n	8000d66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000178 	.word	0x20000178
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000178 	.word	0x20000178

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d004      	beq.n	8000ddc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_Delay+0x40>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ddc:	bf00      	nop
 8000dde:	f7ff ffdf 	bl	8000da0 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d8f7      	bhi.n	8000dde <HAL_Delay+0x26>
  {
  }
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff40 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff33 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa4 	bl	8000f58 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800102a:	e15a      	b.n	80012e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 814c 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00b      	beq.n	8001064 <HAL_GPIO_Init+0x48>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001058:	2b11      	cmp	r3, #17
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0xea>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d123      	bne.n	800114e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0203 	and.w	r2, r3, #3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a6 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6613      	str	r3, [r2, #96]	; 0x60
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a8:	4a56      	ldr	r2, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d2:	d01f      	beq.n	8001214 <HAL_GPIO_Init+0x1f8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x2ec>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d019      	beq.n	8001210 <HAL_GPIO_Init+0x1f4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x2f0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1f0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2f4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1e4>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e00a      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001200:	2306      	movs	r3, #6
 8001202:	e008      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001204:	2304      	movs	r3, #4
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001208:	2303      	movs	r3, #3
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001214:	2300      	movs	r3, #0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001226:	4937      	ldr	r1, [pc, #220]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x300>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_GPIO_Init+0x300>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_GPIO_Init+0x300>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001282:	4a26      	ldr	r2, [pc, #152]	; (800131c <HAL_GPIO_Init+0x300>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_GPIO_Init+0x300>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_GPIO_Init+0x300>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_GPIO_Init+0x300>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_GPIO_Init+0x300>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f ae9d 	bne.w	800102c <HAL_GPIO_Init+0x10>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800
 8001310:	48000c00 	.word	0x48000c00
 8001314:	48001000 	.word	0x48001000
 8001318:	48001400 	.word	0x48001400
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800133c:	e002      	b.n	8001344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f806 	bl	8001380 <HAL_GPIO_EXTI_Callback>
  }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d141      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d131      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ba:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013cc:	4a41      	ldr	r2, [pc, #260]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2232      	movs	r2, #50	; 0x32
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	e002      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d102      	bne.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f2      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d158      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e057      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001428:	e04d      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001430:	d141      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143e:	d131      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2232      	movs	r2, #50	; 0x32
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	e002      	b.n	800147e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3b01      	subs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148a:	d102      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f2      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d112      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e011      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014b4:	e007      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40007000 	.word	0x40007000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6093      	str	r3, [r2, #8]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007000 	.word	0x40007000

08001500 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff fc4a 	bl	8000da0 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e075      	b.n	8001604 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_QSPI_Init+0x28>
 8001524:	2302      	movs	r3, #2
 8001526:	e06d      	b.n	8001604 <HAL_QSPI_Init+0x104>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10b      	bne.n	8001554 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff f991 	bl	800086c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800154a:	f241 3188 	movw	r1, #5000	; 0x1388
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f959 	bl	8001806 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	3b01      	subs	r3, #1
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	2120      	movs	r1, #32
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f951 	bl	8001822 <QSPI_WaitFlagStateUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d137      	bne.n	80015fa <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001594:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6852      	ldr	r2, [r2, #4]
 800159c:	0611      	lsls	r1, r2, #24
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	4311      	orrs	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	69d2      	ldr	r2, [r2, #28]
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a12      	ldr	r2, [r2, #32]
 80015ae:	4311      	orrs	r1, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_QSPI_Init+0x10c>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6912      	ldr	r2, [r2, #16]
 80015c6:	0411      	lsls	r1, r2, #16
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6952      	ldr	r2, [r2, #20]
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6992      	ldr	r2, [r2, #24]
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	430b      	orrs	r3, r1
 80015da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001602:	7afb      	ldrb	r3, [r7, #11]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	ffe0f8fe 	.word	0xffe0f8fe

08001610 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fbc0 	bl	8000da0 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_QSPI_Command+0x22>
 800162e:	2302      	movs	r3, #2
 8001630:	e048      	b.n	80016c4 <HAL_QSPI_Command+0xb4>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d137      	bne.n	80016b6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f8df 	bl	8001822 <QSPI_WaitFlagStateUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d125      	bne.n	80016ba <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800166e:	2200      	movs	r2, #0
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f90c 	bl	8001890 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2201      	movs	r2, #1
 8001688:	2102      	movs	r1, #2
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f8c9 	bl	8001822 <QSPI_WaitFlagStateUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2202      	movs	r2, #2
 80016a0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80016aa:	e006      	b.n	80016ba <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80016b4:	e001      	b.n	80016ba <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fb60 	bl	8000da0 <HAL_GetTick>
 80016e0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3320      	adds	r3, #32
 80016f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_QSPI_Receive+0x36>
 80016fe:	2302      	movs	r3, #2
 8001700:	e07d      	b.n	80017fe <HAL_QSPI_Receive+0x132>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d16c      	bne.n	80017f0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d05d      	beq.n	80017de <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2222      	movs	r2, #34	; 0x22
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800175a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001764:	e01c      	b.n	80017a0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2201      	movs	r2, #1
 800176e:	2106      	movs	r1, #6
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f856 	bl	8001822 <QSPI_WaitFlagStateUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d114      	bne.n	80017aa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1de      	bne.n	8001766 <HAL_QSPI_Receive+0x9a>
 80017a8:	e000      	b.n	80017ac <HAL_QSPI_Receive+0xe0>
          break;
 80017aa:	bf00      	nop
      }

      if (status == HAL_OK)
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d110      	bne.n	80017d4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2201      	movs	r2, #1
 80017ba:	2102      	movs	r1, #2
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f830 	bl	8001822 <QSPI_WaitFlagStateUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80017dc:	e00a      	b.n	80017f4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f043 0208 	orr.w	r2, r3, #8
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	77fb      	strb	r3, [r7, #31]
 80017ee:	e001      	b.n	80017f4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
 80017f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001832:	e01a      	b.n	800186a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183a:	d016      	beq.n	800186a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183c:	f7ff fab0 	bl	8000da0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	429a      	cmp	r2, r3
 800184a:	d302      	bcc.n	8001852 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10b      	bne.n	800186a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2204      	movs	r2, #4
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	429a      	cmp	r2, r3
 8001884:	d1d6      	bne.n	8001834 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <QSPI_Config+0x28>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80018aa:	d005      	beq.n	80018b8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3a01      	subs	r2, #1
 80018b6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80b9 	beq.w	8001a34 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d05f      	beq.n	800198a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d031      	beq.n	8001940 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	431a      	orrs	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	049b      	lsls	r3, r3, #18
 80018f8:	431a      	orrs	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	431a      	orrs	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	431a      	orrs	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	431a      	orrs	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	431a      	orrs	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	431a      	orrs	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	ea42 0103 	orr.w	r1, r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	430a      	orrs	r2, r1
 8001928:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001930:	f000 812e 	beq.w	8001b90 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	6852      	ldr	r2, [r2, #4]
 800193c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800193e:	e127      	b.n	8001b90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	431a      	orrs	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	431a      	orrs	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	431a      	orrs	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	049b      	lsls	r3, r3, #18
 800195c:	431a      	orrs	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	431a      	orrs	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	431a      	orrs	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	431a      	orrs	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	431a      	orrs	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	ea42 0103 	orr.w	r1, r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	430a      	orrs	r2, r1
 8001986:	615a      	str	r2, [r3, #20]
}
 8001988:	e102      	b.n	8001b90 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d02e      	beq.n	80019f0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	431a      	orrs	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	049b      	lsls	r3, r3, #18
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	ea42 0103 	orr.w	r1, r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80019e0:	f000 80d6 	beq.w	8001b90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	6852      	ldr	r2, [r2, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	e0cf      	b.n	8001b90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	431a      	orrs	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	049b      	lsls	r3, r3, #18
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	615a      	str	r2, [r3, #20]
}
 8001a32:	e0ad      	b.n	8001b90 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d058      	beq.n	8001aee <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	6892      	ldr	r2, [r2, #8]
 8001a44:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02d      	beq.n	8001aaa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	431a      	orrs	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	049b      	lsls	r3, r3, #18
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	ea42 0103 	orr.w	r1, r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001a9c:	d078      	beq.n	8001b90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	6852      	ldr	r2, [r2, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
}
 8001aa8:	e072      	b.n	8001b90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	ea42 0103 	orr.w	r1, r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
}
 8001aec:	e050      	b.n	8001b90 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d02a      	beq.n	8001b4c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	431a      	orrs	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	ea42 0103 	orr.w	r1, r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001b3e:	d027      	beq.n	8001b90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	6852      	ldr	r2, [r2, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	e021      	b.n	8001b90 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01d      	beq.n	8001b90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	049b      	lsls	r3, r3, #18
 8001b70:	431a      	orrs	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	ea42 0103 	orr.w	r1, r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	615a      	str	r2, [r3, #20]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e308      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4ba3      	ldr	r3, [pc, #652]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc4:	4ba0      	ldr	r3, [pc, #640]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_OscConfig+0x3e>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b99      	ldr	r3, [pc, #612]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e2e3      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a90      	ldr	r2, [pc, #576]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8a      	ldr	r2, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a83      	ldr	r2, [pc, #524]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8a4 	bl	8000da0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f8a0 	bl	8000da0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e2a8      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f890 	bl	8000da0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f88c 	bl	8000da0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e294      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c96:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d075      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbc:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x136>
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d002      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x13c>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d11f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd8:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x154>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e267      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	4952      	ldr	r1, [pc, #328]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <HAL_RCC_OscConfig+0x2b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fffd 	bl	8000d08 <HAL_InitTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d043      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e253      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d023      	beq.n	8001d68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a48      	ldr	r2, [pc, #288]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f838 	bl	8000da0 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff f834 	bl	8000da0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e23c      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	061b      	lsls	r3, r3, #24
 8001d60:	4939      	ldr	r1, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
 8001d66:	e01a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a36      	ldr	r2, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff f814 	bl	8000da0 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f810 	bl	8000da0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e218      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e0>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01c      	beq.n	8001dec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ffed 	bl	8000da0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7fe ffe9 	bl	8000da0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1f1      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ef      	beq.n	8001dca <HAL_RCC_OscConfig+0x22e>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ffd0 	bl	8000da0 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7fe ffcc 	bl	8000da0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1d4      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ef      	bne.n	8001e04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ab 	beq.w	8001f88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2b4>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e005      	b.n	8001e52 <HAL_RCC_OscConfig+0x2b6>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4baf      	ldr	r3, [pc, #700]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4aae      	ldr	r2, [pc, #696]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4bac      	ldr	r3, [pc, #688]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e72:	4ba9      	ldr	r3, [pc, #676]	; (8002118 <HAL_RCC_OscConfig+0x57c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e7e:	4ba6      	ldr	r3, [pc, #664]	; (8002118 <HAL_RCC_OscConfig+0x57c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4aa5      	ldr	r2, [pc, #660]	; (8002118 <HAL_RCC_OscConfig+0x57c>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe ff89 	bl	8000da0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7fe ff85 	bl	8000da0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e18d      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	4b9c      	ldr	r3, [pc, #624]	; (8002118 <HAL_RCC_OscConfig+0x57c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d108      	bne.n	8001eca <HAL_RCC_OscConfig+0x32e>
 8001eb8:	4b96      	ldr	r3, [pc, #600]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a95      	ldr	r2, [pc, #596]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec8:	e024      	b.n	8001f14 <HAL_RCC_OscConfig+0x378>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d110      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x358>
 8001ed2:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a8a      	ldr	r2, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_OscConfig+0x378>
 8001ef4:	4b87      	ldr	r3, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	4a86      	ldr	r2, [pc, #536]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f04:	4b83      	ldr	r3, [pc, #524]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a82      	ldr	r2, [pc, #520]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d016      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7fe ff40 	bl	8000da0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe ff3c 	bl	8000da0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e142      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ed      	beq.n	8001f24 <HAL_RCC_OscConfig+0x388>
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff29 	bl	8000da0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe ff25 	bl	8000da0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e12b      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ed      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a64      	ldr	r2, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03c      	beq.n	800200e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7fe fef8 	bl	8000da0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb4:	f7fe fef4 	bl	8000da0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0fc      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x418>
 8001fd4:	e01b      	b.n	800200e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fd6:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fdc:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fedb 	bl	8000da0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fee:	f7fe fed7 	bl	8000da0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0df      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002000:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80d3 	beq.w	80021be <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b0c      	cmp	r3, #12
 8002022:	f000 808d 	beq.w	8002140 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d15a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a38      	ldr	r2, [pc, #224]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe feb1 	bl	8000da0 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7fe fead 	bl	8000da0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0b5      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x580>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a11      	ldr	r1, [r2, #32]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002070:	3a01      	subs	r2, #1
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0552      	lsls	r2, r2, #21
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0652      	lsls	r2, r2, #25
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800209a:	06d2      	lsls	r2, r2, #27
 800209c:	430a      	orrs	r2, r1
 800209e:	491d      	ldr	r1, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe70 	bl	8000da0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fe6c 	bl	8000da0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e074      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x528>
 80020e2:	e06c      	b.n	80021be <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_RCC_OscConfig+0x578>)
 8002102:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fe48 	bl	8000da0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	e00e      	b.n	8002132 <HAL_RCC_OscConfig+0x596>
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fe3e 	bl	8000da0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e046      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x62c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x584>
 800213e:	e03e      	b.n	80021be <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e039      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_RCC_OscConfig+0x62c>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d12c      	bne.n	80021ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	3b01      	subs	r3, #1
 800216c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d123      	bne.n	80021ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d11b      	bne.n	80021ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d113      	bne.n	80021ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e11e      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b91      	ldr	r3, [pc, #580]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b8e      	ldr	r3, [pc, #568]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 020f 	bic.w	r2, r3, #15
 80021fa:	498c      	ldr	r1, [pc, #560]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b8a      	ldr	r3, [pc, #552]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e106      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d073      	beq.n	8002308 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d129      	bne.n	800227c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0f4      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002238:	f000 f99e 	bl	8002578 <RCC_GetSysClockFreqFromPLLSource>
 800223c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4a7c      	ldr	r2, [pc, #496]	; (8002434 <HAL_RCC_ClockConfig+0x268>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d93f      	bls.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002246:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	d033      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12f      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226e:	4a70      	ldr	r2, [pc, #448]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002274:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e024      	b.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d107      	bne.n	8002294 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0c6      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0be      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022a4:	f000 f8ce 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4a61      	ldr	r2, [pc, #388]	; (8002434 <HAL_RCC_ClockConfig+0x268>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d909      	bls.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ba:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4957      	ldr	r1, [pc, #348]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe fd62 	bl	8000da0 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7fe fd5e 	bl	8000da0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e095      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a42      	ldr	r2, [pc, #264]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002340:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4936      	ldr	r1, [pc, #216]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
 800235a:	e008      	b.n	800236e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b80      	cmp	r3, #128	; 0x80
 8002360:	d105      	bne.n	800236e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4a32      	ldr	r2, [pc, #200]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 8002368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d21d      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 020f 	bic.w	r2, r3, #15
 8002384:	4929      	ldr	r1, [pc, #164]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800238c:	f7fe fd08 	bl	8000da0 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fd04 	bl	8000da0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e03b      	b.n	8002422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x260>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1ed      	bne.n	8002394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4917      	ldr	r1, [pc, #92]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490f      	ldr	r1, [pc, #60]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f6:	f000 f825 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490c      	ldr	r1, [pc, #48]	; (8002438 <HAL_RCC_ClockConfig+0x26c>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x270>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fc74 	bl	8000d08 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	04c4b400 	.word	0x04c4b400
 8002438:	08004160 	.word	0x08004160
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d102      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e047      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d102      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e03e      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d136      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3301      	adds	r3, #1
 8002490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a2:	68d2      	ldr	r2, [r2, #12]
 80024a4:	0a12      	lsrs	r2, r2, #8
 80024a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
      break;
 80024b0:	e00c      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	0a12      	lsrs	r2, r2, #8
 80024c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
      break;
 80024ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0e5b      	lsrs	r3, r3, #25
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e001      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024ec:	693b      	ldr	r3, [r7, #16]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	00f42400 	.word	0x00f42400
 8002504:	016e3600 	.word	0x016e3600

08002508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_RCC_GetHCLKFreq+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002524:	f7ff fff0 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4904      	ldr	r1, [pc, #16]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	08004170 	.word	0x08004170

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002550:	f7ff ffda 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08004170 	.word	0x08004170

08002578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d10c      	bne.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a6:	68d2      	ldr	r2, [r2, #12]
 80025a8:	0a12      	lsrs	r2, r2, #8
 80025aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
    break;
 80025b4:	e00c      	b.n	80025d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	0a12      	lsrs	r2, r2, #8
 80025c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
    break;
 80025ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0e5b      	lsrs	r3, r3, #25
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025ea:	687b      	ldr	r3, [r7, #4]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40021000 	.word	0x40021000
 80025fc:	016e3600 	.word	0x016e3600
 8002600:	00f42400 	.word	0x00f42400

08002604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800260c:	2300      	movs	r3, #0
 800260e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002610:	2300      	movs	r3, #0
 8002612:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8098 	beq.w	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264e:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a39      	ldr	r2, [pc, #228]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800265a:	f7fe fba1 	bl	8000da0 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002660:	e009      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7fe fb9d 	bl	8000da0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d902      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	74fb      	strb	r3, [r7, #19]
        break;
 8002674:	e005      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ef      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d159      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01e      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d019      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fb5d 	bl	8000da0 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	e00b      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fb59 	bl	8000da0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d902      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002700:	e006      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ec      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002740:	7c7b      	ldrb	r3, [r7, #17]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4baf      	ldr	r3, [pc, #700]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4aae      	ldr	r2, [pc, #696]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275e:	4ba9      	ldr	r3, [pc, #676]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	49a5      	ldr	r1, [pc, #660]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002780:	4ba0      	ldr	r3, [pc, #640]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 020c 	bic.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	499d      	ldr	r1, [pc, #628]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a2:	4b98      	ldr	r3, [pc, #608]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4994      	ldr	r1, [pc, #592]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	498c      	ldr	r1, [pc, #560]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e6:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	4983      	ldr	r1, [pc, #524]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002808:	4b7e      	ldr	r3, [pc, #504]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	497b      	ldr	r1, [pc, #492]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282a:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4972      	ldr	r1, [pc, #456]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284c:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	496a      	ldr	r1, [pc, #424]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800286e:	4b65      	ldr	r3, [pc, #404]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	4961      	ldr	r1, [pc, #388]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002890:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	4959      	ldr	r1, [pc, #356]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b2:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	4950      	ldr	r1, [pc, #320]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4948      	ldr	r1, [pc, #288]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a42      	ldr	r2, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	493a      	ldr	r1, [pc, #232]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002936:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	492c      	ldr	r1, [pc, #176]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002962:	d105      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	491e      	ldr	r1, [pc, #120]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299a:	d105      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4910      	ldr	r1, [pc, #64]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d2:	d105      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d018      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4902      	ldr	r1, [pc, #8]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a02:	e001      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a04:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a10:	d105      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d105      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a80:	d105      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e042      	b.n	8002b34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fe f88b 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2224      	movs	r2, #36	; 0x24
 8002aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8c2 	bl	8002c68 <UART_SetConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fb80 	bl	80031fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fc07 	bl	8003340 <UART_CheckIdleState>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	f040 8083 	bne.w	8002c5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Transmit+0x28>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e07b      	b.n	8002c60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Transmit+0x3a>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e074      	b.n	8002c60 <HAL_UART_Transmit+0x124>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2221      	movs	r2, #33	; 0x21
 8002b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe f907 	bl	8000da0 <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d108      	bne.n	8002bc0 <HAL_UART_Transmit+0x84>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	e003      	b.n	8002bc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002bd0:	e02c      	b.n	8002c2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fbfa 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e039      	b.n	8002c60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1cc      	bne.n	8002bd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2140      	movs	r1, #64	; 0x40
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fbc7 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e006      	b.n	8002c60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4bb1      	ldr	r3, [pc, #708]	; (8002f58 <UART_SetConfig+0x2f0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4aa6      	ldr	r2, [pc, #664]	; (8002f5c <UART_SetConfig+0x2f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002cda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f023 010f 	bic.w	r1, r3, #15
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a97      	ldr	r2, [pc, #604]	; (8002f60 <UART_SetConfig+0x2f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d120      	bne.n	8002d4a <UART_SetConfig+0xe2>
 8002d08:	4b96      	ldr	r3, [pc, #600]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d816      	bhi.n	8002d44 <UART_SetConfig+0xdc>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0xb4>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d33 	.word	0x08002d33
 8002d28:	08002d3f 	.word	0x08002d3f
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	76fb      	strb	r3, [r7, #27]
 8002d30:	e0e7      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	76fb      	strb	r3, [r7, #27]
 8002d36:	e0e4      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	76fb      	strb	r3, [r7, #27]
 8002d3c:	e0e1      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	76fb      	strb	r3, [r7, #27]
 8002d42:	e0de      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002d44:	2310      	movs	r3, #16
 8002d46:	76fb      	strb	r3, [r7, #27]
 8002d48:	e0db      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a86      	ldr	r2, [pc, #536]	; (8002f68 <UART_SetConfig+0x300>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d132      	bne.n	8002dba <UART_SetConfig+0x152>
 8002d54:	4b83      	ldr	r3, [pc, #524]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d828      	bhi.n	8002db4 <UART_SetConfig+0x14c>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <UART_SetConfig+0x100>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002db5 	.word	0x08002db5
 8002d70:	08002db5 	.word	0x08002db5
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002da3 	.word	0x08002da3
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002db5 	.word	0x08002db5
 8002d98:	08002daf 	.word	0x08002daf
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76fb      	strb	r3, [r7, #27]
 8002da0:	e0af      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	76fb      	strb	r3, [r7, #27]
 8002da6:	e0ac      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002da8:	2304      	movs	r3, #4
 8002daa:	76fb      	strb	r3, [r7, #27]
 8002dac:	e0a9      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002dae:	2308      	movs	r3, #8
 8002db0:	76fb      	strb	r3, [r7, #27]
 8002db2:	e0a6      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002db4:	2310      	movs	r3, #16
 8002db6:	76fb      	strb	r3, [r7, #27]
 8002db8:	e0a3      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	; (8002f6c <UART_SetConfig+0x304>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <UART_SetConfig+0x19e>
 8002dc4:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dce:	2b30      	cmp	r3, #48	; 0x30
 8002dd0:	d013      	beq.n	8002dfa <UART_SetConfig+0x192>
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d814      	bhi.n	8002e00 <UART_SetConfig+0x198>
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d009      	beq.n	8002dee <UART_SetConfig+0x186>
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d810      	bhi.n	8002e00 <UART_SetConfig+0x198>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <UART_SetConfig+0x180>
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d006      	beq.n	8002df4 <UART_SetConfig+0x18c>
 8002de6:	e00b      	b.n	8002e00 <UART_SetConfig+0x198>
 8002de8:	2300      	movs	r3, #0
 8002dea:	76fb      	strb	r3, [r7, #27]
 8002dec:	e089      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	76fb      	strb	r3, [r7, #27]
 8002df2:	e086      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002df4:	2304      	movs	r3, #4
 8002df6:	76fb      	strb	r3, [r7, #27]
 8002df8:	e083      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	76fb      	strb	r3, [r7, #27]
 8002dfe:	e080      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e00:	2310      	movs	r3, #16
 8002e02:	76fb      	strb	r3, [r7, #27]
 8002e04:	e07d      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <UART_SetConfig+0x308>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d120      	bne.n	8002e52 <UART_SetConfig+0x1ea>
 8002e10:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e1c:	d013      	beq.n	8002e46 <UART_SetConfig+0x1de>
 8002e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e20:	d814      	bhi.n	8002e4c <UART_SetConfig+0x1e4>
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d009      	beq.n	8002e3a <UART_SetConfig+0x1d2>
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d810      	bhi.n	8002e4c <UART_SetConfig+0x1e4>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x1cc>
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d006      	beq.n	8002e40 <UART_SetConfig+0x1d8>
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x1e4>
 8002e34:	2300      	movs	r3, #0
 8002e36:	76fb      	strb	r3, [r7, #27]
 8002e38:	e063      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	76fb      	strb	r3, [r7, #27]
 8002e3e:	e060      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e40:	2304      	movs	r3, #4
 8002e42:	76fb      	strb	r3, [r7, #27]
 8002e44:	e05d      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e46:	2308      	movs	r3, #8
 8002e48:	76fb      	strb	r3, [r7, #27]
 8002e4a:	e05a      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	76fb      	strb	r3, [r7, #27]
 8002e50:	e057      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <UART_SetConfig+0x30c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x240>
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6a:	d017      	beq.n	8002e9c <UART_SetConfig+0x234>
 8002e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e70:	d817      	bhi.n	8002ea2 <UART_SetConfig+0x23a>
 8002e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e76:	d00b      	beq.n	8002e90 <UART_SetConfig+0x228>
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7c:	d811      	bhi.n	8002ea2 <UART_SetConfig+0x23a>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <UART_SetConfig+0x222>
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d006      	beq.n	8002e96 <UART_SetConfig+0x22e>
 8002e88:	e00b      	b.n	8002ea2 <UART_SetConfig+0x23a>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	76fb      	strb	r3, [r7, #27]
 8002e8e:	e038      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e90:	2302      	movs	r3, #2
 8002e92:	76fb      	strb	r3, [r7, #27]
 8002e94:	e035      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e96:	2304      	movs	r3, #4
 8002e98:	76fb      	strb	r3, [r7, #27]
 8002e9a:	e032      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e02f      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e02c      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <UART_SetConfig+0x2f4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d125      	bne.n	8002efe <UART_SetConfig+0x296>
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec0:	d017      	beq.n	8002ef2 <UART_SetConfig+0x28a>
 8002ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0x290>
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ecc:	d00b      	beq.n	8002ee6 <UART_SetConfig+0x27e>
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed2:	d811      	bhi.n	8002ef8 <UART_SetConfig+0x290>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x278>
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d006      	beq.n	8002eec <UART_SetConfig+0x284>
 8002ede:	e00b      	b.n	8002ef8 <UART_SetConfig+0x290>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e00d      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	76fb      	strb	r3, [r7, #27]
 8002eea:	e00a      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002eec:	2304      	movs	r3, #4
 8002eee:	76fb      	strb	r3, [r7, #27]
 8002ef0:	e007      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	76fb      	strb	r3, [r7, #27]
 8002ef6:	e004      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	76fb      	strb	r3, [r7, #27]
 8002efc:	e001      	b.n	8002f02 <UART_SetConfig+0x29a>
 8002efe:	2310      	movs	r3, #16
 8002f00:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <UART_SetConfig+0x2f4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f040 809f 	bne.w	800304c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f0e:	7efb      	ldrb	r3, [r7, #27]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d837      	bhi.n	8002f84 <UART_SetConfig+0x31c>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <UART_SetConfig+0x2b4>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f41 	.word	0x08002f41
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f85 	.word	0x08002f85
 8002f2c:	08002f4f 	.word	0x08002f4f
 8002f30:	08002f85 	.word	0x08002f85
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002f85 	.word	0x08002f85
 8002f3c:	08002f7d 	.word	0x08002f7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7ff faee 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8002f44:	6178      	str	r0, [r7, #20]
        break;
 8002f46:	e022      	b.n	8002f8e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <UART_SetConfig+0x310>)
 8002f4a:	617b      	str	r3, [r7, #20]
        break;
 8002f4c:	e01f      	b.n	8002f8e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7ff fa79 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8002f52:	6178      	str	r0, [r7, #20]
        break;
 8002f54:	e01b      	b.n	8002f8e <UART_SetConfig+0x326>
 8002f56:	bf00      	nop
 8002f58:	cfff69f3 	.word	0xcfff69f3
 8002f5c:	40008000 	.word	0x40008000
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40004400 	.word	0x40004400
 8002f6c:	40004800 	.word	0x40004800
 8002f70:	40004c00 	.word	0x40004c00
 8002f74:	40005000 	.word	0x40005000
 8002f78:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f80:	617b      	str	r3, [r7, #20]
        break;
 8002f82:	e004      	b.n	8002f8e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	76bb      	strb	r3, [r7, #26]
        break;
 8002f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 811b 	beq.w	80031cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	4a96      	ldr	r2, [pc, #600]	; (80031f4 <UART_SetConfig+0x58c>)
 8002f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d305      	bcc.n	8002fc6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d902      	bls.n	8002fcc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	76bb      	strb	r3, [r7, #26]
 8002fca:	e0ff      	b.n	80031cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	4a86      	ldr	r2, [pc, #536]	; (80031f4 <UART_SetConfig+0x58c>)
 8002fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f7fd f918 	bl	8000218 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	020b      	lsls	r3, r1, #8
 8002ffa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ffe:	0202      	lsls	r2, r0, #8
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	6849      	ldr	r1, [r1, #4]
 8003004:	0849      	lsrs	r1, r1, #1
 8003006:	4608      	mov	r0, r1
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	1814      	adds	r4, r2, r0
 800300e:	eb43 0501 	adc.w	r5, r3, r1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd f8fa 	bl	8000218 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d308      	bcc.n	8003046 <UART_SetConfig+0x3de>
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d204      	bcs.n	8003046 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e0c2      	b.n	80031cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	76bb      	strb	r3, [r7, #26]
 800304a:	e0bf      	b.n	80031cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	d165      	bne.n	8003122 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003056:	7efb      	ldrb	r3, [r7, #27]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d828      	bhi.n	80030ae <UART_SetConfig+0x446>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x3fc>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7ff fa4a 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 800308c:	6178      	str	r0, [r7, #20]
        break;
 800308e:	e013      	b.n	80030b8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fa5c 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003094:	6178      	str	r0, [r7, #20]
        break;
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <UART_SetConfig+0x590>)
 800309a:	617b      	str	r3, [r7, #20]
        break;
 800309c:	e00c      	b.n	80030b8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7ff f9d1 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80030a2:	6178      	str	r0, [r7, #20]
        break;
 80030a4:	e008      	b.n	80030b8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	617b      	str	r3, [r7, #20]
        break;
 80030ac:	e004      	b.n	80030b8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	76bb      	strb	r3, [r7, #26]
        break;
 80030b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8086 	beq.w	80031cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <UART_SetConfig+0x58c>)
 80030c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ca:	461a      	mov	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d2:	005a      	lsls	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	441a      	add	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	d916      	bls.n	800311c <UART_SetConfig+0x4b4>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d212      	bcs.n	800311c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f023 030f 	bic.w	r3, r3, #15
 80030fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	b29a      	uxth	r2, r3
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	4313      	orrs	r3, r2
 8003110:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	89fa      	ldrh	r2, [r7, #14]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e057      	b.n	80031cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	76bb      	strb	r3, [r7, #26]
 8003120:	e054      	b.n	80031cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003122:	7efb      	ldrb	r3, [r7, #27]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d828      	bhi.n	800317a <UART_SetConfig+0x512>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x4c8>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800317b 	.word	0x0800317b
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800317b 	.word	0x0800317b
 8003148:	0800317b 	.word	0x0800317b
 800314c:	0800317b 	.word	0x0800317b
 8003150:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7ff f9e4 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003158:	6178      	str	r0, [r7, #20]
        break;
 800315a:	e013      	b.n	8003184 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff f9f6 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003160:	6178      	str	r0, [r7, #20]
        break;
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <UART_SetConfig+0x590>)
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7ff f96b 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 800316e:	6178      	str	r0, [r7, #20]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	76bb      	strb	r3, [r7, #26]
        break;
 8003182:	bf00      	nop
    }

    if (pclk != 0U)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d020      	beq.n	80031cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <UART_SetConfig+0x58c>)
 8003190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003194:	461a      	mov	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fbb3 f2f2 	udiv	r2, r3, r2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d908      	bls.n	80031c8 <UART_SetConfig+0x560>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d204      	bcs.n	80031c8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e001      	b.n	80031cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80031e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bdb0      	pop	{r4, r5, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	08004178 	.word	0x08004178
 80031f8:	00f42400 	.word	0x00f42400

080031fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01a      	beq.n	8003312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fa:	d10a      	bne.n	8003312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003350:	f7fd fd26 	bl	8000da0 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d10e      	bne.n	8003382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f82f 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e025      	b.n	80033ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d10e      	bne.n	80033ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f819 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e00f      	b.n	80033ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	e062      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d05e      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fd fcd6 	bl	8000da0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <UART_WaitOnFlagUntilTimeout+0x30>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11d      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003414:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e045      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02e      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345e:	d126      	bne.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003478:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e00f      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d08d      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_UARTEx_DisableFifoMode+0x16>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e027      	b.n	800353c <HAL_UARTEx_DisableFifoMode+0x66>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	; 0x24
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800351a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e02d      	b.n	80035bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f84f 	bl	8003640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035d8:	2302      	movs	r3, #2
 80035da:	e02d      	b.n	8003638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f811 	bl	8003640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003660:	e031      	b.n	80036c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003662:	2308      	movs	r3, #8
 8003664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003666:	2308      	movs	r3, #8
 8003668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	0e5b      	lsrs	r3, r3, #25
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	0f5b      	lsrs	r3, r3, #29
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	7b3a      	ldrb	r2, [r7, #12]
 800368e:	4911      	ldr	r1, [pc, #68]	; (80036d4 <UARTEx_SetNbDataToProcess+0x94>)
 8003690:	5c8a      	ldrb	r2, [r1, r2]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003696:	7b3a      	ldrb	r2, [r7, #12]
 8003698:	490f      	ldr	r1, [pc, #60]	; (80036d8 <UARTEx_SetNbDataToProcess+0x98>)
 800369a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800369c:	fb93 f3f2 	sdiv	r3, r3, r2
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	7b7a      	ldrb	r2, [r7, #13]
 80036ac:	4909      	ldr	r1, [pc, #36]	; (80036d4 <UARTEx_SetNbDataToProcess+0x94>)
 80036ae:	5c8a      	ldrb	r2, [r1, r2]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80036b4:	7b7a      	ldrb	r2, [r7, #13]
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <UARTEx_SetNbDataToProcess+0x98>)
 80036b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	08004190 	.word	0x08004190
 80036d8:	08004198 	.word	0x08004198

080036dc <__errno>:
 80036dc:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <__errno+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4d0d      	ldr	r5, [pc, #52]	; (8003720 <__libc_init_array+0x38>)
 80036ec:	4c0d      	ldr	r4, [pc, #52]	; (8003724 <__libc_init_array+0x3c>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	2600      	movs	r6, #0
 80036f4:	42a6      	cmp	r6, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	4d0b      	ldr	r5, [pc, #44]	; (8003728 <__libc_init_array+0x40>)
 80036fa:	4c0c      	ldr	r4, [pc, #48]	; (800372c <__libc_init_array+0x44>)
 80036fc:	f000 fce6 	bl	80040cc <_init>
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	2600      	movs	r6, #0
 8003706:	42a6      	cmp	r6, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003710:	4798      	blx	r3
 8003712:	3601      	adds	r6, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	f855 3b04 	ldr.w	r3, [r5], #4
 800371a:	4798      	blx	r3
 800371c:	3601      	adds	r6, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	0800420c 	.word	0x0800420c
 8003724:	0800420c 	.word	0x0800420c
 8003728:	0800420c 	.word	0x0800420c
 800372c:	08004210 	.word	0x08004210

08003730 <memset>:
 8003730:	4402      	add	r2, r0
 8003732:	4603      	mov	r3, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	d100      	bne.n	800373a <memset+0xa>
 8003738:	4770      	bx	lr
 800373a:	f803 1b01 	strb.w	r1, [r3], #1
 800373e:	e7f9      	b.n	8003734 <memset+0x4>

08003740 <_puts_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	460e      	mov	r6, r1
 8003744:	4605      	mov	r5, r0
 8003746:	b118      	cbz	r0, 8003750 <_puts_r+0x10>
 8003748:	6983      	ldr	r3, [r0, #24]
 800374a:	b90b      	cbnz	r3, 8003750 <_puts_r+0x10>
 800374c:	f000 fa48 	bl	8003be0 <__sinit>
 8003750:	69ab      	ldr	r3, [r5, #24]
 8003752:	68ac      	ldr	r4, [r5, #8]
 8003754:	b913      	cbnz	r3, 800375c <_puts_r+0x1c>
 8003756:	4628      	mov	r0, r5
 8003758:	f000 fa42 	bl	8003be0 <__sinit>
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <_puts_r+0xd0>)
 800375e:	429c      	cmp	r4, r3
 8003760:	d120      	bne.n	80037a4 <_puts_r+0x64>
 8003762:	686c      	ldr	r4, [r5, #4]
 8003764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003766:	07db      	lsls	r3, r3, #31
 8003768:	d405      	bmi.n	8003776 <_puts_r+0x36>
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	0598      	lsls	r0, r3, #22
 800376e:	d402      	bmi.n	8003776 <_puts_r+0x36>
 8003770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003772:	f000 fad3 	bl	8003d1c <__retarget_lock_acquire_recursive>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	0719      	lsls	r1, r3, #28
 800377a:	d51d      	bpl.n	80037b8 <_puts_r+0x78>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	b1db      	cbz	r3, 80037b8 <_puts_r+0x78>
 8003780:	3e01      	subs	r6, #1
 8003782:	68a3      	ldr	r3, [r4, #8]
 8003784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003788:	3b01      	subs	r3, #1
 800378a:	60a3      	str	r3, [r4, #8]
 800378c:	bb39      	cbnz	r1, 80037de <_puts_r+0x9e>
 800378e:	2b00      	cmp	r3, #0
 8003790:	da38      	bge.n	8003804 <_puts_r+0xc4>
 8003792:	4622      	mov	r2, r4
 8003794:	210a      	movs	r1, #10
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f848 	bl	800382c <__swbuf_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d011      	beq.n	80037c4 <_puts_r+0x84>
 80037a0:	250a      	movs	r5, #10
 80037a2:	e011      	b.n	80037c8 <_puts_r+0x88>
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <_puts_r+0xd4>)
 80037a6:	429c      	cmp	r4, r3
 80037a8:	d101      	bne.n	80037ae <_puts_r+0x6e>
 80037aa:	68ac      	ldr	r4, [r5, #8]
 80037ac:	e7da      	b.n	8003764 <_puts_r+0x24>
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <_puts_r+0xd8>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	bf08      	it	eq
 80037b4:	68ec      	ldreq	r4, [r5, #12]
 80037b6:	e7d5      	b.n	8003764 <_puts_r+0x24>
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f000 f888 	bl	80038d0 <__swsetup_r>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d0dd      	beq.n	8003780 <_puts_r+0x40>
 80037c4:	f04f 35ff 	mov.w	r5, #4294967295
 80037c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ca:	07da      	lsls	r2, r3, #31
 80037cc:	d405      	bmi.n	80037da <_puts_r+0x9a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	059b      	lsls	r3, r3, #22
 80037d2:	d402      	bmi.n	80037da <_puts_r+0x9a>
 80037d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d6:	f000 faa2 	bl	8003d1e <__retarget_lock_release_recursive>
 80037da:	4628      	mov	r0, r5
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da04      	bge.n	80037ec <_puts_r+0xac>
 80037e2:	69a2      	ldr	r2, [r4, #24]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dc06      	bgt.n	80037f6 <_puts_r+0xb6>
 80037e8:	290a      	cmp	r1, #10
 80037ea:	d004      	beq.n	80037f6 <_puts_r+0xb6>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	6022      	str	r2, [r4, #0]
 80037f2:	7019      	strb	r1, [r3, #0]
 80037f4:	e7c5      	b.n	8003782 <_puts_r+0x42>
 80037f6:	4622      	mov	r2, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	f000 f817 	bl	800382c <__swbuf_r>
 80037fe:	3001      	adds	r0, #1
 8003800:	d1bf      	bne.n	8003782 <_puts_r+0x42>
 8003802:	e7df      	b.n	80037c4 <_puts_r+0x84>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	250a      	movs	r5, #10
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	6022      	str	r2, [r4, #0]
 800380c:	701d      	strb	r5, [r3, #0]
 800380e:	e7db      	b.n	80037c8 <_puts_r+0x88>
 8003810:	080041c4 	.word	0x080041c4
 8003814:	080041e4 	.word	0x080041e4
 8003818:	080041a4 	.word	0x080041a4

0800381c <puts>:
 800381c:	4b02      	ldr	r3, [pc, #8]	; (8003828 <puts+0xc>)
 800381e:	4601      	mov	r1, r0
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f7ff bf8d 	b.w	8003740 <_puts_r>
 8003826:	bf00      	nop
 8003828:	2000000c 	.word	0x2000000c

0800382c <__swbuf_r>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	460e      	mov	r6, r1
 8003830:	4614      	mov	r4, r2
 8003832:	4605      	mov	r5, r0
 8003834:	b118      	cbz	r0, 800383e <__swbuf_r+0x12>
 8003836:	6983      	ldr	r3, [r0, #24]
 8003838:	b90b      	cbnz	r3, 800383e <__swbuf_r+0x12>
 800383a:	f000 f9d1 	bl	8003be0 <__sinit>
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <__swbuf_r+0x98>)
 8003840:	429c      	cmp	r4, r3
 8003842:	d12b      	bne.n	800389c <__swbuf_r+0x70>
 8003844:	686c      	ldr	r4, [r5, #4]
 8003846:	69a3      	ldr	r3, [r4, #24]
 8003848:	60a3      	str	r3, [r4, #8]
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	071a      	lsls	r2, r3, #28
 800384e:	d52f      	bpl.n	80038b0 <__swbuf_r+0x84>
 8003850:	6923      	ldr	r3, [r4, #16]
 8003852:	b36b      	cbz	r3, 80038b0 <__swbuf_r+0x84>
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	1ac0      	subs	r0, r0, r3
 800385a:	6963      	ldr	r3, [r4, #20]
 800385c:	b2f6      	uxtb	r6, r6
 800385e:	4283      	cmp	r3, r0
 8003860:	4637      	mov	r7, r6
 8003862:	dc04      	bgt.n	800386e <__swbuf_r+0x42>
 8003864:	4621      	mov	r1, r4
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f926 	bl	8003ab8 <_fflush_r>
 800386c:	bb30      	cbnz	r0, 80038bc <__swbuf_r+0x90>
 800386e:	68a3      	ldr	r3, [r4, #8]
 8003870:	3b01      	subs	r3, #1
 8003872:	60a3      	str	r3, [r4, #8]
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	701e      	strb	r6, [r3, #0]
 800387c:	6963      	ldr	r3, [r4, #20]
 800387e:	3001      	adds	r0, #1
 8003880:	4283      	cmp	r3, r0
 8003882:	d004      	beq.n	800388e <__swbuf_r+0x62>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	07db      	lsls	r3, r3, #31
 8003888:	d506      	bpl.n	8003898 <__swbuf_r+0x6c>
 800388a:	2e0a      	cmp	r6, #10
 800388c:	d104      	bne.n	8003898 <__swbuf_r+0x6c>
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f911 	bl	8003ab8 <_fflush_r>
 8003896:	b988      	cbnz	r0, 80038bc <__swbuf_r+0x90>
 8003898:	4638      	mov	r0, r7
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <__swbuf_r+0x9c>)
 800389e:	429c      	cmp	r4, r3
 80038a0:	d101      	bne.n	80038a6 <__swbuf_r+0x7a>
 80038a2:	68ac      	ldr	r4, [r5, #8]
 80038a4:	e7cf      	b.n	8003846 <__swbuf_r+0x1a>
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <__swbuf_r+0xa0>)
 80038a8:	429c      	cmp	r4, r3
 80038aa:	bf08      	it	eq
 80038ac:	68ec      	ldreq	r4, [r5, #12]
 80038ae:	e7ca      	b.n	8003846 <__swbuf_r+0x1a>
 80038b0:	4621      	mov	r1, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 f80c 	bl	80038d0 <__swsetup_r>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d0cb      	beq.n	8003854 <__swbuf_r+0x28>
 80038bc:	f04f 37ff 	mov.w	r7, #4294967295
 80038c0:	e7ea      	b.n	8003898 <__swbuf_r+0x6c>
 80038c2:	bf00      	nop
 80038c4:	080041c4 	.word	0x080041c4
 80038c8:	080041e4 	.word	0x080041e4
 80038cc:	080041a4 	.word	0x080041a4

080038d0 <__swsetup_r>:
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <__swsetup_r+0xcc>)
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	681d      	ldr	r5, [r3, #0]
 80038d6:	4606      	mov	r6, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	b125      	cbz	r5, 80038e6 <__swsetup_r+0x16>
 80038dc:	69ab      	ldr	r3, [r5, #24]
 80038de:	b913      	cbnz	r3, 80038e6 <__swsetup_r+0x16>
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f97d 	bl	8003be0 <__sinit>
 80038e6:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <__swsetup_r+0xd0>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	d10f      	bne.n	800390c <__swsetup_r+0x3c>
 80038ec:	686c      	ldr	r4, [r5, #4]
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f4:	0719      	lsls	r1, r3, #28
 80038f6:	d42c      	bmi.n	8003952 <__swsetup_r+0x82>
 80038f8:	06dd      	lsls	r5, r3, #27
 80038fa:	d411      	bmi.n	8003920 <__swsetup_r+0x50>
 80038fc:	2309      	movs	r3, #9
 80038fe:	6033      	str	r3, [r6, #0]
 8003900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003904:	81a3      	strh	r3, [r4, #12]
 8003906:	f04f 30ff 	mov.w	r0, #4294967295
 800390a:	e03e      	b.n	800398a <__swsetup_r+0xba>
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <__swsetup_r+0xd4>)
 800390e:	429c      	cmp	r4, r3
 8003910:	d101      	bne.n	8003916 <__swsetup_r+0x46>
 8003912:	68ac      	ldr	r4, [r5, #8]
 8003914:	e7eb      	b.n	80038ee <__swsetup_r+0x1e>
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <__swsetup_r+0xd8>)
 8003918:	429c      	cmp	r4, r3
 800391a:	bf08      	it	eq
 800391c:	68ec      	ldreq	r4, [r5, #12]
 800391e:	e7e6      	b.n	80038ee <__swsetup_r+0x1e>
 8003920:	0758      	lsls	r0, r3, #29
 8003922:	d512      	bpl.n	800394a <__swsetup_r+0x7a>
 8003924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003926:	b141      	cbz	r1, 800393a <__swsetup_r+0x6a>
 8003928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800392c:	4299      	cmp	r1, r3
 800392e:	d002      	beq.n	8003936 <__swsetup_r+0x66>
 8003930:	4630      	mov	r0, r6
 8003932:	f000 fa59 	bl	8003de8 <_free_r>
 8003936:	2300      	movs	r3, #0
 8003938:	6363      	str	r3, [r4, #52]	; 0x34
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	b94b      	cbnz	r3, 800396a <__swsetup_r+0x9a>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800395c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003960:	d003      	beq.n	800396a <__swsetup_r+0x9a>
 8003962:	4621      	mov	r1, r4
 8003964:	4630      	mov	r0, r6
 8003966:	f000 f9ff 	bl	8003d68 <__smakebuf_r>
 800396a:	89a0      	ldrh	r0, [r4, #12]
 800396c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003970:	f010 0301 	ands.w	r3, r0, #1
 8003974:	d00a      	beq.n	800398c <__swsetup_r+0xbc>
 8003976:	2300      	movs	r3, #0
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	6963      	ldr	r3, [r4, #20]
 800397c:	425b      	negs	r3, r3
 800397e:	61a3      	str	r3, [r4, #24]
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	b943      	cbnz	r3, 8003996 <__swsetup_r+0xc6>
 8003984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003988:	d1ba      	bne.n	8003900 <__swsetup_r+0x30>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	0781      	lsls	r1, r0, #30
 800398e:	bf58      	it	pl
 8003990:	6963      	ldrpl	r3, [r4, #20]
 8003992:	60a3      	str	r3, [r4, #8]
 8003994:	e7f4      	b.n	8003980 <__swsetup_r+0xb0>
 8003996:	2000      	movs	r0, #0
 8003998:	e7f7      	b.n	800398a <__swsetup_r+0xba>
 800399a:	bf00      	nop
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	080041c4 	.word	0x080041c4
 80039a4:	080041e4 	.word	0x080041e4
 80039a8:	080041a4 	.word	0x080041a4

080039ac <__sflush_r>:
 80039ac:	898a      	ldrh	r2, [r1, #12]
 80039ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b2:	4605      	mov	r5, r0
 80039b4:	0710      	lsls	r0, r2, #28
 80039b6:	460c      	mov	r4, r1
 80039b8:	d458      	bmi.n	8003a6c <__sflush_r+0xc0>
 80039ba:	684b      	ldr	r3, [r1, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dc05      	bgt.n	80039cc <__sflush_r+0x20>
 80039c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dc02      	bgt.n	80039cc <__sflush_r+0x20>
 80039c6:	2000      	movs	r0, #0
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d0f9      	beq.n	80039c6 <__sflush_r+0x1a>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039d8:	682f      	ldr	r7, [r5, #0]
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	d032      	beq.n	8003a44 <__sflush_r+0x98>
 80039de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	075a      	lsls	r2, r3, #29
 80039e4:	d505      	bpl.n	80039f2 <__sflush_r+0x46>
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	1ac0      	subs	r0, r0, r3
 80039ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ec:	b10b      	cbz	r3, 80039f2 <__sflush_r+0x46>
 80039ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039f0:	1ac0      	subs	r0, r0, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	4602      	mov	r2, r0
 80039f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039f8:	6a21      	ldr	r1, [r4, #32]
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b0      	blx	r6
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	d106      	bne.n	8003a12 <__sflush_r+0x66>
 8003a04:	6829      	ldr	r1, [r5, #0]
 8003a06:	291d      	cmp	r1, #29
 8003a08:	d82c      	bhi.n	8003a64 <__sflush_r+0xb8>
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <__sflush_r+0x108>)
 8003a0c:	40ca      	lsrs	r2, r1
 8003a0e:	07d6      	lsls	r6, r2, #31
 8003a10:	d528      	bpl.n	8003a64 <__sflush_r+0xb8>
 8003a12:	2200      	movs	r2, #0
 8003a14:	6062      	str	r2, [r4, #4]
 8003a16:	04d9      	lsls	r1, r3, #19
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	d504      	bpl.n	8003a28 <__sflush_r+0x7c>
 8003a1e:	1c42      	adds	r2, r0, #1
 8003a20:	d101      	bne.n	8003a26 <__sflush_r+0x7a>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	b903      	cbnz	r3, 8003a28 <__sflush_r+0x7c>
 8003a26:	6560      	str	r0, [r4, #84]	; 0x54
 8003a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a2a:	602f      	str	r7, [r5, #0]
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d0ca      	beq.n	80039c6 <__sflush_r+0x1a>
 8003a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a34:	4299      	cmp	r1, r3
 8003a36:	d002      	beq.n	8003a3e <__sflush_r+0x92>
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 f9d5 	bl	8003de8 <_free_r>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	6360      	str	r0, [r4, #52]	; 0x34
 8003a42:	e7c1      	b.n	80039c8 <__sflush_r+0x1c>
 8003a44:	6a21      	ldr	r1, [r4, #32]
 8003a46:	2301      	movs	r3, #1
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b0      	blx	r6
 8003a4c:	1c41      	adds	r1, r0, #1
 8003a4e:	d1c7      	bne.n	80039e0 <__sflush_r+0x34>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0c4      	beq.n	80039e0 <__sflush_r+0x34>
 8003a56:	2b1d      	cmp	r3, #29
 8003a58:	d001      	beq.n	8003a5e <__sflush_r+0xb2>
 8003a5a:	2b16      	cmp	r3, #22
 8003a5c:	d101      	bne.n	8003a62 <__sflush_r+0xb6>
 8003a5e:	602f      	str	r7, [r5, #0]
 8003a60:	e7b1      	b.n	80039c6 <__sflush_r+0x1a>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	e7ad      	b.n	80039c8 <__sflush_r+0x1c>
 8003a6c:	690f      	ldr	r7, [r1, #16]
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	d0a9      	beq.n	80039c6 <__sflush_r+0x1a>
 8003a72:	0793      	lsls	r3, r2, #30
 8003a74:	680e      	ldr	r6, [r1, #0]
 8003a76:	bf08      	it	eq
 8003a78:	694b      	ldreq	r3, [r1, #20]
 8003a7a:	600f      	str	r7, [r1, #0]
 8003a7c:	bf18      	it	ne
 8003a7e:	2300      	movne	r3, #0
 8003a80:	eba6 0807 	sub.w	r8, r6, r7
 8003a84:	608b      	str	r3, [r1, #8]
 8003a86:	f1b8 0f00 	cmp.w	r8, #0
 8003a8a:	dd9c      	ble.n	80039c6 <__sflush_r+0x1a>
 8003a8c:	6a21      	ldr	r1, [r4, #32]
 8003a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a90:	4643      	mov	r3, r8
 8003a92:	463a      	mov	r2, r7
 8003a94:	4628      	mov	r0, r5
 8003a96:	47b0      	blx	r6
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	dc06      	bgt.n	8003aaa <__sflush_r+0xfe>
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa2:	81a3      	strh	r3, [r4, #12]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e78e      	b.n	80039c8 <__sflush_r+0x1c>
 8003aaa:	4407      	add	r7, r0
 8003aac:	eba8 0800 	sub.w	r8, r8, r0
 8003ab0:	e7e9      	b.n	8003a86 <__sflush_r+0xda>
 8003ab2:	bf00      	nop
 8003ab4:	20400001 	.word	0x20400001

08003ab8 <_fflush_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_fflush_r+0x10>
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	b118      	cbz	r0, 8003ad2 <_fflush_r+0x1a>
 8003aca:	6983      	ldr	r3, [r0, #24]
 8003acc:	b90b      	cbnz	r3, 8003ad2 <_fflush_r+0x1a>
 8003ace:	f000 f887 	bl	8003be0 <__sinit>
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <_fflush_r+0x6c>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d11b      	bne.n	8003b10 <_fflush_r+0x58>
 8003ad8:	686c      	ldr	r4, [r5, #4]
 8003ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <_fflush_r+0xa>
 8003ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d404      	bmi.n	8003af2 <_fflush_r+0x3a>
 8003ae8:	0599      	lsls	r1, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_fflush_r+0x3a>
 8003aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aee:	f000 f915 	bl	8003d1c <__retarget_lock_acquire_recursive>
 8003af2:	4628      	mov	r0, r5
 8003af4:	4621      	mov	r1, r4
 8003af6:	f7ff ff59 	bl	80039ac <__sflush_r>
 8003afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003afc:	07da      	lsls	r2, r3, #31
 8003afe:	4605      	mov	r5, r0
 8003b00:	d4e0      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	059b      	lsls	r3, r3, #22
 8003b06:	d4dd      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0a:	f000 f908 	bl	8003d1e <__retarget_lock_release_recursive>
 8003b0e:	e7d9      	b.n	8003ac4 <_fflush_r+0xc>
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <_fflush_r+0x70>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d101      	bne.n	8003b1a <_fflush_r+0x62>
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	e7df      	b.n	8003ada <_fflush_r+0x22>
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <_fflush_r+0x74>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	bf08      	it	eq
 8003b20:	68ec      	ldreq	r4, [r5, #12]
 8003b22:	e7da      	b.n	8003ada <_fflush_r+0x22>
 8003b24:	080041c4 	.word	0x080041c4
 8003b28:	080041e4 	.word	0x080041e4
 8003b2c:	080041a4 	.word	0x080041a4

08003b30 <std>:
 8003b30:	2300      	movs	r3, #0
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
 8003b36:	e9c0 3300 	strd	r3, r3, [r0]
 8003b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b3e:	6083      	str	r3, [r0, #8]
 8003b40:	8181      	strh	r1, [r0, #12]
 8003b42:	6643      	str	r3, [r0, #100]	; 0x64
 8003b44:	81c2      	strh	r2, [r0, #14]
 8003b46:	6183      	str	r3, [r0, #24]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	305c      	adds	r0, #92	; 0x5c
 8003b4e:	f7ff fdef 	bl	8003730 <memset>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std+0x38>)
 8003b54:	6263      	str	r3, [r4, #36]	; 0x24
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <std+0x3c>)
 8003b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std+0x40>)
 8003b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <std+0x44>)
 8003b60:	6224      	str	r4, [r4, #32]
 8003b62:	6323      	str	r3, [r4, #48]	; 0x30
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	bf00      	nop
 8003b68:	08003f5d 	.word	0x08003f5d
 8003b6c:	08003f7f 	.word	0x08003f7f
 8003b70:	08003fb7 	.word	0x08003fb7
 8003b74:	08003fdb 	.word	0x08003fdb

08003b78 <_cleanup_r>:
 8003b78:	4901      	ldr	r1, [pc, #4]	; (8003b80 <_cleanup_r+0x8>)
 8003b7a:	f000 b8af 	b.w	8003cdc <_fwalk_reent>
 8003b7e:	bf00      	nop
 8003b80:	08003ab9 	.word	0x08003ab9

08003b84 <__sfmoreglue>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	1e4a      	subs	r2, r1, #1
 8003b88:	2568      	movs	r5, #104	; 0x68
 8003b8a:	4355      	muls	r5, r2
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b92:	f000 f979 	bl	8003e88 <_malloc_r>
 8003b96:	4604      	mov	r4, r0
 8003b98:	b140      	cbz	r0, 8003bac <__sfmoreglue+0x28>
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003ba0:	300c      	adds	r0, #12
 8003ba2:	60a0      	str	r0, [r4, #8]
 8003ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ba8:	f7ff fdc2 	bl	8003730 <memset>
 8003bac:	4620      	mov	r0, r4
 8003bae:	bd70      	pop	{r4, r5, r6, pc}

08003bb0 <__sfp_lock_acquire>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__sfp_lock_acquire+0x8>)
 8003bb2:	f000 b8b3 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	20000184 	.word	0x20000184

08003bbc <__sfp_lock_release>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__sfp_lock_release+0x8>)
 8003bbe:	f000 b8ae 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	20000184 	.word	0x20000184

08003bc8 <__sinit_lock_acquire>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	; (8003bd0 <__sinit_lock_acquire+0x8>)
 8003bca:	f000 b8a7 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	2000017f 	.word	0x2000017f

08003bd4 <__sinit_lock_release>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	; (8003bdc <__sinit_lock_release+0x8>)
 8003bd6:	f000 b8a2 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	2000017f 	.word	0x2000017f

08003be0 <__sinit>:
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
 8003be4:	f7ff fff0 	bl	8003bc8 <__sinit_lock_acquire>
 8003be8:	69a3      	ldr	r3, [r4, #24]
 8003bea:	b11b      	cbz	r3, 8003bf4 <__sinit+0x14>
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf0:	f7ff bff0 	b.w	8003bd4 <__sinit_lock_release>
 8003bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <__sinit+0x68>)
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <__sinit+0x6c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	bf04      	itt	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	61a3      	streq	r3, [r4, #24]
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f820 	bl	8003c50 <__sfp>
 8003c10:	6060      	str	r0, [r4, #4]
 8003c12:	4620      	mov	r0, r4
 8003c14:	f000 f81c 	bl	8003c50 <__sfp>
 8003c18:	60a0      	str	r0, [r4, #8]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f000 f818 	bl	8003c50 <__sfp>
 8003c20:	2200      	movs	r2, #0
 8003c22:	60e0      	str	r0, [r4, #12]
 8003c24:	2104      	movs	r1, #4
 8003c26:	6860      	ldr	r0, [r4, #4]
 8003c28:	f7ff ff82 	bl	8003b30 <std>
 8003c2c:	68a0      	ldr	r0, [r4, #8]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2109      	movs	r1, #9
 8003c32:	f7ff ff7d 	bl	8003b30 <std>
 8003c36:	68e0      	ldr	r0, [r4, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff ff78 	bl	8003b30 <std>
 8003c40:	2301      	movs	r3, #1
 8003c42:	61a3      	str	r3, [r4, #24]
 8003c44:	e7d2      	b.n	8003bec <__sinit+0xc>
 8003c46:	bf00      	nop
 8003c48:	080041a0 	.word	0x080041a0
 8003c4c:	08003b79 	.word	0x08003b79

08003c50 <__sfp>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	4607      	mov	r7, r0
 8003c54:	f7ff ffac 	bl	8003bb0 <__sfp_lock_acquire>
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <__sfp+0x84>)
 8003c5a:	681e      	ldr	r6, [r3, #0]
 8003c5c:	69b3      	ldr	r3, [r6, #24]
 8003c5e:	b913      	cbnz	r3, 8003c66 <__sfp+0x16>
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff ffbd 	bl	8003be0 <__sinit>
 8003c66:	3648      	adds	r6, #72	; 0x48
 8003c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	d503      	bpl.n	8003c78 <__sfp+0x28>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	b30b      	cbz	r3, 8003cb8 <__sfp+0x68>
 8003c74:	6836      	ldr	r6, [r6, #0]
 8003c76:	e7f7      	b.n	8003c68 <__sfp+0x18>
 8003c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c7c:	b9d5      	cbnz	r5, 8003cb4 <__sfp+0x64>
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <__sfp+0x88>)
 8003c80:	60e3      	str	r3, [r4, #12]
 8003c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c86:	6665      	str	r5, [r4, #100]	; 0x64
 8003c88:	f000 f847 	bl	8003d1a <__retarget_lock_init_recursive>
 8003c8c:	f7ff ff96 	bl	8003bbc <__sfp_lock_release>
 8003c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c98:	6025      	str	r5, [r4, #0]
 8003c9a:	61a5      	str	r5, [r4, #24]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca4:	f7ff fd44 	bl	8003730 <memset>
 8003ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb4:	3468      	adds	r4, #104	; 0x68
 8003cb6:	e7d9      	b.n	8003c6c <__sfp+0x1c>
 8003cb8:	2104      	movs	r1, #4
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7ff ff62 	bl	8003b84 <__sfmoreglue>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	6030      	str	r0, [r6, #0]
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1d5      	bne.n	8003c74 <__sfp+0x24>
 8003cc8:	f7ff ff78 	bl	8003bbc <__sfp_lock_release>
 8003ccc:	230c      	movs	r3, #12
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	e7ee      	b.n	8003cb0 <__sfp+0x60>
 8003cd2:	bf00      	nop
 8003cd4:	080041a0 	.word	0x080041a0
 8003cd8:	ffff0001 	.word	0xffff0001

08003cdc <_fwalk_reent>:
 8003cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	4688      	mov	r8, r1
 8003ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ce8:	2700      	movs	r7, #0
 8003cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cee:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf2:	d505      	bpl.n	8003d00 <_fwalk_reent+0x24>
 8003cf4:	6824      	ldr	r4, [r4, #0]
 8003cf6:	2c00      	cmp	r4, #0
 8003cf8:	d1f7      	bne.n	8003cea <_fwalk_reent+0xe>
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d00:	89ab      	ldrh	r3, [r5, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d907      	bls.n	8003d16 <_fwalk_reent+0x3a>
 8003d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <_fwalk_reent+0x3a>
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4630      	mov	r0, r6
 8003d12:	47c0      	blx	r8
 8003d14:	4307      	orrs	r7, r0
 8003d16:	3568      	adds	r5, #104	; 0x68
 8003d18:	e7e9      	b.n	8003cee <_fwalk_reent+0x12>

08003d1a <__retarget_lock_init_recursive>:
 8003d1a:	4770      	bx	lr

08003d1c <__retarget_lock_acquire_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_release_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <__swhatbuf_r>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460e      	mov	r6, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	b096      	sub	sp, #88	; 0x58
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	da07      	bge.n	8003d42 <__swhatbuf_r+0x22>
 8003d32:	2300      	movs	r3, #0
 8003d34:	602b      	str	r3, [r5, #0]
 8003d36:	89b3      	ldrh	r3, [r6, #12]
 8003d38:	061a      	lsls	r2, r3, #24
 8003d3a:	d410      	bmi.n	8003d5e <__swhatbuf_r+0x3e>
 8003d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d40:	e00e      	b.n	8003d60 <__swhatbuf_r+0x40>
 8003d42:	466a      	mov	r2, sp
 8003d44:	f000 f970 	bl	8004028 <_fstat_r>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	dbf2      	blt.n	8003d32 <__swhatbuf_r+0x12>
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d56:	425a      	negs	r2, r3
 8003d58:	415a      	adcs	r2, r3
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	e7ee      	b.n	8003d3c <__swhatbuf_r+0x1c>
 8003d5e:	2340      	movs	r3, #64	; 0x40
 8003d60:	2000      	movs	r0, #0
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	b016      	add	sp, #88	; 0x58
 8003d66:	bd70      	pop	{r4, r5, r6, pc}

08003d68 <__smakebuf_r>:
 8003d68:	898b      	ldrh	r3, [r1, #12]
 8003d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d6c:	079d      	lsls	r5, r3, #30
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	d507      	bpl.n	8003d84 <__smakebuf_r+0x1c>
 8003d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	6163      	str	r3, [r4, #20]
 8003d80:	b002      	add	sp, #8
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	ab01      	add	r3, sp, #4
 8003d86:	466a      	mov	r2, sp
 8003d88:	f7ff ffca 	bl	8003d20 <__swhatbuf_r>
 8003d8c:	9900      	ldr	r1, [sp, #0]
 8003d8e:	4605      	mov	r5, r0
 8003d90:	4630      	mov	r0, r6
 8003d92:	f000 f879 	bl	8003e88 <_malloc_r>
 8003d96:	b948      	cbnz	r0, 8003dac <__smakebuf_r+0x44>
 8003d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9c:	059a      	lsls	r2, r3, #22
 8003d9e:	d4ef      	bmi.n	8003d80 <__smakebuf_r+0x18>
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	e7e3      	b.n	8003d74 <__smakebuf_r+0xc>
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <__smakebuf_r+0x7c>)
 8003dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	6020      	str	r0, [r4, #0]
 8003db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	9b00      	ldr	r3, [sp, #0]
 8003dbc:	6163      	str	r3, [r4, #20]
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	6120      	str	r0, [r4, #16]
 8003dc2:	b15b      	cbz	r3, 8003ddc <__smakebuf_r+0x74>
 8003dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f93f 	bl	800404c <_isatty_r>
 8003dce:	b128      	cbz	r0, 8003ddc <__smakebuf_r+0x74>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	89a0      	ldrh	r0, [r4, #12]
 8003dde:	4305      	orrs	r5, r0
 8003de0:	81a5      	strh	r5, [r4, #12]
 8003de2:	e7cd      	b.n	8003d80 <__smakebuf_r+0x18>
 8003de4:	08003b79 	.word	0x08003b79

08003de8 <_free_r>:
 8003de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d048      	beq.n	8003e80 <_free_r+0x98>
 8003dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df2:	9001      	str	r0, [sp, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f1a1 0404 	sub.w	r4, r1, #4
 8003dfa:	bfb8      	it	lt
 8003dfc:	18e4      	addlt	r4, r4, r3
 8003dfe:	f000 f947 	bl	8004090 <__malloc_lock>
 8003e02:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <_free_r+0x9c>)
 8003e04:	9801      	ldr	r0, [sp, #4]
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	4615      	mov	r5, r2
 8003e0a:	b933      	cbnz	r3, 8003e1a <_free_r+0x32>
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	6014      	str	r4, [r2, #0]
 8003e10:	b003      	add	sp, #12
 8003e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e16:	f000 b941 	b.w	800409c <__malloc_unlock>
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	d90b      	bls.n	8003e36 <_free_r+0x4e>
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	1862      	adds	r2, r4, r1
 8003e22:	4293      	cmp	r3, r2
 8003e24:	bf04      	itt	eq
 8003e26:	681a      	ldreq	r2, [r3, #0]
 8003e28:	685b      	ldreq	r3, [r3, #4]
 8003e2a:	6063      	str	r3, [r4, #4]
 8003e2c:	bf04      	itt	eq
 8003e2e:	1852      	addeq	r2, r2, r1
 8003e30:	6022      	streq	r2, [r4, #0]
 8003e32:	602c      	str	r4, [r5, #0]
 8003e34:	e7ec      	b.n	8003e10 <_free_r+0x28>
 8003e36:	461a      	mov	r2, r3
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b10b      	cbz	r3, 8003e40 <_free_r+0x58>
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d9fa      	bls.n	8003e36 <_free_r+0x4e>
 8003e40:	6811      	ldr	r1, [r2, #0]
 8003e42:	1855      	adds	r5, r2, r1
 8003e44:	42a5      	cmp	r5, r4
 8003e46:	d10b      	bne.n	8003e60 <_free_r+0x78>
 8003e48:	6824      	ldr	r4, [r4, #0]
 8003e4a:	4421      	add	r1, r4
 8003e4c:	1854      	adds	r4, r2, r1
 8003e4e:	42a3      	cmp	r3, r4
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	d1dd      	bne.n	8003e10 <_free_r+0x28>
 8003e54:	681c      	ldr	r4, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	6053      	str	r3, [r2, #4]
 8003e5a:	4421      	add	r1, r4
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	e7d7      	b.n	8003e10 <_free_r+0x28>
 8003e60:	d902      	bls.n	8003e68 <_free_r+0x80>
 8003e62:	230c      	movs	r3, #12
 8003e64:	6003      	str	r3, [r0, #0]
 8003e66:	e7d3      	b.n	8003e10 <_free_r+0x28>
 8003e68:	6825      	ldr	r5, [r4, #0]
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	bf04      	itt	eq
 8003e70:	6819      	ldreq	r1, [r3, #0]
 8003e72:	685b      	ldreq	r3, [r3, #4]
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	bf04      	itt	eq
 8003e78:	1949      	addeq	r1, r1, r5
 8003e7a:	6021      	streq	r1, [r4, #0]
 8003e7c:	6054      	str	r4, [r2, #4]
 8003e7e:	e7c7      	b.n	8003e10 <_free_r+0x28>
 8003e80:	b003      	add	sp, #12
 8003e82:	bd30      	pop	{r4, r5, pc}
 8003e84:	20000094 	.word	0x20000094

08003e88 <_malloc_r>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	1ccd      	adds	r5, r1, #3
 8003e8c:	f025 0503 	bic.w	r5, r5, #3
 8003e90:	3508      	adds	r5, #8
 8003e92:	2d0c      	cmp	r5, #12
 8003e94:	bf38      	it	cc
 8003e96:	250c      	movcc	r5, #12
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	db01      	blt.n	8003ea2 <_malloc_r+0x1a>
 8003e9e:	42a9      	cmp	r1, r5
 8003ea0:	d903      	bls.n	8003eaa <_malloc_r+0x22>
 8003ea2:	230c      	movs	r3, #12
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eaa:	f000 f8f1 	bl	8004090 <__malloc_lock>
 8003eae:	4921      	ldr	r1, [pc, #132]	; (8003f34 <_malloc_r+0xac>)
 8003eb0:	680a      	ldr	r2, [r1, #0]
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	b99c      	cbnz	r4, 8003ede <_malloc_r+0x56>
 8003eb6:	4f20      	ldr	r7, [pc, #128]	; (8003f38 <_malloc_r+0xb0>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b923      	cbnz	r3, 8003ec6 <_malloc_r+0x3e>
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f000 f83c 	bl	8003f3c <_sbrk_r>
 8003ec4:	6038      	str	r0, [r7, #0]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f000 f837 	bl	8003f3c <_sbrk_r>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d123      	bne.n	8003f1a <_malloc_r+0x92>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f000 f8e0 	bl	800409c <__malloc_unlock>
 8003edc:	e7e3      	b.n	8003ea6 <_malloc_r+0x1e>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	1b5b      	subs	r3, r3, r5
 8003ee2:	d417      	bmi.n	8003f14 <_malloc_r+0x8c>
 8003ee4:	2b0b      	cmp	r3, #11
 8003ee6:	d903      	bls.n	8003ef0 <_malloc_r+0x68>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	441c      	add	r4, r3
 8003eec:	6025      	str	r5, [r4, #0]
 8003eee:	e004      	b.n	8003efa <_malloc_r+0x72>
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	42a2      	cmp	r2, r4
 8003ef4:	bf0c      	ite	eq
 8003ef6:	600b      	streq	r3, [r1, #0]
 8003ef8:	6053      	strne	r3, [r2, #4]
 8003efa:	4630      	mov	r0, r6
 8003efc:	f000 f8ce 	bl	800409c <__malloc_unlock>
 8003f00:	f104 000b 	add.w	r0, r4, #11
 8003f04:	1d23      	adds	r3, r4, #4
 8003f06:	f020 0007 	bic.w	r0, r0, #7
 8003f0a:	1ac2      	subs	r2, r0, r3
 8003f0c:	d0cc      	beq.n	8003ea8 <_malloc_r+0x20>
 8003f0e:	1a1b      	subs	r3, r3, r0
 8003f10:	50a3      	str	r3, [r4, r2]
 8003f12:	e7c9      	b.n	8003ea8 <_malloc_r+0x20>
 8003f14:	4622      	mov	r2, r4
 8003f16:	6864      	ldr	r4, [r4, #4]
 8003f18:	e7cc      	b.n	8003eb4 <_malloc_r+0x2c>
 8003f1a:	1cc4      	adds	r4, r0, #3
 8003f1c:	f024 0403 	bic.w	r4, r4, #3
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d0e3      	beq.n	8003eec <_malloc_r+0x64>
 8003f24:	1a21      	subs	r1, r4, r0
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f808 	bl	8003f3c <_sbrk_r>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d1dd      	bne.n	8003eec <_malloc_r+0x64>
 8003f30:	e7cf      	b.n	8003ed2 <_malloc_r+0x4a>
 8003f32:	bf00      	nop
 8003f34:	20000094 	.word	0x20000094
 8003f38:	20000098 	.word	0x20000098

08003f3c <_sbrk_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_sbrk_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fc fdb6 	bl	8000ab8 <_sbrk>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_sbrk_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_sbrk_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000188 	.word	0x20000188

08003f5c <__sread>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	460c      	mov	r4, r1
 8003f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f64:	f000 f8a0 	bl	80040a8 <_read_r>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	bfab      	itete	ge
 8003f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f70:	181b      	addge	r3, r3, r0
 8003f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f76:	bfac      	ite	ge
 8003f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f7a:	81a3      	strhlt	r3, [r4, #12]
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <__swrite>:
 8003f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	461f      	mov	r7, r3
 8003f84:	898b      	ldrh	r3, [r1, #12]
 8003f86:	05db      	lsls	r3, r3, #23
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	d505      	bpl.n	8003f9c <__swrite+0x1e>
 8003f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f94:	2302      	movs	r3, #2
 8003f96:	2200      	movs	r2, #0
 8003f98:	f000 f868 	bl	800406c <_lseek_r>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	4632      	mov	r2, r6
 8003faa:	463b      	mov	r3, r7
 8003fac:	4628      	mov	r0, r5
 8003fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	f000 b817 	b.w	8003fe4 <_write_r>

08003fb6 <__sseek>:
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbe:	f000 f855 	bl	800406c <_lseek_r>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	bf15      	itete	ne
 8003fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fd2:	81a3      	strheq	r3, [r4, #12]
 8003fd4:	bf18      	it	ne
 8003fd6:	81a3      	strhne	r3, [r4, #12]
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <__sclose>:
 8003fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fde:	f000 b813 	b.w	8004008 <_close_r>
	...

08003fe4 <_write_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_write_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc fd0f 	bl	8000a16 <_write>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_write_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_write_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20000188 	.word	0x20000188

08004008 <_close_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d06      	ldr	r5, [pc, #24]	; (8004024 <_close_r+0x1c>)
 800400c:	2300      	movs	r3, #0
 800400e:	4604      	mov	r4, r0
 8004010:	4608      	mov	r0, r1
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	f7fc fd1b 	bl	8000a4e <_close>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_close_r+0x1a>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_close_r+0x1a>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	20000188 	.word	0x20000188

08004028 <_fstat_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d07      	ldr	r5, [pc, #28]	; (8004048 <_fstat_r+0x20>)
 800402c:	2300      	movs	r3, #0
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	f7fc fd16 	bl	8000a66 <_fstat>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d102      	bne.n	8004044 <_fstat_r+0x1c>
 800403e:	682b      	ldr	r3, [r5, #0]
 8004040:	b103      	cbz	r3, 8004044 <_fstat_r+0x1c>
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	20000188 	.word	0x20000188

0800404c <_isatty_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4d06      	ldr	r5, [pc, #24]	; (8004068 <_isatty_r+0x1c>)
 8004050:	2300      	movs	r3, #0
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	602b      	str	r3, [r5, #0]
 8004058:	f7fc fd15 	bl	8000a86 <_isatty>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_isatty_r+0x1a>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	b103      	cbz	r3, 8004066 <_isatty_r+0x1a>
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	20000188 	.word	0x20000188

0800406c <_lseek_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d07      	ldr	r5, [pc, #28]	; (800408c <_lseek_r+0x20>)
 8004070:	4604      	mov	r4, r0
 8004072:	4608      	mov	r0, r1
 8004074:	4611      	mov	r1, r2
 8004076:	2200      	movs	r2, #0
 8004078:	602a      	str	r2, [r5, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f7fc fd0e 	bl	8000a9c <_lseek>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_lseek_r+0x1e>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_lseek_r+0x1e>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	20000188 	.word	0x20000188

08004090 <__malloc_lock>:
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <__malloc_lock+0x8>)
 8004092:	f7ff be43 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8004096:	bf00      	nop
 8004098:	20000180 	.word	0x20000180

0800409c <__malloc_unlock>:
 800409c:	4801      	ldr	r0, [pc, #4]	; (80040a4 <__malloc_unlock+0x8>)
 800409e:	f7ff be3e 	b.w	8003d1e <__retarget_lock_release_recursive>
 80040a2:	bf00      	nop
 80040a4:	20000180 	.word	0x20000180

080040a8 <_read_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d07      	ldr	r5, [pc, #28]	; (80040c8 <_read_r+0x20>)
 80040ac:	4604      	mov	r4, r0
 80040ae:	4608      	mov	r0, r1
 80040b0:	4611      	mov	r1, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7fc fc90 	bl	80009dc <_read>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_read_r+0x1e>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_read_r+0x1e>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	20000188 	.word	0x20000188

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
