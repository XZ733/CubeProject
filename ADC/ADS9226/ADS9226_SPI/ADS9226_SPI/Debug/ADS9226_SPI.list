
ADS9226_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000817c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08008360  08008360  00018360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008888  08008888  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008890  08008890  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e0  08008a78  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08008a78  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c299  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d1  00000000  00000000  0003c4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00040960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002874f  00000000  00000000  00041b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172a5  00000000  00000000  0006a257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcac2  00000000  00000000  000814fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017dfbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  0017e014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008344 	.word	0x08008344

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08008344 	.word	0x08008344

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <ADS9226_Read>:
#include "ADS9226.h"

HAL_StatusTypeDef ADS9226_Read(uint8_t *Data_0, uint8_t *Data_1,
		uint16_t Timeout) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef Error_Code = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]

	uint32_t tickstart;
	tickstart = HAL_GetTick();
 8000f42:	f000 ff5b 	bl	8001dfc <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

	//SPI1主机配置
	hspi1.State = HAL_SPI_STATE_BUSY_RX;
 8000f48:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi1.pRxBuffPtr = (uint8_t*) (Data_0);
 8000f50:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
	hspi1.RxXferCount = 1;
 8000f56:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi1.RxXferSize = 1;
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi1.pTxBuffPtr = (uint8_t*) (NULL);
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.TxXferCount = 1U;
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi1.TxXferSize = 1U;
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	879a      	strh	r2, [r3, #60]	; 0x3c

	//SPI1从机配置
	hspi2.State = HAL_SPI_STATE_BUSY_RX;
 8000f78:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	hspi2.pRxBuffPtr = (uint8_t*) (Data_1);
 8000f80:	4a5a      	ldr	r2, [pc, #360]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
	hspi2.RxXferSize = 1;
 8000f86:	4b59      	ldr	r3, [pc, #356]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	hspi2.RxXferCount = 1;
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	hspi2.pTxBuffPtr = (uint8_t*) NULL;
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.TxXferSize = 0U;
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <ADS9226_Read+0x1bc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi2.TxXferCount = 0U;
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <ADS9226_Read+0x1bc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	87da      	strh	r2, [r3, #62]	; 0x3e

	//设置FIFO
	SET_BIT(hspi1.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000fa8:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fb6:	605a      	str	r2, [r3, #4]
	SET_BIT(hspi2.Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <ADS9226_Read+0x1bc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <ADS9226_Read+0x1bc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fc6:	605a      	str	r2, [r3, #4]

	//SPI1,SPI2使能
	if ((hspi1.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd2:	2b40      	cmp	r3, #64	; 0x40
 8000fd4:	d007      	beq.n	8000fe6 <ADS9226_Read+0xb6>
		__HAL_SPI_ENABLE(&hspi1);
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <ADS9226_Read+0x1b8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fe4:	601a      	str	r2, [r3, #0]
	}
	if ((hspi2.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000fe6:	4b41      	ldr	r3, [pc, #260]	; (80010ec <ADS9226_Read+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff0:	2b40      	cmp	r3, #64	; 0x40
 8000ff2:	d007      	beq.n	8001004 <ADS9226_Read+0xd4>
		__HAL_SPI_ENABLE(&hspi2);
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <ADS9226_Read+0x1bc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <ADS9226_Read+0x1bc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001002:	601a      	str	r2, [r3, #0]
	}

	//SPI1主机发送
	*(__IO uint8_t*) &hspi1.Instance->DR = (*(hspi1.pTxBuffPtr));
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <ADS9226_Read+0x1b8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	330c      	adds	r3, #12
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]

	//SPI1主机接收
	while (hspi1.RxXferCount == 1U) {
 8001012:	e026      	b.n	8001062 <ADS9226_Read+0x132>

		if ((__HAL_SPI_GET_FLAG((&hspi1), SPI_FLAG_RXNE))) {
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d111      	bne.n	8001046 <ADS9226_Read+0x116>
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
					(*(__IO uint8_t*) &hspi1.Instance->DR);
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f103 020c 	add.w	r2, r3, #12
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <ADS9226_Read+0x1b8>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
					(*(__IO uint8_t*) &hspi1.Instance->DR);
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	b2d2      	uxtb	r2, r2
			(*(uint8_t*) (hspi1.pRxBuffPtr)) =
 8001032:	701a      	strb	r2, [r3, #0]
			hspi1.RxXferCount--;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800103a:	b29b      	uxth	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		}

		if ((((HAL_GetTick() - tickstart) >= Timeout)
 8001046:	f000 fed9 	bl	8001dfc <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	429a      	cmp	r2, r3
 8001054:	d202      	bcs.n	800105c <ADS9226_Read+0x12c>
				&& ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <ADS9226_Read+0x132>
			Error_Code = HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	75fb      	strb	r3, [r7, #23]
			goto Overtime;
 8001060:	e034      	b.n	80010cc <ADS9226_Read+0x19c>
	while (hspi1.RxXferCount == 1U) {
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <ADS9226_Read+0x1b8>)
 8001064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001068:	b29b      	uxth	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d0d2      	beq.n	8001014 <ADS9226_Read+0xe4>
		}
	}

	//SPI2从机接收
	while (hspi2.RxXferCount == 1U) {
 800106e:	e026      	b.n	80010be <ADS9226_Read+0x18e>

		if (__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_RXNE)) {
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <ADS9226_Read+0x1bc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d111      	bne.n	80010a2 <ADS9226_Read+0x172>
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
					(*(__IO uint8_t*) &hspi2.Instance->DR);
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <ADS9226_Read+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f103 020c 	add.w	r2, r3, #12
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <ADS9226_Read+0x1bc>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
					(*(__IO uint8_t*) &hspi2.Instance->DR);
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	b2d2      	uxtb	r2, r2
			(*(uint8_t*) (hspi2.pRxBuffPtr)) =
 800108e:	701a      	strb	r2, [r3, #0]
			hspi2.RxXferCount--;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <ADS9226_Read+0x1bc>)
 8001092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001096:	b29b      	uxth	r3, r3
 8001098:	3b01      	subs	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <ADS9226_Read+0x1bc>)
 800109e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		}

		if ((((HAL_GetTick() - tickstart) >= Timeout)
 80010a2:	f000 feab 	bl	8001dfc <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d202      	bcs.n	80010b8 <ADS9226_Read+0x188>
				&& (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U)) {
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <ADS9226_Read+0x18e>
			Error_Code = HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	75fb      	strb	r3, [r7, #23]
			goto Overtime;
 80010bc:	e006      	b.n	80010cc <ADS9226_Read+0x19c>
	while (hspi2.RxXferCount == 1U) {
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <ADS9226_Read+0x1bc>)
 80010c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d0d2      	beq.n	8001070 <ADS9226_Read+0x140>
		}
	}

	Overtime: hspi1.State = HAL_SPI_STATE_READY;
 80010ca:	bf00      	nop
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <ADS9226_Read+0x1b8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		   	  hspi2.State = HAL_SPI_STATE_READY;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <ADS9226_Read+0x1bc>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	return Error_Code;
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000274 	.word	0x20000274
 80010ec:	20000210 	.word	0x20000210

080010f0 <DecToBin>:




void DecToBin(const uint16_t dec, uint8_t* pbin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	; 0x58
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
    uint16_t ys = 0;  // 余数
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint16_t s = dec;  // 商
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint16_t ii = 0;   // 位数的计数器
 8001108:	2300      	movs	r3, #0
 800110a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    uint8_t result[65];  // 十进制转换成二进制后，保存在result中，再反过来存放到pbin中

    memset(result, 0, sizeof(result));
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2241      	movs	r2, #65	; 0x41
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fc6e 	bl	80049f8 <memset>

    // 把十进制转换为二进制，存放在result中。
    while (s > 0)
 800111c:	e01b      	b.n	8001156 <DecToBin+0x66>
    {
        ys = s % 2;
 800111e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        s = s / 2;
 800112a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        result[ii] = ys + '0';
 8001134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001138:	b2da      	uxtb	r2, r3
 800113a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800113e:	3230      	adds	r2, #48	; 0x30
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001146:	440b      	add	r3, r1
 8001148:	f803 2c4c 	strb.w	r2, [r3, #-76]
        ii++;
 800114c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001150:	3301      	adds	r3, #1
 8001152:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    while (s > 0)
 8001156:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1df      	bne.n	800111e <DecToBin+0x2e>
    }
    //补足8位
    if (ii < 8) {
 800115e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001162:	2b07      	cmp	r3, #7
 8001164:	d81a      	bhi.n	800119c <DecToBin+0xac>
        for (uint16_t i = ii; i < 8; i++) {
 8001166:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800116a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800116e:	e011      	b.n	8001194 <DecToBin+0xa4>
            result[i] = '0';
 8001170:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001174:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001178:	4413      	add	r3, r2
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	f803 2c4c 	strb.w	r2, [r3, #-76]
            ii++;
 8001180:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001184:	3301      	adds	r3, #1
 8001186:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint16_t i = ii; i < 8; i++) {
 800118a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800118e:	3301      	adds	r3, #1
 8001190:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001194:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001198:	2b07      	cmp	r3, #7
 800119a:	d9e9      	bls.n	8001170 <DecToBin+0x80>
        }
    }

    // 再把result字符串反过来，存放在pbin中。
    uint16_t jj = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    for (; ii > 0; ii--)
 80011a2:	e016      	b.n	80011d2 <DecToBin+0xe2>
    {
        pbin[jj] = result[ii - 1];
 80011a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	440b      	add	r3, r1
 80011b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011b6:	440a      	add	r2, r1
 80011b8:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 80011bc:	701a      	strb	r2, [r3, #0]
        jj++;
 80011be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    for (; ii > 0; ii--)
 80011c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011cc:	3b01      	subs	r3, #1
 80011ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80011d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1e4      	bne.n	80011a4 <DecToBin+0xb4>
    }

    //pbin[jj] = 0; // 出于安全的考虑，加上0表示字符串结束。
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	3758      	adds	r7, #88	; 0x58
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <BinToDect>:

uint16_t BinToDect(uint8_t* str)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    uint16_t dec = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < 16; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	81bb      	strh	r3, [r7, #12]
 80011f8:	e02a      	b.n	8001250 <BinToDect+0x68>
        if (str[i] == '1') dec += pow(2, 15 - i);
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b31      	cmp	r3, #49	; 0x31
 8001204:	d121      	bne.n	800124a <BinToDect+0x62>
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	f1c3 030f 	rsb	r3, r3, #15
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9b1 	bl	8000574 <__aeabi_i2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b11 	vmov	d1, r2, r3
 800121a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001260 <BinToDect+0x78>
 800121e:	f006 f8dd 	bl	80073dc <pow>
 8001222:	ec55 4b10 	vmov	r4, r5, d0
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9a3 	bl	8000574 <__aeabi_i2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f7ff f851 	bl	80002dc <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fcd9 	bl	8000bf8 <__aeabi_d2uiz>
 8001246:	4603      	mov	r3, r0
 8001248:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < 16; i++) {
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	81bb      	strh	r3, [r7, #12]
 8001250:	89bb      	ldrh	r3, [r7, #12]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d9d1      	bls.n	80011fa <BinToDect+0x12>
    }

    return dec;
 8001256:	89fb      	ldrh	r3, [r7, #14]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	00000000 	.word	0x00000000
 8001264:	40000000 	.word	0x40000000

08001268 <add>:


uint16_t add(uint16_t data1, uint16_t data0) {
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	80fb      	strh	r3, [r7, #6]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
    uint8_t str1[9] = "00000000", str0[9] = "00000000";
 8001278:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <add+0x100>)
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001280:	c303      	stmia	r3!, {r0, r1}
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	4a38      	ldr	r2, [pc, #224]	; (8001368 <add+0x100>)
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	ca07      	ldmia	r2, {r0, r1, r2}
 800128c:	c303      	stmia	r3!, {r0, r1}
 800128e:	701a      	strb	r2, [r3, #0]
    DecToBin(data1, str1);
 8001290:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff29 	bl	80010f0 <DecToBin>
    DecToBin(data0, str0);
 800129e:	f107 021c 	add.w	r2, r7, #28
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff22 	bl	80010f0 <DecToBin>
    printf("data1: %d str1: %s \r\n", data1, str1);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b2:	4619      	mov	r1, r3
 80012b4:	482d      	ldr	r0, [pc, #180]	; (800136c <add+0x104>)
 80012b6:	f004 f811 	bl	80052dc <iprintf>
    printf("data0: %d str2: %s \r\n", data0, str0);
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	f107 021c 	add.w	r2, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	482b      	ldr	r0, [pc, #172]	; (8001370 <add+0x108>)
 80012c4:	f004 f80a 	bl	80052dc <iprintf>


    uint8_t str[17] = "0000000000000000";
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <add+0x10c>)
 80012ca:	f107 0408 	add.w	r4, r7, #8
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	7023      	strb	r3, [r4, #0]

    for (uint16_t i = 0; i < 16; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	86fb      	strh	r3, [r7, #54]	; 0x36
 80012dc:	e02f      	b.n	800133e <add+0xd6>
        if (i % 2 == 0) str[i] = str1[i / 2];
 80012de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <add+0xa2>
 80012ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ec:	085b      	lsrs	r3, r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80012f8:	440a      	add	r2, r1
 80012fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80012fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001302:	440b      	add	r3, r1
 8001304:	f803 2c30 	strb.w	r2, [r3, #-48]
 8001308:	e016      	b.n	8001338 <add+0xd0>
        else if (i % 2 == 1) str[i] = str0[(i-1) / 2];
 800130a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d010      	beq.n	8001338 <add+0xd0>
 8001316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001318:	3b01      	subs	r3, #1
 800131a:	0fda      	lsrs	r2, r3, #31
 800131c:	4413      	add	r3, r2
 800131e:	105b      	asrs	r3, r3, #1
 8001320:	461a      	mov	r2, r3
 8001322:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001324:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001328:	440a      	add	r2, r1
 800132a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800132e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001332:	440b      	add	r3, r1
 8001334:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (uint16_t i = 0; i < 16; i++) {
 8001338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800133a:	3301      	adds	r3, #1
 800133c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800133e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d9cc      	bls.n	80012de <add+0x76>
    }

    printf("str: %s ", str);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <add+0x110>)
 800134c:	f003 ffc6 	bl	80052dc <iprintf>

    uint16_t sum = BinToDect(str);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff47 	bl	80011e8 <BinToDect>
 800135a:	4603      	mov	r3, r0
 800135c:	86bb      	strh	r3, [r7, #52]	; 0x34

    return sum;
 800135e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
}
 8001360:	4618      	mov	r0, r3
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	0800839c 	.word	0x0800839c
 800136c:	08008360 	.word	0x08008360
 8001370:	08008378 	.word	0x08008378
 8001374:	080083a8 	.word	0x080083a8
 8001378:	08008390 	.word	0x08008390

0800137c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_GPIO_Init+0xd0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <MX_GPIO_Init+0xd0>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_GPIO_Init+0xd0>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_GPIO_Init+0xd0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a27      	ldr	r2, [pc, #156]	; (800144c <MX_GPIO_Init+0xd0>)
 80013b0:	f043 0320 	orr.w	r3, r3, #32
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <MX_GPIO_Init+0xd0>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_GPIO_Init+0xd0>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a21      	ldr	r2, [pc, #132]	; (800144c <MX_GPIO_Init+0xd0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_GPIO_Init+0xd0>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_GPIO_Init+0xd0>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a1b      	ldr	r2, [pc, #108]	; (800144c <MX_GPIO_Init+0xd0>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_GPIO_Init+0xd0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_SPI1_CS_GPIO_Port, M_SPI1_CS_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2140      	movs	r1, #64	; 0x40
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_GPIO_Init+0xd4>)
 80013f8:	f000 ff9e 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_GPIO_Init+0xd8>)
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_GPIO_Init+0xdc>)
 8001412:	f000 fe0f 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_SPI1_CS_Pin;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <MX_GPIO_Init+0xd4>)
 800142e:	f000 fe01 	bl	8002034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f000 fdc7 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f000 fdde 	bl	8001ffe <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400
 8001454:	10110000 	.word	0x10110000
 8001458:	48000800 	.word	0x48000800

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  //读取状�??
  HAL_StatusTypeDef ADS9226_State = ADS9226_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001466:	f000 fc64 	bl	8001d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f87d 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146e:	f7ff ff85 	bl	800137c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001472:	f000 fb97 	bl	8001ba4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8001476:	f000 fb09 	bl	8001a8c <MX_TIM6_Init>
  MX_SPI1_Init();
 800147a:	f000 f8e1 	bl	8001640 <MX_SPI1_Init>
  MX_SPI2_Init();
 800147e:	f000 f91d 	bl	80016bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);        //启动定时器TIM6,用做片�?�的时间
 8001482:	482e      	ldr	r0, [pc, #184]	; (800153c <main+0xe0>)
 8001484:	f002 f8ca 	bl	800361c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (CS_EN_Flag == 1) {
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <main+0xe4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d1fb      	bne.n	8001488 <main+0x2c>

			ADS9226_State = ADS9226_Read(&data0,&data1,0xffff);
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	492b      	ldr	r1, [pc, #172]	; (8001544 <main+0xe8>)
 8001496:	482c      	ldr	r0, [pc, #176]	; (8001548 <main+0xec>)
 8001498:	f7ff fd4a 	bl	8000f30 <ADS9226_Read>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]

			printf("data0: %d data1: %d  ", data0, data1);
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <main+0xec>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <main+0xe8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4827      	ldr	r0, [pc, #156]	; (800154c <main+0xf0>)
 80014ae:	f003 ff15 	bl	80052dc <iprintf>
			printf("ADS9226 State: %d \r\n", ADS9226_State);
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4826      	ldr	r0, [pc, #152]	; (8001550 <main+0xf4>)
 80014b8:	f003 ff10 	bl	80052dc <iprintf>

			//data1 = 255;
			//data2 = 0; //sum=43690
			uint16_t sum = add((uint16_t)data1, (uint16_t)data0);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <main+0xe8>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <main+0xec>)
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	b292      	uxth	r2, r2
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fecc 	bl	8001268 <add>
 80014d0:	4603      	mov	r3, r0
 80014d2:	82bb      	strh	r3, [r7, #20]
			printf("data1+data0: %d \r\n\r\n", sum);
 80014d4:	8abb      	ldrh	r3, [r7, #20]
 80014d6:	4619      	mov	r1, r3
 80014d8:	481e      	ldr	r0, [pc, #120]	; (8001554 <main+0xf8>)
 80014da:	f003 feff 	bl	80052dc <iprintf>
			int16_t code = sum;
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	827b      	strh	r3, [r7, #18]
		    printf("CODE: %d \r\n", code);
 80014e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014e6:	4619      	mov	r1, r3
 80014e8:	481b      	ldr	r0, [pc, #108]	; (8001558 <main+0xfc>)
 80014ea:	f003 fef7 	bl	80052dc <iprintf>
		    double AINP_AINM = 2.5*code/32768;
 80014ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f83e 	bl	8000574 <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <main+0x100>)
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <main+0x104>)
 8001510:	f7ff f9c4 	bl	800089c <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9c7 2302 	strd	r2, r3, [r7, #8]
		    //double AINP = AINP_AINM + 2.5;
		    //double Vin = 2.5 - AINP;
		    double Vin = -AINP_AINM;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001526:	607b      	str	r3, [r7, #4]
		    printf("Vin: %f \r\n\r\n", Vin);
 8001528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <main+0x108>)
 800152e:	f003 fed5 	bl	80052dc <iprintf>


			CS_EN_Flag = 0;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <main+0xe4>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
		if (CS_EN_Flag == 1) {
 8001538:	e7a6      	b.n	8001488 <main+0x2c>
 800153a:	bf00      	nop
 800153c:	200002d8 	.word	0x200002d8
 8001540:	200001fc 	.word	0x200001fc
 8001544:	200001fe 	.word	0x200001fe
 8001548:	200001fd 	.word	0x200001fd
 800154c:	080083bc 	.word	0x080083bc
 8001550:	080083d4 	.word	0x080083d4
 8001554:	080083ec 	.word	0x080083ec
 8001558:	08008404 	.word	0x08008404
 800155c:	40040000 	.word	0x40040000
 8001560:	40e00000 	.word	0x40e00000
 8001564:	08008410 	.word	0x08008410

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0a8      	sub	sp, #160	; 0xa0
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001572:	2238      	movs	r2, #56	; 0x38
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa3e 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2254      	movs	r2, #84	; 0x54
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fa30 	bl	80049f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800159c:	f000 ff08 	bl	80023b0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80015bc:	2320      	movs	r3, #32
 80015be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 ff9d 	bl	8002518 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015e4:	f000 f826 	bl	8001634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2303      	movs	r3, #3
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001600:	2103      	movs	r1, #3
 8001602:	4618      	mov	r0, r3
 8001604:	f001 faa0 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800160e:	f000 f811 	bl	8001634 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001612:	2320      	movs	r3, #32
 8001614:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4618      	mov	r0, r3
 800161e:	f001 fcaf 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001628:	f000 f804 	bl	8001634 <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	37a0      	adds	r7, #160	; 0xa0
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_SPI1_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_SPI1_Init+0x74>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI1_Init+0x74>)
 800165a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800165e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001662:	2202      	movs	r2, #2
 8001664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI1_Init+0x74>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI1_Init+0x74>)
 800168e:	2207      	movs	r2, #7
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_SPI1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI1_Init+0x74>)
 800169a:	2208      	movs	r2, #8
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_SPI1_Init+0x74>)
 80016a0:	f001 feba 	bl	8003418 <HAL_SPI_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f7ff ffc3 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000274 	.word	0x20000274
 80016b8:	40013000 	.word	0x40013000

080016bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <MX_SPI2_Init+0x70>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016de:	2202      	movs	r2, #2
 80016e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_SPI2_Init+0x6c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_SPI2_Init+0x6c>)
 8001702:	2207      	movs	r2, #7
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_SPI2_Init+0x6c>)
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_SPI2_Init+0x6c>)
 800170e:	2200      	movs	r2, #0
 8001710:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_SPI2_Init+0x6c>)
 8001714:	f001 fe80 	bl	8003418 <HAL_SPI_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800171e:	f7ff ff89 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000210 	.word	0x20000210
 800172c:	40003800 	.word	0x40003800

08001730 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2f      	ldr	r2, [pc, #188]	; (800180c <HAL_SPI_MspInit+0xdc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d129      	bne.n	80017a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 8001758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800175c:	6613      	str	r3, [r2, #96]	; 0x60
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a28      	ldr	r2, [pc, #160]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = M_SPI1_SCK_Pin|M_SPI1_IN_Pin|GPIO_PIN_7;
 8001782:	23e0      	movs	r3, #224	; 0xe0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f000 fc48 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017a4:	e02d      	b.n	8001802 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_SPI_MspInit+0xe4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d128      	bne.n	8001802 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ba:	6593      	str	r3, [r2, #88]	; 0x58
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_SPI_MspInit+0xe0>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_SPI2_CS_Pin|S_SPI2_SCK_Pin|S_SPI2_IN_Pin;
 80017e0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f2:	2305      	movs	r3, #5
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_SPI_MspInit+0xe8>)
 80017fe:	f000 fc19 	bl	8002034 <HAL_GPIO_Init>
}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	; 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40013000 	.word	0x40013000
 8001810:	40021000 	.word	0x40021000
 8001814:	40003800 	.word	0x40003800
 8001818:	48000400 	.word	0x48000400

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	; 0x58
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001852:	f000 fe51 	bl	80024f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fa92 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c0:	f000 fd52 	bl	8002368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM6_DAC_IRQHandler+0x10>)
 80018ce:	f001 ff1d 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002d8 	.word	0x200002d8

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_kill>:

int _kill(int pid, int sig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f6:	f003 f855 	bl	80049a4 <__errno>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2216      	movs	r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_exit>:

void _exit (int status)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffe7 	bl	80018ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800191e:	e7fe      	b.n	800191e <_exit+0x12>

08001920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e00a      	b.n	8001948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001932:	f3af 8000 	nop.w
 8001936:	4601      	mov	r1, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf0      	blt.n	8001932 <_read+0x12>
	}

return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e009      	b.n	8001980 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f9a1 	bl	8001cbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf1      	blt.n	800196c <_write+0x12>
	}
	return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_close>:

int _close(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return -1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ba:	605a      	str	r2, [r3, #4]
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_isatty>:

int _isatty(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return 1;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	return 0;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f002 ffba 	bl	80049a4 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20020000 	.word	0x20020000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000200 	.word	0x20000200
 8001a64:	200003c8 	.word	0x200003c8

08001a68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_TIM6_Init+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001aa4:	2263      	movs	r2, #99	; 0x63
 8001aa6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001ab0:	2263      	movs	r2, #99	; 0x63
 8001ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001abc:	f001 fd57 	bl	800356e <HAL_TIM_Base_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001ac6:	f7ff fdb5 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_TIM6_Init+0x64>)
 8001ad8:	f002 f868 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ae2:	f7ff fda7 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200002d8 	.word	0x200002d8
 8001af4:	40001000 	.word	0x40001000

08001af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_TIM_Base_MspInit+0x44>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d113      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_TIM_Base_MspInit+0x48>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_TIM_Base_MspInit+0x48>)
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_TIM_Base_MspInit+0x48>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2036      	movs	r0, #54	; 0x36
 8001b28:	f000 fa4f 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b2c:	2036      	movs	r0, #54	; 0x36
 8001b2e:	f000 fa66 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40001000 	.word	0x40001000
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

	static uint8_t count = 0;
	count++;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b56:	701a      	strb	r2, [r3, #0]
	if(count == 3)
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d107      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		ADS9226_CS_LOW();
 8001b60:	2200      	movs	r2, #0
 8001b62:	2140      	movs	r1, #64	; 0x40
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b66:	f000 fbe7 	bl	8002338 <HAL_GPIO_WritePin>
		CS_EN_Flag = 1;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
	}

	if(count >= 8 && CS_EN_Flag == 0)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	d90b      	bls.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		count = 0;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
		ADS9226_CS_HIGH();
 8001b86:	2201      	movs	r2, #1
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b8c:	f000 fbd4 	bl	8002338 <HAL_GPIO_WritePin>
	}

}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000204 	.word	0x20000204
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	200001fc 	.word	0x200001fc

08001ba4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <MX_LPUART1_UART_Init+0x90>)
 8001bac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001be8:	f002 f8bc 	bl	8003d64 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bf2:	f7ff fd1f 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001bfa:	f002 fe09 	bl	8004810 <HAL_UARTEx_SetTxFifoThreshold>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001c04:	f7ff fd16 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001c0c:	f002 fe3e 	bl	800488c <HAL_UARTEx_SetRxFifoThreshold>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001c16:	f7ff fd0d 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_LPUART1_UART_Init+0x8c>)
 8001c1c:	f002 fdbf 	bl	800479e <HAL_UARTEx_DisableFifoMode>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001c26:	f7ff fd05 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000324 	.word	0x20000324
 8001c34:	40008000 	.word	0x40008000

08001c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_UART_MspInit+0x7c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d128      	bne.n	8001cac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_UART_MspInit+0x80>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f000 f9c4 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40008000 	.word	0x40008000
 8001cb8:	40021000 	.word	0x40021000

08001cbc <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8001cc4:	1d39      	adds	r1, r7, #4
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <__io_putchar+0x20>)
 8001cce:	f002 f899 	bl	8003e04 <HAL_UART_Transmit>
  return ch;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000324 	.word	0x20000324

08001ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490e      	ldr	r1, [pc, #56]	; (8001d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0b      	ldr	r4, [pc, #44]	; (8001d2c <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0a:	f7ff fead 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f002 fe4f 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d12:	f7ff fba3 	bl	800145c <main>

08001d16 <LoopForever>:

LoopForever:
    b LoopForever
 8001d16:	e7fe      	b.n	8001d16 <LoopForever>
  ldr   r0, =_estack
 8001d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d20:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d24:	08008898 	.word	0x08008898
  ldr r2, =_sbss
 8001d28:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d2c:	200003c8 	.word	0x200003c8

08001d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC1_2_IRQHandler>

08001d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f939 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f80e 	bl	8001d64 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	71fb      	strb	r3, [r7, #7]
 8001d52:	e001      	b.n	8001d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d54:	f7ff fd62 	bl	800181c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d58:	79fb      	ldrb	r3, [r7, #7]

}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_InitTick+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d022      	beq.n	8001dbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_InitTick+0x6c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_InitTick+0x68>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f944 	bl	800201a <HAL_SYSTICK_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10f      	bne.n	8001db8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d809      	bhi.n	8001db2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
 8001da6:	f000 f910 	bl	8001fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0x70>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e007      	b.n	8001dc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e004      	b.n	8001dc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e001      	b.n	8001dc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_IncTick+0x1c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x20>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <HAL_IncTick+0x1c>)
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	200003b4 	.word	0x200003b4
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200003b4 	.word	0x200003b4

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff40 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff90 	bl	8001f08 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5f 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff33 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffa4 	bl	8001f70 <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002042:	e15a      	b.n	80022fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 814c 	beq.w	80022f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d00b      	beq.n	800207c <HAL_GPIO_Init+0x48>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002070:	2b11      	cmp	r3, #17
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b12      	cmp	r3, #18
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0xea>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d123      	bne.n	8002166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	6939      	ldr	r1, [r7, #16]
 8002162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0203 	and.w	r2, r3, #3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a6 	beq.w	80022f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a8:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_GPIO_Init+0x2e4>)
 80021aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ac:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_GPIO_Init+0x2e4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6613      	str	r3, [r2, #96]	; 0x60
 80021b4:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_GPIO_Init+0x2e4>)
 80021b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ea:	d01f      	beq.n	800222c <HAL_GPIO_Init+0x1f8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d019      	beq.n	8002228 <HAL_GPIO_Init+0x1f4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x2f0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_GPIO_Init+0x1f0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_GPIO_Init+0x2f4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00d      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a49      	ldr	r2, [pc, #292]	; (800232c <HAL_GPIO_Init+0x2f8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_GPIO_Init+0x2fc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_GPIO_Init+0x1e4>
 8002214:	2305      	movs	r3, #5
 8002216:	e00a      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 8002218:	2306      	movs	r3, #6
 800221a:	e008      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 800221c:	2304      	movs	r3, #4
 800221e:	e006      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 8002220:	2303      	movs	r3, #3
 8002222:	e004      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 8002224:	2302      	movs	r3, #2
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_GPIO_Init+0x1fa>
 800222c:	2300      	movs	r3, #0
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223e:	4937      	ldr	r1, [pc, #220]	; (800231c <HAL_GPIO_Init+0x2e8>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_GPIO_Init+0x300>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <HAL_GPIO_Init+0x300>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_GPIO_Init+0x300>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_GPIO_Init+0x300>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_GPIO_Init+0x300>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_GPIO_Init+0x300>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_GPIO_Init+0x300>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_GPIO_Init+0x300>)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f ae9d 	bne.w	8002044 <HAL_GPIO_Init+0x10>
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	48000400 	.word	0x48000400
 8002324:	48000800 	.word	0x48000800
 8002328:	48000c00 	.word	0x48000c00
 800232c:	48001000 	.word	0x48001000
 8002330:	48001400 	.word	0x48001400
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002354:	e002      	b.n	800235c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f806 	bl	8002398 <HAL_GPIO_EXTI_Callback>
  }
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d141      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d131      	bne.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d2:	4a46      	ldr	r2, [pc, #280]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e4:	4a41      	ldr	r2, [pc, #260]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2232      	movs	r2, #50	; 0x32
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	4a3f      	ldr	r2, [pc, #252]	; (80024f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9b      	lsrs	r3, r3, #18
 80023fe:	3301      	adds	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002402:	e002      	b.n	800240a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3b01      	subs	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d102      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f2      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d158      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e057      	b.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002436:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002440:	e04d      	b.n	80024de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	d141      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	d131      	bne.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2232      	movs	r2, #50	; 0x32
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248e:	e002      	b.n	8002496 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3b01      	subs	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a2:	d102      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f2      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	d112      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e011      	b.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024cc:	e007      	b.n	80024de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40007000 	.word	0x40007000
 80024f0:	20000000 	.word	0x20000000
 80024f4:	431bde83 	.word	0x431bde83

080024f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002506:	6093      	str	r3, [r2, #8]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40007000 	.word	0x40007000

08002518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e308      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d075      	beq.n	8002622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4ba3      	ldr	r3, [pc, #652]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4ba0      	ldr	r3, [pc, #640]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0x3e>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d002      	beq.n	800255c <HAL_RCC_OscConfig+0x44>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d10b      	bne.n	8002574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05b      	beq.n	8002620 <HAL_RCC_OscConfig+0x108>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d157      	bne.n	8002620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e2e3      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x74>
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a90      	ldr	r2, [pc, #576]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a8a      	ldr	r2, [pc, #552]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a87      	ldr	r2, [pc, #540]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xb0>
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a83      	ldr	r2, [pc, #524]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fc14 	bl	8001dfc <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fc10 	bl	8001dfc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2a8      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xc0>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fc00 	bl	8001dfc <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fbfc 	bl	8001dfc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e294      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0xe8>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d102      	bne.n	800264e <HAL_RCC_OscConfig+0x136>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d002      	beq.n	8002654 <HAL_RCC_OscConfig+0x13c>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d11f      	bne.n	8002694 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x154>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e267      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	4952      	ldr	r1, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x2b0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fb6d 	bl	8001d64 <HAL_InitTick>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d043      	beq.n	8002718 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e253      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d023      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff fba8 	bl	8001dfc <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b0:	f7ff fba4 	bl	8001dfc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e23c      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e01a      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e4:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a36      	ldr	r2, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff fb84 	bl	8001dfc <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f8:	f7ff fb80 	bl	8001dfc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e218      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1e0>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01c      	beq.n	8002768 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002734:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff fb5d 	bl	8001dfc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff fb59 	bl	8001dfc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1f1      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x22e>
 8002766:	e01b      	b.n	80027a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7ff fb40 	bl	8001dfc <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff fb3c 	bl	8001dfc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1d4      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ef      	bne.n	8002780 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80ab 	beq.w	8002904 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x2b4>
 80027be:	2301      	movs	r3, #1
 80027c0:	e005      	b.n	80027ce <HAL_RCC_OscConfig+0x2b6>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	20000004 	.word	0x20000004
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4baf      	ldr	r3, [pc, #700]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4aae      	ldr	r2, [pc, #696]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4bac      	ldr	r3, [pc, #688]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ee:	4ba9      	ldr	r3, [pc, #676]	; (8002a94 <HAL_RCC_OscConfig+0x57c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fa:	4ba6      	ldr	r3, [pc, #664]	; (8002a94 <HAL_RCC_OscConfig+0x57c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4aa5      	ldr	r2, [pc, #660]	; (8002a94 <HAL_RCC_OscConfig+0x57c>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7ff faf9 	bl	8001dfc <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7ff faf5 	bl	8001dfc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e18d      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <HAL_RCC_OscConfig+0x57c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d108      	bne.n	8002846 <HAL_RCC_OscConfig+0x32e>
 8002834:	4b96      	ldr	r3, [pc, #600]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a95      	ldr	r2, [pc, #596]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002844:	e024      	b.n	8002890 <HAL_RCC_OscConfig+0x378>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d110      	bne.n	8002870 <HAL_RCC_OscConfig+0x358>
 800284e:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	4a8e      	ldr	r2, [pc, #568]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285e:	4b8c      	ldr	r3, [pc, #560]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	4a8a      	ldr	r2, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x378>
 8002870:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a86      	ldr	r2, [pc, #536]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a82      	ldr	r2, [pc, #520]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7ff fab0 	bl	8001dfc <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7ff faac 	bl	8001dfc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e142      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b6:	4b76      	ldr	r3, [pc, #472]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ed      	beq.n	80028a0 <HAL_RCC_OscConfig+0x388>
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7ff fa99 	bl	8001dfc <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7ff fa95 	bl	8001dfc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e12b      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ed      	bne.n	80028ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a64      	ldr	r2, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d03c      	beq.n	800298a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01c      	beq.n	8002952 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 800291a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291e:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7ff fa68 	bl	8001dfc <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002930:	f7ff fa64 	bl	8001dfc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0fc      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002942:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCC_OscConfig+0x418>
 8002950:	e01b      	b.n	800298a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002952:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002958:	4a4d      	ldr	r2, [pc, #308]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7ff fa4b 	bl	8001dfc <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296a:	f7ff fa47 	bl	8001dfc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0df      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ef      	bne.n	800296a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80d3 	beq.w	8002b3a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002994:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b0c      	cmp	r3, #12
 800299e:	f000 808d 	beq.w	8002abc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d15a      	bne.n	8002a60 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7ff fa21 	bl	8001dfc <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7ff fa1d 	bl	8001dfc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0b5      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_OscConfig+0x580>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6a11      	ldr	r1, [r2, #32]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029f6:	0212      	lsls	r2, r2, #8
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0652      	lsls	r2, r2, #25
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a16:	06d2      	lsls	r2, r2, #27
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	491d      	ldr	r1, [pc, #116]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff f9e0 	bl	8001dfc <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f9dc 	bl	8001dfc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e074      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x528>
 8002a5e:	e06c      	b.n	8002b3a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7ff f9b8 	bl	8001dfc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8e:	e00e      	b.n	8002aae <HAL_RCC_OscConfig+0x596>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff f9ae 	bl	8001dfc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e046      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_OscConfig+0x62c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x584>
 8002aba:	e03e      	b.n	8002b3a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e039      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_OscConfig+0x62c>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d12c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d123      	bne.n	8002b36 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d11b      	bne.n	8002b36 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d113      	bne.n	8002b36 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e11e      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b8e      	ldr	r3, [pc, #568]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 020f 	bic.w	r2, r3, #15
 8002b76:	498c      	ldr	r1, [pc, #560]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b8a      	ldr	r3, [pc, #552]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e106      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d073      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d129      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba4:	4b81      	ldr	r3, [pc, #516]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0f4      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bb4:	f000 f99e 	bl	8002ef4 <RCC_GetSysClockFreqFromPLLSource>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_RCC_ClockConfig+0x268>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d93f      	bls.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bc2:	4b7a      	ldr	r3, [pc, #488]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d033      	beq.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d12f      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be2:	4b72      	ldr	r3, [pc, #456]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bea:	4a70      	ldr	r2, [pc, #448]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e024      	b.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0c6      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	4b66      	ldr	r3, [pc, #408]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0be      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c20:	f000 f8ce 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4a61      	ldr	r2, [pc, #388]	; (8002db0 <HAL_RCC_ClockConfig+0x268>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d909      	bls.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c36:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4957      	ldr	r1, [pc, #348]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c54:	f7ff f8d2 	bl	8001dfc <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7ff f8ce 	bl	8001dfc <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e095      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a42      	ldr	r2, [pc, #264]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ca6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d21d      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	4929      	ldr	r1, [pc, #164]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d08:	f7ff f878 	bl	8001dfc <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7ff f874 	bl	8001dfc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e03b      	b.n	8002d9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1ed      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4917      	ldr	r1, [pc, #92]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490f      	ldr	r1, [pc, #60]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d72:	f000 f825 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490c      	ldr	r1, [pc, #48]	; (8002db4 <HAL_RCC_ClockConfig+0x26c>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x270>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x274>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe ffe4 	bl	8001d64 <HAL_InitTick>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40022000 	.word	0x40022000
 8002dac:	40021000 	.word	0x40021000
 8002db0:	04c4b400 	.word	0x04c4b400
 8002db4:	08008420 	.word	0x08008420
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e047      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d102      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e03e      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d136      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1e:	68d2      	ldr	r2, [r2, #12]
 8002e20:	0a12      	lsrs	r2, r2, #8
 8002e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
      break;
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	0a12      	lsrs	r2, r2, #8
 8002e3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
      break;
 8002e46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0e5b      	lsrs	r3, r3, #25
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e001      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e68:	693b      	ldr	r3, [r7, #16]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	00f42400 	.word	0x00f42400
 8002e80:	016e3600 	.word	0x016e3600

08002e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000000 	.word	0x20000000

08002e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ea0:	f7ff fff0 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08008430 	.word	0x08008430

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ecc:	f7ff ffda 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0adb      	lsrs	r3, r3, #11
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08008430 	.word	0x08008430

08002ef4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d10c      	bne.n	8002f32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f22:	68d2      	ldr	r2, [r2, #12]
 8002f24:	0a12      	lsrs	r2, r2, #8
 8002f26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
    break;
 8002f30:	e00c      	b.n	8002f4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f3c:	68d2      	ldr	r2, [r2, #12]
 8002f3e:	0a12      	lsrs	r2, r2, #8
 8002f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
    break;
 8002f4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0e5b      	lsrs	r3, r3, #25
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	3301      	adds	r3, #1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f66:	687b      	ldr	r3, [r7, #4]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40021000 	.word	0x40021000
 8002f78:	016e3600 	.word	0x016e3600
 8002f7c:	00f42400 	.word	0x00f42400

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8098 	beq.w	80030ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	4a3f      	ldr	r2, [pc, #252]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fca:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe ff11 	bl	8001dfc <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fdc:	e009      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fe ff0d 	bl	8001dfc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d902      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	74fb      	strb	r3, [r7, #19]
        break;
 8002ff0:	e005      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ef      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d159      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01e      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	d019      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fecd 	bl	8001dfc <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003064:	e00b      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe fec9 	bl	8001dfc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d902      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	74fb      	strb	r3, [r7, #19]
            break;
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ec      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	4903      	ldr	r1, [pc, #12]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030a8:	e008      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	74bb      	strb	r3, [r7, #18]
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030bc:	7c7b      	ldrb	r3, [r7, #17]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4baf      	ldr	r3, [pc, #700]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	4aae      	ldr	r2, [pc, #696]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030da:	4ba9      	ldr	r3, [pc, #676]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f023 0203 	bic.w	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	49a5      	ldr	r1, [pc, #660]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fc:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 020c 	bic.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	499d      	ldr	r1, [pc, #628]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311e:	4b98      	ldr	r3, [pc, #608]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4994      	ldr	r1, [pc, #592]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	498c      	ldr	r1, [pc, #560]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003162:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4983      	ldr	r1, [pc, #524]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	497b      	ldr	r1, [pc, #492]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c8:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	496a      	ldr	r1, [pc, #424]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	4961      	ldr	r1, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800320c:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800320e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	4959      	ldr	r1, [pc, #356]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322e:	4b54      	ldr	r3, [pc, #336]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4950      	ldr	r1, [pc, #320]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4948      	ldr	r1, [pc, #288]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326e:	d105      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a42      	ldr	r2, [pc, #264]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003288:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	493a      	ldr	r1, [pc, #232]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b35      	ldr	r3, [pc, #212]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a34      	ldr	r2, [pc, #208]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	492c      	ldr	r1, [pc, #176]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	491e      	ldr	r1, [pc, #120]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800331e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003322:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4910      	ldr	r1, [pc, #64]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334e:	d105      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4902      	ldr	r1, [pc, #8]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003380:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800338c:	d105      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800338e:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d015      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	4917      	ldr	r1, [pc, #92]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d105      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d015      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	4909      	ldr	r1, [pc, #36]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fc:	d105      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003408:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800340a:	7cbb      	ldrb	r3, [r7, #18]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09d      	b.n	8003566 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d009      	beq.n	8003450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
 8003442:	e005      	b.n	8003450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f960 	bl	8001730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003490:	d902      	bls.n	8003498 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e002      	b.n	800349e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034a6:	d007      	beq.n	80034b8 <HAL_SPI_Init+0xa0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	f003 0204 	and.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e049      	b.n	8003614 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fe faaf 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fa55 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e054      	b.n	80036de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365e:	d01d      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIM_Base_Start_IT+0xe4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x80>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_Base_Start_IT+0xe8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d115      	bne.n	80036c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0xec>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d015      	beq.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d011      	beq.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	e008      	b.n	80036da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e000      	b.n	80036dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40013400 	.word	0x40013400
 8003700:	40014000 	.word	0x40014000
 8003704:	40015000 	.word	0x40015000
 8003708:	00010007 	.word	0x00010007

0800370c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f965 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f957 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f968 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0204 	mvn.w	r2, #4
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f93b 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f92d 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f93e 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f911 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f903 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f914 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2208      	movs	r2, #8
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8e7 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8d9 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8ea 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe f95a 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa18 	bl	8003cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa0b 	bl	8003d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d10e      	bne.n	8003916 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d107      	bne.n	8003916 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f898 	bl	8003a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d10e      	bne.n	8003942 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d107      	bne.n	8003942 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0220 	mvn.w	r2, #32
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f9cb 	bl	8003cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003950:	d10f      	bne.n	8003972 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f9d1 	bl	8003d14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003980:	d10f      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9c3 	bl	8003d28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b0:	d10f      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f9b5 	bl	8003d3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e0:	d10f      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9a7 	bl	8003d50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <TIM_Base_SetConfig+0x12c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d017      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d013      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <TIM_Base_SetConfig+0x130>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <TIM_Base_SetConfig+0x134>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a41      	ldr	r2, [pc, #260]	; (8003b94 <TIM_Base_SetConfig+0x138>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <TIM_Base_SetConfig+0x13c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0x48>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	; (8003b9c <TIM_Base_SetConfig+0x140>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d023      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d01f      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a30      	ldr	r2, [pc, #192]	; (8003b8c <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2f      	ldr	r2, [pc, #188]	; (8003b90 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d017      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	; (8003b94 <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <TIM_Base_SetConfig+0x144>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x148>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x14c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0xaa>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <TIM_Base_SetConfig+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <TIM_Base_SetConfig+0x12c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <TIM_Base_SetConfig+0x110>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <TIM_Base_SetConfig+0x13c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00f      	beq.n	8003b6c <TIM_Base_SetConfig+0x110>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <TIM_Base_SetConfig+0x144>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <TIM_Base_SetConfig+0x110>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <TIM_Base_SetConfig+0x148>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <TIM_Base_SetConfig+0x110>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <TIM_Base_SetConfig+0x14c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0x110>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <TIM_Base_SetConfig+0x140>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40013400 	.word	0x40013400
 8003b9c:	40015000 	.word	0x40015000
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e074      	b.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a33      	ldr	r2, [pc, #204]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d108      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d01d      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10c      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40013400 	.word	0x40013400
 8003cc4:	40015000 	.word	0x40015000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40014000 	.word	0x40014000

08003cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e042      	b.n	8003dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fd ff55 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2224      	movs	r2, #36	; 0x24
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8c2 	bl	8003f30 <UART_SetConfig>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e022      	b.n	8003dfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fb80 	bl	80044c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fc07 	bl	8004608 <UART_CheckIdleState>
 8003dfa:	4603      	mov	r3, r0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 8083 	bne.w	8003f26 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x28>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e07b      	b.n	8003f28 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit+0x3a>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e074      	b.n	8003f28 <HAL_UART_Transmit+0x124>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	; 0x21
 8003e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e56:	f7fd ffd1 	bl	8001dfc <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d108      	bne.n	8003e88 <HAL_UART_Transmit+0x84>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e003      	b.n	8003e90 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e98:	e02c      	b.n	8003ef4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fbfa 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e039      	b.n	8003f28 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e007      	b.n	8003ee2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1cc      	bne.n	8003e9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fbc7 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e006      	b.n	8003f28 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b5b0      	push	{r4, r5, r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4bb1      	ldr	r3, [pc, #708]	; (8004220 <UART_SetConfig+0x2f0>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	69f9      	ldr	r1, [r7, #28]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4aa6      	ldr	r2, [pc, #664]	; (8004224 <UART_SetConfig+0x2f4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	69f9      	ldr	r1, [r7, #28]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f023 010f 	bic.w	r1, r3, #15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a97      	ldr	r2, [pc, #604]	; (8004228 <UART_SetConfig+0x2f8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d120      	bne.n	8004012 <UART_SetConfig+0xe2>
 8003fd0:	4b96      	ldr	r3, [pc, #600]	; (800422c <UART_SetConfig+0x2fc>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d816      	bhi.n	800400c <UART_SetConfig+0xdc>
 8003fde:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0xb4>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08003ff5 	.word	0x08003ff5
 8003fe8:	08004001 	.word	0x08004001
 8003fec:	08003ffb 	.word	0x08003ffb
 8003ff0:	08004007 	.word	0x08004007
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	e0e7      	b.n	80041ca <UART_SetConfig+0x29a>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	76fb      	strb	r3, [r7, #27]
 8003ffe:	e0e4      	b.n	80041ca <UART_SetConfig+0x29a>
 8004000:	2304      	movs	r3, #4
 8004002:	76fb      	strb	r3, [r7, #27]
 8004004:	e0e1      	b.n	80041ca <UART_SetConfig+0x29a>
 8004006:	2308      	movs	r3, #8
 8004008:	76fb      	strb	r3, [r7, #27]
 800400a:	e0de      	b.n	80041ca <UART_SetConfig+0x29a>
 800400c:	2310      	movs	r3, #16
 800400e:	76fb      	strb	r3, [r7, #27]
 8004010:	e0db      	b.n	80041ca <UART_SetConfig+0x29a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a86      	ldr	r2, [pc, #536]	; (8004230 <UART_SetConfig+0x300>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d132      	bne.n	8004082 <UART_SetConfig+0x152>
 800401c:	4b83      	ldr	r3, [pc, #524]	; (800422c <UART_SetConfig+0x2fc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d828      	bhi.n	800407c <UART_SetConfig+0x14c>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0x100>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004065 	.word	0x08004065
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800407d 	.word	0x0800407d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	08004071 	.word	0x08004071
 8004044:	0800407d 	.word	0x0800407d
 8004048:	0800407d 	.word	0x0800407d
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800406b 	.word	0x0800406b
 8004054:	0800407d 	.word	0x0800407d
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800407d 	.word	0x0800407d
 8004060:	08004077 	.word	0x08004077
 8004064:	2300      	movs	r3, #0
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e0af      	b.n	80041ca <UART_SetConfig+0x29a>
 800406a:	2302      	movs	r3, #2
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e0ac      	b.n	80041ca <UART_SetConfig+0x29a>
 8004070:	2304      	movs	r3, #4
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e0a9      	b.n	80041ca <UART_SetConfig+0x29a>
 8004076:	2308      	movs	r3, #8
 8004078:	76fb      	strb	r3, [r7, #27]
 800407a:	e0a6      	b.n	80041ca <UART_SetConfig+0x29a>
 800407c:	2310      	movs	r3, #16
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	e0a3      	b.n	80041ca <UART_SetConfig+0x29a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <UART_SetConfig+0x304>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d120      	bne.n	80040ce <UART_SetConfig+0x19e>
 800408c:	4b67      	ldr	r3, [pc, #412]	; (800422c <UART_SetConfig+0x2fc>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004096:	2b30      	cmp	r3, #48	; 0x30
 8004098:	d013      	beq.n	80040c2 <UART_SetConfig+0x192>
 800409a:	2b30      	cmp	r3, #48	; 0x30
 800409c:	d814      	bhi.n	80040c8 <UART_SetConfig+0x198>
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d009      	beq.n	80040b6 <UART_SetConfig+0x186>
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d810      	bhi.n	80040c8 <UART_SetConfig+0x198>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <UART_SetConfig+0x180>
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d006      	beq.n	80040bc <UART_SetConfig+0x18c>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x198>
 80040b0:	2300      	movs	r3, #0
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	e089      	b.n	80041ca <UART_SetConfig+0x29a>
 80040b6:	2302      	movs	r3, #2
 80040b8:	76fb      	strb	r3, [r7, #27]
 80040ba:	e086      	b.n	80041ca <UART_SetConfig+0x29a>
 80040bc:	2304      	movs	r3, #4
 80040be:	76fb      	strb	r3, [r7, #27]
 80040c0:	e083      	b.n	80041ca <UART_SetConfig+0x29a>
 80040c2:	2308      	movs	r3, #8
 80040c4:	76fb      	strb	r3, [r7, #27]
 80040c6:	e080      	b.n	80041ca <UART_SetConfig+0x29a>
 80040c8:	2310      	movs	r3, #16
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e07d      	b.n	80041ca <UART_SetConfig+0x29a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a59      	ldr	r2, [pc, #356]	; (8004238 <UART_SetConfig+0x308>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d120      	bne.n	800411a <UART_SetConfig+0x1ea>
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <UART_SetConfig+0x2fc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e2:	2bc0      	cmp	r3, #192	; 0xc0
 80040e4:	d013      	beq.n	800410e <UART_SetConfig+0x1de>
 80040e6:	2bc0      	cmp	r3, #192	; 0xc0
 80040e8:	d814      	bhi.n	8004114 <UART_SetConfig+0x1e4>
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d009      	beq.n	8004102 <UART_SetConfig+0x1d2>
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d810      	bhi.n	8004114 <UART_SetConfig+0x1e4>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <UART_SetConfig+0x1cc>
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d006      	beq.n	8004108 <UART_SetConfig+0x1d8>
 80040fa:	e00b      	b.n	8004114 <UART_SetConfig+0x1e4>
 80040fc:	2300      	movs	r3, #0
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	e063      	b.n	80041ca <UART_SetConfig+0x29a>
 8004102:	2302      	movs	r3, #2
 8004104:	76fb      	strb	r3, [r7, #27]
 8004106:	e060      	b.n	80041ca <UART_SetConfig+0x29a>
 8004108:	2304      	movs	r3, #4
 800410a:	76fb      	strb	r3, [r7, #27]
 800410c:	e05d      	b.n	80041ca <UART_SetConfig+0x29a>
 800410e:	2308      	movs	r3, #8
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e05a      	b.n	80041ca <UART_SetConfig+0x29a>
 8004114:	2310      	movs	r3, #16
 8004116:	76fb      	strb	r3, [r7, #27]
 8004118:	e057      	b.n	80041ca <UART_SetConfig+0x29a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a47      	ldr	r2, [pc, #284]	; (800423c <UART_SetConfig+0x30c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d125      	bne.n	8004170 <UART_SetConfig+0x240>
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <UART_SetConfig+0x2fc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004132:	d017      	beq.n	8004164 <UART_SetConfig+0x234>
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d817      	bhi.n	800416a <UART_SetConfig+0x23a>
 800413a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413e:	d00b      	beq.n	8004158 <UART_SetConfig+0x228>
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d811      	bhi.n	800416a <UART_SetConfig+0x23a>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <UART_SetConfig+0x222>
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d006      	beq.n	800415e <UART_SetConfig+0x22e>
 8004150:	e00b      	b.n	800416a <UART_SetConfig+0x23a>
 8004152:	2300      	movs	r3, #0
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e038      	b.n	80041ca <UART_SetConfig+0x29a>
 8004158:	2302      	movs	r3, #2
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e035      	b.n	80041ca <UART_SetConfig+0x29a>
 800415e:	2304      	movs	r3, #4
 8004160:	76fb      	strb	r3, [r7, #27]
 8004162:	e032      	b.n	80041ca <UART_SetConfig+0x29a>
 8004164:	2308      	movs	r3, #8
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e02f      	b.n	80041ca <UART_SetConfig+0x29a>
 800416a:	2310      	movs	r3, #16
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e02c      	b.n	80041ca <UART_SetConfig+0x29a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <UART_SetConfig+0x2f4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d125      	bne.n	80041c6 <UART_SetConfig+0x296>
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <UART_SetConfig+0x2fc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004188:	d017      	beq.n	80041ba <UART_SetConfig+0x28a>
 800418a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418e:	d817      	bhi.n	80041c0 <UART_SetConfig+0x290>
 8004190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004194:	d00b      	beq.n	80041ae <UART_SetConfig+0x27e>
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419a:	d811      	bhi.n	80041c0 <UART_SetConfig+0x290>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <UART_SetConfig+0x278>
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x284>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x290>
 80041a8:	2300      	movs	r3, #0
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e00d      	b.n	80041ca <UART_SetConfig+0x29a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e00a      	b.n	80041ca <UART_SetConfig+0x29a>
 80041b4:	2304      	movs	r3, #4
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	e007      	b.n	80041ca <UART_SetConfig+0x29a>
 80041ba:	2308      	movs	r3, #8
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e004      	b.n	80041ca <UART_SetConfig+0x29a>
 80041c0:	2310      	movs	r3, #16
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e001      	b.n	80041ca <UART_SetConfig+0x29a>
 80041c6:	2310      	movs	r3, #16
 80041c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <UART_SetConfig+0x2f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f040 809f 	bne.w	8004314 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041d6:	7efb      	ldrb	r3, [r7, #27]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d837      	bhi.n	800424c <UART_SetConfig+0x31c>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <UART_SetConfig+0x2b4>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004209 	.word	0x08004209
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	08004211 	.word	0x08004211
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	08004217 	.word	0x08004217
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800424d 	.word	0x0800424d
 8004204:	08004245 	.word	0x08004245
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004208:	f7fe fe48 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 800420c:	6178      	str	r0, [r7, #20]
        break;
 800420e:	e022      	b.n	8004256 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <UART_SetConfig+0x310>)
 8004212:	617b      	str	r3, [r7, #20]
        break;
 8004214:	e01f      	b.n	8004256 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe fdd3 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 800421a:	6178      	str	r0, [r7, #20]
        break;
 800421c:	e01b      	b.n	8004256 <UART_SetConfig+0x326>
 800421e:	bf00      	nop
 8004220:	cfff69f3 	.word	0xcfff69f3
 8004224:	40008000 	.word	0x40008000
 8004228:	40013800 	.word	0x40013800
 800422c:	40021000 	.word	0x40021000
 8004230:	40004400 	.word	0x40004400
 8004234:	40004800 	.word	0x40004800
 8004238:	40004c00 	.word	0x40004c00
 800423c:	40005000 	.word	0x40005000
 8004240:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004248:	617b      	str	r3, [r7, #20]
        break;
 800424a:	e004      	b.n	8004256 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	76bb      	strb	r3, [r7, #26]
        break;
 8004254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 811b 	beq.w	8004494 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	4a96      	ldr	r2, [pc, #600]	; (80044bc <UART_SetConfig+0x58c>)
 8004264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004268:	461a      	mov	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004270:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d305      	bcc.n	800428e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d902      	bls.n	8004294 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	76bb      	strb	r3, [r7, #26]
 8004292:	e0ff      	b.n	8004494 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f04f 0100 	mov.w	r1, #0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	4a86      	ldr	r2, [pc, #536]	; (80044bc <UART_SetConfig+0x58c>)
 80042a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	f7fc fcc4 	bl	8000c38 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	020b      	lsls	r3, r1, #8
 80042c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042c6:	0202      	lsls	r2, r0, #8
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6849      	ldr	r1, [r1, #4]
 80042cc:	0849      	lsrs	r1, r1, #1
 80042ce:	4608      	mov	r0, r1
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	1814      	adds	r4, r2, r0
 80042d6:	eb43 0501 	adc.w	r5, r3, r1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fc fca6 	bl	8000c38 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d308      	bcc.n	800430e <UART_SetConfig+0x3de>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d204      	bcs.n	800430e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e0c2      	b.n	8004494 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	76bb      	strb	r3, [r7, #26]
 8004312:	e0bf      	b.n	8004494 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	d165      	bne.n	80043ea <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800431e:	7efb      	ldrb	r3, [r7, #27]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d828      	bhi.n	8004376 <UART_SetConfig+0x446>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x3fc>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004351 	.word	0x08004351
 8004330:	08004359 	.word	0x08004359
 8004334:	08004361 	.word	0x08004361
 8004338:	08004377 	.word	0x08004377
 800433c:	08004367 	.word	0x08004367
 8004340:	08004377 	.word	0x08004377
 8004344:	08004377 	.word	0x08004377
 8004348:	08004377 	.word	0x08004377
 800434c:	0800436f 	.word	0x0800436f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004350:	f7fe fda4 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 8004354:	6178      	str	r0, [r7, #20]
        break;
 8004356:	e013      	b.n	8004380 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe fdb6 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 800435c:	6178      	str	r0, [r7, #20]
        break;
 800435e:	e00f      	b.n	8004380 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004360:	4b57      	ldr	r3, [pc, #348]	; (80044c0 <UART_SetConfig+0x590>)
 8004362:	617b      	str	r3, [r7, #20]
        break;
 8004364:	e00c      	b.n	8004380 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004366:	f7fe fd2b 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 800436a:	6178      	str	r0, [r7, #20]
        break;
 800436c:	e008      	b.n	8004380 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004372:	617b      	str	r3, [r7, #20]
        break;
 8004374:	e004      	b.n	8004380 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	76bb      	strb	r3, [r7, #26]
        break;
 800437e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8086 	beq.w	8004494 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	4a4b      	ldr	r2, [pc, #300]	; (80044bc <UART_SetConfig+0x58c>)
 800438e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004392:	461a      	mov	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fbb3 f3f2 	udiv	r3, r3, r2
 800439a:	005a      	lsls	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	d916      	bls.n	80043e4 <UART_SetConfig+0x4b4>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d212      	bcs.n	80043e4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f023 030f 	bic.w	r3, r3, #15
 80043c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	89fb      	ldrh	r3, [r7, #14]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	89fa      	ldrh	r2, [r7, #14]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e057      	b.n	8004494 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	76bb      	strb	r3, [r7, #26]
 80043e8:	e054      	b.n	8004494 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ea:	7efb      	ldrb	r3, [r7, #27]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d828      	bhi.n	8004442 <UART_SetConfig+0x512>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x4c8>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fe fd3e 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 8004420:	6178      	str	r0, [r7, #20]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fd50 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8004428:	6178      	str	r0, [r7, #20]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <UART_SetConfig+0x590>)
 800442e:	617b      	str	r3, [r7, #20]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fcc5 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8004436:	6178      	str	r0, [r7, #20]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	76bb      	strb	r3, [r7, #26]
        break;
 800444a:	bf00      	nop
    }

    if (pclk != 0U)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d020      	beq.n	8004494 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <UART_SetConfig+0x58c>)
 8004458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800445c:	461a      	mov	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fbb3 f2f2 	udiv	r2, r3, r2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	441a      	add	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d908      	bls.n	8004490 <UART_SetConfig+0x560>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d204      	bcs.n	8004490 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e001      	b.n	8004494 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	08008438 	.word	0x08008438
 80044c0:	00f42400 	.word	0x00f42400

080044c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01a      	beq.n	80045da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c2:	d10a      	bne.n	80045da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004618:	f7fd fbf0 	bl	8001dfc <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d10e      	bne.n	800464a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f82f 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e025      	b.n	8004696 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b04      	cmp	r3, #4
 8004656:	d10e      	bne.n	8004676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f819 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e00f      	b.n	8004696 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ae:	e062      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d05e      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fd fba0 	bl	8001dfc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <UART_WaitOnFlagUntilTimeout+0x30>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11d      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e045      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02e      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004726:	d126      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004730:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004740:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d08d      	beq.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e027      	b.n	8004804 <HAL_UARTEx_DisableFifoMode+0x66>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004824:	2302      	movs	r3, #2
 8004826:	e02d      	b.n	8004884 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f84f 	bl	8004908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e02d      	b.n	8004900 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f811 	bl	8004908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004928:	e031      	b.n	800498e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800492a:	2308      	movs	r3, #8
 800492c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800492e:	2308      	movs	r3, #8
 8004930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	0e5b      	lsrs	r3, r3, #25
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	0f5b      	lsrs	r3, r3, #29
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004952:	7bbb      	ldrb	r3, [r7, #14]
 8004954:	7b3a      	ldrb	r2, [r7, #12]
 8004956:	4911      	ldr	r1, [pc, #68]	; (800499c <UARTEx_SetNbDataToProcess+0x94>)
 8004958:	5c8a      	ldrb	r2, [r1, r2]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800495e:	7b3a      	ldrb	r2, [r7, #12]
 8004960:	490f      	ldr	r1, [pc, #60]	; (80049a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004964:	fb93 f3f2 	sdiv	r3, r3, r2
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	7b7a      	ldrb	r2, [r7, #13]
 8004974:	4909      	ldr	r1, [pc, #36]	; (800499c <UARTEx_SetNbDataToProcess+0x94>)
 8004976:	5c8a      	ldrb	r2, [r1, r2]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800497c:	7b7a      	ldrb	r2, [r7, #13]
 800497e:	4908      	ldr	r1, [pc, #32]	; (80049a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004982:	fb93 f3f2 	sdiv	r3, r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	08008450 	.word	0x08008450
 80049a0:	08008458 	.word	0x08008458

080049a4 <__errno>:
 80049a4:	4b01      	ldr	r3, [pc, #4]	; (80049ac <__errno+0x8>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4d0d      	ldr	r5, [pc, #52]	; (80049e8 <__libc_init_array+0x38>)
 80049b4:	4c0d      	ldr	r4, [pc, #52]	; (80049ec <__libc_init_array+0x3c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	2600      	movs	r6, #0
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	4d0b      	ldr	r5, [pc, #44]	; (80049f0 <__libc_init_array+0x40>)
 80049c2:	4c0c      	ldr	r4, [pc, #48]	; (80049f4 <__libc_init_array+0x44>)
 80049c4:	f003 fcbe 	bl	8008344 <_init>
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	2600      	movs	r6, #0
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08008890 	.word	0x08008890
 80049ec:	08008890 	.word	0x08008890
 80049f0:	08008890 	.word	0x08008890
 80049f4:	08008894 	.word	0x08008894

080049f8 <memset>:
 80049f8:	4402      	add	r2, r0
 80049fa:	4603      	mov	r3, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <__cvt>:
 8004a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	ec55 4b10 	vmov	r4, r5, d0
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	460e      	mov	r6, r1
 8004a14:	4619      	mov	r1, r3
 8004a16:	462b      	mov	r3, r5
 8004a18:	bfbb      	ittet	lt
 8004a1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a1e:	461d      	movlt	r5, r3
 8004a20:	2300      	movge	r3, #0
 8004a22:	232d      	movlt	r3, #45	; 0x2d
 8004a24:	700b      	strb	r3, [r1, #0]
 8004a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a2c:	4691      	mov	r9, r2
 8004a2e:	f023 0820 	bic.w	r8, r3, #32
 8004a32:	bfbc      	itt	lt
 8004a34:	4622      	movlt	r2, r4
 8004a36:	4614      	movlt	r4, r2
 8004a38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a3c:	d005      	beq.n	8004a4a <__cvt+0x42>
 8004a3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a42:	d100      	bne.n	8004a46 <__cvt+0x3e>
 8004a44:	3601      	adds	r6, #1
 8004a46:	2102      	movs	r1, #2
 8004a48:	e000      	b.n	8004a4c <__cvt+0x44>
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	ab03      	add	r3, sp, #12
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	ab02      	add	r3, sp, #8
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	ec45 4b10 	vmov	d0, r4, r5
 8004a58:	4653      	mov	r3, sl
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	f000 fce4 	bl	8005428 <_dtoa_r>
 8004a60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a64:	4607      	mov	r7, r0
 8004a66:	d102      	bne.n	8004a6e <__cvt+0x66>
 8004a68:	f019 0f01 	tst.w	r9, #1
 8004a6c:	d022      	beq.n	8004ab4 <__cvt+0xac>
 8004a6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a72:	eb07 0906 	add.w	r9, r7, r6
 8004a76:	d110      	bne.n	8004a9a <__cvt+0x92>
 8004a78:	783b      	ldrb	r3, [r7, #0]
 8004a7a:	2b30      	cmp	r3, #48	; 0x30
 8004a7c:	d10a      	bne.n	8004a94 <__cvt+0x8c>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4620      	mov	r0, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	f7fc f847 	bl	8000b18 <__aeabi_dcmpeq>
 8004a8a:	b918      	cbnz	r0, 8004a94 <__cvt+0x8c>
 8004a8c:	f1c6 0601 	rsb	r6, r6, #1
 8004a90:	f8ca 6000 	str.w	r6, [sl]
 8004a94:	f8da 3000 	ldr.w	r3, [sl]
 8004a98:	4499      	add	r9, r3
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fc f839 	bl	8000b18 <__aeabi_dcmpeq>
 8004aa6:	b108      	cbz	r0, 8004aac <__cvt+0xa4>
 8004aa8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004aac:	2230      	movs	r2, #48	; 0x30
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	454b      	cmp	r3, r9
 8004ab2:	d307      	bcc.n	8004ac4 <__cvt+0xbc>
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ab8:	1bdb      	subs	r3, r3, r7
 8004aba:	4638      	mov	r0, r7
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	b004      	add	sp, #16
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	9103      	str	r1, [sp, #12]
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e7f0      	b.n	8004aae <__cvt+0xa6>

08004acc <__exponent>:
 8004acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	bfb8      	it	lt
 8004ad4:	4249      	neglt	r1, r1
 8004ad6:	f803 2b02 	strb.w	r2, [r3], #2
 8004ada:	bfb4      	ite	lt
 8004adc:	222d      	movlt	r2, #45	; 0x2d
 8004ade:	222b      	movge	r2, #43	; 0x2b
 8004ae0:	2909      	cmp	r1, #9
 8004ae2:	7042      	strb	r2, [r0, #1]
 8004ae4:	dd2a      	ble.n	8004b3c <__exponent+0x70>
 8004ae6:	f10d 0407 	add.w	r4, sp, #7
 8004aea:	46a4      	mov	ip, r4
 8004aec:	270a      	movs	r7, #10
 8004aee:	46a6      	mov	lr, r4
 8004af0:	460a      	mov	r2, r1
 8004af2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004af6:	fb07 1516 	mls	r5, r7, r6, r1
 8004afa:	3530      	adds	r5, #48	; 0x30
 8004afc:	2a63      	cmp	r2, #99	; 0x63
 8004afe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b06:	4631      	mov	r1, r6
 8004b08:	dcf1      	bgt.n	8004aee <__exponent+0x22>
 8004b0a:	3130      	adds	r1, #48	; 0x30
 8004b0c:	f1ae 0502 	sub.w	r5, lr, #2
 8004b10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b14:	1c44      	adds	r4, r0, #1
 8004b16:	4629      	mov	r1, r5
 8004b18:	4561      	cmp	r1, ip
 8004b1a:	d30a      	bcc.n	8004b32 <__exponent+0x66>
 8004b1c:	f10d 0209 	add.w	r2, sp, #9
 8004b20:	eba2 020e 	sub.w	r2, r2, lr
 8004b24:	4565      	cmp	r5, ip
 8004b26:	bf88      	it	hi
 8004b28:	2200      	movhi	r2, #0
 8004b2a:	4413      	add	r3, r2
 8004b2c:	1a18      	subs	r0, r3, r0
 8004b2e:	b003      	add	sp, #12
 8004b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b3a:	e7ed      	b.n	8004b18 <__exponent+0x4c>
 8004b3c:	2330      	movs	r3, #48	; 0x30
 8004b3e:	3130      	adds	r1, #48	; 0x30
 8004b40:	7083      	strb	r3, [r0, #2]
 8004b42:	70c1      	strb	r1, [r0, #3]
 8004b44:	1d03      	adds	r3, r0, #4
 8004b46:	e7f1      	b.n	8004b2c <__exponent+0x60>

08004b48 <_printf_float>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	ed2d 8b02 	vpush	{d8}
 8004b50:	b08d      	sub	sp, #52	; 0x34
 8004b52:	460c      	mov	r4, r1
 8004b54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b58:	4616      	mov	r6, r2
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	f001 fb45 	bl	80061ec <_localeconv_r>
 8004b62:	f8d0 a000 	ldr.w	sl, [r0]
 8004b66:	4650      	mov	r0, sl
 8004b68:	f7fb fb5a 	bl	8000220 <strlen>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	f8d8 3000 	ldr.w	r3, [r8]
 8004b78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b7c:	3307      	adds	r3, #7
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	f103 0208 	add.w	r2, r3, #8
 8004b86:	f8c8 2000 	str.w	r2, [r8]
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b9a:	9307      	str	r3, [sp, #28]
 8004b9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ba0:	ee08 0a10 	vmov	s16, r0
 8004ba4:	4b9f      	ldr	r3, [pc, #636]	; (8004e24 <_printf_float+0x2dc>)
 8004ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bae:	f7fb ffe5 	bl	8000b7c <__aeabi_dcmpun>
 8004bb2:	bb88      	cbnz	r0, 8004c18 <_printf_float+0xd0>
 8004bb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb8:	4b9a      	ldr	r3, [pc, #616]	; (8004e24 <_printf_float+0x2dc>)
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	f7fb ffbf 	bl	8000b40 <__aeabi_dcmple>
 8004bc2:	bb48      	cbnz	r0, 8004c18 <_printf_float+0xd0>
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4640      	mov	r0, r8
 8004bca:	4649      	mov	r1, r9
 8004bcc:	f7fb ffae 	bl	8000b2c <__aeabi_dcmplt>
 8004bd0:	b110      	cbz	r0, 8004bd8 <_printf_float+0x90>
 8004bd2:	232d      	movs	r3, #45	; 0x2d
 8004bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd8:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <_printf_float+0x2e0>)
 8004bda:	4894      	ldr	r0, [pc, #592]	; (8004e2c <_printf_float+0x2e4>)
 8004bdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004be0:	bf94      	ite	ls
 8004be2:	4698      	movls	r8, r3
 8004be4:	4680      	movhi	r8, r0
 8004be6:	2303      	movs	r3, #3
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	9b05      	ldr	r3, [sp, #20]
 8004bec:	f023 0204 	bic.w	r2, r3, #4
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	f04f 0900 	mov.w	r9, #0
 8004bf6:	9700      	str	r7, [sp, #0]
 8004bf8:	4633      	mov	r3, r6
 8004bfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f9d8 	bl	8004fb4 <_printf_common>
 8004c04:	3001      	adds	r0, #1
 8004c06:	f040 8090 	bne.w	8004d2a <_printf_float+0x1e2>
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	b00d      	add	sp, #52	; 0x34
 8004c10:	ecbd 8b02 	vpop	{d8}
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb ffac 	bl	8000b7c <__aeabi_dcmpun>
 8004c24:	b140      	cbz	r0, 8004c38 <_printf_float+0xf0>
 8004c26:	464b      	mov	r3, r9
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bfbc      	itt	lt
 8004c2c:	232d      	movlt	r3, #45	; 0x2d
 8004c2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c32:	487f      	ldr	r0, [pc, #508]	; (8004e30 <_printf_float+0x2e8>)
 8004c34:	4b7f      	ldr	r3, [pc, #508]	; (8004e34 <_printf_float+0x2ec>)
 8004c36:	e7d1      	b.n	8004bdc <_printf_float+0x94>
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c3e:	9206      	str	r2, [sp, #24]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	d13f      	bne.n	8004cc4 <_printf_float+0x17c>
 8004c44:	2306      	movs	r3, #6
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	9b05      	ldr	r3, [sp, #20]
 8004c4a:	6861      	ldr	r1, [r4, #4]
 8004c4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c50:	2300      	movs	r3, #0
 8004c52:	9303      	str	r3, [sp, #12]
 8004c54:	ab0a      	add	r3, sp, #40	; 0x28
 8004c56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c5a:	ab09      	add	r3, sp, #36	; 0x24
 8004c5c:	ec49 8b10 	vmov	d0, r8, r9
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6022      	str	r2, [r4, #0]
 8004c64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7ff fecd 	bl	8004a08 <__cvt>
 8004c6e:	9b06      	ldr	r3, [sp, #24]
 8004c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c72:	2b47      	cmp	r3, #71	; 0x47
 8004c74:	4680      	mov	r8, r0
 8004c76:	d108      	bne.n	8004c8a <_printf_float+0x142>
 8004c78:	1cc8      	adds	r0, r1, #3
 8004c7a:	db02      	blt.n	8004c82 <_printf_float+0x13a>
 8004c7c:	6863      	ldr	r3, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	dd41      	ble.n	8004d06 <_printf_float+0x1be>
 8004c82:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c86:	fa5f fb8b 	uxtb.w	fp, fp
 8004c8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c8e:	d820      	bhi.n	8004cd2 <_printf_float+0x18a>
 8004c90:	3901      	subs	r1, #1
 8004c92:	465a      	mov	r2, fp
 8004c94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c98:	9109      	str	r1, [sp, #36]	; 0x24
 8004c9a:	f7ff ff17 	bl	8004acc <__exponent>
 8004c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca0:	1813      	adds	r3, r2, r0
 8004ca2:	2a01      	cmp	r2, #1
 8004ca4:	4681      	mov	r9, r0
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	dc02      	bgt.n	8004cb0 <_printf_float+0x168>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	07d2      	lsls	r2, r2, #31
 8004cae:	d501      	bpl.n	8004cb4 <_printf_float+0x16c>
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d09c      	beq.n	8004bf6 <_printf_float+0xae>
 8004cbc:	232d      	movs	r3, #45	; 0x2d
 8004cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc2:	e798      	b.n	8004bf6 <_printf_float+0xae>
 8004cc4:	9a06      	ldr	r2, [sp, #24]
 8004cc6:	2a47      	cmp	r2, #71	; 0x47
 8004cc8:	d1be      	bne.n	8004c48 <_printf_float+0x100>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1bc      	bne.n	8004c48 <_printf_float+0x100>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e7b9      	b.n	8004c46 <_printf_float+0xfe>
 8004cd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004cd6:	d118      	bne.n	8004d0a <_printf_float+0x1c2>
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	dd0b      	ble.n	8004cf6 <_printf_float+0x1ae>
 8004cde:	6121      	str	r1, [r4, #16]
 8004ce0:	b913      	cbnz	r3, 8004ce8 <_printf_float+0x1a0>
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	07d0      	lsls	r0, r2, #31
 8004ce6:	d502      	bpl.n	8004cee <_printf_float+0x1a6>
 8004ce8:	3301      	adds	r3, #1
 8004cea:	440b      	add	r3, r1
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cf0:	f04f 0900 	mov.w	r9, #0
 8004cf4:	e7de      	b.n	8004cb4 <_printf_float+0x16c>
 8004cf6:	b913      	cbnz	r3, 8004cfe <_printf_float+0x1b6>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	07d2      	lsls	r2, r2, #31
 8004cfc:	d501      	bpl.n	8004d02 <_printf_float+0x1ba>
 8004cfe:	3302      	adds	r3, #2
 8004d00:	e7f4      	b.n	8004cec <_printf_float+0x1a4>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7f2      	b.n	8004cec <_printf_float+0x1a4>
 8004d06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	db05      	blt.n	8004d1c <_printf_float+0x1d4>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	6121      	str	r1, [r4, #16]
 8004d14:	07d8      	lsls	r0, r3, #31
 8004d16:	d5ea      	bpl.n	8004cee <_printf_float+0x1a6>
 8004d18:	1c4b      	adds	r3, r1, #1
 8004d1a:	e7e7      	b.n	8004cec <_printf_float+0x1a4>
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	bfd4      	ite	le
 8004d20:	f1c1 0202 	rsble	r2, r1, #2
 8004d24:	2201      	movgt	r2, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	e7e0      	b.n	8004cec <_printf_float+0x1a4>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	055a      	lsls	r2, r3, #21
 8004d2e:	d407      	bmi.n	8004d40 <_printf_float+0x1f8>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	4642      	mov	r2, r8
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d12c      	bne.n	8004d98 <_printf_float+0x250>
 8004d3e:	e764      	b.n	8004c0a <_printf_float+0xc2>
 8004d40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d44:	f240 80e0 	bls.w	8004f08 <_printf_float+0x3c0>
 8004d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f7fb fee2 	bl	8000b18 <__aeabi_dcmpeq>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d034      	beq.n	8004dc2 <_printf_float+0x27a>
 8004d58:	4a37      	ldr	r2, [pc, #220]	; (8004e38 <_printf_float+0x2f0>)
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f af51 	beq.w	8004c0a <_printf_float+0xc2>
 8004d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	db02      	blt.n	8004d76 <_printf_float+0x22e>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07d8      	lsls	r0, r3, #31
 8004d74:	d510      	bpl.n	8004d98 <_printf_float+0x250>
 8004d76:	ee18 3a10 	vmov	r3, s16
 8004d7a:	4652      	mov	r2, sl
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f af41 	beq.w	8004c0a <_printf_float+0xc2>
 8004d88:	f04f 0800 	mov.w	r8, #0
 8004d8c:	f104 091a 	add.w	r9, r4, #26
 8004d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	4543      	cmp	r3, r8
 8004d96:	dc09      	bgt.n	8004dac <_printf_float+0x264>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	079b      	lsls	r3, r3, #30
 8004d9c:	f100 8105 	bmi.w	8004faa <_printf_float+0x462>
 8004da0:	68e0      	ldr	r0, [r4, #12]
 8004da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004da4:	4298      	cmp	r0, r3
 8004da6:	bfb8      	it	lt
 8004da8:	4618      	movlt	r0, r3
 8004daa:	e730      	b.n	8004c0e <_printf_float+0xc6>
 8004dac:	2301      	movs	r3, #1
 8004dae:	464a      	mov	r2, r9
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f af27 	beq.w	8004c0a <_printf_float+0xc2>
 8004dbc:	f108 0801 	add.w	r8, r8, #1
 8004dc0:	e7e6      	b.n	8004d90 <_printf_float+0x248>
 8004dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dc39      	bgt.n	8004e3c <_printf_float+0x2f4>
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <_printf_float+0x2f0>)
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b8      	blx	r7
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f43f af19 	beq.w	8004c0a <_printf_float+0xc2>
 8004dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	d102      	bne.n	8004de6 <_printf_float+0x29e>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07d9      	lsls	r1, r3, #31
 8004de4:	d5d8      	bpl.n	8004d98 <_printf_float+0x250>
 8004de6:	ee18 3a10 	vmov	r3, s16
 8004dea:	4652      	mov	r2, sl
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f af09 	beq.w	8004c0a <_printf_float+0xc2>
 8004df8:	f04f 0900 	mov.w	r9, #0
 8004dfc:	f104 0a1a 	add.w	sl, r4, #26
 8004e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e02:	425b      	negs	r3, r3
 8004e04:	454b      	cmp	r3, r9
 8004e06:	dc01      	bgt.n	8004e0c <_printf_float+0x2c4>
 8004e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0a:	e792      	b.n	8004d32 <_printf_float+0x1ea>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4652      	mov	r2, sl
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f aef7 	beq.w	8004c0a <_printf_float+0xc2>
 8004e1c:	f109 0901 	add.w	r9, r9, #1
 8004e20:	e7ee      	b.n	8004e00 <_printf_float+0x2b8>
 8004e22:	bf00      	nop
 8004e24:	7fefffff 	.word	0x7fefffff
 8004e28:	08008464 	.word	0x08008464
 8004e2c:	08008468 	.word	0x08008468
 8004e30:	08008470 	.word	0x08008470
 8004e34:	0800846c 	.word	0x0800846c
 8004e38:	08008474 	.word	0x08008474
 8004e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e40:	429a      	cmp	r2, r3
 8004e42:	bfa8      	it	ge
 8004e44:	461a      	movge	r2, r3
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	4691      	mov	r9, r2
 8004e4a:	dc37      	bgt.n	8004ebc <_printf_float+0x374>
 8004e4c:	f04f 0b00 	mov.w	fp, #0
 8004e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e54:	f104 021a 	add.w	r2, r4, #26
 8004e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e5a:	9305      	str	r3, [sp, #20]
 8004e5c:	eba3 0309 	sub.w	r3, r3, r9
 8004e60:	455b      	cmp	r3, fp
 8004e62:	dc33      	bgt.n	8004ecc <_printf_float+0x384>
 8004e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	db3b      	blt.n	8004ee4 <_printf_float+0x39c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07da      	lsls	r2, r3, #31
 8004e70:	d438      	bmi.n	8004ee4 <_printf_float+0x39c>
 8004e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e74:	9b05      	ldr	r3, [sp, #20]
 8004e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	eba2 0901 	sub.w	r9, r2, r1
 8004e7e:	4599      	cmp	r9, r3
 8004e80:	bfa8      	it	ge
 8004e82:	4699      	movge	r9, r3
 8004e84:	f1b9 0f00 	cmp.w	r9, #0
 8004e88:	dc35      	bgt.n	8004ef6 <_printf_float+0x3ae>
 8004e8a:	f04f 0800 	mov.w	r8, #0
 8004e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e92:	f104 0a1a 	add.w	sl, r4, #26
 8004e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	eba3 0309 	sub.w	r3, r3, r9
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	f77f af79 	ble.w	8004d98 <_printf_float+0x250>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f aeaa 	beq.w	8004c0a <_printf_float+0xc2>
 8004eb6:	f108 0801 	add.w	r8, r8, #1
 8004eba:	e7ec      	b.n	8004e96 <_printf_float+0x34e>
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d1c0      	bne.n	8004e4c <_printf_float+0x304>
 8004eca:	e69e      	b.n	8004c0a <_printf_float+0xc2>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	9205      	str	r2, [sp, #20]
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f ae97 	beq.w	8004c0a <_printf_float+0xc2>
 8004edc:	9a05      	ldr	r2, [sp, #20]
 8004ede:	f10b 0b01 	add.w	fp, fp, #1
 8004ee2:	e7b9      	b.n	8004e58 <_printf_float+0x310>
 8004ee4:	ee18 3a10 	vmov	r3, s16
 8004ee8:	4652      	mov	r2, sl
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d1be      	bne.n	8004e72 <_printf_float+0x32a>
 8004ef4:	e689      	b.n	8004c0a <_printf_float+0xc2>
 8004ef6:	9a05      	ldr	r2, [sp, #20]
 8004ef8:	464b      	mov	r3, r9
 8004efa:	4442      	add	r2, r8
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	d1c1      	bne.n	8004e8a <_printf_float+0x342>
 8004f06:	e680      	b.n	8004c0a <_printf_float+0xc2>
 8004f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f0a:	2a01      	cmp	r2, #1
 8004f0c:	dc01      	bgt.n	8004f12 <_printf_float+0x3ca>
 8004f0e:	07db      	lsls	r3, r3, #31
 8004f10:	d538      	bpl.n	8004f84 <_printf_float+0x43c>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4642      	mov	r2, r8
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f43f ae74 	beq.w	8004c0a <_printf_float+0xc2>
 8004f22:	ee18 3a10 	vmov	r3, s16
 8004f26:	4652      	mov	r2, sl
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f ae6b 	beq.w	8004c0a <_printf_float+0xc2>
 8004f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f7fb fdec 	bl	8000b18 <__aeabi_dcmpeq>
 8004f40:	b9d8      	cbnz	r0, 8004f7a <_printf_float+0x432>
 8004f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f44:	f108 0201 	add.w	r2, r8, #1
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	d10e      	bne.n	8004f72 <_printf_float+0x42a>
 8004f54:	e659      	b.n	8004c0a <_printf_float+0xc2>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f ae52 	beq.w	8004c0a <_printf_float+0xc2>
 8004f66:	f108 0801 	add.w	r8, r8, #1
 8004f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4543      	cmp	r3, r8
 8004f70:	dcf1      	bgt.n	8004f56 <_printf_float+0x40e>
 8004f72:	464b      	mov	r3, r9
 8004f74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f78:	e6dc      	b.n	8004d34 <_printf_float+0x1ec>
 8004f7a:	f04f 0800 	mov.w	r8, #0
 8004f7e:	f104 0a1a 	add.w	sl, r4, #26
 8004f82:	e7f2      	b.n	8004f6a <_printf_float+0x422>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4642      	mov	r2, r8
 8004f88:	e7df      	b.n	8004f4a <_printf_float+0x402>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	464a      	mov	r2, r9
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f ae38 	beq.w	8004c0a <_printf_float+0xc2>
 8004f9a:	f108 0801 	add.w	r8, r8, #1
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fa2:	1a5b      	subs	r3, r3, r1
 8004fa4:	4543      	cmp	r3, r8
 8004fa6:	dcf0      	bgt.n	8004f8a <_printf_float+0x442>
 8004fa8:	e6fa      	b.n	8004da0 <_printf_float+0x258>
 8004faa:	f04f 0800 	mov.w	r8, #0
 8004fae:	f104 0919 	add.w	r9, r4, #25
 8004fb2:	e7f4      	b.n	8004f9e <_printf_float+0x456>

08004fb4 <_printf_common>:
 8004fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	4616      	mov	r6, r2
 8004fba:	4699      	mov	r9, r3
 8004fbc:	688a      	ldr	r2, [r1, #8]
 8004fbe:	690b      	ldr	r3, [r1, #16]
 8004fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	bfb8      	it	lt
 8004fc8:	4613      	movlt	r3, r2
 8004fca:	6033      	str	r3, [r6, #0]
 8004fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	b10a      	cbz	r2, 8004fda <_printf_common+0x26>
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	6033      	str	r3, [r6, #0]
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	0699      	lsls	r1, r3, #26
 8004fde:	bf42      	ittt	mi
 8004fe0:	6833      	ldrmi	r3, [r6, #0]
 8004fe2:	3302      	addmi	r3, #2
 8004fe4:	6033      	strmi	r3, [r6, #0]
 8004fe6:	6825      	ldr	r5, [r4, #0]
 8004fe8:	f015 0506 	ands.w	r5, r5, #6
 8004fec:	d106      	bne.n	8004ffc <_printf_common+0x48>
 8004fee:	f104 0a19 	add.w	sl, r4, #25
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	6832      	ldr	r2, [r6, #0]
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	42ab      	cmp	r3, r5
 8004ffa:	dc26      	bgt.n	800504a <_printf_common+0x96>
 8004ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005000:	1e13      	subs	r3, r2, #0
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	bf18      	it	ne
 8005006:	2301      	movne	r3, #1
 8005008:	0692      	lsls	r2, r2, #26
 800500a:	d42b      	bmi.n	8005064 <_printf_common+0xb0>
 800500c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005010:	4649      	mov	r1, r9
 8005012:	4638      	mov	r0, r7
 8005014:	47c0      	blx	r8
 8005016:	3001      	adds	r0, #1
 8005018:	d01e      	beq.n	8005058 <_printf_common+0xa4>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	68e5      	ldr	r5, [r4, #12]
 800501e:	6832      	ldr	r2, [r6, #0]
 8005020:	f003 0306 	and.w	r3, r3, #6
 8005024:	2b04      	cmp	r3, #4
 8005026:	bf08      	it	eq
 8005028:	1aad      	subeq	r5, r5, r2
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	bf0c      	ite	eq
 8005030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005034:	2500      	movne	r5, #0
 8005036:	4293      	cmp	r3, r2
 8005038:	bfc4      	itt	gt
 800503a:	1a9b      	subgt	r3, r3, r2
 800503c:	18ed      	addgt	r5, r5, r3
 800503e:	2600      	movs	r6, #0
 8005040:	341a      	adds	r4, #26
 8005042:	42b5      	cmp	r5, r6
 8005044:	d11a      	bne.n	800507c <_printf_common+0xc8>
 8005046:	2000      	movs	r0, #0
 8005048:	e008      	b.n	800505c <_printf_common+0xa8>
 800504a:	2301      	movs	r3, #1
 800504c:	4652      	mov	r2, sl
 800504e:	4649      	mov	r1, r9
 8005050:	4638      	mov	r0, r7
 8005052:	47c0      	blx	r8
 8005054:	3001      	adds	r0, #1
 8005056:	d103      	bne.n	8005060 <_printf_common+0xac>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005060:	3501      	adds	r5, #1
 8005062:	e7c6      	b.n	8004ff2 <_printf_common+0x3e>
 8005064:	18e1      	adds	r1, r4, r3
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	2030      	movs	r0, #48	; 0x30
 800506a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800506e:	4422      	add	r2, r4
 8005070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005078:	3302      	adds	r3, #2
 800507a:	e7c7      	b.n	800500c <_printf_common+0x58>
 800507c:	2301      	movs	r3, #1
 800507e:	4622      	mov	r2, r4
 8005080:	4649      	mov	r1, r9
 8005082:	4638      	mov	r0, r7
 8005084:	47c0      	blx	r8
 8005086:	3001      	adds	r0, #1
 8005088:	d0e6      	beq.n	8005058 <_printf_common+0xa4>
 800508a:	3601      	adds	r6, #1
 800508c:	e7d9      	b.n	8005042 <_printf_common+0x8e>
	...

08005090 <_printf_i>:
 8005090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	460c      	mov	r4, r1
 8005096:	4691      	mov	r9, r2
 8005098:	7e27      	ldrb	r7, [r4, #24]
 800509a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800509c:	2f78      	cmp	r7, #120	; 0x78
 800509e:	4680      	mov	r8, r0
 80050a0:	469a      	mov	sl, r3
 80050a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a6:	d807      	bhi.n	80050b8 <_printf_i+0x28>
 80050a8:	2f62      	cmp	r7, #98	; 0x62
 80050aa:	d80a      	bhi.n	80050c2 <_printf_i+0x32>
 80050ac:	2f00      	cmp	r7, #0
 80050ae:	f000 80d8 	beq.w	8005262 <_printf_i+0x1d2>
 80050b2:	2f58      	cmp	r7, #88	; 0x58
 80050b4:	f000 80a3 	beq.w	80051fe <_printf_i+0x16e>
 80050b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050c0:	e03a      	b.n	8005138 <_printf_i+0xa8>
 80050c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050c6:	2b15      	cmp	r3, #21
 80050c8:	d8f6      	bhi.n	80050b8 <_printf_i+0x28>
 80050ca:	a001      	add	r0, pc, #4	; (adr r0, 80050d0 <_printf_i+0x40>)
 80050cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050d0:	08005129 	.word	0x08005129
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	080050b9 	.word	0x080050b9
 80050dc:	080050b9 	.word	0x080050b9
 80050e0:	080050b9 	.word	0x080050b9
 80050e4:	080050b9 	.word	0x080050b9
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	080050b9 	.word	0x080050b9
 80050f0:	080050b9 	.word	0x080050b9
 80050f4:	080050b9 	.word	0x080050b9
 80050f8:	080050b9 	.word	0x080050b9
 80050fc:	08005249 	.word	0x08005249
 8005100:	0800516d 	.word	0x0800516d
 8005104:	0800522b 	.word	0x0800522b
 8005108:	080050b9 	.word	0x080050b9
 800510c:	080050b9 	.word	0x080050b9
 8005110:	0800526b 	.word	0x0800526b
 8005114:	080050b9 	.word	0x080050b9
 8005118:	0800516d 	.word	0x0800516d
 800511c:	080050b9 	.word	0x080050b9
 8005120:	080050b9 	.word	0x080050b9
 8005124:	08005233 	.word	0x08005233
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	600a      	str	r2, [r1, #0]
 8005130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005138:	2301      	movs	r3, #1
 800513a:	e0a3      	b.n	8005284 <_printf_i+0x1f4>
 800513c:	6825      	ldr	r5, [r4, #0]
 800513e:	6808      	ldr	r0, [r1, #0]
 8005140:	062e      	lsls	r6, r5, #24
 8005142:	f100 0304 	add.w	r3, r0, #4
 8005146:	d50a      	bpl.n	800515e <_printf_i+0xce>
 8005148:	6805      	ldr	r5, [r0, #0]
 800514a:	600b      	str	r3, [r1, #0]
 800514c:	2d00      	cmp	r5, #0
 800514e:	da03      	bge.n	8005158 <_printf_i+0xc8>
 8005150:	232d      	movs	r3, #45	; 0x2d
 8005152:	426d      	negs	r5, r5
 8005154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005158:	485e      	ldr	r0, [pc, #376]	; (80052d4 <_printf_i+0x244>)
 800515a:	230a      	movs	r3, #10
 800515c:	e019      	b.n	8005192 <_printf_i+0x102>
 800515e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005162:	6805      	ldr	r5, [r0, #0]
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	bf18      	it	ne
 8005168:	b22d      	sxthne	r5, r5
 800516a:	e7ef      	b.n	800514c <_printf_i+0xbc>
 800516c:	680b      	ldr	r3, [r1, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	1d18      	adds	r0, r3, #4
 8005172:	6008      	str	r0, [r1, #0]
 8005174:	0628      	lsls	r0, r5, #24
 8005176:	d501      	bpl.n	800517c <_printf_i+0xec>
 8005178:	681d      	ldr	r5, [r3, #0]
 800517a:	e002      	b.n	8005182 <_printf_i+0xf2>
 800517c:	0669      	lsls	r1, r5, #25
 800517e:	d5fb      	bpl.n	8005178 <_printf_i+0xe8>
 8005180:	881d      	ldrh	r5, [r3, #0]
 8005182:	4854      	ldr	r0, [pc, #336]	; (80052d4 <_printf_i+0x244>)
 8005184:	2f6f      	cmp	r7, #111	; 0x6f
 8005186:	bf0c      	ite	eq
 8005188:	2308      	moveq	r3, #8
 800518a:	230a      	movne	r3, #10
 800518c:	2100      	movs	r1, #0
 800518e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005192:	6866      	ldr	r6, [r4, #4]
 8005194:	60a6      	str	r6, [r4, #8]
 8005196:	2e00      	cmp	r6, #0
 8005198:	bfa2      	ittt	ge
 800519a:	6821      	ldrge	r1, [r4, #0]
 800519c:	f021 0104 	bicge.w	r1, r1, #4
 80051a0:	6021      	strge	r1, [r4, #0]
 80051a2:	b90d      	cbnz	r5, 80051a8 <_printf_i+0x118>
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	d04d      	beq.n	8005244 <_printf_i+0x1b4>
 80051a8:	4616      	mov	r6, r2
 80051aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ae:	fb03 5711 	mls	r7, r3, r1, r5
 80051b2:	5dc7      	ldrb	r7, [r0, r7]
 80051b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051b8:	462f      	mov	r7, r5
 80051ba:	42bb      	cmp	r3, r7
 80051bc:	460d      	mov	r5, r1
 80051be:	d9f4      	bls.n	80051aa <_printf_i+0x11a>
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d10b      	bne.n	80051dc <_printf_i+0x14c>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	07df      	lsls	r7, r3, #31
 80051c8:	d508      	bpl.n	80051dc <_printf_i+0x14c>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	6861      	ldr	r1, [r4, #4]
 80051ce:	4299      	cmp	r1, r3
 80051d0:	bfde      	ittt	le
 80051d2:	2330      	movle	r3, #48	; 0x30
 80051d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051dc:	1b92      	subs	r2, r2, r6
 80051de:	6122      	str	r2, [r4, #16]
 80051e0:	f8cd a000 	str.w	sl, [sp]
 80051e4:	464b      	mov	r3, r9
 80051e6:	aa03      	add	r2, sp, #12
 80051e8:	4621      	mov	r1, r4
 80051ea:	4640      	mov	r0, r8
 80051ec:	f7ff fee2 	bl	8004fb4 <_printf_common>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d14c      	bne.n	800528e <_printf_i+0x1fe>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	b004      	add	sp, #16
 80051fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fe:	4835      	ldr	r0, [pc, #212]	; (80052d4 <_printf_i+0x244>)
 8005200:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	680e      	ldr	r6, [r1, #0]
 8005208:	061f      	lsls	r7, r3, #24
 800520a:	f856 5b04 	ldr.w	r5, [r6], #4
 800520e:	600e      	str	r6, [r1, #0]
 8005210:	d514      	bpl.n	800523c <_printf_i+0x1ac>
 8005212:	07d9      	lsls	r1, r3, #31
 8005214:	bf44      	itt	mi
 8005216:	f043 0320 	orrmi.w	r3, r3, #32
 800521a:	6023      	strmi	r3, [r4, #0]
 800521c:	b91d      	cbnz	r5, 8005226 <_printf_i+0x196>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f023 0320 	bic.w	r3, r3, #32
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	2310      	movs	r3, #16
 8005228:	e7b0      	b.n	800518c <_printf_i+0xfc>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	f043 0320 	orr.w	r3, r3, #32
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	2378      	movs	r3, #120	; 0x78
 8005234:	4828      	ldr	r0, [pc, #160]	; (80052d8 <_printf_i+0x248>)
 8005236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800523a:	e7e3      	b.n	8005204 <_printf_i+0x174>
 800523c:	065e      	lsls	r6, r3, #25
 800523e:	bf48      	it	mi
 8005240:	b2ad      	uxthmi	r5, r5
 8005242:	e7e6      	b.n	8005212 <_printf_i+0x182>
 8005244:	4616      	mov	r6, r2
 8005246:	e7bb      	b.n	80051c0 <_printf_i+0x130>
 8005248:	680b      	ldr	r3, [r1, #0]
 800524a:	6826      	ldr	r6, [r4, #0]
 800524c:	6960      	ldr	r0, [r4, #20]
 800524e:	1d1d      	adds	r5, r3, #4
 8005250:	600d      	str	r5, [r1, #0]
 8005252:	0635      	lsls	r5, r6, #24
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	d501      	bpl.n	800525c <_printf_i+0x1cc>
 8005258:	6018      	str	r0, [r3, #0]
 800525a:	e002      	b.n	8005262 <_printf_i+0x1d2>
 800525c:	0671      	lsls	r1, r6, #25
 800525e:	d5fb      	bpl.n	8005258 <_printf_i+0x1c8>
 8005260:	8018      	strh	r0, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	4616      	mov	r6, r2
 8005268:	e7ba      	b.n	80051e0 <_printf_i+0x150>
 800526a:	680b      	ldr	r3, [r1, #0]
 800526c:	1d1a      	adds	r2, r3, #4
 800526e:	600a      	str	r2, [r1, #0]
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	6862      	ldr	r2, [r4, #4]
 8005274:	2100      	movs	r1, #0
 8005276:	4630      	mov	r0, r6
 8005278:	f7fa ffda 	bl	8000230 <memchr>
 800527c:	b108      	cbz	r0, 8005282 <_printf_i+0x1f2>
 800527e:	1b80      	subs	r0, r0, r6
 8005280:	6060      	str	r0, [r4, #4]
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	2300      	movs	r3, #0
 8005288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800528c:	e7a8      	b.n	80051e0 <_printf_i+0x150>
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	4632      	mov	r2, r6
 8005292:	4649      	mov	r1, r9
 8005294:	4640      	mov	r0, r8
 8005296:	47d0      	blx	sl
 8005298:	3001      	adds	r0, #1
 800529a:	d0ab      	beq.n	80051f4 <_printf_i+0x164>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	079b      	lsls	r3, r3, #30
 80052a0:	d413      	bmi.n	80052ca <_printf_i+0x23a>
 80052a2:	68e0      	ldr	r0, [r4, #12]
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	4298      	cmp	r0, r3
 80052a8:	bfb8      	it	lt
 80052aa:	4618      	movlt	r0, r3
 80052ac:	e7a4      	b.n	80051f8 <_printf_i+0x168>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4632      	mov	r2, r6
 80052b2:	4649      	mov	r1, r9
 80052b4:	4640      	mov	r0, r8
 80052b6:	47d0      	blx	sl
 80052b8:	3001      	adds	r0, #1
 80052ba:	d09b      	beq.n	80051f4 <_printf_i+0x164>
 80052bc:	3501      	adds	r5, #1
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	9903      	ldr	r1, [sp, #12]
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	dcf2      	bgt.n	80052ae <_printf_i+0x21e>
 80052c8:	e7eb      	b.n	80052a2 <_printf_i+0x212>
 80052ca:	2500      	movs	r5, #0
 80052cc:	f104 0619 	add.w	r6, r4, #25
 80052d0:	e7f5      	b.n	80052be <_printf_i+0x22e>
 80052d2:	bf00      	nop
 80052d4:	08008476 	.word	0x08008476
 80052d8:	08008487 	.word	0x08008487

080052dc <iprintf>:
 80052dc:	b40f      	push	{r0, r1, r2, r3}
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <iprintf+0x2c>)
 80052e0:	b513      	push	{r0, r1, r4, lr}
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	b124      	cbz	r4, 80052f0 <iprintf+0x14>
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	b913      	cbnz	r3, 80052f0 <iprintf+0x14>
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fee0 	bl	80060b0 <__sinit>
 80052f0:	ab05      	add	r3, sp, #20
 80052f2:	9a04      	ldr	r2, [sp, #16]
 80052f4:	68a1      	ldr	r1, [r4, #8]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	4620      	mov	r0, r4
 80052fa:	f001 fbf7 	bl	8006aec <_vfiprintf_r>
 80052fe:	b002      	add	sp, #8
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	2000000c 	.word	0x2000000c

0800530c <quorem>:
 800530c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	6903      	ldr	r3, [r0, #16]
 8005312:	690c      	ldr	r4, [r1, #16]
 8005314:	42a3      	cmp	r3, r4
 8005316:	4607      	mov	r7, r0
 8005318:	f2c0 8081 	blt.w	800541e <quorem+0x112>
 800531c:	3c01      	subs	r4, #1
 800531e:	f101 0814 	add.w	r8, r1, #20
 8005322:	f100 0514 	add.w	r5, r0, #20
 8005326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005334:	3301      	adds	r3, #1
 8005336:	429a      	cmp	r2, r3
 8005338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800533c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005340:	fbb2 f6f3 	udiv	r6, r2, r3
 8005344:	d331      	bcc.n	80053aa <quorem+0x9e>
 8005346:	f04f 0e00 	mov.w	lr, #0
 800534a:	4640      	mov	r0, r8
 800534c:	46ac      	mov	ip, r5
 800534e:	46f2      	mov	sl, lr
 8005350:	f850 2b04 	ldr.w	r2, [r0], #4
 8005354:	b293      	uxth	r3, r2
 8005356:	fb06 e303 	mla	r3, r6, r3, lr
 800535a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800535e:	b29b      	uxth	r3, r3
 8005360:	ebaa 0303 	sub.w	r3, sl, r3
 8005364:	0c12      	lsrs	r2, r2, #16
 8005366:	f8dc a000 	ldr.w	sl, [ip]
 800536a:	fb06 e202 	mla	r2, r6, r2, lr
 800536e:	fa13 f38a 	uxtah	r3, r3, sl
 8005372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005376:	fa1f fa82 	uxth.w	sl, r2
 800537a:	f8dc 2000 	ldr.w	r2, [ip]
 800537e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005386:	b29b      	uxth	r3, r3
 8005388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800538c:	4581      	cmp	r9, r0
 800538e:	f84c 3b04 	str.w	r3, [ip], #4
 8005392:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005396:	d2db      	bcs.n	8005350 <quorem+0x44>
 8005398:	f855 300b 	ldr.w	r3, [r5, fp]
 800539c:	b92b      	cbnz	r3, 80053aa <quorem+0x9e>
 800539e:	9b01      	ldr	r3, [sp, #4]
 80053a0:	3b04      	subs	r3, #4
 80053a2:	429d      	cmp	r5, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	d32e      	bcc.n	8005406 <quorem+0xfa>
 80053a8:	613c      	str	r4, [r7, #16]
 80053aa:	4638      	mov	r0, r7
 80053ac:	f001 f9ba 	bl	8006724 <__mcmp>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	db24      	blt.n	80053fe <quorem+0xf2>
 80053b4:	3601      	adds	r6, #1
 80053b6:	4628      	mov	r0, r5
 80053b8:	f04f 0c00 	mov.w	ip, #0
 80053bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80053c0:	f8d0 e000 	ldr.w	lr, [r0]
 80053c4:	b293      	uxth	r3, r2
 80053c6:	ebac 0303 	sub.w	r3, ip, r3
 80053ca:	0c12      	lsrs	r2, r2, #16
 80053cc:	fa13 f38e 	uxtah	r3, r3, lr
 80053d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053de:	45c1      	cmp	r9, r8
 80053e0:	f840 3b04 	str.w	r3, [r0], #4
 80053e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053e8:	d2e8      	bcs.n	80053bc <quorem+0xb0>
 80053ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053f2:	b922      	cbnz	r2, 80053fe <quorem+0xf2>
 80053f4:	3b04      	subs	r3, #4
 80053f6:	429d      	cmp	r5, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	d30a      	bcc.n	8005412 <quorem+0x106>
 80053fc:	613c      	str	r4, [r7, #16]
 80053fe:	4630      	mov	r0, r6
 8005400:	b003      	add	sp, #12
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	3b04      	subs	r3, #4
 800540a:	2a00      	cmp	r2, #0
 800540c:	d1cc      	bne.n	80053a8 <quorem+0x9c>
 800540e:	3c01      	subs	r4, #1
 8005410:	e7c7      	b.n	80053a2 <quorem+0x96>
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	3b04      	subs	r3, #4
 8005416:	2a00      	cmp	r2, #0
 8005418:	d1f0      	bne.n	80053fc <quorem+0xf0>
 800541a:	3c01      	subs	r4, #1
 800541c:	e7eb      	b.n	80053f6 <quorem+0xea>
 800541e:	2000      	movs	r0, #0
 8005420:	e7ee      	b.n	8005400 <quorem+0xf4>
 8005422:	0000      	movs	r0, r0
 8005424:	0000      	movs	r0, r0
	...

08005428 <_dtoa_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b02 	vpush	{d8}
 8005430:	ec57 6b10 	vmov	r6, r7, d0
 8005434:	b095      	sub	sp, #84	; 0x54
 8005436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005438:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800543c:	9105      	str	r1, [sp, #20]
 800543e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005442:	4604      	mov	r4, r0
 8005444:	9209      	str	r2, [sp, #36]	; 0x24
 8005446:	930f      	str	r3, [sp, #60]	; 0x3c
 8005448:	b975      	cbnz	r5, 8005468 <_dtoa_r+0x40>
 800544a:	2010      	movs	r0, #16
 800544c:	f000 fed6 	bl	80061fc <malloc>
 8005450:	4602      	mov	r2, r0
 8005452:	6260      	str	r0, [r4, #36]	; 0x24
 8005454:	b920      	cbnz	r0, 8005460 <_dtoa_r+0x38>
 8005456:	4bb2      	ldr	r3, [pc, #712]	; (8005720 <_dtoa_r+0x2f8>)
 8005458:	21ea      	movs	r1, #234	; 0xea
 800545a:	48b2      	ldr	r0, [pc, #712]	; (8005724 <_dtoa_r+0x2fc>)
 800545c:	f001 fd9c 	bl	8006f98 <__assert_func>
 8005460:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005464:	6005      	str	r5, [r0, #0]
 8005466:	60c5      	str	r5, [r0, #12]
 8005468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800546a:	6819      	ldr	r1, [r3, #0]
 800546c:	b151      	cbz	r1, 8005484 <_dtoa_r+0x5c>
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	604a      	str	r2, [r1, #4]
 8005472:	2301      	movs	r3, #1
 8005474:	4093      	lsls	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
 8005478:	4620      	mov	r0, r4
 800547a:	f000 ff15 	bl	80062a8 <_Bfree>
 800547e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	1e3b      	subs	r3, r7, #0
 8005486:	bfb9      	ittee	lt
 8005488:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800548c:	9303      	strlt	r3, [sp, #12]
 800548e:	2300      	movge	r3, #0
 8005490:	f8c8 3000 	strge.w	r3, [r8]
 8005494:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005498:	4ba3      	ldr	r3, [pc, #652]	; (8005728 <_dtoa_r+0x300>)
 800549a:	bfbc      	itt	lt
 800549c:	2201      	movlt	r2, #1
 800549e:	f8c8 2000 	strlt.w	r2, [r8]
 80054a2:	ea33 0309 	bics.w	r3, r3, r9
 80054a6:	d11b      	bne.n	80054e0 <_dtoa_r+0xb8>
 80054a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054b4:	4333      	orrs	r3, r6
 80054b6:	f000 857a 	beq.w	8005fae <_dtoa_r+0xb86>
 80054ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054bc:	b963      	cbnz	r3, 80054d8 <_dtoa_r+0xb0>
 80054be:	4b9b      	ldr	r3, [pc, #620]	; (800572c <_dtoa_r+0x304>)
 80054c0:	e024      	b.n	800550c <_dtoa_r+0xe4>
 80054c2:	4b9b      	ldr	r3, [pc, #620]	; (8005730 <_dtoa_r+0x308>)
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	9800      	ldr	r0, [sp, #0]
 80054ce:	b015      	add	sp, #84	; 0x54
 80054d0:	ecbd 8b02 	vpop	{d8}
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d8:	4b94      	ldr	r3, [pc, #592]	; (800572c <_dtoa_r+0x304>)
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	3303      	adds	r3, #3
 80054de:	e7f3      	b.n	80054c8 <_dtoa_r+0xa0>
 80054e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	ec51 0b17 	vmov	r0, r1, d7
 80054ea:	2300      	movs	r3, #0
 80054ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80054f0:	f7fb fb12 	bl	8000b18 <__aeabi_dcmpeq>
 80054f4:	4680      	mov	r8, r0
 80054f6:	b158      	cbz	r0, 8005510 <_dtoa_r+0xe8>
 80054f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054fa:	2301      	movs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8551 	beq.w	8005fa8 <_dtoa_r+0xb80>
 8005506:	488b      	ldr	r0, [pc, #556]	; (8005734 <_dtoa_r+0x30c>)
 8005508:	6018      	str	r0, [r3, #0]
 800550a:	1e43      	subs	r3, r0, #1
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	e7dd      	b.n	80054cc <_dtoa_r+0xa4>
 8005510:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005514:	aa12      	add	r2, sp, #72	; 0x48
 8005516:	a913      	add	r1, sp, #76	; 0x4c
 8005518:	4620      	mov	r0, r4
 800551a:	f001 f9a7 	bl	800686c <__d2b>
 800551e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005522:	4683      	mov	fp, r0
 8005524:	2d00      	cmp	r5, #0
 8005526:	d07c      	beq.n	8005622 <_dtoa_r+0x1fa>
 8005528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800552e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005532:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005536:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800553a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800553e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005542:	4b7d      	ldr	r3, [pc, #500]	; (8005738 <_dtoa_r+0x310>)
 8005544:	2200      	movs	r2, #0
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fa fec5 	bl	80002d8 <__aeabi_dsub>
 800554e:	a36e      	add	r3, pc, #440	; (adr r3, 8005708 <_dtoa_r+0x2e0>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fb f878 	bl	8000648 <__aeabi_dmul>
 8005558:	a36d      	add	r3, pc, #436	; (adr r3, 8005710 <_dtoa_r+0x2e8>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fa febd 	bl	80002dc <__adddf3>
 8005562:	4606      	mov	r6, r0
 8005564:	4628      	mov	r0, r5
 8005566:	460f      	mov	r7, r1
 8005568:	f7fb f804 	bl	8000574 <__aeabi_i2d>
 800556c:	a36a      	add	r3, pc, #424	; (adr r3, 8005718 <_dtoa_r+0x2f0>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fb f869 	bl	8000648 <__aeabi_dmul>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fa fead 	bl	80002dc <__adddf3>
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	f7fb fb0f 	bl	8000ba8 <__aeabi_d2iz>
 800558a:	2200      	movs	r2, #0
 800558c:	4682      	mov	sl, r0
 800558e:	2300      	movs	r3, #0
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb faca 	bl	8000b2c <__aeabi_dcmplt>
 8005598:	b148      	cbz	r0, 80055ae <_dtoa_r+0x186>
 800559a:	4650      	mov	r0, sl
 800559c:	f7fa ffea 	bl	8000574 <__aeabi_i2d>
 80055a0:	4632      	mov	r2, r6
 80055a2:	463b      	mov	r3, r7
 80055a4:	f7fb fab8 	bl	8000b18 <__aeabi_dcmpeq>
 80055a8:	b908      	cbnz	r0, 80055ae <_dtoa_r+0x186>
 80055aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ae:	f1ba 0f16 	cmp.w	sl, #22
 80055b2:	d854      	bhi.n	800565e <_dtoa_r+0x236>
 80055b4:	4b61      	ldr	r3, [pc, #388]	; (800573c <_dtoa_r+0x314>)
 80055b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055c2:	f7fb fab3 	bl	8000b2c <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d04b      	beq.n	8005662 <_dtoa_r+0x23a>
 80055ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ce:	2300      	movs	r3, #0
 80055d0:	930e      	str	r3, [sp, #56]	; 0x38
 80055d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d4:	1b5d      	subs	r5, r3, r5
 80055d6:	1e6b      	subs	r3, r5, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	bf43      	ittte	mi
 80055dc:	2300      	movmi	r3, #0
 80055de:	f1c5 0801 	rsbmi	r8, r5, #1
 80055e2:	9304      	strmi	r3, [sp, #16]
 80055e4:	f04f 0800 	movpl.w	r8, #0
 80055e8:	f1ba 0f00 	cmp.w	sl, #0
 80055ec:	db3b      	blt.n	8005666 <_dtoa_r+0x23e>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80055f4:	4453      	add	r3, sl
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	2300      	movs	r3, #0
 80055fa:	9306      	str	r3, [sp, #24]
 80055fc:	9b05      	ldr	r3, [sp, #20]
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d869      	bhi.n	80056d6 <_dtoa_r+0x2ae>
 8005602:	2b05      	cmp	r3, #5
 8005604:	bfc4      	itt	gt
 8005606:	3b04      	subgt	r3, #4
 8005608:	9305      	strgt	r3, [sp, #20]
 800560a:	9b05      	ldr	r3, [sp, #20]
 800560c:	f1a3 0302 	sub.w	r3, r3, #2
 8005610:	bfcc      	ite	gt
 8005612:	2500      	movgt	r5, #0
 8005614:	2501      	movle	r5, #1
 8005616:	2b03      	cmp	r3, #3
 8005618:	d869      	bhi.n	80056ee <_dtoa_r+0x2c6>
 800561a:	e8df f003 	tbb	[pc, r3]
 800561e:	4e2c      	.short	0x4e2c
 8005620:	5a4c      	.short	0x5a4c
 8005622:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005626:	441d      	add	r5, r3
 8005628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800562c:	2b20      	cmp	r3, #32
 800562e:	bfc1      	itttt	gt
 8005630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005634:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005638:	fa09 f303 	lslgt.w	r3, r9, r3
 800563c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005640:	bfda      	itte	le
 8005642:	f1c3 0320 	rsble	r3, r3, #32
 8005646:	fa06 f003 	lslle.w	r0, r6, r3
 800564a:	4318      	orrgt	r0, r3
 800564c:	f7fa ff82 	bl	8000554 <__aeabi_ui2d>
 8005650:	2301      	movs	r3, #1
 8005652:	4606      	mov	r6, r0
 8005654:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005658:	3d01      	subs	r5, #1
 800565a:	9310      	str	r3, [sp, #64]	; 0x40
 800565c:	e771      	b.n	8005542 <_dtoa_r+0x11a>
 800565e:	2301      	movs	r3, #1
 8005660:	e7b6      	b.n	80055d0 <_dtoa_r+0x1a8>
 8005662:	900e      	str	r0, [sp, #56]	; 0x38
 8005664:	e7b5      	b.n	80055d2 <_dtoa_r+0x1aa>
 8005666:	f1ca 0300 	rsb	r3, sl, #0
 800566a:	9306      	str	r3, [sp, #24]
 800566c:	2300      	movs	r3, #0
 800566e:	eba8 080a 	sub.w	r8, r8, sl
 8005672:	930d      	str	r3, [sp, #52]	; 0x34
 8005674:	e7c2      	b.n	80055fc <_dtoa_r+0x1d4>
 8005676:	2300      	movs	r3, #0
 8005678:	9308      	str	r3, [sp, #32]
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	dc39      	bgt.n	80056f4 <_dtoa_r+0x2cc>
 8005680:	f04f 0901 	mov.w	r9, #1
 8005684:	f8cd 9004 	str.w	r9, [sp, #4]
 8005688:	464b      	mov	r3, r9
 800568a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800568e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005690:	2200      	movs	r2, #0
 8005692:	6042      	str	r2, [r0, #4]
 8005694:	2204      	movs	r2, #4
 8005696:	f102 0614 	add.w	r6, r2, #20
 800569a:	429e      	cmp	r6, r3
 800569c:	6841      	ldr	r1, [r0, #4]
 800569e:	d92f      	bls.n	8005700 <_dtoa_r+0x2d8>
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fdc1 	bl	8006228 <_Balloc>
 80056a6:	9000      	str	r0, [sp, #0]
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d14b      	bne.n	8005744 <_dtoa_r+0x31c>
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <_dtoa_r+0x318>)
 80056ae:	4602      	mov	r2, r0
 80056b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056b4:	e6d1      	b.n	800545a <_dtoa_r+0x32>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e7de      	b.n	8005678 <_dtoa_r+0x250>
 80056ba:	2300      	movs	r3, #0
 80056bc:	9308      	str	r3, [sp, #32]
 80056be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c0:	eb0a 0903 	add.w	r9, sl, r3
 80056c4:	f109 0301 	add.w	r3, r9, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	bfb8      	it	lt
 80056ce:	2301      	movlt	r3, #1
 80056d0:	e7dd      	b.n	800568e <_dtoa_r+0x266>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e7f2      	b.n	80056bc <_dtoa_r+0x294>
 80056d6:	2501      	movs	r5, #1
 80056d8:	2300      	movs	r3, #0
 80056da:	9305      	str	r3, [sp, #20]
 80056dc:	9508      	str	r5, [sp, #32]
 80056de:	f04f 39ff 	mov.w	r9, #4294967295
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80056e8:	2312      	movs	r3, #18
 80056ea:	9209      	str	r2, [sp, #36]	; 0x24
 80056ec:	e7cf      	b.n	800568e <_dtoa_r+0x266>
 80056ee:	2301      	movs	r3, #1
 80056f0:	9308      	str	r3, [sp, #32]
 80056f2:	e7f4      	b.n	80056de <_dtoa_r+0x2b6>
 80056f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80056f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80056fc:	464b      	mov	r3, r9
 80056fe:	e7c6      	b.n	800568e <_dtoa_r+0x266>
 8005700:	3101      	adds	r1, #1
 8005702:	6041      	str	r1, [r0, #4]
 8005704:	0052      	lsls	r2, r2, #1
 8005706:	e7c6      	b.n	8005696 <_dtoa_r+0x26e>
 8005708:	636f4361 	.word	0x636f4361
 800570c:	3fd287a7 	.word	0x3fd287a7
 8005710:	8b60c8b3 	.word	0x8b60c8b3
 8005714:	3fc68a28 	.word	0x3fc68a28
 8005718:	509f79fb 	.word	0x509f79fb
 800571c:	3fd34413 	.word	0x3fd34413
 8005720:	080084a5 	.word	0x080084a5
 8005724:	080084bc 	.word	0x080084bc
 8005728:	7ff00000 	.word	0x7ff00000
 800572c:	080084a1 	.word	0x080084a1
 8005730:	08008498 	.word	0x08008498
 8005734:	08008475 	.word	0x08008475
 8005738:	3ff80000 	.word	0x3ff80000
 800573c:	08008618 	.word	0x08008618
 8005740:	0800851b 	.word	0x0800851b
 8005744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005746:	9a00      	ldr	r2, [sp, #0]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	2b0e      	cmp	r3, #14
 800574e:	f200 80ad 	bhi.w	80058ac <_dtoa_r+0x484>
 8005752:	2d00      	cmp	r5, #0
 8005754:	f000 80aa 	beq.w	80058ac <_dtoa_r+0x484>
 8005758:	f1ba 0f00 	cmp.w	sl, #0
 800575c:	dd36      	ble.n	80057cc <_dtoa_r+0x3a4>
 800575e:	4ac3      	ldr	r2, [pc, #780]	; (8005a6c <_dtoa_r+0x644>)
 8005760:	f00a 030f 	and.w	r3, sl, #15
 8005764:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005768:	ed93 7b00 	vldr	d7, [r3]
 800576c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005770:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005774:	eeb0 8a47 	vmov.f32	s16, s14
 8005778:	eef0 8a67 	vmov.f32	s17, s15
 800577c:	d016      	beq.n	80057ac <_dtoa_r+0x384>
 800577e:	4bbc      	ldr	r3, [pc, #752]	; (8005a70 <_dtoa_r+0x648>)
 8005780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005788:	f7fb f888 	bl	800089c <__aeabi_ddiv>
 800578c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005790:	f007 070f 	and.w	r7, r7, #15
 8005794:	2503      	movs	r5, #3
 8005796:	4eb6      	ldr	r6, [pc, #728]	; (8005a70 <_dtoa_r+0x648>)
 8005798:	b957      	cbnz	r7, 80057b0 <_dtoa_r+0x388>
 800579a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800579e:	ec53 2b18 	vmov	r2, r3, d8
 80057a2:	f7fb f87b 	bl	800089c <__aeabi_ddiv>
 80057a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057aa:	e029      	b.n	8005800 <_dtoa_r+0x3d8>
 80057ac:	2502      	movs	r5, #2
 80057ae:	e7f2      	b.n	8005796 <_dtoa_r+0x36e>
 80057b0:	07f9      	lsls	r1, r7, #31
 80057b2:	d508      	bpl.n	80057c6 <_dtoa_r+0x39e>
 80057b4:	ec51 0b18 	vmov	r0, r1, d8
 80057b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057bc:	f7fa ff44 	bl	8000648 <__aeabi_dmul>
 80057c0:	ec41 0b18 	vmov	d8, r0, r1
 80057c4:	3501      	adds	r5, #1
 80057c6:	107f      	asrs	r7, r7, #1
 80057c8:	3608      	adds	r6, #8
 80057ca:	e7e5      	b.n	8005798 <_dtoa_r+0x370>
 80057cc:	f000 80a6 	beq.w	800591c <_dtoa_r+0x4f4>
 80057d0:	f1ca 0600 	rsb	r6, sl, #0
 80057d4:	4ba5      	ldr	r3, [pc, #660]	; (8005a6c <_dtoa_r+0x644>)
 80057d6:	4fa6      	ldr	r7, [pc, #664]	; (8005a70 <_dtoa_r+0x648>)
 80057d8:	f006 020f 	and.w	r2, r6, #15
 80057dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057e8:	f7fa ff2e 	bl	8000648 <__aeabi_dmul>
 80057ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f0:	1136      	asrs	r6, r6, #4
 80057f2:	2300      	movs	r3, #0
 80057f4:	2502      	movs	r5, #2
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	f040 8085 	bne.w	8005906 <_dtoa_r+0x4de>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1d2      	bne.n	80057a6 <_dtoa_r+0x37e>
 8005800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 808c 	beq.w	8005920 <_dtoa_r+0x4f8>
 8005808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800580c:	4b99      	ldr	r3, [pc, #612]	; (8005a74 <_dtoa_r+0x64c>)
 800580e:	2200      	movs	r2, #0
 8005810:	4630      	mov	r0, r6
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb f98a 	bl	8000b2c <__aeabi_dcmplt>
 8005818:	2800      	cmp	r0, #0
 800581a:	f000 8081 	beq.w	8005920 <_dtoa_r+0x4f8>
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d07d      	beq.n	8005920 <_dtoa_r+0x4f8>
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	dd3c      	ble.n	80058a4 <_dtoa_r+0x47c>
 800582a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	2200      	movs	r2, #0
 8005832:	4b91      	ldr	r3, [pc, #580]	; (8005a78 <_dtoa_r+0x650>)
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fa ff06 	bl	8000648 <__aeabi_dmul>
 800583c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005840:	3501      	adds	r5, #1
 8005842:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005846:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800584a:	4628      	mov	r0, r5
 800584c:	f7fa fe92 	bl	8000574 <__aeabi_i2d>
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	f7fa fef8 	bl	8000648 <__aeabi_dmul>
 8005858:	4b88      	ldr	r3, [pc, #544]	; (8005a7c <_dtoa_r+0x654>)
 800585a:	2200      	movs	r2, #0
 800585c:	f7fa fd3e 	bl	80002dc <__adddf3>
 8005860:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005868:	9303      	str	r3, [sp, #12]
 800586a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d15c      	bne.n	800592a <_dtoa_r+0x502>
 8005870:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <_dtoa_r+0x658>)
 8005872:	2200      	movs	r2, #0
 8005874:	4630      	mov	r0, r6
 8005876:	4639      	mov	r1, r7
 8005878:	f7fa fd2e 	bl	80002d8 <__aeabi_dsub>
 800587c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005880:	4606      	mov	r6, r0
 8005882:	460f      	mov	r7, r1
 8005884:	f7fb f970 	bl	8000b68 <__aeabi_dcmpgt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 8296 	bne.w	8005dba <_dtoa_r+0x992>
 800588e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005892:	4630      	mov	r0, r6
 8005894:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005898:	4639      	mov	r1, r7
 800589a:	f7fb f947 	bl	8000b2c <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f040 8288 	bne.w	8005db4 <_dtoa_r+0x98c>
 80058a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f2c0 8158 	blt.w	8005b64 <_dtoa_r+0x73c>
 80058b4:	f1ba 0f0e 	cmp.w	sl, #14
 80058b8:	f300 8154 	bgt.w	8005b64 <_dtoa_r+0x73c>
 80058bc:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <_dtoa_r+0x644>)
 80058be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f280 80e3 	bge.w	8005a94 <_dtoa_r+0x66c>
 80058ce:	9b01      	ldr	r3, [sp, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f300 80df 	bgt.w	8005a94 <_dtoa_r+0x66c>
 80058d6:	f040 826d 	bne.w	8005db4 <_dtoa_r+0x98c>
 80058da:	4b69      	ldr	r3, [pc, #420]	; (8005a80 <_dtoa_r+0x658>)
 80058dc:	2200      	movs	r2, #0
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fa feb1 	bl	8000648 <__aeabi_dmul>
 80058e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ea:	f7fb f933 	bl	8000b54 <__aeabi_dcmpge>
 80058ee:	9e01      	ldr	r6, [sp, #4]
 80058f0:	4637      	mov	r7, r6
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f040 8243 	bne.w	8005d7e <_dtoa_r+0x956>
 80058f8:	9d00      	ldr	r5, [sp, #0]
 80058fa:	2331      	movs	r3, #49	; 0x31
 80058fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005900:	f10a 0a01 	add.w	sl, sl, #1
 8005904:	e23f      	b.n	8005d86 <_dtoa_r+0x95e>
 8005906:	07f2      	lsls	r2, r6, #31
 8005908:	d505      	bpl.n	8005916 <_dtoa_r+0x4ee>
 800590a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590e:	f7fa fe9b 	bl	8000648 <__aeabi_dmul>
 8005912:	3501      	adds	r5, #1
 8005914:	2301      	movs	r3, #1
 8005916:	1076      	asrs	r6, r6, #1
 8005918:	3708      	adds	r7, #8
 800591a:	e76c      	b.n	80057f6 <_dtoa_r+0x3ce>
 800591c:	2502      	movs	r5, #2
 800591e:	e76f      	b.n	8005800 <_dtoa_r+0x3d8>
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	f8cd a01c 	str.w	sl, [sp, #28]
 8005926:	930c      	str	r3, [sp, #48]	; 0x30
 8005928:	e78d      	b.n	8005846 <_dtoa_r+0x41e>
 800592a:	9900      	ldr	r1, [sp, #0]
 800592c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800592e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005930:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <_dtoa_r+0x644>)
 8005932:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005936:	4401      	add	r1, r0
 8005938:	9102      	str	r1, [sp, #8]
 800593a:	9908      	ldr	r1, [sp, #32]
 800593c:	eeb0 8a47 	vmov.f32	s16, s14
 8005940:	eef0 8a67 	vmov.f32	s17, s15
 8005944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800594c:	2900      	cmp	r1, #0
 800594e:	d045      	beq.n	80059dc <_dtoa_r+0x5b4>
 8005950:	494c      	ldr	r1, [pc, #304]	; (8005a84 <_dtoa_r+0x65c>)
 8005952:	2000      	movs	r0, #0
 8005954:	f7fa ffa2 	bl	800089c <__aeabi_ddiv>
 8005958:	ec53 2b18 	vmov	r2, r3, d8
 800595c:	f7fa fcbc 	bl	80002d8 <__aeabi_dsub>
 8005960:	9d00      	ldr	r5, [sp, #0]
 8005962:	ec41 0b18 	vmov	d8, r0, r1
 8005966:	4639      	mov	r1, r7
 8005968:	4630      	mov	r0, r6
 800596a:	f7fb f91d 	bl	8000ba8 <__aeabi_d2iz>
 800596e:	900c      	str	r0, [sp, #48]	; 0x30
 8005970:	f7fa fe00 	bl	8000574 <__aeabi_i2d>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f7fa fcac 	bl	80002d8 <__aeabi_dsub>
 8005980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005982:	3330      	adds	r3, #48	; 0x30
 8005984:	f805 3b01 	strb.w	r3, [r5], #1
 8005988:	ec53 2b18 	vmov	r2, r3, d8
 800598c:	4606      	mov	r6, r0
 800598e:	460f      	mov	r7, r1
 8005990:	f7fb f8cc 	bl	8000b2c <__aeabi_dcmplt>
 8005994:	2800      	cmp	r0, #0
 8005996:	d165      	bne.n	8005a64 <_dtoa_r+0x63c>
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	4935      	ldr	r1, [pc, #212]	; (8005a74 <_dtoa_r+0x64c>)
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fa fc9a 	bl	80002d8 <__aeabi_dsub>
 80059a4:	ec53 2b18 	vmov	r2, r3, d8
 80059a8:	f7fb f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f040 80b9 	bne.w	8005b24 <_dtoa_r+0x6fc>
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	429d      	cmp	r5, r3
 80059b6:	f43f af75 	beq.w	80058a4 <_dtoa_r+0x47c>
 80059ba:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <_dtoa_r+0x650>)
 80059bc:	ec51 0b18 	vmov	r0, r1, d8
 80059c0:	2200      	movs	r2, #0
 80059c2:	f7fa fe41 	bl	8000648 <__aeabi_dmul>
 80059c6:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <_dtoa_r+0x650>)
 80059c8:	ec41 0b18 	vmov	d8, r0, r1
 80059cc:	2200      	movs	r2, #0
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fe39 	bl	8000648 <__aeabi_dmul>
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	e7c4      	b.n	8005966 <_dtoa_r+0x53e>
 80059dc:	ec51 0b17 	vmov	r0, r1, d7
 80059e0:	f7fa fe32 	bl	8000648 <__aeabi_dmul>
 80059e4:	9b02      	ldr	r3, [sp, #8]
 80059e6:	9d00      	ldr	r5, [sp, #0]
 80059e8:	930c      	str	r3, [sp, #48]	; 0x30
 80059ea:	ec41 0b18 	vmov	d8, r0, r1
 80059ee:	4639      	mov	r1, r7
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7fb f8d9 	bl	8000ba8 <__aeabi_d2iz>
 80059f6:	9011      	str	r0, [sp, #68]	; 0x44
 80059f8:	f7fa fdbc 	bl	8000574 <__aeabi_i2d>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4630      	mov	r0, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	f7fa fc68 	bl	80002d8 <__aeabi_dsub>
 8005a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a0a:	3330      	adds	r3, #48	; 0x30
 8005a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	429d      	cmp	r5, r3
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	d134      	bne.n	8005a88 <_dtoa_r+0x660>
 8005a1e:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <_dtoa_r+0x65c>)
 8005a20:	ec51 0b18 	vmov	r0, r1, d8
 8005a24:	f7fa fc5a 	bl	80002dc <__adddf3>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	4639      	mov	r1, r7
 8005a30:	f7fb f89a 	bl	8000b68 <__aeabi_dcmpgt>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d175      	bne.n	8005b24 <_dtoa_r+0x6fc>
 8005a38:	ec53 2b18 	vmov	r2, r3, d8
 8005a3c:	4911      	ldr	r1, [pc, #68]	; (8005a84 <_dtoa_r+0x65c>)
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f7fa fc4a 	bl	80002d8 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fb f86e 	bl	8000b2c <__aeabi_dcmplt>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f43f af27 	beq.w	80058a4 <_dtoa_r+0x47c>
 8005a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a58:	1e6b      	subs	r3, r5, #1
 8005a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d0f8      	beq.n	8005a56 <_dtoa_r+0x62e>
 8005a64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a68:	e04a      	b.n	8005b00 <_dtoa_r+0x6d8>
 8005a6a:	bf00      	nop
 8005a6c:	08008618 	.word	0x08008618
 8005a70:	080085f0 	.word	0x080085f0
 8005a74:	3ff00000 	.word	0x3ff00000
 8005a78:	40240000 	.word	0x40240000
 8005a7c:	401c0000 	.word	0x401c0000
 8005a80:	40140000 	.word	0x40140000
 8005a84:	3fe00000 	.word	0x3fe00000
 8005a88:	4baf      	ldr	r3, [pc, #700]	; (8005d48 <_dtoa_r+0x920>)
 8005a8a:	f7fa fddd 	bl	8000648 <__aeabi_dmul>
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460f      	mov	r7, r1
 8005a92:	e7ac      	b.n	80059ee <_dtoa_r+0x5c6>
 8005a94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a98:	9d00      	ldr	r5, [sp, #0]
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fefb 	bl	800089c <__aeabi_ddiv>
 8005aa6:	f7fb f87f 	bl	8000ba8 <__aeabi_d2iz>
 8005aaa:	9002      	str	r0, [sp, #8]
 8005aac:	f7fa fd62 	bl	8000574 <__aeabi_i2d>
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f7fa fdc8 	bl	8000648 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fc0a 	bl	80002d8 <__aeabi_dsub>
 8005ac4:	9e02      	ldr	r6, [sp, #8]
 8005ac6:	9f01      	ldr	r7, [sp, #4]
 8005ac8:	3630      	adds	r6, #48	; 0x30
 8005aca:	f805 6b01 	strb.w	r6, [r5], #1
 8005ace:	9e00      	ldr	r6, [sp, #0]
 8005ad0:	1bae      	subs	r6, r5, r6
 8005ad2:	42b7      	cmp	r7, r6
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	d137      	bne.n	8005b4a <_dtoa_r+0x722>
 8005ada:	f7fa fbff 	bl	80002dc <__adddf3>
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	f7fb f83f 	bl	8000b68 <__aeabi_dcmpgt>
 8005aea:	b9c8      	cbnz	r0, 8005b20 <_dtoa_r+0x6f8>
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fb f810 	bl	8000b18 <__aeabi_dcmpeq>
 8005af8:	b110      	cbz	r0, 8005b00 <_dtoa_r+0x6d8>
 8005afa:	9b02      	ldr	r3, [sp, #8]
 8005afc:	07d9      	lsls	r1, r3, #31
 8005afe:	d40f      	bmi.n	8005b20 <_dtoa_r+0x6f8>
 8005b00:	4620      	mov	r0, r4
 8005b02:	4659      	mov	r1, fp
 8005b04:	f000 fbd0 	bl	80062a8 <_Bfree>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	702b      	strb	r3, [r5, #0]
 8005b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b0e:	f10a 0001 	add.w	r0, sl, #1
 8005b12:	6018      	str	r0, [r3, #0]
 8005b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f43f acd8 	beq.w	80054cc <_dtoa_r+0xa4>
 8005b1c:	601d      	str	r5, [r3, #0]
 8005b1e:	e4d5      	b.n	80054cc <_dtoa_r+0xa4>
 8005b20:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b24:	462b      	mov	r3, r5
 8005b26:	461d      	mov	r5, r3
 8005b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2c:	2a39      	cmp	r2, #57	; 0x39
 8005b2e:	d108      	bne.n	8005b42 <_dtoa_r+0x71a>
 8005b30:	9a00      	ldr	r2, [sp, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d1f7      	bne.n	8005b26 <_dtoa_r+0x6fe>
 8005b36:	9a07      	ldr	r2, [sp, #28]
 8005b38:	9900      	ldr	r1, [sp, #0]
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	9207      	str	r2, [sp, #28]
 8005b3e:	2230      	movs	r2, #48	; 0x30
 8005b40:	700a      	strb	r2, [r1, #0]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	3201      	adds	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e78c      	b.n	8005a64 <_dtoa_r+0x63c>
 8005b4a:	4b7f      	ldr	r3, [pc, #508]	; (8005d48 <_dtoa_r+0x920>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f7fa fd7b 	bl	8000648 <__aeabi_dmul>
 8005b52:	2200      	movs	r2, #0
 8005b54:	2300      	movs	r3, #0
 8005b56:	4606      	mov	r6, r0
 8005b58:	460f      	mov	r7, r1
 8005b5a:	f7fa ffdd 	bl	8000b18 <__aeabi_dcmpeq>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d09b      	beq.n	8005a9a <_dtoa_r+0x672>
 8005b62:	e7cd      	b.n	8005b00 <_dtoa_r+0x6d8>
 8005b64:	9a08      	ldr	r2, [sp, #32]
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	f000 80c4 	beq.w	8005cf4 <_dtoa_r+0x8cc>
 8005b6c:	9a05      	ldr	r2, [sp, #20]
 8005b6e:	2a01      	cmp	r2, #1
 8005b70:	f300 80a8 	bgt.w	8005cc4 <_dtoa_r+0x89c>
 8005b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f000 80a0 	beq.w	8005cbc <_dtoa_r+0x894>
 8005b7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b80:	9e06      	ldr	r6, [sp, #24]
 8005b82:	4645      	mov	r5, r8
 8005b84:	9a04      	ldr	r2, [sp, #16]
 8005b86:	2101      	movs	r1, #1
 8005b88:	441a      	add	r2, r3
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4498      	add	r8, r3
 8005b8e:	9204      	str	r2, [sp, #16]
 8005b90:	f000 fc46 	bl	8006420 <__i2b>
 8005b94:	4607      	mov	r7, r0
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	dd0b      	ble.n	8005bb2 <_dtoa_r+0x78a>
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd08      	ble.n	8005bb2 <_dtoa_r+0x78a>
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	9a04      	ldr	r2, [sp, #16]
 8005ba4:	bfa8      	it	ge
 8005ba6:	462b      	movge	r3, r5
 8005ba8:	eba8 0803 	sub.w	r8, r8, r3
 8005bac:	1aed      	subs	r5, r5, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	b1fb      	cbz	r3, 8005bf6 <_dtoa_r+0x7ce>
 8005bb6:	9b08      	ldr	r3, [sp, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 809f 	beq.w	8005cfc <_dtoa_r+0x8d4>
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	dd11      	ble.n	8005be6 <_dtoa_r+0x7be>
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 fce6 	bl	8006598 <__pow5mult>
 8005bcc:	465a      	mov	r2, fp
 8005bce:	4601      	mov	r1, r0
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 fc3a 	bl	800644c <__multiply>
 8005bd8:	4659      	mov	r1, fp
 8005bda:	9007      	str	r0, [sp, #28]
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 fb63 	bl	80062a8 <_Bfree>
 8005be2:	9b07      	ldr	r3, [sp, #28]
 8005be4:	469b      	mov	fp, r3
 8005be6:	9b06      	ldr	r3, [sp, #24]
 8005be8:	1b9a      	subs	r2, r3, r6
 8005bea:	d004      	beq.n	8005bf6 <_dtoa_r+0x7ce>
 8005bec:	4659      	mov	r1, fp
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 fcd2 	bl	8006598 <__pow5mult>
 8005bf4:	4683      	mov	fp, r0
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fc11 	bl	8006420 <__i2b>
 8005bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	4606      	mov	r6, r0
 8005c04:	dd7c      	ble.n	8005d00 <_dtoa_r+0x8d8>
 8005c06:	461a      	mov	r2, r3
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 fcc4 	bl	8006598 <__pow5mult>
 8005c10:	9b05      	ldr	r3, [sp, #20]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	4606      	mov	r6, r0
 8005c16:	dd76      	ble.n	8005d06 <_dtoa_r+0x8de>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9306      	str	r3, [sp, #24]
 8005c1c:	6933      	ldr	r3, [r6, #16]
 8005c1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c22:	6918      	ldr	r0, [r3, #16]
 8005c24:	f000 fbac 	bl	8006380 <__hi0bits>
 8005c28:	f1c0 0020 	rsb	r0, r0, #32
 8005c2c:	9b04      	ldr	r3, [sp, #16]
 8005c2e:	4418      	add	r0, r3
 8005c30:	f010 001f 	ands.w	r0, r0, #31
 8005c34:	f000 8086 	beq.w	8005d44 <_dtoa_r+0x91c>
 8005c38:	f1c0 0320 	rsb	r3, r0, #32
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	dd7f      	ble.n	8005d40 <_dtoa_r+0x918>
 8005c40:	f1c0 001c 	rsb	r0, r0, #28
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	4403      	add	r3, r0
 8005c48:	4480      	add	r8, r0
 8005c4a:	4405      	add	r5, r0
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f1b8 0f00 	cmp.w	r8, #0
 8005c52:	dd05      	ble.n	8005c60 <_dtoa_r+0x838>
 8005c54:	4659      	mov	r1, fp
 8005c56:	4642      	mov	r2, r8
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fcf7 	bl	800664c <__lshift>
 8005c5e:	4683      	mov	fp, r0
 8005c60:	9b04      	ldr	r3, [sp, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	dd05      	ble.n	8005c72 <_dtoa_r+0x84a>
 8005c66:	4631      	mov	r1, r6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fcee 	bl	800664c <__lshift>
 8005c70:	4606      	mov	r6, r0
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d069      	beq.n	8005d4c <_dtoa_r+0x924>
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4658      	mov	r0, fp
 8005c7c:	f000 fd52 	bl	8006724 <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	da63      	bge.n	8005d4c <_dtoa_r+0x924>
 8005c84:	2300      	movs	r3, #0
 8005c86:	4659      	mov	r1, fp
 8005c88:	220a      	movs	r2, #10
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fb2e 	bl	80062ec <__multadd>
 8005c90:	9b08      	ldr	r3, [sp, #32]
 8005c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c96:	4683      	mov	fp, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 818f 	beq.w	8005fbc <_dtoa_r+0xb94>
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	220a      	movs	r2, #10
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 fb21 	bl	80062ec <__multadd>
 8005caa:	f1b9 0f00 	cmp.w	r9, #0
 8005cae:	4607      	mov	r7, r0
 8005cb0:	f300 808e 	bgt.w	8005dd0 <_dtoa_r+0x9a8>
 8005cb4:	9b05      	ldr	r3, [sp, #20]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	dc50      	bgt.n	8005d5c <_dtoa_r+0x934>
 8005cba:	e089      	b.n	8005dd0 <_dtoa_r+0x9a8>
 8005cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cc2:	e75d      	b.n	8005b80 <_dtoa_r+0x758>
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	1e5e      	subs	r6, r3, #1
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	42b3      	cmp	r3, r6
 8005ccc:	bfbf      	itttt	lt
 8005cce:	9b06      	ldrlt	r3, [sp, #24]
 8005cd0:	9606      	strlt	r6, [sp, #24]
 8005cd2:	1af2      	sublt	r2, r6, r3
 8005cd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005cd6:	bfb6      	itet	lt
 8005cd8:	189b      	addlt	r3, r3, r2
 8005cda:	1b9e      	subge	r6, r3, r6
 8005cdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	bfb8      	it	lt
 8005ce2:	2600      	movlt	r6, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bfb5      	itete	lt
 8005ce8:	eba8 0503 	sublt.w	r5, r8, r3
 8005cec:	9b01      	ldrge	r3, [sp, #4]
 8005cee:	2300      	movlt	r3, #0
 8005cf0:	4645      	movge	r5, r8
 8005cf2:	e747      	b.n	8005b84 <_dtoa_r+0x75c>
 8005cf4:	9e06      	ldr	r6, [sp, #24]
 8005cf6:	9f08      	ldr	r7, [sp, #32]
 8005cf8:	4645      	mov	r5, r8
 8005cfa:	e74c      	b.n	8005b96 <_dtoa_r+0x76e>
 8005cfc:	9a06      	ldr	r2, [sp, #24]
 8005cfe:	e775      	b.n	8005bec <_dtoa_r+0x7c4>
 8005d00:	9b05      	ldr	r3, [sp, #20]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	dc18      	bgt.n	8005d38 <_dtoa_r+0x910>
 8005d06:	9b02      	ldr	r3, [sp, #8]
 8005d08:	b9b3      	cbnz	r3, 8005d38 <_dtoa_r+0x910>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d10:	b9a3      	cbnz	r3, 8005d3c <_dtoa_r+0x914>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	0d1b      	lsrs	r3, r3, #20
 8005d1a:	051b      	lsls	r3, r3, #20
 8005d1c:	b12b      	cbz	r3, 8005d2a <_dtoa_r+0x902>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	3301      	adds	r3, #1
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	f108 0801 	add.w	r8, r8, #1
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9306      	str	r3, [sp, #24]
 8005d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f47f af74 	bne.w	8005c1c <_dtoa_r+0x7f4>
 8005d34:	2001      	movs	r0, #1
 8005d36:	e779      	b.n	8005c2c <_dtoa_r+0x804>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e7f6      	b.n	8005d2a <_dtoa_r+0x902>
 8005d3c:	9b02      	ldr	r3, [sp, #8]
 8005d3e:	e7f4      	b.n	8005d2a <_dtoa_r+0x902>
 8005d40:	d085      	beq.n	8005c4e <_dtoa_r+0x826>
 8005d42:	4618      	mov	r0, r3
 8005d44:	301c      	adds	r0, #28
 8005d46:	e77d      	b.n	8005c44 <_dtoa_r+0x81c>
 8005d48:	40240000 	.word	0x40240000
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dc38      	bgt.n	8005dc4 <_dtoa_r+0x99c>
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	dd35      	ble.n	8005dc4 <_dtoa_r+0x99c>
 8005d58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	d10d      	bne.n	8005d7e <_dtoa_r+0x956>
 8005d62:	4631      	mov	r1, r6
 8005d64:	464b      	mov	r3, r9
 8005d66:	2205      	movs	r2, #5
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fabf 	bl	80062ec <__multadd>
 8005d6e:	4601      	mov	r1, r0
 8005d70:	4606      	mov	r6, r0
 8005d72:	4658      	mov	r0, fp
 8005d74:	f000 fcd6 	bl	8006724 <__mcmp>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f73f adbd 	bgt.w	80058f8 <_dtoa_r+0x4d0>
 8005d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d80:	9d00      	ldr	r5, [sp, #0]
 8005d82:	ea6f 0a03 	mvn.w	sl, r3
 8005d86:	f04f 0800 	mov.w	r8, #0
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fa8b 	bl	80062a8 <_Bfree>
 8005d92:	2f00      	cmp	r7, #0
 8005d94:	f43f aeb4 	beq.w	8005b00 <_dtoa_r+0x6d8>
 8005d98:	f1b8 0f00 	cmp.w	r8, #0
 8005d9c:	d005      	beq.n	8005daa <_dtoa_r+0x982>
 8005d9e:	45b8      	cmp	r8, r7
 8005da0:	d003      	beq.n	8005daa <_dtoa_r+0x982>
 8005da2:	4641      	mov	r1, r8
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 fa7f 	bl	80062a8 <_Bfree>
 8005daa:	4639      	mov	r1, r7
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 fa7b 	bl	80062a8 <_Bfree>
 8005db2:	e6a5      	b.n	8005b00 <_dtoa_r+0x6d8>
 8005db4:	2600      	movs	r6, #0
 8005db6:	4637      	mov	r7, r6
 8005db8:	e7e1      	b.n	8005d7e <_dtoa_r+0x956>
 8005dba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	e599      	b.n	80058f8 <_dtoa_r+0x4d0>
 8005dc4:	9b08      	ldr	r3, [sp, #32]
 8005dc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80fd 	beq.w	8005fca <_dtoa_r+0xba2>
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	dd05      	ble.n	8005de0 <_dtoa_r+0x9b8>
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 fc37 	bl	800664c <__lshift>
 8005dde:	4607      	mov	r7, r0
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d05c      	beq.n	8005ea0 <_dtoa_r+0xa78>
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fa1d 	bl	8006228 <_Balloc>
 8005dee:	4605      	mov	r5, r0
 8005df0:	b928      	cbnz	r0, 8005dfe <_dtoa_r+0x9d6>
 8005df2:	4b80      	ldr	r3, [pc, #512]	; (8005ff4 <_dtoa_r+0xbcc>)
 8005df4:	4602      	mov	r2, r0
 8005df6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005dfa:	f7ff bb2e 	b.w	800545a <_dtoa_r+0x32>
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	3202      	adds	r2, #2
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	f107 010c 	add.w	r1, r7, #12
 8005e08:	300c      	adds	r0, #12
 8005e0a:	f000 f9ff 	bl	800620c <memcpy>
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4629      	mov	r1, r5
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fc1a 	bl	800664c <__lshift>
 8005e18:	9b00      	ldr	r3, [sp, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	444b      	add	r3, r9
 8005e22:	9307      	str	r3, [sp, #28]
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	46b8      	mov	r8, r7
 8005e2c:	9306      	str	r3, [sp, #24]
 8005e2e:	4607      	mov	r7, r0
 8005e30:	9b01      	ldr	r3, [sp, #4]
 8005e32:	4631      	mov	r1, r6
 8005e34:	3b01      	subs	r3, #1
 8005e36:	4658      	mov	r0, fp
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	f7ff fa67 	bl	800530c <quorem>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	3330      	adds	r3, #48	; 0x30
 8005e42:	9004      	str	r0, [sp, #16]
 8005e44:	4641      	mov	r1, r8
 8005e46:	4658      	mov	r0, fp
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	f000 fc6b 	bl	8006724 <__mcmp>
 8005e4e:	463a      	mov	r2, r7
 8005e50:	4681      	mov	r9, r0
 8005e52:	4631      	mov	r1, r6
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fc81 	bl	800675c <__mdiff>
 8005e5a:	68c2      	ldr	r2, [r0, #12]
 8005e5c:	9b08      	ldr	r3, [sp, #32]
 8005e5e:	4605      	mov	r5, r0
 8005e60:	bb02      	cbnz	r2, 8005ea4 <_dtoa_r+0xa7c>
 8005e62:	4601      	mov	r1, r0
 8005e64:	4658      	mov	r0, fp
 8005e66:	f000 fc5d 	bl	8006724 <__mcmp>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4620      	mov	r0, r4
 8005e72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005e76:	f000 fa17 	bl	80062a8 <_Bfree>
 8005e7a:	9b05      	ldr	r3, [sp, #20]
 8005e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e7e:	9d01      	ldr	r5, [sp, #4]
 8005e80:	ea43 0102 	orr.w	r1, r3, r2
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	430b      	orrs	r3, r1
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	d10d      	bne.n	8005ea8 <_dtoa_r+0xa80>
 8005e8c:	2b39      	cmp	r3, #57	; 0x39
 8005e8e:	d029      	beq.n	8005ee4 <_dtoa_r+0xabc>
 8005e90:	f1b9 0f00 	cmp.w	r9, #0
 8005e94:	dd01      	ble.n	8005e9a <_dtoa_r+0xa72>
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	3331      	adds	r3, #49	; 0x31
 8005e9a:	9a02      	ldr	r2, [sp, #8]
 8005e9c:	7013      	strb	r3, [r2, #0]
 8005e9e:	e774      	b.n	8005d8a <_dtoa_r+0x962>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	e7b9      	b.n	8005e18 <_dtoa_r+0x9f0>
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	e7e2      	b.n	8005e6e <_dtoa_r+0xa46>
 8005ea8:	f1b9 0f00 	cmp.w	r9, #0
 8005eac:	db06      	blt.n	8005ebc <_dtoa_r+0xa94>
 8005eae:	9905      	ldr	r1, [sp, #20]
 8005eb0:	ea41 0909 	orr.w	r9, r1, r9
 8005eb4:	9906      	ldr	r1, [sp, #24]
 8005eb6:	ea59 0101 	orrs.w	r1, r9, r1
 8005eba:	d120      	bne.n	8005efe <_dtoa_r+0xad6>
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	ddec      	ble.n	8005e9a <_dtoa_r+0xa72>
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	f000 fbc0 	bl	800664c <__lshift>
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4683      	mov	fp, r0
 8005ed0:	f000 fc28 	bl	8006724 <__mcmp>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	dc02      	bgt.n	8005ee0 <_dtoa_r+0xab8>
 8005eda:	d1de      	bne.n	8005e9a <_dtoa_r+0xa72>
 8005edc:	07da      	lsls	r2, r3, #31
 8005ede:	d5dc      	bpl.n	8005e9a <_dtoa_r+0xa72>
 8005ee0:	2b39      	cmp	r3, #57	; 0x39
 8005ee2:	d1d8      	bne.n	8005e96 <_dtoa_r+0xa6e>
 8005ee4:	9a02      	ldr	r2, [sp, #8]
 8005ee6:	2339      	movs	r3, #57	; 0x39
 8005ee8:	7013      	strb	r3, [r2, #0]
 8005eea:	462b      	mov	r3, r5
 8005eec:	461d      	mov	r5, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ef4:	2a39      	cmp	r2, #57	; 0x39
 8005ef6:	d050      	beq.n	8005f9a <_dtoa_r+0xb72>
 8005ef8:	3201      	adds	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e745      	b.n	8005d8a <_dtoa_r+0x962>
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	dd03      	ble.n	8005f0a <_dtoa_r+0xae2>
 8005f02:	2b39      	cmp	r3, #57	; 0x39
 8005f04:	d0ee      	beq.n	8005ee4 <_dtoa_r+0xabc>
 8005f06:	3301      	adds	r3, #1
 8005f08:	e7c7      	b.n	8005e9a <_dtoa_r+0xa72>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	9907      	ldr	r1, [sp, #28]
 8005f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f12:	428a      	cmp	r2, r1
 8005f14:	d02a      	beq.n	8005f6c <_dtoa_r+0xb44>
 8005f16:	4659      	mov	r1, fp
 8005f18:	2300      	movs	r3, #0
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 f9e5 	bl	80062ec <__multadd>
 8005f22:	45b8      	cmp	r8, r7
 8005f24:	4683      	mov	fp, r0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f04f 020a 	mov.w	r2, #10
 8005f2e:	4641      	mov	r1, r8
 8005f30:	4620      	mov	r0, r4
 8005f32:	d107      	bne.n	8005f44 <_dtoa_r+0xb1c>
 8005f34:	f000 f9da 	bl	80062ec <__multadd>
 8005f38:	4680      	mov	r8, r0
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	9b01      	ldr	r3, [sp, #4]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	e775      	b.n	8005e30 <_dtoa_r+0xa08>
 8005f44:	f000 f9d2 	bl	80062ec <__multadd>
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	220a      	movs	r2, #10
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f9cb 	bl	80062ec <__multadd>
 8005f56:	4607      	mov	r7, r0
 8005f58:	e7f0      	b.n	8005f3c <_dtoa_r+0xb14>
 8005f5a:	f1b9 0f00 	cmp.w	r9, #0
 8005f5e:	9a00      	ldr	r2, [sp, #0]
 8005f60:	bfcc      	ite	gt
 8005f62:	464d      	movgt	r5, r9
 8005f64:	2501      	movle	r5, #1
 8005f66:	4415      	add	r5, r2
 8005f68:	f04f 0800 	mov.w	r8, #0
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4620      	mov	r0, r4
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	f000 fb6a 	bl	800664c <__lshift>
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4683      	mov	fp, r0
 8005f7c:	f000 fbd2 	bl	8006724 <__mcmp>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	dcb2      	bgt.n	8005eea <_dtoa_r+0xac2>
 8005f84:	d102      	bne.n	8005f8c <_dtoa_r+0xb64>
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	07db      	lsls	r3, r3, #31
 8005f8a:	d4ae      	bmi.n	8005eea <_dtoa_r+0xac2>
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	461d      	mov	r5, r3
 8005f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f94:	2a30      	cmp	r2, #48	; 0x30
 8005f96:	d0fa      	beq.n	8005f8e <_dtoa_r+0xb66>
 8005f98:	e6f7      	b.n	8005d8a <_dtoa_r+0x962>
 8005f9a:	9a00      	ldr	r2, [sp, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d1a5      	bne.n	8005eec <_dtoa_r+0xac4>
 8005fa0:	f10a 0a01 	add.w	sl, sl, #1
 8005fa4:	2331      	movs	r3, #49	; 0x31
 8005fa6:	e779      	b.n	8005e9c <_dtoa_r+0xa74>
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <_dtoa_r+0xbd0>)
 8005faa:	f7ff baaf 	b.w	800550c <_dtoa_r+0xe4>
 8005fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f aa86 	bne.w	80054c2 <_dtoa_r+0x9a>
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <_dtoa_r+0xbd4>)
 8005fb8:	f7ff baa8 	b.w	800550c <_dtoa_r+0xe4>
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	dc03      	bgt.n	8005fca <_dtoa_r+0xba2>
 8005fc2:	9b05      	ldr	r3, [sp, #20]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	f73f aec9 	bgt.w	8005d5c <_dtoa_r+0x934>
 8005fca:	9d00      	ldr	r5, [sp, #0]
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4658      	mov	r0, fp
 8005fd0:	f7ff f99c 	bl	800530c <quorem>
 8005fd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005fd8:	f805 3b01 	strb.w	r3, [r5], #1
 8005fdc:	9a00      	ldr	r2, [sp, #0]
 8005fde:	1aaa      	subs	r2, r5, r2
 8005fe0:	4591      	cmp	r9, r2
 8005fe2:	ddba      	ble.n	8005f5a <_dtoa_r+0xb32>
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	220a      	movs	r2, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f97e 	bl	80062ec <__multadd>
 8005ff0:	4683      	mov	fp, r0
 8005ff2:	e7eb      	b.n	8005fcc <_dtoa_r+0xba4>
 8005ff4:	0800851b 	.word	0x0800851b
 8005ff8:	08008474 	.word	0x08008474
 8005ffc:	08008498 	.word	0x08008498

08006000 <std>:
 8006000:	2300      	movs	r3, #0
 8006002:	b510      	push	{r4, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	e9c0 3300 	strd	r3, r3, [r0]
 800600a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800600e:	6083      	str	r3, [r0, #8]
 8006010:	8181      	strh	r1, [r0, #12]
 8006012:	6643      	str	r3, [r0, #100]	; 0x64
 8006014:	81c2      	strh	r2, [r0, #14]
 8006016:	6183      	str	r3, [r0, #24]
 8006018:	4619      	mov	r1, r3
 800601a:	2208      	movs	r2, #8
 800601c:	305c      	adds	r0, #92	; 0x5c
 800601e:	f7fe fceb 	bl	80049f8 <memset>
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <std+0x38>)
 8006024:	6263      	str	r3, [r4, #36]	; 0x24
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <std+0x3c>)
 8006028:	62a3      	str	r3, [r4, #40]	; 0x28
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <std+0x40>)
 800602c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <std+0x44>)
 8006030:	6224      	str	r4, [r4, #32]
 8006032:	6323      	str	r3, [r4, #48]	; 0x30
 8006034:	bd10      	pop	{r4, pc}
 8006036:	bf00      	nop
 8006038:	08006d6d 	.word	0x08006d6d
 800603c:	08006d8f 	.word	0x08006d8f
 8006040:	08006dc7 	.word	0x08006dc7
 8006044:	08006deb 	.word	0x08006deb

08006048 <_cleanup_r>:
 8006048:	4901      	ldr	r1, [pc, #4]	; (8006050 <_cleanup_r+0x8>)
 800604a:	f000 b8af 	b.w	80061ac <_fwalk_reent>
 800604e:	bf00      	nop
 8006050:	08007101 	.word	0x08007101

08006054 <__sfmoreglue>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	1e4a      	subs	r2, r1, #1
 8006058:	2568      	movs	r5, #104	; 0x68
 800605a:	4355      	muls	r5, r2
 800605c:	460e      	mov	r6, r1
 800605e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006062:	f000 fcbf 	bl	80069e4 <_malloc_r>
 8006066:	4604      	mov	r4, r0
 8006068:	b140      	cbz	r0, 800607c <__sfmoreglue+0x28>
 800606a:	2100      	movs	r1, #0
 800606c:	e9c0 1600 	strd	r1, r6, [r0]
 8006070:	300c      	adds	r0, #12
 8006072:	60a0      	str	r0, [r4, #8]
 8006074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006078:	f7fe fcbe 	bl	80049f8 <memset>
 800607c:	4620      	mov	r0, r4
 800607e:	bd70      	pop	{r4, r5, r6, pc}

08006080 <__sfp_lock_acquire>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__sfp_lock_acquire+0x8>)
 8006082:	f000 b8b8 	b.w	80061f6 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	200003c0 	.word	0x200003c0

0800608c <__sfp_lock_release>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__sfp_lock_release+0x8>)
 800608e:	f000 b8b3 	b.w	80061f8 <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	200003c0 	.word	0x200003c0

08006098 <__sinit_lock_acquire>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__sinit_lock_acquire+0x8>)
 800609a:	f000 b8ac 	b.w	80061f6 <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	200003bb 	.word	0x200003bb

080060a4 <__sinit_lock_release>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__sinit_lock_release+0x8>)
 80060a6:	f000 b8a7 	b.w	80061f8 <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	200003bb 	.word	0x200003bb

080060b0 <__sinit>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	4604      	mov	r4, r0
 80060b4:	f7ff fff0 	bl	8006098 <__sinit_lock_acquire>
 80060b8:	69a3      	ldr	r3, [r4, #24]
 80060ba:	b11b      	cbz	r3, 80060c4 <__sinit+0x14>
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f7ff bff0 	b.w	80060a4 <__sinit_lock_release>
 80060c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060c8:	6523      	str	r3, [r4, #80]	; 0x50
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <__sinit+0x68>)
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <__sinit+0x6c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060d2:	42a3      	cmp	r3, r4
 80060d4:	bf04      	itt	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	61a3      	streq	r3, [r4, #24]
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f820 	bl	8006120 <__sfp>
 80060e0:	6060      	str	r0, [r4, #4]
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f81c 	bl	8006120 <__sfp>
 80060e8:	60a0      	str	r0, [r4, #8]
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f818 	bl	8006120 <__sfp>
 80060f0:	2200      	movs	r2, #0
 80060f2:	60e0      	str	r0, [r4, #12]
 80060f4:	2104      	movs	r1, #4
 80060f6:	6860      	ldr	r0, [r4, #4]
 80060f8:	f7ff ff82 	bl	8006000 <std>
 80060fc:	68a0      	ldr	r0, [r4, #8]
 80060fe:	2201      	movs	r2, #1
 8006100:	2109      	movs	r1, #9
 8006102:	f7ff ff7d 	bl	8006000 <std>
 8006106:	68e0      	ldr	r0, [r4, #12]
 8006108:	2202      	movs	r2, #2
 800610a:	2112      	movs	r1, #18
 800610c:	f7ff ff78 	bl	8006000 <std>
 8006110:	2301      	movs	r3, #1
 8006112:	61a3      	str	r3, [r4, #24]
 8006114:	e7d2      	b.n	80060bc <__sinit+0xc>
 8006116:	bf00      	nop
 8006118:	08008460 	.word	0x08008460
 800611c:	08006049 	.word	0x08006049

08006120 <__sfp>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	4607      	mov	r7, r0
 8006124:	f7ff ffac 	bl	8006080 <__sfp_lock_acquire>
 8006128:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <__sfp+0x84>)
 800612a:	681e      	ldr	r6, [r3, #0]
 800612c:	69b3      	ldr	r3, [r6, #24]
 800612e:	b913      	cbnz	r3, 8006136 <__sfp+0x16>
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff ffbd 	bl	80060b0 <__sinit>
 8006136:	3648      	adds	r6, #72	; 0x48
 8006138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800613c:	3b01      	subs	r3, #1
 800613e:	d503      	bpl.n	8006148 <__sfp+0x28>
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	b30b      	cbz	r3, 8006188 <__sfp+0x68>
 8006144:	6836      	ldr	r6, [r6, #0]
 8006146:	e7f7      	b.n	8006138 <__sfp+0x18>
 8006148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800614c:	b9d5      	cbnz	r5, 8006184 <__sfp+0x64>
 800614e:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <__sfp+0x88>)
 8006150:	60e3      	str	r3, [r4, #12]
 8006152:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006156:	6665      	str	r5, [r4, #100]	; 0x64
 8006158:	f000 f84c 	bl	80061f4 <__retarget_lock_init_recursive>
 800615c:	f7ff ff96 	bl	800608c <__sfp_lock_release>
 8006160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006168:	6025      	str	r5, [r4, #0]
 800616a:	61a5      	str	r5, [r4, #24]
 800616c:	2208      	movs	r2, #8
 800616e:	4629      	mov	r1, r5
 8006170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006174:	f7fe fc40 	bl	80049f8 <memset>
 8006178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800617c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006180:	4620      	mov	r0, r4
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006184:	3468      	adds	r4, #104	; 0x68
 8006186:	e7d9      	b.n	800613c <__sfp+0x1c>
 8006188:	2104      	movs	r1, #4
 800618a:	4638      	mov	r0, r7
 800618c:	f7ff ff62 	bl	8006054 <__sfmoreglue>
 8006190:	4604      	mov	r4, r0
 8006192:	6030      	str	r0, [r6, #0]
 8006194:	2800      	cmp	r0, #0
 8006196:	d1d5      	bne.n	8006144 <__sfp+0x24>
 8006198:	f7ff ff78 	bl	800608c <__sfp_lock_release>
 800619c:	230c      	movs	r3, #12
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	e7ee      	b.n	8006180 <__sfp+0x60>
 80061a2:	bf00      	nop
 80061a4:	08008460 	.word	0x08008460
 80061a8:	ffff0001 	.word	0xffff0001

080061ac <_fwalk_reent>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	4606      	mov	r6, r0
 80061b2:	4688      	mov	r8, r1
 80061b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061b8:	2700      	movs	r7, #0
 80061ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061be:	f1b9 0901 	subs.w	r9, r9, #1
 80061c2:	d505      	bpl.n	80061d0 <_fwalk_reent+0x24>
 80061c4:	6824      	ldr	r4, [r4, #0]
 80061c6:	2c00      	cmp	r4, #0
 80061c8:	d1f7      	bne.n	80061ba <_fwalk_reent+0xe>
 80061ca:	4638      	mov	r0, r7
 80061cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d0:	89ab      	ldrh	r3, [r5, #12]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d907      	bls.n	80061e6 <_fwalk_reent+0x3a>
 80061d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061da:	3301      	adds	r3, #1
 80061dc:	d003      	beq.n	80061e6 <_fwalk_reent+0x3a>
 80061de:	4629      	mov	r1, r5
 80061e0:	4630      	mov	r0, r6
 80061e2:	47c0      	blx	r8
 80061e4:	4307      	orrs	r7, r0
 80061e6:	3568      	adds	r5, #104	; 0x68
 80061e8:	e7e9      	b.n	80061be <_fwalk_reent+0x12>
	...

080061ec <_localeconv_r>:
 80061ec:	4800      	ldr	r0, [pc, #0]	; (80061f0 <_localeconv_r+0x4>)
 80061ee:	4770      	bx	lr
 80061f0:	20000160 	.word	0x20000160

080061f4 <__retarget_lock_init_recursive>:
 80061f4:	4770      	bx	lr

080061f6 <__retarget_lock_acquire_recursive>:
 80061f6:	4770      	bx	lr

080061f8 <__retarget_lock_release_recursive>:
 80061f8:	4770      	bx	lr
	...

080061fc <malloc>:
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <malloc+0xc>)
 80061fe:	4601      	mov	r1, r0
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f000 bbef 	b.w	80069e4 <_malloc_r>
 8006206:	bf00      	nop
 8006208:	2000000c 	.word	0x2000000c

0800620c <memcpy>:
 800620c:	440a      	add	r2, r1
 800620e:	4291      	cmp	r1, r2
 8006210:	f100 33ff 	add.w	r3, r0, #4294967295
 8006214:	d100      	bne.n	8006218 <memcpy+0xc>
 8006216:	4770      	bx	lr
 8006218:	b510      	push	{r4, lr}
 800621a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800621e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006222:	4291      	cmp	r1, r2
 8006224:	d1f9      	bne.n	800621a <memcpy+0xe>
 8006226:	bd10      	pop	{r4, pc}

08006228 <_Balloc>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	b976      	cbnz	r6, 8006250 <_Balloc+0x28>
 8006232:	2010      	movs	r0, #16
 8006234:	f7ff ffe2 	bl	80061fc <malloc>
 8006238:	4602      	mov	r2, r0
 800623a:	6260      	str	r0, [r4, #36]	; 0x24
 800623c:	b920      	cbnz	r0, 8006248 <_Balloc+0x20>
 800623e:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <_Balloc+0x78>)
 8006240:	4818      	ldr	r0, [pc, #96]	; (80062a4 <_Balloc+0x7c>)
 8006242:	2166      	movs	r1, #102	; 0x66
 8006244:	f000 fea8 	bl	8006f98 <__assert_func>
 8006248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800624c:	6006      	str	r6, [r0, #0]
 800624e:	60c6      	str	r6, [r0, #12]
 8006250:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006252:	68f3      	ldr	r3, [r6, #12]
 8006254:	b183      	cbz	r3, 8006278 <_Balloc+0x50>
 8006256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800625e:	b9b8      	cbnz	r0, 8006290 <_Balloc+0x68>
 8006260:	2101      	movs	r1, #1
 8006262:	fa01 f605 	lsl.w	r6, r1, r5
 8006266:	1d72      	adds	r2, r6, #5
 8006268:	0092      	lsls	r2, r2, #2
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fb5a 	bl	8006924 <_calloc_r>
 8006270:	b160      	cbz	r0, 800628c <_Balloc+0x64>
 8006272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006276:	e00e      	b.n	8006296 <_Balloc+0x6e>
 8006278:	2221      	movs	r2, #33	; 0x21
 800627a:	2104      	movs	r1, #4
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fb51 	bl	8006924 <_calloc_r>
 8006282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006284:	60f0      	str	r0, [r6, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e4      	bne.n	8006256 <_Balloc+0x2e>
 800628c:	2000      	movs	r0, #0
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	6802      	ldr	r2, [r0, #0]
 8006292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006296:	2300      	movs	r3, #0
 8006298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800629c:	e7f7      	b.n	800628e <_Balloc+0x66>
 800629e:	bf00      	nop
 80062a0:	080084a5 	.word	0x080084a5
 80062a4:	0800858c 	.word	0x0800858c

080062a8 <_Bfree>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	b976      	cbnz	r6, 80062d0 <_Bfree+0x28>
 80062b2:	2010      	movs	r0, #16
 80062b4:	f7ff ffa2 	bl	80061fc <malloc>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6268      	str	r0, [r5, #36]	; 0x24
 80062bc:	b920      	cbnz	r0, 80062c8 <_Bfree+0x20>
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <_Bfree+0x3c>)
 80062c0:	4809      	ldr	r0, [pc, #36]	; (80062e8 <_Bfree+0x40>)
 80062c2:	218a      	movs	r1, #138	; 0x8a
 80062c4:	f000 fe68 	bl	8006f98 <__assert_func>
 80062c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062cc:	6006      	str	r6, [r0, #0]
 80062ce:	60c6      	str	r6, [r0, #12]
 80062d0:	b13c      	cbz	r4, 80062e2 <_Bfree+0x3a>
 80062d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062dc:	6021      	str	r1, [r4, #0]
 80062de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	080084a5 	.word	0x080084a5
 80062e8:	0800858c 	.word	0x0800858c

080062ec <__multadd>:
 80062ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f0:	690e      	ldr	r6, [r1, #16]
 80062f2:	4607      	mov	r7, r0
 80062f4:	4698      	mov	r8, r3
 80062f6:	460c      	mov	r4, r1
 80062f8:	f101 0014 	add.w	r0, r1, #20
 80062fc:	2300      	movs	r3, #0
 80062fe:	6805      	ldr	r5, [r0, #0]
 8006300:	b2a9      	uxth	r1, r5
 8006302:	fb02 8101 	mla	r1, r2, r1, r8
 8006306:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800630a:	0c2d      	lsrs	r5, r5, #16
 800630c:	fb02 c505 	mla	r5, r2, r5, ip
 8006310:	b289      	uxth	r1, r1
 8006312:	3301      	adds	r3, #1
 8006314:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006318:	429e      	cmp	r6, r3
 800631a:	f840 1b04 	str.w	r1, [r0], #4
 800631e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006322:	dcec      	bgt.n	80062fe <__multadd+0x12>
 8006324:	f1b8 0f00 	cmp.w	r8, #0
 8006328:	d022      	beq.n	8006370 <__multadd+0x84>
 800632a:	68a3      	ldr	r3, [r4, #8]
 800632c:	42b3      	cmp	r3, r6
 800632e:	dc19      	bgt.n	8006364 <__multadd+0x78>
 8006330:	6861      	ldr	r1, [r4, #4]
 8006332:	4638      	mov	r0, r7
 8006334:	3101      	adds	r1, #1
 8006336:	f7ff ff77 	bl	8006228 <_Balloc>
 800633a:	4605      	mov	r5, r0
 800633c:	b928      	cbnz	r0, 800634a <__multadd+0x5e>
 800633e:	4602      	mov	r2, r0
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <__multadd+0x8c>)
 8006342:	480e      	ldr	r0, [pc, #56]	; (800637c <__multadd+0x90>)
 8006344:	21b5      	movs	r1, #181	; 0xb5
 8006346:	f000 fe27 	bl	8006f98 <__assert_func>
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	3202      	adds	r2, #2
 800634e:	f104 010c 	add.w	r1, r4, #12
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	300c      	adds	r0, #12
 8006356:	f7ff ff59 	bl	800620c <memcpy>
 800635a:	4621      	mov	r1, r4
 800635c:	4638      	mov	r0, r7
 800635e:	f7ff ffa3 	bl	80062a8 <_Bfree>
 8006362:	462c      	mov	r4, r5
 8006364:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006368:	3601      	adds	r6, #1
 800636a:	f8c3 8014 	str.w	r8, [r3, #20]
 800636e:	6126      	str	r6, [r4, #16]
 8006370:	4620      	mov	r0, r4
 8006372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006376:	bf00      	nop
 8006378:	0800851b 	.word	0x0800851b
 800637c:	0800858c 	.word	0x0800858c

08006380 <__hi0bits>:
 8006380:	0c03      	lsrs	r3, r0, #16
 8006382:	041b      	lsls	r3, r3, #16
 8006384:	b9d3      	cbnz	r3, 80063bc <__hi0bits+0x3c>
 8006386:	0400      	lsls	r0, r0, #16
 8006388:	2310      	movs	r3, #16
 800638a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800638e:	bf04      	itt	eq
 8006390:	0200      	lsleq	r0, r0, #8
 8006392:	3308      	addeq	r3, #8
 8006394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006398:	bf04      	itt	eq
 800639a:	0100      	lsleq	r0, r0, #4
 800639c:	3304      	addeq	r3, #4
 800639e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063a2:	bf04      	itt	eq
 80063a4:	0080      	lsleq	r0, r0, #2
 80063a6:	3302      	addeq	r3, #2
 80063a8:	2800      	cmp	r0, #0
 80063aa:	db05      	blt.n	80063b8 <__hi0bits+0x38>
 80063ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063b0:	f103 0301 	add.w	r3, r3, #1
 80063b4:	bf08      	it	eq
 80063b6:	2320      	moveq	r3, #32
 80063b8:	4618      	mov	r0, r3
 80063ba:	4770      	bx	lr
 80063bc:	2300      	movs	r3, #0
 80063be:	e7e4      	b.n	800638a <__hi0bits+0xa>

080063c0 <__lo0bits>:
 80063c0:	6803      	ldr	r3, [r0, #0]
 80063c2:	f013 0207 	ands.w	r2, r3, #7
 80063c6:	4601      	mov	r1, r0
 80063c8:	d00b      	beq.n	80063e2 <__lo0bits+0x22>
 80063ca:	07da      	lsls	r2, r3, #31
 80063cc:	d424      	bmi.n	8006418 <__lo0bits+0x58>
 80063ce:	0798      	lsls	r0, r3, #30
 80063d0:	bf49      	itett	mi
 80063d2:	085b      	lsrmi	r3, r3, #1
 80063d4:	089b      	lsrpl	r3, r3, #2
 80063d6:	2001      	movmi	r0, #1
 80063d8:	600b      	strmi	r3, [r1, #0]
 80063da:	bf5c      	itt	pl
 80063dc:	600b      	strpl	r3, [r1, #0]
 80063de:	2002      	movpl	r0, #2
 80063e0:	4770      	bx	lr
 80063e2:	b298      	uxth	r0, r3
 80063e4:	b9b0      	cbnz	r0, 8006414 <__lo0bits+0x54>
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	2010      	movs	r0, #16
 80063ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063ee:	bf04      	itt	eq
 80063f0:	0a1b      	lsreq	r3, r3, #8
 80063f2:	3008      	addeq	r0, #8
 80063f4:	071a      	lsls	r2, r3, #28
 80063f6:	bf04      	itt	eq
 80063f8:	091b      	lsreq	r3, r3, #4
 80063fa:	3004      	addeq	r0, #4
 80063fc:	079a      	lsls	r2, r3, #30
 80063fe:	bf04      	itt	eq
 8006400:	089b      	lsreq	r3, r3, #2
 8006402:	3002      	addeq	r0, #2
 8006404:	07da      	lsls	r2, r3, #31
 8006406:	d403      	bmi.n	8006410 <__lo0bits+0x50>
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	f100 0001 	add.w	r0, r0, #1
 800640e:	d005      	beq.n	800641c <__lo0bits+0x5c>
 8006410:	600b      	str	r3, [r1, #0]
 8006412:	4770      	bx	lr
 8006414:	4610      	mov	r0, r2
 8006416:	e7e8      	b.n	80063ea <__lo0bits+0x2a>
 8006418:	2000      	movs	r0, #0
 800641a:	4770      	bx	lr
 800641c:	2020      	movs	r0, #32
 800641e:	4770      	bx	lr

08006420 <__i2b>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	2101      	movs	r1, #1
 8006426:	f7ff feff 	bl	8006228 <_Balloc>
 800642a:	4602      	mov	r2, r0
 800642c:	b928      	cbnz	r0, 800643a <__i2b+0x1a>
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <__i2b+0x24>)
 8006430:	4805      	ldr	r0, [pc, #20]	; (8006448 <__i2b+0x28>)
 8006432:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006436:	f000 fdaf 	bl	8006f98 <__assert_func>
 800643a:	2301      	movs	r3, #1
 800643c:	6144      	str	r4, [r0, #20]
 800643e:	6103      	str	r3, [r0, #16]
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	0800851b 	.word	0x0800851b
 8006448:	0800858c 	.word	0x0800858c

0800644c <__multiply>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	4614      	mov	r4, r2
 8006452:	690a      	ldr	r2, [r1, #16]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	bfb8      	it	lt
 800645a:	460b      	movlt	r3, r1
 800645c:	460d      	mov	r5, r1
 800645e:	bfbc      	itt	lt
 8006460:	4625      	movlt	r5, r4
 8006462:	461c      	movlt	r4, r3
 8006464:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006468:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800646c:	68ab      	ldr	r3, [r5, #8]
 800646e:	6869      	ldr	r1, [r5, #4]
 8006470:	eb0a 0709 	add.w	r7, sl, r9
 8006474:	42bb      	cmp	r3, r7
 8006476:	b085      	sub	sp, #20
 8006478:	bfb8      	it	lt
 800647a:	3101      	addlt	r1, #1
 800647c:	f7ff fed4 	bl	8006228 <_Balloc>
 8006480:	b930      	cbnz	r0, 8006490 <__multiply+0x44>
 8006482:	4602      	mov	r2, r0
 8006484:	4b42      	ldr	r3, [pc, #264]	; (8006590 <__multiply+0x144>)
 8006486:	4843      	ldr	r0, [pc, #268]	; (8006594 <__multiply+0x148>)
 8006488:	f240 115d 	movw	r1, #349	; 0x15d
 800648c:	f000 fd84 	bl	8006f98 <__assert_func>
 8006490:	f100 0614 	add.w	r6, r0, #20
 8006494:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006498:	4633      	mov	r3, r6
 800649a:	2200      	movs	r2, #0
 800649c:	4543      	cmp	r3, r8
 800649e:	d31e      	bcc.n	80064de <__multiply+0x92>
 80064a0:	f105 0c14 	add.w	ip, r5, #20
 80064a4:	f104 0314 	add.w	r3, r4, #20
 80064a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80064ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	ebac 0205 	sub.w	r2, ip, r5
 80064b6:	3a15      	subs	r2, #21
 80064b8:	f022 0203 	bic.w	r2, r2, #3
 80064bc:	3204      	adds	r2, #4
 80064be:	f105 0115 	add.w	r1, r5, #21
 80064c2:	458c      	cmp	ip, r1
 80064c4:	bf38      	it	cc
 80064c6:	2204      	movcc	r2, #4
 80064c8:	9201      	str	r2, [sp, #4]
 80064ca:	9a02      	ldr	r2, [sp, #8]
 80064cc:	9303      	str	r3, [sp, #12]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d808      	bhi.n	80064e4 <__multiply+0x98>
 80064d2:	2f00      	cmp	r7, #0
 80064d4:	dc55      	bgt.n	8006582 <__multiply+0x136>
 80064d6:	6107      	str	r7, [r0, #16]
 80064d8:	b005      	add	sp, #20
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	f843 2b04 	str.w	r2, [r3], #4
 80064e2:	e7db      	b.n	800649c <__multiply+0x50>
 80064e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80064e8:	f1ba 0f00 	cmp.w	sl, #0
 80064ec:	d020      	beq.n	8006530 <__multiply+0xe4>
 80064ee:	f105 0e14 	add.w	lr, r5, #20
 80064f2:	46b1      	mov	r9, r6
 80064f4:	2200      	movs	r2, #0
 80064f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80064fa:	f8d9 b000 	ldr.w	fp, [r9]
 80064fe:	b2a1      	uxth	r1, r4
 8006500:	fa1f fb8b 	uxth.w	fp, fp
 8006504:	fb0a b101 	mla	r1, sl, r1, fp
 8006508:	4411      	add	r1, r2
 800650a:	f8d9 2000 	ldr.w	r2, [r9]
 800650e:	0c24      	lsrs	r4, r4, #16
 8006510:	0c12      	lsrs	r2, r2, #16
 8006512:	fb0a 2404 	mla	r4, sl, r4, r2
 8006516:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800651a:	b289      	uxth	r1, r1
 800651c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006520:	45f4      	cmp	ip, lr
 8006522:	f849 1b04 	str.w	r1, [r9], #4
 8006526:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800652a:	d8e4      	bhi.n	80064f6 <__multiply+0xaa>
 800652c:	9901      	ldr	r1, [sp, #4]
 800652e:	5072      	str	r2, [r6, r1]
 8006530:	9a03      	ldr	r2, [sp, #12]
 8006532:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006536:	3304      	adds	r3, #4
 8006538:	f1b9 0f00 	cmp.w	r9, #0
 800653c:	d01f      	beq.n	800657e <__multiply+0x132>
 800653e:	6834      	ldr	r4, [r6, #0]
 8006540:	f105 0114 	add.w	r1, r5, #20
 8006544:	46b6      	mov	lr, r6
 8006546:	f04f 0a00 	mov.w	sl, #0
 800654a:	880a      	ldrh	r2, [r1, #0]
 800654c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006550:	fb09 b202 	mla	r2, r9, r2, fp
 8006554:	4492      	add	sl, r2
 8006556:	b2a4      	uxth	r4, r4
 8006558:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800655c:	f84e 4b04 	str.w	r4, [lr], #4
 8006560:	f851 4b04 	ldr.w	r4, [r1], #4
 8006564:	f8be 2000 	ldrh.w	r2, [lr]
 8006568:	0c24      	lsrs	r4, r4, #16
 800656a:	fb09 2404 	mla	r4, r9, r4, r2
 800656e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006572:	458c      	cmp	ip, r1
 8006574:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006578:	d8e7      	bhi.n	800654a <__multiply+0xfe>
 800657a:	9a01      	ldr	r2, [sp, #4]
 800657c:	50b4      	str	r4, [r6, r2]
 800657e:	3604      	adds	r6, #4
 8006580:	e7a3      	b.n	80064ca <__multiply+0x7e>
 8006582:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1a5      	bne.n	80064d6 <__multiply+0x8a>
 800658a:	3f01      	subs	r7, #1
 800658c:	e7a1      	b.n	80064d2 <__multiply+0x86>
 800658e:	bf00      	nop
 8006590:	0800851b 	.word	0x0800851b
 8006594:	0800858c 	.word	0x0800858c

08006598 <__pow5mult>:
 8006598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800659c:	4615      	mov	r5, r2
 800659e:	f012 0203 	ands.w	r2, r2, #3
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	d007      	beq.n	80065b8 <__pow5mult+0x20>
 80065a8:	4c25      	ldr	r4, [pc, #148]	; (8006640 <__pow5mult+0xa8>)
 80065aa:	3a01      	subs	r2, #1
 80065ac:	2300      	movs	r3, #0
 80065ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065b2:	f7ff fe9b 	bl	80062ec <__multadd>
 80065b6:	4607      	mov	r7, r0
 80065b8:	10ad      	asrs	r5, r5, #2
 80065ba:	d03d      	beq.n	8006638 <__pow5mult+0xa0>
 80065bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065be:	b97c      	cbnz	r4, 80065e0 <__pow5mult+0x48>
 80065c0:	2010      	movs	r0, #16
 80065c2:	f7ff fe1b 	bl	80061fc <malloc>
 80065c6:	4602      	mov	r2, r0
 80065c8:	6270      	str	r0, [r6, #36]	; 0x24
 80065ca:	b928      	cbnz	r0, 80065d8 <__pow5mult+0x40>
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <__pow5mult+0xac>)
 80065ce:	481e      	ldr	r0, [pc, #120]	; (8006648 <__pow5mult+0xb0>)
 80065d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065d4:	f000 fce0 	bl	8006f98 <__assert_func>
 80065d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065dc:	6004      	str	r4, [r0, #0]
 80065de:	60c4      	str	r4, [r0, #12]
 80065e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065e8:	b94c      	cbnz	r4, 80065fe <__pow5mult+0x66>
 80065ea:	f240 2171 	movw	r1, #625	; 0x271
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff ff16 	bl	8006420 <__i2b>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80065fa:	4604      	mov	r4, r0
 80065fc:	6003      	str	r3, [r0, #0]
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	07eb      	lsls	r3, r5, #31
 8006604:	d50a      	bpl.n	800661c <__pow5mult+0x84>
 8006606:	4639      	mov	r1, r7
 8006608:	4622      	mov	r2, r4
 800660a:	4630      	mov	r0, r6
 800660c:	f7ff ff1e 	bl	800644c <__multiply>
 8006610:	4639      	mov	r1, r7
 8006612:	4680      	mov	r8, r0
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff fe47 	bl	80062a8 <_Bfree>
 800661a:	4647      	mov	r7, r8
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	d00b      	beq.n	8006638 <__pow5mult+0xa0>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	b938      	cbnz	r0, 8006634 <__pow5mult+0x9c>
 8006624:	4622      	mov	r2, r4
 8006626:	4621      	mov	r1, r4
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff ff0f 	bl	800644c <__multiply>
 800662e:	6020      	str	r0, [r4, #0]
 8006630:	f8c0 9000 	str.w	r9, [r0]
 8006634:	4604      	mov	r4, r0
 8006636:	e7e4      	b.n	8006602 <__pow5mult+0x6a>
 8006638:	4638      	mov	r0, r7
 800663a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663e:	bf00      	nop
 8006640:	080086e0 	.word	0x080086e0
 8006644:	080084a5 	.word	0x080084a5
 8006648:	0800858c 	.word	0x0800858c

0800664c <__lshift>:
 800664c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	460c      	mov	r4, r1
 8006652:	6849      	ldr	r1, [r1, #4]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	4607      	mov	r7, r0
 800665e:	4691      	mov	r9, r2
 8006660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006664:	f108 0601 	add.w	r6, r8, #1
 8006668:	42b3      	cmp	r3, r6
 800666a:	db0b      	blt.n	8006684 <__lshift+0x38>
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff fddb 	bl	8006228 <_Balloc>
 8006672:	4605      	mov	r5, r0
 8006674:	b948      	cbnz	r0, 800668a <__lshift+0x3e>
 8006676:	4602      	mov	r2, r0
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <__lshift+0xd0>)
 800667a:	4829      	ldr	r0, [pc, #164]	; (8006720 <__lshift+0xd4>)
 800667c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006680:	f000 fc8a 	bl	8006f98 <__assert_func>
 8006684:	3101      	adds	r1, #1
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	e7ee      	b.n	8006668 <__lshift+0x1c>
 800668a:	2300      	movs	r3, #0
 800668c:	f100 0114 	add.w	r1, r0, #20
 8006690:	f100 0210 	add.w	r2, r0, #16
 8006694:	4618      	mov	r0, r3
 8006696:	4553      	cmp	r3, sl
 8006698:	db33      	blt.n	8006702 <__lshift+0xb6>
 800669a:	6920      	ldr	r0, [r4, #16]
 800669c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a0:	f104 0314 	add.w	r3, r4, #20
 80066a4:	f019 091f 	ands.w	r9, r9, #31
 80066a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066b0:	d02b      	beq.n	800670a <__lshift+0xbe>
 80066b2:	f1c9 0e20 	rsb	lr, r9, #32
 80066b6:	468a      	mov	sl, r1
 80066b8:	2200      	movs	r2, #0
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	fa00 f009 	lsl.w	r0, r0, r9
 80066c0:	4302      	orrs	r2, r0
 80066c2:	f84a 2b04 	str.w	r2, [sl], #4
 80066c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ca:	459c      	cmp	ip, r3
 80066cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80066d0:	d8f3      	bhi.n	80066ba <__lshift+0x6e>
 80066d2:	ebac 0304 	sub.w	r3, ip, r4
 80066d6:	3b15      	subs	r3, #21
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	3304      	adds	r3, #4
 80066de:	f104 0015 	add.w	r0, r4, #21
 80066e2:	4584      	cmp	ip, r0
 80066e4:	bf38      	it	cc
 80066e6:	2304      	movcc	r3, #4
 80066e8:	50ca      	str	r2, [r1, r3]
 80066ea:	b10a      	cbz	r2, 80066f0 <__lshift+0xa4>
 80066ec:	f108 0602 	add.w	r6, r8, #2
 80066f0:	3e01      	subs	r6, #1
 80066f2:	4638      	mov	r0, r7
 80066f4:	612e      	str	r6, [r5, #16]
 80066f6:	4621      	mov	r1, r4
 80066f8:	f7ff fdd6 	bl	80062a8 <_Bfree>
 80066fc:	4628      	mov	r0, r5
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	f842 0f04 	str.w	r0, [r2, #4]!
 8006706:	3301      	adds	r3, #1
 8006708:	e7c5      	b.n	8006696 <__lshift+0x4a>
 800670a:	3904      	subs	r1, #4
 800670c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006710:	f841 2f04 	str.w	r2, [r1, #4]!
 8006714:	459c      	cmp	ip, r3
 8006716:	d8f9      	bhi.n	800670c <__lshift+0xc0>
 8006718:	e7ea      	b.n	80066f0 <__lshift+0xa4>
 800671a:	bf00      	nop
 800671c:	0800851b 	.word	0x0800851b
 8006720:	0800858c 	.word	0x0800858c

08006724 <__mcmp>:
 8006724:	b530      	push	{r4, r5, lr}
 8006726:	6902      	ldr	r2, [r0, #16]
 8006728:	690c      	ldr	r4, [r1, #16]
 800672a:	1b12      	subs	r2, r2, r4
 800672c:	d10e      	bne.n	800674c <__mcmp+0x28>
 800672e:	f100 0314 	add.w	r3, r0, #20
 8006732:	3114      	adds	r1, #20
 8006734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800673c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006744:	42a5      	cmp	r5, r4
 8006746:	d003      	beq.n	8006750 <__mcmp+0x2c>
 8006748:	d305      	bcc.n	8006756 <__mcmp+0x32>
 800674a:	2201      	movs	r2, #1
 800674c:	4610      	mov	r0, r2
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	4283      	cmp	r3, r0
 8006752:	d3f3      	bcc.n	800673c <__mcmp+0x18>
 8006754:	e7fa      	b.n	800674c <__mcmp+0x28>
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	e7f7      	b.n	800674c <__mcmp+0x28>

0800675c <__mdiff>:
 800675c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	460c      	mov	r4, r1
 8006762:	4606      	mov	r6, r0
 8006764:	4611      	mov	r1, r2
 8006766:	4620      	mov	r0, r4
 8006768:	4617      	mov	r7, r2
 800676a:	f7ff ffdb 	bl	8006724 <__mcmp>
 800676e:	1e05      	subs	r5, r0, #0
 8006770:	d110      	bne.n	8006794 <__mdiff+0x38>
 8006772:	4629      	mov	r1, r5
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff fd57 	bl	8006228 <_Balloc>
 800677a:	b930      	cbnz	r0, 800678a <__mdiff+0x2e>
 800677c:	4b39      	ldr	r3, [pc, #228]	; (8006864 <__mdiff+0x108>)
 800677e:	4602      	mov	r2, r0
 8006780:	f240 2132 	movw	r1, #562	; 0x232
 8006784:	4838      	ldr	r0, [pc, #224]	; (8006868 <__mdiff+0x10c>)
 8006786:	f000 fc07 	bl	8006f98 <__assert_func>
 800678a:	2301      	movs	r3, #1
 800678c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006794:	bfa4      	itt	ge
 8006796:	463b      	movge	r3, r7
 8006798:	4627      	movge	r7, r4
 800679a:	4630      	mov	r0, r6
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	bfa6      	itte	ge
 80067a0:	461c      	movge	r4, r3
 80067a2:	2500      	movge	r5, #0
 80067a4:	2501      	movlt	r5, #1
 80067a6:	f7ff fd3f 	bl	8006228 <_Balloc>
 80067aa:	b920      	cbnz	r0, 80067b6 <__mdiff+0x5a>
 80067ac:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <__mdiff+0x108>)
 80067ae:	4602      	mov	r2, r0
 80067b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067b4:	e7e6      	b.n	8006784 <__mdiff+0x28>
 80067b6:	693e      	ldr	r6, [r7, #16]
 80067b8:	60c5      	str	r5, [r0, #12]
 80067ba:	6925      	ldr	r5, [r4, #16]
 80067bc:	f107 0114 	add.w	r1, r7, #20
 80067c0:	f104 0914 	add.w	r9, r4, #20
 80067c4:	f100 0e14 	add.w	lr, r0, #20
 80067c8:	f107 0210 	add.w	r2, r7, #16
 80067cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80067d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80067d4:	46f2      	mov	sl, lr
 80067d6:	2700      	movs	r7, #0
 80067d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80067dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067e0:	fa1f f883 	uxth.w	r8, r3
 80067e4:	fa17 f78b 	uxtah	r7, r7, fp
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	eba7 0808 	sub.w	r8, r7, r8
 80067ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067f6:	fa1f f888 	uxth.w	r8, r8
 80067fa:	141f      	asrs	r7, r3, #16
 80067fc:	454d      	cmp	r5, r9
 80067fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006802:	f84a 3b04 	str.w	r3, [sl], #4
 8006806:	d8e7      	bhi.n	80067d8 <__mdiff+0x7c>
 8006808:	1b2b      	subs	r3, r5, r4
 800680a:	3b15      	subs	r3, #21
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	3304      	adds	r3, #4
 8006812:	3415      	adds	r4, #21
 8006814:	42a5      	cmp	r5, r4
 8006816:	bf38      	it	cc
 8006818:	2304      	movcc	r3, #4
 800681a:	4419      	add	r1, r3
 800681c:	4473      	add	r3, lr
 800681e:	469e      	mov	lr, r3
 8006820:	460d      	mov	r5, r1
 8006822:	4565      	cmp	r5, ip
 8006824:	d30e      	bcc.n	8006844 <__mdiff+0xe8>
 8006826:	f10c 0203 	add.w	r2, ip, #3
 800682a:	1a52      	subs	r2, r2, r1
 800682c:	f022 0203 	bic.w	r2, r2, #3
 8006830:	3903      	subs	r1, #3
 8006832:	458c      	cmp	ip, r1
 8006834:	bf38      	it	cc
 8006836:	2200      	movcc	r2, #0
 8006838:	441a      	add	r2, r3
 800683a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800683e:	b17b      	cbz	r3, 8006860 <__mdiff+0x104>
 8006840:	6106      	str	r6, [r0, #16]
 8006842:	e7a5      	b.n	8006790 <__mdiff+0x34>
 8006844:	f855 8b04 	ldr.w	r8, [r5], #4
 8006848:	fa17 f488 	uxtah	r4, r7, r8
 800684c:	1422      	asrs	r2, r4, #16
 800684e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006852:	b2a4      	uxth	r4, r4
 8006854:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006858:	f84e 4b04 	str.w	r4, [lr], #4
 800685c:	1417      	asrs	r7, r2, #16
 800685e:	e7e0      	b.n	8006822 <__mdiff+0xc6>
 8006860:	3e01      	subs	r6, #1
 8006862:	e7ea      	b.n	800683a <__mdiff+0xde>
 8006864:	0800851b 	.word	0x0800851b
 8006868:	0800858c 	.word	0x0800858c

0800686c <__d2b>:
 800686c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006870:	4689      	mov	r9, r1
 8006872:	2101      	movs	r1, #1
 8006874:	ec57 6b10 	vmov	r6, r7, d0
 8006878:	4690      	mov	r8, r2
 800687a:	f7ff fcd5 	bl	8006228 <_Balloc>
 800687e:	4604      	mov	r4, r0
 8006880:	b930      	cbnz	r0, 8006890 <__d2b+0x24>
 8006882:	4602      	mov	r2, r0
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <__d2b+0xb0>)
 8006886:	4826      	ldr	r0, [pc, #152]	; (8006920 <__d2b+0xb4>)
 8006888:	f240 310a 	movw	r1, #778	; 0x30a
 800688c:	f000 fb84 	bl	8006f98 <__assert_func>
 8006890:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006894:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006898:	bb35      	cbnz	r5, 80068e8 <__d2b+0x7c>
 800689a:	2e00      	cmp	r6, #0
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	d028      	beq.n	80068f2 <__d2b+0x86>
 80068a0:	4668      	mov	r0, sp
 80068a2:	9600      	str	r6, [sp, #0]
 80068a4:	f7ff fd8c 	bl	80063c0 <__lo0bits>
 80068a8:	9900      	ldr	r1, [sp, #0]
 80068aa:	b300      	cbz	r0, 80068ee <__d2b+0x82>
 80068ac:	9a01      	ldr	r2, [sp, #4]
 80068ae:	f1c0 0320 	rsb	r3, r0, #32
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	430b      	orrs	r3, r1
 80068b8:	40c2      	lsrs	r2, r0
 80068ba:	6163      	str	r3, [r4, #20]
 80068bc:	9201      	str	r2, [sp, #4]
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	61a3      	str	r3, [r4, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf14      	ite	ne
 80068c6:	2202      	movne	r2, #2
 80068c8:	2201      	moveq	r2, #1
 80068ca:	6122      	str	r2, [r4, #16]
 80068cc:	b1d5      	cbz	r5, 8006904 <__d2b+0x98>
 80068ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068d2:	4405      	add	r5, r0
 80068d4:	f8c9 5000 	str.w	r5, [r9]
 80068d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068dc:	f8c8 0000 	str.w	r0, [r8]
 80068e0:	4620      	mov	r0, r4
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ec:	e7d5      	b.n	800689a <__d2b+0x2e>
 80068ee:	6161      	str	r1, [r4, #20]
 80068f0:	e7e5      	b.n	80068be <__d2b+0x52>
 80068f2:	a801      	add	r0, sp, #4
 80068f4:	f7ff fd64 	bl	80063c0 <__lo0bits>
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	6163      	str	r3, [r4, #20]
 80068fc:	2201      	movs	r2, #1
 80068fe:	6122      	str	r2, [r4, #16]
 8006900:	3020      	adds	r0, #32
 8006902:	e7e3      	b.n	80068cc <__d2b+0x60>
 8006904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800690c:	f8c9 0000 	str.w	r0, [r9]
 8006910:	6918      	ldr	r0, [r3, #16]
 8006912:	f7ff fd35 	bl	8006380 <__hi0bits>
 8006916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800691a:	e7df      	b.n	80068dc <__d2b+0x70>
 800691c:	0800851b 	.word	0x0800851b
 8006920:	0800858c 	.word	0x0800858c

08006924 <_calloc_r>:
 8006924:	b513      	push	{r0, r1, r4, lr}
 8006926:	434a      	muls	r2, r1
 8006928:	4611      	mov	r1, r2
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	f000 f85a 	bl	80069e4 <_malloc_r>
 8006930:	4604      	mov	r4, r0
 8006932:	b118      	cbz	r0, 800693c <_calloc_r+0x18>
 8006934:	9a01      	ldr	r2, [sp, #4]
 8006936:	2100      	movs	r1, #0
 8006938:	f7fe f85e 	bl	80049f8 <memset>
 800693c:	4620      	mov	r0, r4
 800693e:	b002      	add	sp, #8
 8006940:	bd10      	pop	{r4, pc}
	...

08006944 <_free_r>:
 8006944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006946:	2900      	cmp	r1, #0
 8006948:	d048      	beq.n	80069dc <_free_r+0x98>
 800694a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f1a1 0404 	sub.w	r4, r1, #4
 8006956:	bfb8      	it	lt
 8006958:	18e4      	addlt	r4, r4, r3
 800695a:	f000 fca7 	bl	80072ac <__malloc_lock>
 800695e:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <_free_r+0x9c>)
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	4615      	mov	r5, r2
 8006966:	b933      	cbnz	r3, 8006976 <_free_r+0x32>
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6014      	str	r4, [r2, #0]
 800696c:	b003      	add	sp, #12
 800696e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006972:	f000 bca1 	b.w	80072b8 <__malloc_unlock>
 8006976:	42a3      	cmp	r3, r4
 8006978:	d90b      	bls.n	8006992 <_free_r+0x4e>
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	1862      	adds	r2, r4, r1
 800697e:	4293      	cmp	r3, r2
 8006980:	bf04      	itt	eq
 8006982:	681a      	ldreq	r2, [r3, #0]
 8006984:	685b      	ldreq	r3, [r3, #4]
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	bf04      	itt	eq
 800698a:	1852      	addeq	r2, r2, r1
 800698c:	6022      	streq	r2, [r4, #0]
 800698e:	602c      	str	r4, [r5, #0]
 8006990:	e7ec      	b.n	800696c <_free_r+0x28>
 8006992:	461a      	mov	r2, r3
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b10b      	cbz	r3, 800699c <_free_r+0x58>
 8006998:	42a3      	cmp	r3, r4
 800699a:	d9fa      	bls.n	8006992 <_free_r+0x4e>
 800699c:	6811      	ldr	r1, [r2, #0]
 800699e:	1855      	adds	r5, r2, r1
 80069a0:	42a5      	cmp	r5, r4
 80069a2:	d10b      	bne.n	80069bc <_free_r+0x78>
 80069a4:	6824      	ldr	r4, [r4, #0]
 80069a6:	4421      	add	r1, r4
 80069a8:	1854      	adds	r4, r2, r1
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	d1dd      	bne.n	800696c <_free_r+0x28>
 80069b0:	681c      	ldr	r4, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	6053      	str	r3, [r2, #4]
 80069b6:	4421      	add	r1, r4
 80069b8:	6011      	str	r1, [r2, #0]
 80069ba:	e7d7      	b.n	800696c <_free_r+0x28>
 80069bc:	d902      	bls.n	80069c4 <_free_r+0x80>
 80069be:	230c      	movs	r3, #12
 80069c0:	6003      	str	r3, [r0, #0]
 80069c2:	e7d3      	b.n	800696c <_free_r+0x28>
 80069c4:	6825      	ldr	r5, [r4, #0]
 80069c6:	1961      	adds	r1, r4, r5
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf04      	itt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	bf04      	itt	eq
 80069d4:	1949      	addeq	r1, r1, r5
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	6054      	str	r4, [r2, #4]
 80069da:	e7c7      	b.n	800696c <_free_r+0x28>
 80069dc:	b003      	add	sp, #12
 80069de:	bd30      	pop	{r4, r5, pc}
 80069e0:	20000208 	.word	0x20000208

080069e4 <_malloc_r>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	1ccd      	adds	r5, r1, #3
 80069e8:	f025 0503 	bic.w	r5, r5, #3
 80069ec:	3508      	adds	r5, #8
 80069ee:	2d0c      	cmp	r5, #12
 80069f0:	bf38      	it	cc
 80069f2:	250c      	movcc	r5, #12
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	4606      	mov	r6, r0
 80069f8:	db01      	blt.n	80069fe <_malloc_r+0x1a>
 80069fa:	42a9      	cmp	r1, r5
 80069fc:	d903      	bls.n	8006a06 <_malloc_r+0x22>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	2000      	movs	r0, #0
 8006a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a06:	f000 fc51 	bl	80072ac <__malloc_lock>
 8006a0a:	4921      	ldr	r1, [pc, #132]	; (8006a90 <_malloc_r+0xac>)
 8006a0c:	680a      	ldr	r2, [r1, #0]
 8006a0e:	4614      	mov	r4, r2
 8006a10:	b99c      	cbnz	r4, 8006a3a <_malloc_r+0x56>
 8006a12:	4f20      	ldr	r7, [pc, #128]	; (8006a94 <_malloc_r+0xb0>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	b923      	cbnz	r3, 8006a22 <_malloc_r+0x3e>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f000 f996 	bl	8006d4c <_sbrk_r>
 8006a20:	6038      	str	r0, [r7, #0]
 8006a22:	4629      	mov	r1, r5
 8006a24:	4630      	mov	r0, r6
 8006a26:	f000 f991 	bl	8006d4c <_sbrk_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d123      	bne.n	8006a76 <_malloc_r+0x92>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 fc40 	bl	80072b8 <__malloc_unlock>
 8006a38:	e7e3      	b.n	8006a02 <_malloc_r+0x1e>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	1b5b      	subs	r3, r3, r5
 8006a3e:	d417      	bmi.n	8006a70 <_malloc_r+0x8c>
 8006a40:	2b0b      	cmp	r3, #11
 8006a42:	d903      	bls.n	8006a4c <_malloc_r+0x68>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	441c      	add	r4, r3
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	e004      	b.n	8006a56 <_malloc_r+0x72>
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	42a2      	cmp	r2, r4
 8006a50:	bf0c      	ite	eq
 8006a52:	600b      	streq	r3, [r1, #0]
 8006a54:	6053      	strne	r3, [r2, #4]
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 fc2e 	bl	80072b8 <__malloc_unlock>
 8006a5c:	f104 000b 	add.w	r0, r4, #11
 8006a60:	1d23      	adds	r3, r4, #4
 8006a62:	f020 0007 	bic.w	r0, r0, #7
 8006a66:	1ac2      	subs	r2, r0, r3
 8006a68:	d0cc      	beq.n	8006a04 <_malloc_r+0x20>
 8006a6a:	1a1b      	subs	r3, r3, r0
 8006a6c:	50a3      	str	r3, [r4, r2]
 8006a6e:	e7c9      	b.n	8006a04 <_malloc_r+0x20>
 8006a70:	4622      	mov	r2, r4
 8006a72:	6864      	ldr	r4, [r4, #4]
 8006a74:	e7cc      	b.n	8006a10 <_malloc_r+0x2c>
 8006a76:	1cc4      	adds	r4, r0, #3
 8006a78:	f024 0403 	bic.w	r4, r4, #3
 8006a7c:	42a0      	cmp	r0, r4
 8006a7e:	d0e3      	beq.n	8006a48 <_malloc_r+0x64>
 8006a80:	1a21      	subs	r1, r4, r0
 8006a82:	4630      	mov	r0, r6
 8006a84:	f000 f962 	bl	8006d4c <_sbrk_r>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d1dd      	bne.n	8006a48 <_malloc_r+0x64>
 8006a8c:	e7cf      	b.n	8006a2e <_malloc_r+0x4a>
 8006a8e:	bf00      	nop
 8006a90:	20000208 	.word	0x20000208
 8006a94:	2000020c 	.word	0x2000020c

08006a98 <__sfputc_r>:
 8006a98:	6893      	ldr	r3, [r2, #8]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	b410      	push	{r4}
 8006aa0:	6093      	str	r3, [r2, #8]
 8006aa2:	da08      	bge.n	8006ab6 <__sfputc_r+0x1e>
 8006aa4:	6994      	ldr	r4, [r2, #24]
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	db01      	blt.n	8006aae <__sfputc_r+0x16>
 8006aaa:	290a      	cmp	r1, #10
 8006aac:	d103      	bne.n	8006ab6 <__sfputc_r+0x1e>
 8006aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab2:	f000 b99f 	b.w	8006df4 <__swbuf_r>
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	1c58      	adds	r0, r3, #1
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	7019      	strb	r1, [r3, #0]
 8006abe:	4608      	mov	r0, r1
 8006ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <__sfputs_r>:
 8006ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
 8006acc:	4614      	mov	r4, r2
 8006ace:	18d5      	adds	r5, r2, r3
 8006ad0:	42ac      	cmp	r4, r5
 8006ad2:	d101      	bne.n	8006ad8 <__sfputs_r+0x12>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e007      	b.n	8006ae8 <__sfputs_r+0x22>
 8006ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006adc:	463a      	mov	r2, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f7ff ffda 	bl	8006a98 <__sfputc_r>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d1f3      	bne.n	8006ad0 <__sfputs_r+0xa>
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aec <_vfiprintf_r>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	460d      	mov	r5, r1
 8006af2:	b09d      	sub	sp, #116	; 0x74
 8006af4:	4614      	mov	r4, r2
 8006af6:	4698      	mov	r8, r3
 8006af8:	4606      	mov	r6, r0
 8006afa:	b118      	cbz	r0, 8006b04 <_vfiprintf_r+0x18>
 8006afc:	6983      	ldr	r3, [r0, #24]
 8006afe:	b90b      	cbnz	r3, 8006b04 <_vfiprintf_r+0x18>
 8006b00:	f7ff fad6 	bl	80060b0 <__sinit>
 8006b04:	4b89      	ldr	r3, [pc, #548]	; (8006d2c <_vfiprintf_r+0x240>)
 8006b06:	429d      	cmp	r5, r3
 8006b08:	d11b      	bne.n	8006b42 <_vfiprintf_r+0x56>
 8006b0a:	6875      	ldr	r5, [r6, #4]
 8006b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0e:	07d9      	lsls	r1, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_vfiprintf_r+0x32>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	059a      	lsls	r2, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_vfiprintf_r+0x32>
 8006b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b1a:	f7ff fb6c 	bl	80061f6 <__retarget_lock_acquire_recursive>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	071b      	lsls	r3, r3, #28
 8006b22:	d501      	bpl.n	8006b28 <_vfiprintf_r+0x3c>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	b9eb      	cbnz	r3, 8006b64 <_vfiprintf_r+0x78>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f9c6 	bl	8006ebc <__swsetup_r>
 8006b30:	b1c0      	cbz	r0, 8006b64 <_vfiprintf_r+0x78>
 8006b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b34:	07dc      	lsls	r4, r3, #31
 8006b36:	d50e      	bpl.n	8006b56 <_vfiprintf_r+0x6a>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	b01d      	add	sp, #116	; 0x74
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	4b7b      	ldr	r3, [pc, #492]	; (8006d30 <_vfiprintf_r+0x244>)
 8006b44:	429d      	cmp	r5, r3
 8006b46:	d101      	bne.n	8006b4c <_vfiprintf_r+0x60>
 8006b48:	68b5      	ldr	r5, [r6, #8]
 8006b4a:	e7df      	b.n	8006b0c <_vfiprintf_r+0x20>
 8006b4c:	4b79      	ldr	r3, [pc, #484]	; (8006d34 <_vfiprintf_r+0x248>)
 8006b4e:	429d      	cmp	r5, r3
 8006b50:	bf08      	it	eq
 8006b52:	68f5      	ldreq	r5, [r6, #12]
 8006b54:	e7da      	b.n	8006b0c <_vfiprintf_r+0x20>
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	0598      	lsls	r0, r3, #22
 8006b5a:	d4ed      	bmi.n	8006b38 <_vfiprintf_r+0x4c>
 8006b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b5e:	f7ff fb4b 	bl	80061f8 <__retarget_lock_release_recursive>
 8006b62:	e7e9      	b.n	8006b38 <_vfiprintf_r+0x4c>
 8006b64:	2300      	movs	r3, #0
 8006b66:	9309      	str	r3, [sp, #36]	; 0x24
 8006b68:	2320      	movs	r3, #32
 8006b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b72:	2330      	movs	r3, #48	; 0x30
 8006b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d38 <_vfiprintf_r+0x24c>
 8006b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b7c:	f04f 0901 	mov.w	r9, #1
 8006b80:	4623      	mov	r3, r4
 8006b82:	469a      	mov	sl, r3
 8006b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b88:	b10a      	cbz	r2, 8006b8e <_vfiprintf_r+0xa2>
 8006b8a:	2a25      	cmp	r2, #37	; 0x25
 8006b8c:	d1f9      	bne.n	8006b82 <_vfiprintf_r+0x96>
 8006b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b92:	d00b      	beq.n	8006bac <_vfiprintf_r+0xc0>
 8006b94:	465b      	mov	r3, fp
 8006b96:	4622      	mov	r2, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ff93 	bl	8006ac6 <__sfputs_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f000 80aa 	beq.w	8006cfa <_vfiprintf_r+0x20e>
 8006ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba8:	445a      	add	r2, fp
 8006baa:	9209      	str	r2, [sp, #36]	; 0x24
 8006bac:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a2 	beq.w	8006cfa <_vfiprintf_r+0x20e>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc0:	f10a 0a01 	add.w	sl, sl, #1
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2205      	movs	r2, #5
 8006bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd6:	4858      	ldr	r0, [pc, #352]	; (8006d38 <_vfiprintf_r+0x24c>)
 8006bd8:	f7f9 fb2a 	bl	8000230 <memchr>
 8006bdc:	9a04      	ldr	r2, [sp, #16]
 8006bde:	b9d8      	cbnz	r0, 8006c18 <_vfiprintf_r+0x12c>
 8006be0:	06d1      	lsls	r1, r2, #27
 8006be2:	bf44      	itt	mi
 8006be4:	2320      	movmi	r3, #32
 8006be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bea:	0713      	lsls	r3, r2, #28
 8006bec:	bf44      	itt	mi
 8006bee:	232b      	movmi	r3, #43	; 0x2b
 8006bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfa:	d015      	beq.n	8006c28 <_vfiprintf_r+0x13c>
 8006bfc:	9a07      	ldr	r2, [sp, #28]
 8006bfe:	4654      	mov	r4, sl
 8006c00:	2000      	movs	r0, #0
 8006c02:	f04f 0c0a 	mov.w	ip, #10
 8006c06:	4621      	mov	r1, r4
 8006c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0c:	3b30      	subs	r3, #48	; 0x30
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d94e      	bls.n	8006cb0 <_vfiprintf_r+0x1c4>
 8006c12:	b1b0      	cbz	r0, 8006c42 <_vfiprintf_r+0x156>
 8006c14:	9207      	str	r2, [sp, #28]
 8006c16:	e014      	b.n	8006c42 <_vfiprintf_r+0x156>
 8006c18:	eba0 0308 	sub.w	r3, r0, r8
 8006c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	46a2      	mov	sl, r4
 8006c26:	e7d2      	b.n	8006bce <_vfiprintf_r+0xe2>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	1d19      	adds	r1, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9103      	str	r1, [sp, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfbb      	ittet	lt
 8006c34:	425b      	neglt	r3, r3
 8006c36:	f042 0202 	orrlt.w	r2, r2, #2
 8006c3a:	9307      	strge	r3, [sp, #28]
 8006c3c:	9307      	strlt	r3, [sp, #28]
 8006c3e:	bfb8      	it	lt
 8006c40:	9204      	strlt	r2, [sp, #16]
 8006c42:	7823      	ldrb	r3, [r4, #0]
 8006c44:	2b2e      	cmp	r3, #46	; 0x2e
 8006c46:	d10c      	bne.n	8006c62 <_vfiprintf_r+0x176>
 8006c48:	7863      	ldrb	r3, [r4, #1]
 8006c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4c:	d135      	bne.n	8006cba <_vfiprintf_r+0x1ce>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d1a      	adds	r2, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9203      	str	r2, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c5e:	3402      	adds	r4, #2
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d48 <_vfiprintf_r+0x25c>
 8006c66:	7821      	ldrb	r1, [r4, #0]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f7f9 fae0 	bl	8000230 <memchr>
 8006c70:	b140      	cbz	r0, 8006c84 <_vfiprintf_r+0x198>
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	eba0 000a 	sub.w	r0, r0, sl
 8006c78:	fa03 f000 	lsl.w	r0, r3, r0
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	4303      	orrs	r3, r0
 8006c80:	3401      	adds	r4, #1
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	482c      	ldr	r0, [pc, #176]	; (8006d3c <_vfiprintf_r+0x250>)
 8006c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c8e:	2206      	movs	r2, #6
 8006c90:	f7f9 face 	bl	8000230 <memchr>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d03f      	beq.n	8006d18 <_vfiprintf_r+0x22c>
 8006c98:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <_vfiprintf_r+0x254>)
 8006c9a:	bb1b      	cbnz	r3, 8006ce4 <_vfiprintf_r+0x1f8>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	3307      	adds	r3, #7
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006caa:	443b      	add	r3, r7
 8006cac:	9309      	str	r3, [sp, #36]	; 0x24
 8006cae:	e767      	b.n	8006b80 <_vfiprintf_r+0x94>
 8006cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e7a5      	b.n	8006c06 <_vfiprintf_r+0x11a>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	3401      	adds	r4, #1
 8006cbe:	9305      	str	r3, [sp, #20]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ccc:	3a30      	subs	r2, #48	; 0x30
 8006cce:	2a09      	cmp	r2, #9
 8006cd0:	d903      	bls.n	8006cda <_vfiprintf_r+0x1ee>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0c5      	beq.n	8006c62 <_vfiprintf_r+0x176>
 8006cd6:	9105      	str	r1, [sp, #20]
 8006cd8:	e7c3      	b.n	8006c62 <_vfiprintf_r+0x176>
 8006cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cde:	4604      	mov	r4, r0
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e7f0      	b.n	8006cc6 <_vfiprintf_r+0x1da>
 8006ce4:	ab03      	add	r3, sp, #12
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <_vfiprintf_r+0x258>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7fd ff2a 	bl	8004b48 <_printf_float>
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	1c78      	adds	r0, r7, #1
 8006cf8:	d1d6      	bne.n	8006ca8 <_vfiprintf_r+0x1bc>
 8006cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cfc:	07d9      	lsls	r1, r3, #31
 8006cfe:	d405      	bmi.n	8006d0c <_vfiprintf_r+0x220>
 8006d00:	89ab      	ldrh	r3, [r5, #12]
 8006d02:	059a      	lsls	r2, r3, #22
 8006d04:	d402      	bmi.n	8006d0c <_vfiprintf_r+0x220>
 8006d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d08:	f7ff fa76 	bl	80061f8 <__retarget_lock_release_recursive>
 8006d0c:	89ab      	ldrh	r3, [r5, #12]
 8006d0e:	065b      	lsls	r3, r3, #25
 8006d10:	f53f af12 	bmi.w	8006b38 <_vfiprintf_r+0x4c>
 8006d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d16:	e711      	b.n	8006b3c <_vfiprintf_r+0x50>
 8006d18:	ab03      	add	r3, sp, #12
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <_vfiprintf_r+0x258>)
 8006d20:	a904      	add	r1, sp, #16
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7fe f9b4 	bl	8005090 <_printf_i>
 8006d28:	e7e4      	b.n	8006cf4 <_vfiprintf_r+0x208>
 8006d2a:	bf00      	nop
 8006d2c:	0800854c 	.word	0x0800854c
 8006d30:	0800856c 	.word	0x0800856c
 8006d34:	0800852c 	.word	0x0800852c
 8006d38:	080086ec 	.word	0x080086ec
 8006d3c:	080086f6 	.word	0x080086f6
 8006d40:	08004b49 	.word	0x08004b49
 8006d44:	08006ac7 	.word	0x08006ac7
 8006d48:	080086f2 	.word	0x080086f2

08006d4c <_sbrk_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	; (8006d68 <_sbrk_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fe50 	bl	80019fc <_sbrk>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_sbrk_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_sbrk_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200003c4 	.word	0x200003c4

08006d6c <__sread>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	f000 faa6 	bl	80072c4 <_read_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	bfab      	itete	ge
 8006d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d80:	181b      	addge	r3, r3, r0
 8006d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d86:	bfac      	ite	ge
 8006d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d8a:	81a3      	strhlt	r3, [r4, #12]
 8006d8c:	bd10      	pop	{r4, pc}

08006d8e <__swrite>:
 8006d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	461f      	mov	r7, r3
 8006d94:	898b      	ldrh	r3, [r1, #12]
 8006d96:	05db      	lsls	r3, r3, #23
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	d505      	bpl.n	8006dac <__swrite+0x1e>
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	2302      	movs	r3, #2
 8006da6:	2200      	movs	r2, #0
 8006da8:	f000 f9f8 	bl	800719c <_lseek_r>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc2:	f000 b869 	b.w	8006e98 <_write_r>

08006dc6 <__sseek>:
 8006dc6:	b510      	push	{r4, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 f9e5 	bl	800719c <_lseek_r>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	bf15      	itete	ne
 8006dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006de2:	81a3      	strheq	r3, [r4, #12]
 8006de4:	bf18      	it	ne
 8006de6:	81a3      	strhne	r3, [r4, #12]
 8006de8:	bd10      	pop	{r4, pc}

08006dea <__sclose>:
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 b8f1 	b.w	8006fd4 <_close_r>
	...

08006df4 <__swbuf_r>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	4614      	mov	r4, r2
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b118      	cbz	r0, 8006e06 <__swbuf_r+0x12>
 8006dfe:	6983      	ldr	r3, [r0, #24]
 8006e00:	b90b      	cbnz	r3, 8006e06 <__swbuf_r+0x12>
 8006e02:	f7ff f955 	bl	80060b0 <__sinit>
 8006e06:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <__swbuf_r+0x98>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	d12b      	bne.n	8006e64 <__swbuf_r+0x70>
 8006e0c:	686c      	ldr	r4, [r5, #4]
 8006e0e:	69a3      	ldr	r3, [r4, #24]
 8006e10:	60a3      	str	r3, [r4, #8]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	071a      	lsls	r2, r3, #28
 8006e16:	d52f      	bpl.n	8006e78 <__swbuf_r+0x84>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	b36b      	cbz	r3, 8006e78 <__swbuf_r+0x84>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	1ac0      	subs	r0, r0, r3
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	b2f6      	uxtb	r6, r6
 8006e26:	4283      	cmp	r3, r0
 8006e28:	4637      	mov	r7, r6
 8006e2a:	dc04      	bgt.n	8006e36 <__swbuf_r+0x42>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f966 	bl	8007100 <_fflush_r>
 8006e34:	bb30      	cbnz	r0, 8006e84 <__swbuf_r+0x90>
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	701e      	strb	r6, [r3, #0]
 8006e44:	6963      	ldr	r3, [r4, #20]
 8006e46:	3001      	adds	r0, #1
 8006e48:	4283      	cmp	r3, r0
 8006e4a:	d004      	beq.n	8006e56 <__swbuf_r+0x62>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	07db      	lsls	r3, r3, #31
 8006e50:	d506      	bpl.n	8006e60 <__swbuf_r+0x6c>
 8006e52:	2e0a      	cmp	r6, #10
 8006e54:	d104      	bne.n	8006e60 <__swbuf_r+0x6c>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f951 	bl	8007100 <_fflush_r>
 8006e5e:	b988      	cbnz	r0, 8006e84 <__swbuf_r+0x90>
 8006e60:	4638      	mov	r0, r7
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <__swbuf_r+0x9c>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d101      	bne.n	8006e6e <__swbuf_r+0x7a>
 8006e6a:	68ac      	ldr	r4, [r5, #8]
 8006e6c:	e7cf      	b.n	8006e0e <__swbuf_r+0x1a>
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <__swbuf_r+0xa0>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	bf08      	it	eq
 8006e74:	68ec      	ldreq	r4, [r5, #12]
 8006e76:	e7ca      	b.n	8006e0e <__swbuf_r+0x1a>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 f81e 	bl	8006ebc <__swsetup_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d0cb      	beq.n	8006e1c <__swbuf_r+0x28>
 8006e84:	f04f 37ff 	mov.w	r7, #4294967295
 8006e88:	e7ea      	b.n	8006e60 <__swbuf_r+0x6c>
 8006e8a:	bf00      	nop
 8006e8c:	0800854c 	.word	0x0800854c
 8006e90:	0800856c 	.word	0x0800856c
 8006e94:	0800852c 	.word	0x0800852c

08006e98 <_write_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d07      	ldr	r5, [pc, #28]	; (8006eb8 <_write_r+0x20>)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7fa fd57 	bl	800195a <_write>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_write_r+0x1e>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_write_r+0x1e>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200003c4 	.word	0x200003c4

08006ebc <__swsetup_r>:
 8006ebc:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <__swsetup_r+0xcc>)
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	b125      	cbz	r5, 8006ed2 <__swsetup_r+0x16>
 8006ec8:	69ab      	ldr	r3, [r5, #24]
 8006eca:	b913      	cbnz	r3, 8006ed2 <__swsetup_r+0x16>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff f8ef 	bl	80060b0 <__sinit>
 8006ed2:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <__swsetup_r+0xd0>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d10f      	bne.n	8006ef8 <__swsetup_r+0x3c>
 8006ed8:	686c      	ldr	r4, [r5, #4]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ee0:	0719      	lsls	r1, r3, #28
 8006ee2:	d42c      	bmi.n	8006f3e <__swsetup_r+0x82>
 8006ee4:	06dd      	lsls	r5, r3, #27
 8006ee6:	d411      	bmi.n	8006f0c <__swsetup_r+0x50>
 8006ee8:	2309      	movs	r3, #9
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	e03e      	b.n	8006f76 <__swsetup_r+0xba>
 8006ef8:	4b25      	ldr	r3, [pc, #148]	; (8006f90 <__swsetup_r+0xd4>)
 8006efa:	429c      	cmp	r4, r3
 8006efc:	d101      	bne.n	8006f02 <__swsetup_r+0x46>
 8006efe:	68ac      	ldr	r4, [r5, #8]
 8006f00:	e7eb      	b.n	8006eda <__swsetup_r+0x1e>
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <__swsetup_r+0xd8>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	bf08      	it	eq
 8006f08:	68ec      	ldreq	r4, [r5, #12]
 8006f0a:	e7e6      	b.n	8006eda <__swsetup_r+0x1e>
 8006f0c:	0758      	lsls	r0, r3, #29
 8006f0e:	d512      	bpl.n	8006f36 <__swsetup_r+0x7a>
 8006f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f12:	b141      	cbz	r1, 8006f26 <__swsetup_r+0x6a>
 8006f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <__swsetup_r+0x66>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff fd11 	bl	8006944 <_free_r>
 8006f22:	2300      	movs	r3, #0
 8006f24:	6363      	str	r3, [r4, #52]	; 0x34
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f043 0308 	orr.w	r3, r3, #8
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	b94b      	cbnz	r3, 8006f56 <__swsetup_r+0x9a>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d003      	beq.n	8006f56 <__swsetup_r+0x9a>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 f959 	bl	8007208 <__smakebuf_r>
 8006f56:	89a0      	ldrh	r0, [r4, #12]
 8006f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f5c:	f010 0301 	ands.w	r3, r0, #1
 8006f60:	d00a      	beq.n	8006f78 <__swsetup_r+0xbc>
 8006f62:	2300      	movs	r3, #0
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	6963      	ldr	r3, [r4, #20]
 8006f68:	425b      	negs	r3, r3
 8006f6a:	61a3      	str	r3, [r4, #24]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b943      	cbnz	r3, 8006f82 <__swsetup_r+0xc6>
 8006f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f74:	d1ba      	bne.n	8006eec <__swsetup_r+0x30>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	0781      	lsls	r1, r0, #30
 8006f7a:	bf58      	it	pl
 8006f7c:	6963      	ldrpl	r3, [r4, #20]
 8006f7e:	60a3      	str	r3, [r4, #8]
 8006f80:	e7f4      	b.n	8006f6c <__swsetup_r+0xb0>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e7f7      	b.n	8006f76 <__swsetup_r+0xba>
 8006f86:	bf00      	nop
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	0800854c 	.word	0x0800854c
 8006f90:	0800856c 	.word	0x0800856c
 8006f94:	0800852c 	.word	0x0800852c

08006f98 <__assert_func>:
 8006f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__assert_func+0x2c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	68d8      	ldr	r0, [r3, #12]
 8006fa6:	b14c      	cbz	r4, 8006fbc <__assert_func+0x24>
 8006fa8:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <__assert_func+0x30>)
 8006faa:	9100      	str	r1, [sp, #0]
 8006fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb0:	4906      	ldr	r1, [pc, #24]	; (8006fcc <__assert_func+0x34>)
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	f000 f8e0 	bl	8007178 <fiprintf>
 8006fb8:	f000 f9a3 	bl	8007302 <abort>
 8006fbc:	4b04      	ldr	r3, [pc, #16]	; (8006fd0 <__assert_func+0x38>)
 8006fbe:	461c      	mov	r4, r3
 8006fc0:	e7f3      	b.n	8006faa <__assert_func+0x12>
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
 8006fc8:	080086fd 	.word	0x080086fd
 8006fcc:	0800870a 	.word	0x0800870a
 8006fd0:	08008738 	.word	0x08008738

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	; (8006ff0 <_close_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa fcd7 	bl	8001992 <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	200003c4 	.word	0x200003c4

08006ff4 <__sflush_r>:
 8006ff4:	898a      	ldrh	r2, [r1, #12]
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	0710      	lsls	r0, r2, #28
 8006ffe:	460c      	mov	r4, r1
 8007000:	d458      	bmi.n	80070b4 <__sflush_r+0xc0>
 8007002:	684b      	ldr	r3, [r1, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc05      	bgt.n	8007014 <__sflush_r+0x20>
 8007008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	dc02      	bgt.n	8007014 <__sflush_r+0x20>
 800700e:	2000      	movs	r0, #0
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007016:	2e00      	cmp	r6, #0
 8007018:	d0f9      	beq.n	800700e <__sflush_r+0x1a>
 800701a:	2300      	movs	r3, #0
 800701c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007020:	682f      	ldr	r7, [r5, #0]
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	d032      	beq.n	800708c <__sflush_r+0x98>
 8007026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	075a      	lsls	r2, r3, #29
 800702c:	d505      	bpl.n	800703a <__sflush_r+0x46>
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	1ac0      	subs	r0, r0, r3
 8007032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007034:	b10b      	cbz	r3, 800703a <__sflush_r+0x46>
 8007036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007038:	1ac0      	subs	r0, r0, r3
 800703a:	2300      	movs	r3, #0
 800703c:	4602      	mov	r2, r0
 800703e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007040:	6a21      	ldr	r1, [r4, #32]
 8007042:	4628      	mov	r0, r5
 8007044:	47b0      	blx	r6
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	d106      	bne.n	800705a <__sflush_r+0x66>
 800704c:	6829      	ldr	r1, [r5, #0]
 800704e:	291d      	cmp	r1, #29
 8007050:	d82c      	bhi.n	80070ac <__sflush_r+0xb8>
 8007052:	4a2a      	ldr	r2, [pc, #168]	; (80070fc <__sflush_r+0x108>)
 8007054:	40ca      	lsrs	r2, r1
 8007056:	07d6      	lsls	r6, r2, #31
 8007058:	d528      	bpl.n	80070ac <__sflush_r+0xb8>
 800705a:	2200      	movs	r2, #0
 800705c:	6062      	str	r2, [r4, #4]
 800705e:	04d9      	lsls	r1, r3, #19
 8007060:	6922      	ldr	r2, [r4, #16]
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	d504      	bpl.n	8007070 <__sflush_r+0x7c>
 8007066:	1c42      	adds	r2, r0, #1
 8007068:	d101      	bne.n	800706e <__sflush_r+0x7a>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b903      	cbnz	r3, 8007070 <__sflush_r+0x7c>
 800706e:	6560      	str	r0, [r4, #84]	; 0x54
 8007070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007072:	602f      	str	r7, [r5, #0]
 8007074:	2900      	cmp	r1, #0
 8007076:	d0ca      	beq.n	800700e <__sflush_r+0x1a>
 8007078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800707c:	4299      	cmp	r1, r3
 800707e:	d002      	beq.n	8007086 <__sflush_r+0x92>
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff fc5f 	bl	8006944 <_free_r>
 8007086:	2000      	movs	r0, #0
 8007088:	6360      	str	r0, [r4, #52]	; 0x34
 800708a:	e7c1      	b.n	8007010 <__sflush_r+0x1c>
 800708c:	6a21      	ldr	r1, [r4, #32]
 800708e:	2301      	movs	r3, #1
 8007090:	4628      	mov	r0, r5
 8007092:	47b0      	blx	r6
 8007094:	1c41      	adds	r1, r0, #1
 8007096:	d1c7      	bne.n	8007028 <__sflush_r+0x34>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0c4      	beq.n	8007028 <__sflush_r+0x34>
 800709e:	2b1d      	cmp	r3, #29
 80070a0:	d001      	beq.n	80070a6 <__sflush_r+0xb2>
 80070a2:	2b16      	cmp	r3, #22
 80070a4:	d101      	bne.n	80070aa <__sflush_r+0xb6>
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	e7b1      	b.n	800700e <__sflush_r+0x1a>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	e7ad      	b.n	8007010 <__sflush_r+0x1c>
 80070b4:	690f      	ldr	r7, [r1, #16]
 80070b6:	2f00      	cmp	r7, #0
 80070b8:	d0a9      	beq.n	800700e <__sflush_r+0x1a>
 80070ba:	0793      	lsls	r3, r2, #30
 80070bc:	680e      	ldr	r6, [r1, #0]
 80070be:	bf08      	it	eq
 80070c0:	694b      	ldreq	r3, [r1, #20]
 80070c2:	600f      	str	r7, [r1, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2300      	movne	r3, #0
 80070c8:	eba6 0807 	sub.w	r8, r6, r7
 80070cc:	608b      	str	r3, [r1, #8]
 80070ce:	f1b8 0f00 	cmp.w	r8, #0
 80070d2:	dd9c      	ble.n	800700e <__sflush_r+0x1a>
 80070d4:	6a21      	ldr	r1, [r4, #32]
 80070d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d8:	4643      	mov	r3, r8
 80070da:	463a      	mov	r2, r7
 80070dc:	4628      	mov	r0, r5
 80070de:	47b0      	blx	r6
 80070e0:	2800      	cmp	r0, #0
 80070e2:	dc06      	bgt.n	80070f2 <__sflush_r+0xfe>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e78e      	b.n	8007010 <__sflush_r+0x1c>
 80070f2:	4407      	add	r7, r0
 80070f4:	eba8 0800 	sub.w	r8, r8, r0
 80070f8:	e7e9      	b.n	80070ce <__sflush_r+0xda>
 80070fa:	bf00      	nop
 80070fc:	20400001 	.word	0x20400001

08007100 <_fflush_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	4605      	mov	r5, r0
 8007106:	460c      	mov	r4, r1
 8007108:	b913      	cbnz	r3, 8007110 <_fflush_r+0x10>
 800710a:	2500      	movs	r5, #0
 800710c:	4628      	mov	r0, r5
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	b118      	cbz	r0, 800711a <_fflush_r+0x1a>
 8007112:	6983      	ldr	r3, [r0, #24]
 8007114:	b90b      	cbnz	r3, 800711a <_fflush_r+0x1a>
 8007116:	f7fe ffcb 	bl	80060b0 <__sinit>
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <_fflush_r+0x6c>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d11b      	bne.n	8007158 <_fflush_r+0x58>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0ef      	beq.n	800710a <_fflush_r+0xa>
 800712a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800712c:	07d0      	lsls	r0, r2, #31
 800712e:	d404      	bmi.n	800713a <_fflush_r+0x3a>
 8007130:	0599      	lsls	r1, r3, #22
 8007132:	d402      	bmi.n	800713a <_fflush_r+0x3a>
 8007134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007136:	f7ff f85e 	bl	80061f6 <__retarget_lock_acquire_recursive>
 800713a:	4628      	mov	r0, r5
 800713c:	4621      	mov	r1, r4
 800713e:	f7ff ff59 	bl	8006ff4 <__sflush_r>
 8007142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007144:	07da      	lsls	r2, r3, #31
 8007146:	4605      	mov	r5, r0
 8007148:	d4e0      	bmi.n	800710c <_fflush_r+0xc>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	059b      	lsls	r3, r3, #22
 800714e:	d4dd      	bmi.n	800710c <_fflush_r+0xc>
 8007150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007152:	f7ff f851 	bl	80061f8 <__retarget_lock_release_recursive>
 8007156:	e7d9      	b.n	800710c <_fflush_r+0xc>
 8007158:	4b05      	ldr	r3, [pc, #20]	; (8007170 <_fflush_r+0x70>)
 800715a:	429c      	cmp	r4, r3
 800715c:	d101      	bne.n	8007162 <_fflush_r+0x62>
 800715e:	68ac      	ldr	r4, [r5, #8]
 8007160:	e7df      	b.n	8007122 <_fflush_r+0x22>
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <_fflush_r+0x74>)
 8007164:	429c      	cmp	r4, r3
 8007166:	bf08      	it	eq
 8007168:	68ec      	ldreq	r4, [r5, #12]
 800716a:	e7da      	b.n	8007122 <_fflush_r+0x22>
 800716c:	0800854c 	.word	0x0800854c
 8007170:	0800856c 	.word	0x0800856c
 8007174:	0800852c 	.word	0x0800852c

08007178 <fiprintf>:
 8007178:	b40e      	push	{r1, r2, r3}
 800717a:	b503      	push	{r0, r1, lr}
 800717c:	4601      	mov	r1, r0
 800717e:	ab03      	add	r3, sp, #12
 8007180:	4805      	ldr	r0, [pc, #20]	; (8007198 <fiprintf+0x20>)
 8007182:	f853 2b04 	ldr.w	r2, [r3], #4
 8007186:	6800      	ldr	r0, [r0, #0]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	f7ff fcaf 	bl	8006aec <_vfiprintf_r>
 800718e:	b002      	add	sp, #8
 8007190:	f85d eb04 	ldr.w	lr, [sp], #4
 8007194:	b003      	add	sp, #12
 8007196:	4770      	bx	lr
 8007198:	2000000c 	.word	0x2000000c

0800719c <_lseek_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d07      	ldr	r5, [pc, #28]	; (80071bc <_lseek_r+0x20>)
 80071a0:	4604      	mov	r4, r0
 80071a2:	4608      	mov	r0, r1
 80071a4:	4611      	mov	r1, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7fa fc18 	bl	80019e0 <_lseek>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_lseek_r+0x1e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_lseek_r+0x1e>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200003c4 	.word	0x200003c4

080071c0 <__swhatbuf_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	460e      	mov	r6, r1
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	b096      	sub	sp, #88	; 0x58
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	da07      	bge.n	80071e2 <__swhatbuf_r+0x22>
 80071d2:	2300      	movs	r3, #0
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	89b3      	ldrh	r3, [r6, #12]
 80071d8:	061a      	lsls	r2, r3, #24
 80071da:	d410      	bmi.n	80071fe <__swhatbuf_r+0x3e>
 80071dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e0:	e00e      	b.n	8007200 <__swhatbuf_r+0x40>
 80071e2:	466a      	mov	r2, sp
 80071e4:	f000 f894 	bl	8007310 <_fstat_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	dbf2      	blt.n	80071d2 <__swhatbuf_r+0x12>
 80071ec:	9a01      	ldr	r2, [sp, #4]
 80071ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071f6:	425a      	negs	r2, r3
 80071f8:	415a      	adcs	r2, r3
 80071fa:	602a      	str	r2, [r5, #0]
 80071fc:	e7ee      	b.n	80071dc <__swhatbuf_r+0x1c>
 80071fe:	2340      	movs	r3, #64	; 0x40
 8007200:	2000      	movs	r0, #0
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	b016      	add	sp, #88	; 0x58
 8007206:	bd70      	pop	{r4, r5, r6, pc}

08007208 <__smakebuf_r>:
 8007208:	898b      	ldrh	r3, [r1, #12]
 800720a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800720c:	079d      	lsls	r5, r3, #30
 800720e:	4606      	mov	r6, r0
 8007210:	460c      	mov	r4, r1
 8007212:	d507      	bpl.n	8007224 <__smakebuf_r+0x1c>
 8007214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	2301      	movs	r3, #1
 800721e:	6163      	str	r3, [r4, #20]
 8007220:	b002      	add	sp, #8
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	ab01      	add	r3, sp, #4
 8007226:	466a      	mov	r2, sp
 8007228:	f7ff ffca 	bl	80071c0 <__swhatbuf_r>
 800722c:	9900      	ldr	r1, [sp, #0]
 800722e:	4605      	mov	r5, r0
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff fbd7 	bl	80069e4 <_malloc_r>
 8007236:	b948      	cbnz	r0, 800724c <__smakebuf_r+0x44>
 8007238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d4ef      	bmi.n	8007220 <__smakebuf_r+0x18>
 8007240:	f023 0303 	bic.w	r3, r3, #3
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	e7e3      	b.n	8007214 <__smakebuf_r+0xc>
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <__smakebuf_r+0x7c>)
 800724e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	6020      	str	r0, [r4, #0]
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	9b00      	ldr	r3, [sp, #0]
 800725c:	6163      	str	r3, [r4, #20]
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	6120      	str	r0, [r4, #16]
 8007262:	b15b      	cbz	r3, 800727c <__smakebuf_r+0x74>
 8007264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f863 	bl	8007334 <_isatty_r>
 800726e:	b128      	cbz	r0, 800727c <__smakebuf_r+0x74>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	89a0      	ldrh	r0, [r4, #12]
 800727e:	4305      	orrs	r5, r0
 8007280:	81a5      	strh	r5, [r4, #12]
 8007282:	e7cd      	b.n	8007220 <__smakebuf_r+0x18>
 8007284:	08006049 	.word	0x08006049

08007288 <__ascii_mbtowc>:
 8007288:	b082      	sub	sp, #8
 800728a:	b901      	cbnz	r1, 800728e <__ascii_mbtowc+0x6>
 800728c:	a901      	add	r1, sp, #4
 800728e:	b142      	cbz	r2, 80072a2 <__ascii_mbtowc+0x1a>
 8007290:	b14b      	cbz	r3, 80072a6 <__ascii_mbtowc+0x1e>
 8007292:	7813      	ldrb	r3, [r2, #0]
 8007294:	600b      	str	r3, [r1, #0]
 8007296:	7812      	ldrb	r2, [r2, #0]
 8007298:	1e10      	subs	r0, r2, #0
 800729a:	bf18      	it	ne
 800729c:	2001      	movne	r0, #1
 800729e:	b002      	add	sp, #8
 80072a0:	4770      	bx	lr
 80072a2:	4610      	mov	r0, r2
 80072a4:	e7fb      	b.n	800729e <__ascii_mbtowc+0x16>
 80072a6:	f06f 0001 	mvn.w	r0, #1
 80072aa:	e7f8      	b.n	800729e <__ascii_mbtowc+0x16>

080072ac <__malloc_lock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__malloc_lock+0x8>)
 80072ae:	f7fe bfa2 	b.w	80061f6 <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	200003bc 	.word	0x200003bc

080072b8 <__malloc_unlock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_unlock+0x8>)
 80072ba:	f7fe bf9d 	b.w	80061f8 <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	200003bc 	.word	0x200003bc

080072c4 <_read_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d07      	ldr	r5, [pc, #28]	; (80072e4 <_read_r+0x20>)
 80072c8:	4604      	mov	r4, r0
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	602a      	str	r2, [r5, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7fa fb24 	bl	8001920 <_read>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_read_r+0x1e>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_read_r+0x1e>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	200003c4 	.word	0x200003c4

080072e8 <__ascii_wctomb>:
 80072e8:	b149      	cbz	r1, 80072fe <__ascii_wctomb+0x16>
 80072ea:	2aff      	cmp	r2, #255	; 0xff
 80072ec:	bf85      	ittet	hi
 80072ee:	238a      	movhi	r3, #138	; 0x8a
 80072f0:	6003      	strhi	r3, [r0, #0]
 80072f2:	700a      	strbls	r2, [r1, #0]
 80072f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80072f8:	bf98      	it	ls
 80072fa:	2001      	movls	r0, #1
 80072fc:	4770      	bx	lr
 80072fe:	4608      	mov	r0, r1
 8007300:	4770      	bx	lr

08007302 <abort>:
 8007302:	b508      	push	{r3, lr}
 8007304:	2006      	movs	r0, #6
 8007306:	f000 f84d 	bl	80073a4 <raise>
 800730a:	2001      	movs	r0, #1
 800730c:	f7fa fafe 	bl	800190c <_exit>

08007310 <_fstat_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d07      	ldr	r5, [pc, #28]	; (8007330 <_fstat_r+0x20>)
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f7fa fb44 	bl	80019aa <_fstat>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d102      	bne.n	800732c <_fstat_r+0x1c>
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	b103      	cbz	r3, 800732c <_fstat_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	200003c4 	.word	0x200003c4

08007334 <_isatty_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d06      	ldr	r5, [pc, #24]	; (8007350 <_isatty_r+0x1c>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f7fa fb43 	bl	80019ca <_isatty>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_isatty_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_isatty_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	200003c4 	.word	0x200003c4

08007354 <_raise_r>:
 8007354:	291f      	cmp	r1, #31
 8007356:	b538      	push	{r3, r4, r5, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	d904      	bls.n	8007368 <_raise_r+0x14>
 800735e:	2316      	movs	r3, #22
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800736a:	b112      	cbz	r2, 8007372 <_raise_r+0x1e>
 800736c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007370:	b94b      	cbnz	r3, 8007386 <_raise_r+0x32>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f830 	bl	80073d8 <_getpid_r>
 8007378:	462a      	mov	r2, r5
 800737a:	4601      	mov	r1, r0
 800737c:	4620      	mov	r0, r4
 800737e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007382:	f000 b817 	b.w	80073b4 <_kill_r>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d00a      	beq.n	80073a0 <_raise_r+0x4c>
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	d103      	bne.n	8007396 <_raise_r+0x42>
 800738e:	2316      	movs	r3, #22
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	2001      	movs	r0, #1
 8007394:	e7e7      	b.n	8007366 <_raise_r+0x12>
 8007396:	2400      	movs	r4, #0
 8007398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800739c:	4628      	mov	r0, r5
 800739e:	4798      	blx	r3
 80073a0:	2000      	movs	r0, #0
 80073a2:	e7e0      	b.n	8007366 <_raise_r+0x12>

080073a4 <raise>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <raise+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f7ff bfd3 	b.w	8007354 <_raise_r>
 80073ae:	bf00      	nop
 80073b0:	2000000c 	.word	0x2000000c

080073b4 <_kill_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d07      	ldr	r5, [pc, #28]	; (80073d4 <_kill_r+0x20>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f7fa fa93 	bl	80018ec <_kill>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d102      	bne.n	80073d0 <_kill_r+0x1c>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	b103      	cbz	r3, 80073d0 <_kill_r+0x1c>
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	200003c4 	.word	0x200003c4

080073d8 <_getpid_r>:
 80073d8:	f7fa ba80 	b.w	80018dc <_getpid>

080073dc <pow>:
 80073dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e0:	ec59 8b10 	vmov	r8, r9, d0
 80073e4:	ec57 6b11 	vmov	r6, r7, d1
 80073e8:	f000 f8a6 	bl	8007538 <__ieee754_pow>
 80073ec:	4b4e      	ldr	r3, [pc, #312]	; (8007528 <pow+0x14c>)
 80073ee:	f993 3000 	ldrsb.w	r3, [r3]
 80073f2:	3301      	adds	r3, #1
 80073f4:	ec55 4b10 	vmov	r4, r5, d0
 80073f8:	d015      	beq.n	8007426 <pow+0x4a>
 80073fa:	4632      	mov	r2, r6
 80073fc:	463b      	mov	r3, r7
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 fbbb 	bl	8000b7c <__aeabi_dcmpun>
 8007406:	b970      	cbnz	r0, 8007426 <pow+0x4a>
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	4640      	mov	r0, r8
 800740e:	4649      	mov	r1, r9
 8007410:	f7f9 fbb4 	bl	8000b7c <__aeabi_dcmpun>
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	b148      	cbz	r0, 800742e <pow+0x52>
 800741a:	4630      	mov	r0, r6
 800741c:	4639      	mov	r1, r7
 800741e:	f7f9 fb7b 	bl	8000b18 <__aeabi_dcmpeq>
 8007422:	2800      	cmp	r0, #0
 8007424:	d17d      	bne.n	8007522 <pow+0x146>
 8007426:	ec45 4b10 	vmov	d0, r4, r5
 800742a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742e:	4640      	mov	r0, r8
 8007430:	4649      	mov	r1, r9
 8007432:	f7f9 fb71 	bl	8000b18 <__aeabi_dcmpeq>
 8007436:	b1e0      	cbz	r0, 8007472 <pow+0x96>
 8007438:	2200      	movs	r2, #0
 800743a:	2300      	movs	r3, #0
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f7f9 fb6a 	bl	8000b18 <__aeabi_dcmpeq>
 8007444:	2800      	cmp	r0, #0
 8007446:	d16c      	bne.n	8007522 <pow+0x146>
 8007448:	ec47 6b10 	vmov	d0, r6, r7
 800744c:	f000 fe53 	bl	80080f6 <finite>
 8007450:	2800      	cmp	r0, #0
 8007452:	d0e8      	beq.n	8007426 <pow+0x4a>
 8007454:	2200      	movs	r2, #0
 8007456:	2300      	movs	r3, #0
 8007458:	4630      	mov	r0, r6
 800745a:	4639      	mov	r1, r7
 800745c:	f7f9 fb66 	bl	8000b2c <__aeabi_dcmplt>
 8007460:	2800      	cmp	r0, #0
 8007462:	d0e0      	beq.n	8007426 <pow+0x4a>
 8007464:	f7fd fa9e 	bl	80049a4 <__errno>
 8007468:	2321      	movs	r3, #33	; 0x21
 800746a:	6003      	str	r3, [r0, #0]
 800746c:	2400      	movs	r4, #0
 800746e:	4d2f      	ldr	r5, [pc, #188]	; (800752c <pow+0x150>)
 8007470:	e7d9      	b.n	8007426 <pow+0x4a>
 8007472:	ec45 4b10 	vmov	d0, r4, r5
 8007476:	f000 fe3e 	bl	80080f6 <finite>
 800747a:	bbb8      	cbnz	r0, 80074ec <pow+0x110>
 800747c:	ec49 8b10 	vmov	d0, r8, r9
 8007480:	f000 fe39 	bl	80080f6 <finite>
 8007484:	b390      	cbz	r0, 80074ec <pow+0x110>
 8007486:	ec47 6b10 	vmov	d0, r6, r7
 800748a:	f000 fe34 	bl	80080f6 <finite>
 800748e:	b368      	cbz	r0, 80074ec <pow+0x110>
 8007490:	4622      	mov	r2, r4
 8007492:	462b      	mov	r3, r5
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f9 fb70 	bl	8000b7c <__aeabi_dcmpun>
 800749c:	b160      	cbz	r0, 80074b8 <pow+0xdc>
 800749e:	f7fd fa81 	bl	80049a4 <__errno>
 80074a2:	2321      	movs	r3, #33	; 0x21
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	f7f9 f9f5 	bl	800089c <__aeabi_ddiv>
 80074b2:	4604      	mov	r4, r0
 80074b4:	460d      	mov	r5, r1
 80074b6:	e7b6      	b.n	8007426 <pow+0x4a>
 80074b8:	f7fd fa74 	bl	80049a4 <__errno>
 80074bc:	2322      	movs	r3, #34	; 0x22
 80074be:	6003      	str	r3, [r0, #0]
 80074c0:	2200      	movs	r2, #0
 80074c2:	2300      	movs	r3, #0
 80074c4:	4640      	mov	r0, r8
 80074c6:	4649      	mov	r1, r9
 80074c8:	f7f9 fb30 	bl	8000b2c <__aeabi_dcmplt>
 80074cc:	2400      	movs	r4, #0
 80074ce:	b158      	cbz	r0, 80074e8 <pow+0x10c>
 80074d0:	ec47 6b10 	vmov	d0, r6, r7
 80074d4:	f000 fe24 	bl	8008120 <rint>
 80074d8:	4632      	mov	r2, r6
 80074da:	ec51 0b10 	vmov	r0, r1, d0
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f9 fb1a 	bl	8000b18 <__aeabi_dcmpeq>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0c2      	beq.n	800746e <pow+0x92>
 80074e8:	4d11      	ldr	r5, [pc, #68]	; (8007530 <pow+0x154>)
 80074ea:	e79c      	b.n	8007426 <pow+0x4a>
 80074ec:	2200      	movs	r2, #0
 80074ee:	2300      	movs	r3, #0
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f9 fb10 	bl	8000b18 <__aeabi_dcmpeq>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d094      	beq.n	8007426 <pow+0x4a>
 80074fc:	ec49 8b10 	vmov	d0, r8, r9
 8007500:	f000 fdf9 	bl	80080f6 <finite>
 8007504:	2800      	cmp	r0, #0
 8007506:	d08e      	beq.n	8007426 <pow+0x4a>
 8007508:	ec47 6b10 	vmov	d0, r6, r7
 800750c:	f000 fdf3 	bl	80080f6 <finite>
 8007510:	2800      	cmp	r0, #0
 8007512:	d088      	beq.n	8007426 <pow+0x4a>
 8007514:	f7fd fa46 	bl	80049a4 <__errno>
 8007518:	2322      	movs	r3, #34	; 0x22
 800751a:	6003      	str	r3, [r0, #0]
 800751c:	2400      	movs	r4, #0
 800751e:	2500      	movs	r5, #0
 8007520:	e781      	b.n	8007426 <pow+0x4a>
 8007522:	4d04      	ldr	r5, [pc, #16]	; (8007534 <pow+0x158>)
 8007524:	2400      	movs	r4, #0
 8007526:	e77e      	b.n	8007426 <pow+0x4a>
 8007528:	200001dc 	.word	0x200001dc
 800752c:	fff00000 	.word	0xfff00000
 8007530:	7ff00000 	.word	0x7ff00000
 8007534:	3ff00000 	.word	0x3ff00000

08007538 <__ieee754_pow>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	ed2d 8b06 	vpush	{d8-d10}
 8007540:	b08d      	sub	sp, #52	; 0x34
 8007542:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007546:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800754a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800754e:	ea56 0100 	orrs.w	r1, r6, r0
 8007552:	ec53 2b10 	vmov	r2, r3, d0
 8007556:	f000 84d1 	beq.w	8007efc <__ieee754_pow+0x9c4>
 800755a:	497f      	ldr	r1, [pc, #508]	; (8007758 <__ieee754_pow+0x220>)
 800755c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007560:	428c      	cmp	r4, r1
 8007562:	ee10 8a10 	vmov	r8, s0
 8007566:	4699      	mov	r9, r3
 8007568:	dc09      	bgt.n	800757e <__ieee754_pow+0x46>
 800756a:	d103      	bne.n	8007574 <__ieee754_pow+0x3c>
 800756c:	b97a      	cbnz	r2, 800758e <__ieee754_pow+0x56>
 800756e:	42a6      	cmp	r6, r4
 8007570:	dd02      	ble.n	8007578 <__ieee754_pow+0x40>
 8007572:	e00c      	b.n	800758e <__ieee754_pow+0x56>
 8007574:	428e      	cmp	r6, r1
 8007576:	dc02      	bgt.n	800757e <__ieee754_pow+0x46>
 8007578:	428e      	cmp	r6, r1
 800757a:	d110      	bne.n	800759e <__ieee754_pow+0x66>
 800757c:	b178      	cbz	r0, 800759e <__ieee754_pow+0x66>
 800757e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007582:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007586:	ea54 0308 	orrs.w	r3, r4, r8
 800758a:	f000 84b7 	beq.w	8007efc <__ieee754_pow+0x9c4>
 800758e:	4873      	ldr	r0, [pc, #460]	; (800775c <__ieee754_pow+0x224>)
 8007590:	b00d      	add	sp, #52	; 0x34
 8007592:	ecbd 8b06 	vpop	{d8-d10}
 8007596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f000 bdb9 	b.w	8008110 <nan>
 800759e:	f1b9 0f00 	cmp.w	r9, #0
 80075a2:	da36      	bge.n	8007612 <__ieee754_pow+0xda>
 80075a4:	496e      	ldr	r1, [pc, #440]	; (8007760 <__ieee754_pow+0x228>)
 80075a6:	428e      	cmp	r6, r1
 80075a8:	dc51      	bgt.n	800764e <__ieee754_pow+0x116>
 80075aa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80075ae:	428e      	cmp	r6, r1
 80075b0:	f340 84af 	ble.w	8007f12 <__ieee754_pow+0x9da>
 80075b4:	1531      	asrs	r1, r6, #20
 80075b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80075ba:	2914      	cmp	r1, #20
 80075bc:	dd0f      	ble.n	80075de <__ieee754_pow+0xa6>
 80075be:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80075c2:	fa20 fc01 	lsr.w	ip, r0, r1
 80075c6:	fa0c f101 	lsl.w	r1, ip, r1
 80075ca:	4281      	cmp	r1, r0
 80075cc:	f040 84a1 	bne.w	8007f12 <__ieee754_pow+0x9da>
 80075d0:	f00c 0c01 	and.w	ip, ip, #1
 80075d4:	f1cc 0102 	rsb	r1, ip, #2
 80075d8:	9100      	str	r1, [sp, #0]
 80075da:	b180      	cbz	r0, 80075fe <__ieee754_pow+0xc6>
 80075dc:	e059      	b.n	8007692 <__ieee754_pow+0x15a>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d155      	bne.n	800768e <__ieee754_pow+0x156>
 80075e2:	f1c1 0114 	rsb	r1, r1, #20
 80075e6:	fa46 fc01 	asr.w	ip, r6, r1
 80075ea:	fa0c f101 	lsl.w	r1, ip, r1
 80075ee:	42b1      	cmp	r1, r6
 80075f0:	f040 848c 	bne.w	8007f0c <__ieee754_pow+0x9d4>
 80075f4:	f00c 0c01 	and.w	ip, ip, #1
 80075f8:	f1cc 0102 	rsb	r1, ip, #2
 80075fc:	9100      	str	r1, [sp, #0]
 80075fe:	4959      	ldr	r1, [pc, #356]	; (8007764 <__ieee754_pow+0x22c>)
 8007600:	428e      	cmp	r6, r1
 8007602:	d12d      	bne.n	8007660 <__ieee754_pow+0x128>
 8007604:	2f00      	cmp	r7, #0
 8007606:	da79      	bge.n	80076fc <__ieee754_pow+0x1c4>
 8007608:	4956      	ldr	r1, [pc, #344]	; (8007764 <__ieee754_pow+0x22c>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f9 f946 	bl	800089c <__aeabi_ddiv>
 8007610:	e016      	b.n	8007640 <__ieee754_pow+0x108>
 8007612:	2100      	movs	r1, #0
 8007614:	9100      	str	r1, [sp, #0]
 8007616:	2800      	cmp	r0, #0
 8007618:	d13b      	bne.n	8007692 <__ieee754_pow+0x15a>
 800761a:	494f      	ldr	r1, [pc, #316]	; (8007758 <__ieee754_pow+0x220>)
 800761c:	428e      	cmp	r6, r1
 800761e:	d1ee      	bne.n	80075fe <__ieee754_pow+0xc6>
 8007620:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007624:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007628:	ea53 0308 	orrs.w	r3, r3, r8
 800762c:	f000 8466 	beq.w	8007efc <__ieee754_pow+0x9c4>
 8007630:	4b4d      	ldr	r3, [pc, #308]	; (8007768 <__ieee754_pow+0x230>)
 8007632:	429c      	cmp	r4, r3
 8007634:	dd0d      	ble.n	8007652 <__ieee754_pow+0x11a>
 8007636:	2f00      	cmp	r7, #0
 8007638:	f280 8464 	bge.w	8007f04 <__ieee754_pow+0x9cc>
 800763c:	2000      	movs	r0, #0
 800763e:	2100      	movs	r1, #0
 8007640:	ec41 0b10 	vmov	d0, r0, r1
 8007644:	b00d      	add	sp, #52	; 0x34
 8007646:	ecbd 8b06 	vpop	{d8-d10}
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	2102      	movs	r1, #2
 8007650:	e7e0      	b.n	8007614 <__ieee754_pow+0xdc>
 8007652:	2f00      	cmp	r7, #0
 8007654:	daf2      	bge.n	800763c <__ieee754_pow+0x104>
 8007656:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800765a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800765e:	e7ef      	b.n	8007640 <__ieee754_pow+0x108>
 8007660:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007664:	d104      	bne.n	8007670 <__ieee754_pow+0x138>
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	f7f8 ffed 	bl	8000648 <__aeabi_dmul>
 800766e:	e7e7      	b.n	8007640 <__ieee754_pow+0x108>
 8007670:	493e      	ldr	r1, [pc, #248]	; (800776c <__ieee754_pow+0x234>)
 8007672:	428f      	cmp	r7, r1
 8007674:	d10d      	bne.n	8007692 <__ieee754_pow+0x15a>
 8007676:	f1b9 0f00 	cmp.w	r9, #0
 800767a:	db0a      	blt.n	8007692 <__ieee754_pow+0x15a>
 800767c:	ec43 2b10 	vmov	d0, r2, r3
 8007680:	b00d      	add	sp, #52	; 0x34
 8007682:	ecbd 8b06 	vpop	{d8-d10}
 8007686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f000 bc77 	b.w	8007f7c <__ieee754_sqrt>
 800768e:	2100      	movs	r1, #0
 8007690:	9100      	str	r1, [sp, #0]
 8007692:	ec43 2b10 	vmov	d0, r2, r3
 8007696:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800769a:	f000 fd23 	bl	80080e4 <fabs>
 800769e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a2:	ec51 0b10 	vmov	r0, r1, d0
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	d12a      	bne.n	8007702 <__ieee754_pow+0x1ca>
 80076ac:	b12c      	cbz	r4, 80076ba <__ieee754_pow+0x182>
 80076ae:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007764 <__ieee754_pow+0x22c>
 80076b2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80076b6:	45e6      	cmp	lr, ip
 80076b8:	d123      	bne.n	8007702 <__ieee754_pow+0x1ca>
 80076ba:	2f00      	cmp	r7, #0
 80076bc:	da05      	bge.n	80076ca <__ieee754_pow+0x192>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	2000      	movs	r0, #0
 80076c4:	4927      	ldr	r1, [pc, #156]	; (8007764 <__ieee754_pow+0x22c>)
 80076c6:	f7f9 f8e9 	bl	800089c <__aeabi_ddiv>
 80076ca:	f1b9 0f00 	cmp.w	r9, #0
 80076ce:	dab7      	bge.n	8007640 <__ieee754_pow+0x108>
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80076d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076da:	4323      	orrs	r3, r4
 80076dc:	d108      	bne.n	80076f0 <__ieee754_pow+0x1b8>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7f8 fdf7 	bl	80002d8 <__aeabi_dsub>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	e78d      	b.n	800760c <__ieee754_pow+0xd4>
 80076f0:	9b00      	ldr	r3, [sp, #0]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d1a4      	bne.n	8007640 <__ieee754_pow+0x108>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	e79e      	b.n	8007640 <__ieee754_pow+0x108>
 8007702:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007706:	f10c 35ff 	add.w	r5, ip, #4294967295
 800770a:	950a      	str	r5, [sp, #40]	; 0x28
 800770c:	9d00      	ldr	r5, [sp, #0]
 800770e:	46ac      	mov	ip, r5
 8007710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007712:	ea5c 0505 	orrs.w	r5, ip, r5
 8007716:	d0e4      	beq.n	80076e2 <__ieee754_pow+0x1aa>
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <__ieee754_pow+0x238>)
 800771a:	429e      	cmp	r6, r3
 800771c:	f340 80fc 	ble.w	8007918 <__ieee754_pow+0x3e0>
 8007720:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007724:	429e      	cmp	r6, r3
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <__ieee754_pow+0x230>)
 8007728:	dd07      	ble.n	800773a <__ieee754_pow+0x202>
 800772a:	429c      	cmp	r4, r3
 800772c:	dc0a      	bgt.n	8007744 <__ieee754_pow+0x20c>
 800772e:	2f00      	cmp	r7, #0
 8007730:	da84      	bge.n	800763c <__ieee754_pow+0x104>
 8007732:	a307      	add	r3, pc, #28	; (adr r3, 8007750 <__ieee754_pow+0x218>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	e795      	b.n	8007666 <__ieee754_pow+0x12e>
 800773a:	429c      	cmp	r4, r3
 800773c:	dbf7      	blt.n	800772e <__ieee754_pow+0x1f6>
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <__ieee754_pow+0x22c>)
 8007740:	429c      	cmp	r4, r3
 8007742:	dd17      	ble.n	8007774 <__ieee754_pow+0x23c>
 8007744:	2f00      	cmp	r7, #0
 8007746:	dcf4      	bgt.n	8007732 <__ieee754_pow+0x1fa>
 8007748:	e778      	b.n	800763c <__ieee754_pow+0x104>
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w
 8007750:	8800759c 	.word	0x8800759c
 8007754:	7e37e43c 	.word	0x7e37e43c
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	08008738 	.word	0x08008738
 8007760:	433fffff 	.word	0x433fffff
 8007764:	3ff00000 	.word	0x3ff00000
 8007768:	3fefffff 	.word	0x3fefffff
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	41e00000 	.word	0x41e00000
 8007774:	4b64      	ldr	r3, [pc, #400]	; (8007908 <__ieee754_pow+0x3d0>)
 8007776:	2200      	movs	r2, #0
 8007778:	f7f8 fdae 	bl	80002d8 <__aeabi_dsub>
 800777c:	a356      	add	r3, pc, #344	; (adr r3, 80078d8 <__ieee754_pow+0x3a0>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	4604      	mov	r4, r0
 8007784:	460d      	mov	r5, r1
 8007786:	f7f8 ff5f 	bl	8000648 <__aeabi_dmul>
 800778a:	a355      	add	r3, pc, #340	; (adr r3, 80078e0 <__ieee754_pow+0x3a8>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	4606      	mov	r6, r0
 8007792:	460f      	mov	r7, r1
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 ff56 	bl	8000648 <__aeabi_dmul>
 800779c:	4b5b      	ldr	r3, [pc, #364]	; (800790c <__ieee754_pow+0x3d4>)
 800779e:	4682      	mov	sl, r0
 80077a0:	468b      	mov	fp, r1
 80077a2:	2200      	movs	r2, #0
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 ff4e 	bl	8000648 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	a14d      	add	r1, pc, #308	; (adr r1, 80078e8 <__ieee754_pow+0x3b0>)
 80077b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b6:	f7f8 fd8f 	bl	80002d8 <__aeabi_dsub>
 80077ba:	4622      	mov	r2, r4
 80077bc:	462b      	mov	r3, r5
 80077be:	f7f8 ff43 	bl	8000648 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	2000      	movs	r0, #0
 80077c8:	4951      	ldr	r1, [pc, #324]	; (8007910 <__ieee754_pow+0x3d8>)
 80077ca:	f7f8 fd85 	bl	80002d8 <__aeabi_dsub>
 80077ce:	4622      	mov	r2, r4
 80077d0:	4680      	mov	r8, r0
 80077d2:	4689      	mov	r9, r1
 80077d4:	462b      	mov	r3, r5
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f8 ff35 	bl	8000648 <__aeabi_dmul>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f8 ff2f 	bl	8000648 <__aeabi_dmul>
 80077ea:	a341      	add	r3, pc, #260	; (adr r3, 80078f0 <__ieee754_pow+0x3b8>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 ff2a 	bl	8000648 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	f7f8 fd6c 	bl	80002d8 <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f8 fd66 	bl	80002dc <__adddf3>
 8007810:	2400      	movs	r4, #0
 8007812:	4632      	mov	r2, r6
 8007814:	463b      	mov	r3, r7
 8007816:	4620      	mov	r0, r4
 8007818:	460d      	mov	r5, r1
 800781a:	f7f8 fd5d 	bl	80002d8 <__aeabi_dsub>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 fd57 	bl	80002d8 <__aeabi_dsub>
 800782a:	9b00      	ldr	r3, [sp, #0]
 800782c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800782e:	3b01      	subs	r3, #1
 8007830:	4313      	orrs	r3, r2
 8007832:	4682      	mov	sl, r0
 8007834:	468b      	mov	fp, r1
 8007836:	f040 81f1 	bne.w	8007c1c <__ieee754_pow+0x6e4>
 800783a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80078f8 <__ieee754_pow+0x3c0>
 800783e:	eeb0 8a47 	vmov.f32	s16, s14
 8007842:	eef0 8a67 	vmov.f32	s17, s15
 8007846:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800784a:	2600      	movs	r6, #0
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007854:	f7f8 fd40 	bl	80002d8 <__aeabi_dsub>
 8007858:	4622      	mov	r2, r4
 800785a:	462b      	mov	r3, r5
 800785c:	f7f8 fef4 	bl	8000648 <__aeabi_dmul>
 8007860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007864:	4680      	mov	r8, r0
 8007866:	4689      	mov	r9, r1
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	f7f8 feec 	bl	8000648 <__aeabi_dmul>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4640      	mov	r0, r8
 8007876:	4649      	mov	r1, r9
 8007878:	f7f8 fd30 	bl	80002dc <__adddf3>
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	4680      	mov	r8, r0
 8007882:	4689      	mov	r9, r1
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 fede 	bl	8000648 <__aeabi_dmul>
 800788c:	460b      	mov	r3, r1
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	4602      	mov	r2, r0
 8007894:	4649      	mov	r1, r9
 8007896:	4640      	mov	r0, r8
 8007898:	f7f8 fd20 	bl	80002dc <__adddf3>
 800789c:	4b1d      	ldr	r3, [pc, #116]	; (8007914 <__ieee754_pow+0x3dc>)
 800789e:	4299      	cmp	r1, r3
 80078a0:	ec45 4b19 	vmov	d9, r4, r5
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	468b      	mov	fp, r1
 80078aa:	f340 82fe 	ble.w	8007eaa <__ieee754_pow+0x972>
 80078ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80078b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80078b6:	4303      	orrs	r3, r0
 80078b8:	f000 81f0 	beq.w	8007c9c <__ieee754_pow+0x764>
 80078bc:	a310      	add	r3, pc, #64	; (adr r3, 8007900 <__ieee754_pow+0x3c8>)
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	ec51 0b18 	vmov	r0, r1, d8
 80078c6:	f7f8 febf 	bl	8000648 <__aeabi_dmul>
 80078ca:	a30d      	add	r3, pc, #52	; (adr r3, 8007900 <__ieee754_pow+0x3c8>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	e6cb      	b.n	800766a <__ieee754_pow+0x132>
 80078d2:	bf00      	nop
 80078d4:	f3af 8000 	nop.w
 80078d8:	60000000 	.word	0x60000000
 80078dc:	3ff71547 	.word	0x3ff71547
 80078e0:	f85ddf44 	.word	0xf85ddf44
 80078e4:	3e54ae0b 	.word	0x3e54ae0b
 80078e8:	55555555 	.word	0x55555555
 80078ec:	3fd55555 	.word	0x3fd55555
 80078f0:	652b82fe 	.word	0x652b82fe
 80078f4:	3ff71547 	.word	0x3ff71547
 80078f8:	00000000 	.word	0x00000000
 80078fc:	bff00000 	.word	0xbff00000
 8007900:	8800759c 	.word	0x8800759c
 8007904:	7e37e43c 	.word	0x7e37e43c
 8007908:	3ff00000 	.word	0x3ff00000
 800790c:	3fd00000 	.word	0x3fd00000
 8007910:	3fe00000 	.word	0x3fe00000
 8007914:	408fffff 	.word	0x408fffff
 8007918:	4bd7      	ldr	r3, [pc, #860]	; (8007c78 <__ieee754_pow+0x740>)
 800791a:	ea03 0309 	and.w	r3, r3, r9
 800791e:	2200      	movs	r2, #0
 8007920:	b92b      	cbnz	r3, 800792e <__ieee754_pow+0x3f6>
 8007922:	4bd6      	ldr	r3, [pc, #856]	; (8007c7c <__ieee754_pow+0x744>)
 8007924:	f7f8 fe90 	bl	8000648 <__aeabi_dmul>
 8007928:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800792c:	460c      	mov	r4, r1
 800792e:	1523      	asrs	r3, r4, #20
 8007930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007934:	4413      	add	r3, r2
 8007936:	9309      	str	r3, [sp, #36]	; 0x24
 8007938:	4bd1      	ldr	r3, [pc, #836]	; (8007c80 <__ieee754_pow+0x748>)
 800793a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800793e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007942:	429c      	cmp	r4, r3
 8007944:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007948:	dd08      	ble.n	800795c <__ieee754_pow+0x424>
 800794a:	4bce      	ldr	r3, [pc, #824]	; (8007c84 <__ieee754_pow+0x74c>)
 800794c:	429c      	cmp	r4, r3
 800794e:	f340 8163 	ble.w	8007c18 <__ieee754_pow+0x6e0>
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	3301      	adds	r3, #1
 8007956:	9309      	str	r3, [sp, #36]	; 0x24
 8007958:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800795c:	2400      	movs	r4, #0
 800795e:	00e3      	lsls	r3, r4, #3
 8007960:	930b      	str	r3, [sp, #44]	; 0x2c
 8007962:	4bc9      	ldr	r3, [pc, #804]	; (8007c88 <__ieee754_pow+0x750>)
 8007964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007968:	ed93 7b00 	vldr	d7, [r3]
 800796c:	4629      	mov	r1, r5
 800796e:	ec53 2b17 	vmov	r2, r3, d7
 8007972:	eeb0 8a47 	vmov.f32	s16, s14
 8007976:	eef0 8a67 	vmov.f32	s17, s15
 800797a:	4682      	mov	sl, r0
 800797c:	f7f8 fcac 	bl	80002d8 <__aeabi_dsub>
 8007980:	4652      	mov	r2, sl
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	462b      	mov	r3, r5
 8007988:	ec51 0b18 	vmov	r0, r1, d8
 800798c:	f7f8 fca6 	bl	80002dc <__adddf3>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	2000      	movs	r0, #0
 8007996:	49bd      	ldr	r1, [pc, #756]	; (8007c8c <__ieee754_pow+0x754>)
 8007998:	f7f8 ff80 	bl	800089c <__aeabi_ddiv>
 800799c:	ec41 0b19 	vmov	d9, r0, r1
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f8 fe4e 	bl	8000648 <__aeabi_dmul>
 80079ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079b8:	2300      	movs	r3, #0
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80079c0:	46ab      	mov	fp, r5
 80079c2:	106d      	asrs	r5, r5, #1
 80079c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80079cc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80079d0:	2200      	movs	r2, #0
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	4614      	mov	r4, r2
 80079d8:	461d      	mov	r5, r3
 80079da:	f7f8 fe35 	bl	8000648 <__aeabi_dmul>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 fc77 	bl	80002d8 <__aeabi_dsub>
 80079ea:	ec53 2b18 	vmov	r2, r3, d8
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	4620      	mov	r0, r4
 80079f4:	4629      	mov	r1, r5
 80079f6:	f7f8 fc6f 	bl	80002d8 <__aeabi_dsub>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4650      	mov	r0, sl
 8007a00:	4659      	mov	r1, fp
 8007a02:	f7f8 fc69 	bl	80002d8 <__aeabi_dsub>
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	f7f8 fe1d 	bl	8000648 <__aeabi_dmul>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f8 fc5f 	bl	80002d8 <__aeabi_dsub>
 8007a1a:	ec53 2b19 	vmov	r2, r3, d9
 8007a1e:	f7f8 fe13 	bl	8000648 <__aeabi_dmul>
 8007a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a26:	ec41 0b18 	vmov	d8, r0, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7f8 fe0b 	bl	8000648 <__aeabi_dmul>
 8007a32:	a37d      	add	r3, pc, #500	; (adr r3, 8007c28 <__ieee754_pow+0x6f0>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	4604      	mov	r4, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	f7f8 fe04 	bl	8000648 <__aeabi_dmul>
 8007a40:	a37b      	add	r3, pc, #492	; (adr r3, 8007c30 <__ieee754_pow+0x6f8>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f7f8 fc49 	bl	80002dc <__adddf3>
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	f7f8 fdfb 	bl	8000648 <__aeabi_dmul>
 8007a52:	a379      	add	r3, pc, #484	; (adr r3, 8007c38 <__ieee754_pow+0x700>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fc40 	bl	80002dc <__adddf3>
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f7f8 fdf2 	bl	8000648 <__aeabi_dmul>
 8007a64:	a376      	add	r3, pc, #472	; (adr r3, 8007c40 <__ieee754_pow+0x708>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f7f8 fc37 	bl	80002dc <__adddf3>
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f7f8 fde9 	bl	8000648 <__aeabi_dmul>
 8007a76:	a374      	add	r3, pc, #464	; (adr r3, 8007c48 <__ieee754_pow+0x710>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fc2e 	bl	80002dc <__adddf3>
 8007a80:	4622      	mov	r2, r4
 8007a82:	462b      	mov	r3, r5
 8007a84:	f7f8 fde0 	bl	8000648 <__aeabi_dmul>
 8007a88:	a371      	add	r3, pc, #452	; (adr r3, 8007c50 <__ieee754_pow+0x718>)
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f7f8 fc25 	bl	80002dc <__adddf3>
 8007a92:	4622      	mov	r2, r4
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	462b      	mov	r3, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f8 fdd3 	bl	8000648 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fdcd 	bl	8000648 <__aeabi_dmul>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aba:	f7f8 fc0f 	bl	80002dc <__adddf3>
 8007abe:	ec53 2b18 	vmov	r2, r3, d8
 8007ac2:	f7f8 fdc1 	bl	8000648 <__aeabi_dmul>
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	f7f8 fc07 	bl	80002dc <__adddf3>
 8007ace:	4642      	mov	r2, r8
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fdb5 	bl	8000648 <__aeabi_dmul>
 8007ade:	4b6c      	ldr	r3, [pc, #432]	; (8007c90 <__ieee754_pow+0x758>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	f7f8 fbf9 	bl	80002dc <__adddf3>
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	f7f8 fbf5 	bl	80002dc <__adddf3>
 8007af2:	9c04      	ldr	r4, [sp, #16]
 8007af4:	460d      	mov	r5, r1
 8007af6:	4622      	mov	r2, r4
 8007af8:	460b      	mov	r3, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f8 fda3 	bl	8000648 <__aeabi_dmul>
 8007b02:	4b63      	ldr	r3, [pc, #396]	; (8007c90 <__ieee754_pow+0x758>)
 8007b04:	4680      	mov	r8, r0
 8007b06:	4689      	mov	r9, r1
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7f8 fbe3 	bl	80002d8 <__aeabi_dsub>
 8007b12:	4632      	mov	r2, r6
 8007b14:	463b      	mov	r3, r7
 8007b16:	f7f8 fbdf 	bl	80002d8 <__aeabi_dsub>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4650      	mov	r0, sl
 8007b20:	4659      	mov	r1, fp
 8007b22:	f7f8 fbd9 	bl	80002d8 <__aeabi_dsub>
 8007b26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b2a:	f7f8 fd8d 	bl	8000648 <__aeabi_dmul>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	4606      	mov	r6, r0
 8007b32:	460f      	mov	r7, r1
 8007b34:	462b      	mov	r3, r5
 8007b36:	ec51 0b18 	vmov	r0, r1, d8
 8007b3a:	f7f8 fd85 	bl	8000648 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fbc9 	bl	80002dc <__adddf3>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fbc1 	bl	80002dc <__adddf3>
 8007b5a:	9c04      	ldr	r4, [sp, #16]
 8007b5c:	a33e      	add	r3, pc, #248	; (adr r3, 8007c58 <__ieee754_pow+0x720>)
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	4620      	mov	r0, r4
 8007b64:	460d      	mov	r5, r1
 8007b66:	f7f8 fd6f 	bl	8000648 <__aeabi_dmul>
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	ec41 0b18 	vmov	d8, r0, r1
 8007b70:	464b      	mov	r3, r9
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	f7f8 fbaf 	bl	80002d8 <__aeabi_dsub>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fba9 	bl	80002d8 <__aeabi_dsub>
 8007b86:	a336      	add	r3, pc, #216	; (adr r3, 8007c60 <__ieee754_pow+0x728>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 fd5c 	bl	8000648 <__aeabi_dmul>
 8007b90:	a335      	add	r3, pc, #212	; (adr r3, 8007c68 <__ieee754_pow+0x730>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	4606      	mov	r6, r0
 8007b98:	460f      	mov	r7, r1
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 fd53 	bl	8000648 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fb97 	bl	80002dc <__adddf3>
 8007bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bb0:	4b38      	ldr	r3, [pc, #224]	; (8007c94 <__ieee754_pow+0x75c>)
 8007bb2:	4413      	add	r3, r2
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fb90 	bl	80002dc <__adddf3>
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bc0:	468b      	mov	fp, r1
 8007bc2:	f7f8 fcd7 	bl	8000574 <__aeabi_i2d>
 8007bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc8:	4b33      	ldr	r3, [pc, #204]	; (8007c98 <__ieee754_pow+0x760>)
 8007bca:	4413      	add	r3, r2
 8007bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	460f      	mov	r7, r1
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	465b      	mov	r3, fp
 8007bd8:	ec51 0b18 	vmov	r0, r1, d8
 8007bdc:	f7f8 fb7e 	bl	80002dc <__adddf3>
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	f7f8 fb7a 	bl	80002dc <__adddf3>
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	f7f8 fb76 	bl	80002dc <__adddf3>
 8007bf0:	9c04      	ldr	r4, [sp, #16]
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	f7f8 fb6d 	bl	80002d8 <__aeabi_dsub>
 8007bfe:	4642      	mov	r2, r8
 8007c00:	464b      	mov	r3, r9
 8007c02:	f7f8 fb69 	bl	80002d8 <__aeabi_dsub>
 8007c06:	ec53 2b18 	vmov	r2, r3, d8
 8007c0a:	f7f8 fb65 	bl	80002d8 <__aeabi_dsub>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	e606      	b.n	8007826 <__ieee754_pow+0x2ee>
 8007c18:	2401      	movs	r4, #1
 8007c1a:	e6a0      	b.n	800795e <__ieee754_pow+0x426>
 8007c1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007c70 <__ieee754_pow+0x738>
 8007c20:	e60d      	b.n	800783e <__ieee754_pow+0x306>
 8007c22:	bf00      	nop
 8007c24:	f3af 8000 	nop.w
 8007c28:	4a454eef 	.word	0x4a454eef
 8007c2c:	3fca7e28 	.word	0x3fca7e28
 8007c30:	93c9db65 	.word	0x93c9db65
 8007c34:	3fcd864a 	.word	0x3fcd864a
 8007c38:	a91d4101 	.word	0xa91d4101
 8007c3c:	3fd17460 	.word	0x3fd17460
 8007c40:	518f264d 	.word	0x518f264d
 8007c44:	3fd55555 	.word	0x3fd55555
 8007c48:	db6fabff 	.word	0xdb6fabff
 8007c4c:	3fdb6db6 	.word	0x3fdb6db6
 8007c50:	33333303 	.word	0x33333303
 8007c54:	3fe33333 	.word	0x3fe33333
 8007c58:	e0000000 	.word	0xe0000000
 8007c5c:	3feec709 	.word	0x3feec709
 8007c60:	dc3a03fd 	.word	0xdc3a03fd
 8007c64:	3feec709 	.word	0x3feec709
 8007c68:	145b01f5 	.word	0x145b01f5
 8007c6c:	be3e2fe0 	.word	0xbe3e2fe0
 8007c70:	00000000 	.word	0x00000000
 8007c74:	3ff00000 	.word	0x3ff00000
 8007c78:	7ff00000 	.word	0x7ff00000
 8007c7c:	43400000 	.word	0x43400000
 8007c80:	0003988e 	.word	0x0003988e
 8007c84:	000bb679 	.word	0x000bb679
 8007c88:	08008848 	.word	0x08008848
 8007c8c:	3ff00000 	.word	0x3ff00000
 8007c90:	40080000 	.word	0x40080000
 8007c94:	08008868 	.word	0x08008868
 8007c98:	08008858 	.word	0x08008858
 8007c9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007f74 <__ieee754_pow+0xa3c>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f7f8 fb19 	bl	80002dc <__adddf3>
 8007caa:	4622      	mov	r2, r4
 8007cac:	ec41 0b1a 	vmov	d10, r0, r1
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 fb0f 	bl	80002d8 <__aeabi_dsub>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	ec51 0b1a 	vmov	r0, r1, d10
 8007cc2:	f7f8 ff51 	bl	8000b68 <__aeabi_dcmpgt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f47f adf8 	bne.w	80078bc <__ieee754_pow+0x384>
 8007ccc:	4aa4      	ldr	r2, [pc, #656]	; (8007f60 <__ieee754_pow+0xa28>)
 8007cce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f340 810b 	ble.w	8007eee <__ieee754_pow+0x9b6>
 8007cd8:	151b      	asrs	r3, r3, #20
 8007cda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007cde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ce2:	fa4a f303 	asr.w	r3, sl, r3
 8007ce6:	445b      	add	r3, fp
 8007ce8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007cec:	4e9d      	ldr	r6, [pc, #628]	; (8007f64 <__ieee754_pow+0xa2c>)
 8007cee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007cf2:	4116      	asrs	r6, r2
 8007cf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	ea23 0106 	bic.w	r1, r3, r6
 8007cfe:	f1c2 0214 	rsb	r2, r2, #20
 8007d02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d06:	fa4a fa02 	asr.w	sl, sl, r2
 8007d0a:	f1bb 0f00 	cmp.w	fp, #0
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	bfb8      	it	lt
 8007d18:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d1c:	f7f8 fadc 	bl	80002d8 <__aeabi_dsub>
 8007d20:	ec41 0b19 	vmov	d9, r0, r1
 8007d24:	4642      	mov	r2, r8
 8007d26:	464b      	mov	r3, r9
 8007d28:	ec51 0b19 	vmov	r0, r1, d9
 8007d2c:	f7f8 fad6 	bl	80002dc <__adddf3>
 8007d30:	2400      	movs	r4, #0
 8007d32:	a379      	add	r3, pc, #484	; (adr r3, 8007f18 <__ieee754_pow+0x9e0>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	f7f8 fc84 	bl	8000648 <__aeabi_dmul>
 8007d40:	ec53 2b19 	vmov	r2, r3, d9
 8007d44:	4606      	mov	r6, r0
 8007d46:	460f      	mov	r7, r1
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fac4 	bl	80002d8 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fabe 	bl	80002d8 <__aeabi_dsub>
 8007d5c:	a370      	add	r3, pc, #448	; (adr r3, 8007f20 <__ieee754_pow+0x9e8>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fc71 	bl	8000648 <__aeabi_dmul>
 8007d66:	a370      	add	r3, pc, #448	; (adr r3, 8007f28 <__ieee754_pow+0x9f0>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	4620      	mov	r0, r4
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7f8 fc68 	bl	8000648 <__aeabi_dmul>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4649      	mov	r1, r9
 8007d80:	f7f8 faac 	bl	80002dc <__adddf3>
 8007d84:	4604      	mov	r4, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	4639      	mov	r1, r7
 8007d90:	f7f8 faa4 	bl	80002dc <__adddf3>
 8007d94:	4632      	mov	r2, r6
 8007d96:	463b      	mov	r3, r7
 8007d98:	4680      	mov	r8, r0
 8007d9a:	4689      	mov	r9, r1
 8007d9c:	f7f8 fa9c 	bl	80002d8 <__aeabi_dsub>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fa96 	bl	80002d8 <__aeabi_dsub>
 8007dac:	4642      	mov	r2, r8
 8007dae:	4606      	mov	r6, r0
 8007db0:	460f      	mov	r7, r1
 8007db2:	464b      	mov	r3, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 fc46 	bl	8000648 <__aeabi_dmul>
 8007dbc:	a35c      	add	r3, pc, #368	; (adr r3, 8007f30 <__ieee754_pow+0x9f8>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	f7f8 fc3f 	bl	8000648 <__aeabi_dmul>
 8007dca:	a35b      	add	r3, pc, #364	; (adr r3, 8007f38 <__ieee754_pow+0xa00>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fa82 	bl	80002d8 <__aeabi_dsub>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	f7f8 fc36 	bl	8000648 <__aeabi_dmul>
 8007ddc:	a358      	add	r3, pc, #352	; (adr r3, 8007f40 <__ieee754_pow+0xa08>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fa7b 	bl	80002dc <__adddf3>
 8007de6:	4622      	mov	r2, r4
 8007de8:	462b      	mov	r3, r5
 8007dea:	f7f8 fc2d 	bl	8000648 <__aeabi_dmul>
 8007dee:	a356      	add	r3, pc, #344	; (adr r3, 8007f48 <__ieee754_pow+0xa10>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fa70 	bl	80002d8 <__aeabi_dsub>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	f7f8 fc24 	bl	8000648 <__aeabi_dmul>
 8007e00:	a353      	add	r3, pc, #332	; (adr r3, 8007f50 <__ieee754_pow+0xa18>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fa69 	bl	80002dc <__adddf3>
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	f7f8 fc1b 	bl	8000648 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fa5d 	bl	80002d8 <__aeabi_dsub>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4640      	mov	r0, r8
 8007e28:	4649      	mov	r1, r9
 8007e2a:	f7f8 fc0d 	bl	8000648 <__aeabi_dmul>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	ec41 0b19 	vmov	d9, r0, r1
 8007e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa4c 	bl	80002d8 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	ec51 0b19 	vmov	r0, r1, d9
 8007e48:	f7f8 fd28 	bl	800089c <__aeabi_ddiv>
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4604      	mov	r4, r0
 8007e50:	460d      	mov	r5, r1
 8007e52:	463b      	mov	r3, r7
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 fbf6 	bl	8000648 <__aeabi_dmul>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	f7f8 fa3c 	bl	80002dc <__adddf3>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fa34 	bl	80002d8 <__aeabi_dsub>
 8007e70:	4642      	mov	r2, r8
 8007e72:	464b      	mov	r3, r9
 8007e74:	f7f8 fa30 	bl	80002d8 <__aeabi_dsub>
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	493a      	ldr	r1, [pc, #232]	; (8007f68 <__ieee754_pow+0xa30>)
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f7f8 fa2a 	bl	80002d8 <__aeabi_dsub>
 8007e84:	e9cd 0100 	strd	r0, r1, [sp]
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e92:	da2f      	bge.n	8007ef4 <__ieee754_pow+0x9bc>
 8007e94:	4650      	mov	r0, sl
 8007e96:	ed9d 0b00 	vldr	d0, [sp]
 8007e9a:	f000 f9cd 	bl	8008238 <scalbn>
 8007e9e:	ec51 0b10 	vmov	r0, r1, d0
 8007ea2:	ec53 2b18 	vmov	r2, r3, d8
 8007ea6:	f7ff bbe0 	b.w	800766a <__ieee754_pow+0x132>
 8007eaa:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <__ieee754_pow+0xa34>)
 8007eac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	f77f af0b 	ble.w	8007ccc <__ieee754_pow+0x794>
 8007eb6:	4b2e      	ldr	r3, [pc, #184]	; (8007f70 <__ieee754_pow+0xa38>)
 8007eb8:	440b      	add	r3, r1
 8007eba:	4303      	orrs	r3, r0
 8007ebc:	d00b      	beq.n	8007ed6 <__ieee754_pow+0x99e>
 8007ebe:	a326      	add	r3, pc, #152	; (adr r3, 8007f58 <__ieee754_pow+0xa20>)
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	ec51 0b18 	vmov	r0, r1, d8
 8007ec8:	f7f8 fbbe 	bl	8000648 <__aeabi_dmul>
 8007ecc:	a322      	add	r3, pc, #136	; (adr r3, 8007f58 <__ieee754_pow+0xa20>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f7ff bbca 	b.w	800766a <__ieee754_pow+0x132>
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	462b      	mov	r3, r5
 8007eda:	f7f8 f9fd 	bl	80002d8 <__aeabi_dsub>
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	f7f8 fe37 	bl	8000b54 <__aeabi_dcmpge>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f43f aef0 	beq.w	8007ccc <__ieee754_pow+0x794>
 8007eec:	e7e7      	b.n	8007ebe <__ieee754_pow+0x986>
 8007eee:	f04f 0a00 	mov.w	sl, #0
 8007ef2:	e717      	b.n	8007d24 <__ieee754_pow+0x7ec>
 8007ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	e7d2      	b.n	8007ea2 <__ieee754_pow+0x96a>
 8007efc:	491a      	ldr	r1, [pc, #104]	; (8007f68 <__ieee754_pow+0xa30>)
 8007efe:	2000      	movs	r0, #0
 8007f00:	f7ff bb9e 	b.w	8007640 <__ieee754_pow+0x108>
 8007f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f08:	f7ff bb9a 	b.w	8007640 <__ieee754_pow+0x108>
 8007f0c:	9000      	str	r0, [sp, #0]
 8007f0e:	f7ff bb76 	b.w	80075fe <__ieee754_pow+0xc6>
 8007f12:	2100      	movs	r1, #0
 8007f14:	f7ff bb60 	b.w	80075d8 <__ieee754_pow+0xa0>
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	3fe62e43 	.word	0x3fe62e43
 8007f20:	fefa39ef 	.word	0xfefa39ef
 8007f24:	3fe62e42 	.word	0x3fe62e42
 8007f28:	0ca86c39 	.word	0x0ca86c39
 8007f2c:	be205c61 	.word	0xbe205c61
 8007f30:	72bea4d0 	.word	0x72bea4d0
 8007f34:	3e663769 	.word	0x3e663769
 8007f38:	c5d26bf1 	.word	0xc5d26bf1
 8007f3c:	3ebbbd41 	.word	0x3ebbbd41
 8007f40:	af25de2c 	.word	0xaf25de2c
 8007f44:	3f11566a 	.word	0x3f11566a
 8007f48:	16bebd93 	.word	0x16bebd93
 8007f4c:	3f66c16c 	.word	0x3f66c16c
 8007f50:	5555553e 	.word	0x5555553e
 8007f54:	3fc55555 	.word	0x3fc55555
 8007f58:	c2f8f359 	.word	0xc2f8f359
 8007f5c:	01a56e1f 	.word	0x01a56e1f
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	000fffff 	.word	0x000fffff
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	4090cbff 	.word	0x4090cbff
 8007f70:	3f6f3400 	.word	0x3f6f3400
 8007f74:	652b82fe 	.word	0x652b82fe
 8007f78:	3c971547 	.word	0x3c971547

08007f7c <__ieee754_sqrt>:
 8007f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	ec55 4b10 	vmov	r4, r5, d0
 8007f84:	4e56      	ldr	r6, [pc, #344]	; (80080e0 <__ieee754_sqrt+0x164>)
 8007f86:	43ae      	bics	r6, r5
 8007f88:	ee10 0a10 	vmov	r0, s0
 8007f8c:	ee10 3a10 	vmov	r3, s0
 8007f90:	4629      	mov	r1, r5
 8007f92:	462a      	mov	r2, r5
 8007f94:	d110      	bne.n	8007fb8 <__ieee754_sqrt+0x3c>
 8007f96:	ee10 2a10 	vmov	r2, s0
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f7f8 fb54 	bl	8000648 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7f8 f998 	bl	80002dc <__adddf3>
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	ec45 4b10 	vmov	d0, r4, r5
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	dc10      	bgt.n	8007fde <__ieee754_sqrt+0x62>
 8007fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fc0:	4330      	orrs	r0, r6
 8007fc2:	d0f5      	beq.n	8007fb0 <__ieee754_sqrt+0x34>
 8007fc4:	b15d      	cbz	r5, 8007fde <__ieee754_sqrt+0x62>
 8007fc6:	ee10 2a10 	vmov	r2, s0
 8007fca:	462b      	mov	r3, r5
 8007fcc:	ee10 0a10 	vmov	r0, s0
 8007fd0:	f7f8 f982 	bl	80002d8 <__aeabi_dsub>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	f7f8 fc60 	bl	800089c <__aeabi_ddiv>
 8007fdc:	e7e6      	b.n	8007fac <__ieee754_sqrt+0x30>
 8007fde:	1509      	asrs	r1, r1, #20
 8007fe0:	d076      	beq.n	80080d0 <__ieee754_sqrt+0x154>
 8007fe2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007fe6:	07ce      	lsls	r6, r1, #31
 8007fe8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007fec:	bf5e      	ittt	pl
 8007fee:	0fda      	lsrpl	r2, r3, #31
 8007ff0:	005b      	lslpl	r3, r3, #1
 8007ff2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007ff6:	0fda      	lsrs	r2, r3, #31
 8007ff8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007ffc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008000:	2000      	movs	r0, #0
 8008002:	106d      	asrs	r5, r5, #1
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	f04f 0e16 	mov.w	lr, #22
 800800a:	4684      	mov	ip, r0
 800800c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008010:	eb0c 0401 	add.w	r4, ip, r1
 8008014:	4294      	cmp	r4, r2
 8008016:	bfde      	ittt	le
 8008018:	1b12      	suble	r2, r2, r4
 800801a:	eb04 0c01 	addle.w	ip, r4, r1
 800801e:	1840      	addle	r0, r0, r1
 8008020:	0052      	lsls	r2, r2, #1
 8008022:	f1be 0e01 	subs.w	lr, lr, #1
 8008026:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800802a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800802e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008032:	d1ed      	bne.n	8008010 <__ieee754_sqrt+0x94>
 8008034:	4671      	mov	r1, lr
 8008036:	2720      	movs	r7, #32
 8008038:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800803c:	4562      	cmp	r2, ip
 800803e:	eb04 060e 	add.w	r6, r4, lr
 8008042:	dc02      	bgt.n	800804a <__ieee754_sqrt+0xce>
 8008044:	d113      	bne.n	800806e <__ieee754_sqrt+0xf2>
 8008046:	429e      	cmp	r6, r3
 8008048:	d811      	bhi.n	800806e <__ieee754_sqrt+0xf2>
 800804a:	2e00      	cmp	r6, #0
 800804c:	eb06 0e04 	add.w	lr, r6, r4
 8008050:	da43      	bge.n	80080da <__ieee754_sqrt+0x15e>
 8008052:	f1be 0f00 	cmp.w	lr, #0
 8008056:	db40      	blt.n	80080da <__ieee754_sqrt+0x15e>
 8008058:	f10c 0801 	add.w	r8, ip, #1
 800805c:	eba2 020c 	sub.w	r2, r2, ip
 8008060:	429e      	cmp	r6, r3
 8008062:	bf88      	it	hi
 8008064:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008068:	1b9b      	subs	r3, r3, r6
 800806a:	4421      	add	r1, r4
 800806c:	46c4      	mov	ip, r8
 800806e:	0052      	lsls	r2, r2, #1
 8008070:	3f01      	subs	r7, #1
 8008072:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008076:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800807a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800807e:	d1dd      	bne.n	800803c <__ieee754_sqrt+0xc0>
 8008080:	4313      	orrs	r3, r2
 8008082:	d006      	beq.n	8008092 <__ieee754_sqrt+0x116>
 8008084:	1c4c      	adds	r4, r1, #1
 8008086:	bf13      	iteet	ne
 8008088:	3101      	addne	r1, #1
 800808a:	3001      	addeq	r0, #1
 800808c:	4639      	moveq	r1, r7
 800808e:	f021 0101 	bicne.w	r1, r1, #1
 8008092:	1043      	asrs	r3, r0, #1
 8008094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008098:	0849      	lsrs	r1, r1, #1
 800809a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800809e:	07c2      	lsls	r2, r0, #31
 80080a0:	bf48      	it	mi
 80080a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80080a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80080aa:	460c      	mov	r4, r1
 80080ac:	463d      	mov	r5, r7
 80080ae:	e77f      	b.n	8007fb0 <__ieee754_sqrt+0x34>
 80080b0:	0ada      	lsrs	r2, r3, #11
 80080b2:	3815      	subs	r0, #21
 80080b4:	055b      	lsls	r3, r3, #21
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d0fa      	beq.n	80080b0 <__ieee754_sqrt+0x134>
 80080ba:	02d7      	lsls	r7, r2, #11
 80080bc:	d50a      	bpl.n	80080d4 <__ieee754_sqrt+0x158>
 80080be:	f1c1 0420 	rsb	r4, r1, #32
 80080c2:	fa23 f404 	lsr.w	r4, r3, r4
 80080c6:	1e4d      	subs	r5, r1, #1
 80080c8:	408b      	lsls	r3, r1
 80080ca:	4322      	orrs	r2, r4
 80080cc:	1b41      	subs	r1, r0, r5
 80080ce:	e788      	b.n	8007fe2 <__ieee754_sqrt+0x66>
 80080d0:	4608      	mov	r0, r1
 80080d2:	e7f0      	b.n	80080b6 <__ieee754_sqrt+0x13a>
 80080d4:	0052      	lsls	r2, r2, #1
 80080d6:	3101      	adds	r1, #1
 80080d8:	e7ef      	b.n	80080ba <__ieee754_sqrt+0x13e>
 80080da:	46e0      	mov	r8, ip
 80080dc:	e7be      	b.n	800805c <__ieee754_sqrt+0xe0>
 80080de:	bf00      	nop
 80080e0:	7ff00000 	.word	0x7ff00000

080080e4 <fabs>:
 80080e4:	ec51 0b10 	vmov	r0, r1, d0
 80080e8:	ee10 2a10 	vmov	r2, s0
 80080ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080f0:	ec43 2b10 	vmov	d0, r2, r3
 80080f4:	4770      	bx	lr

080080f6 <finite>:
 80080f6:	b082      	sub	sp, #8
 80080f8:	ed8d 0b00 	vstr	d0, [sp]
 80080fc:	9801      	ldr	r0, [sp, #4]
 80080fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008102:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008106:	0fc0      	lsrs	r0, r0, #31
 8008108:	b002      	add	sp, #8
 800810a:	4770      	bx	lr
 800810c:	0000      	movs	r0, r0
	...

08008110 <nan>:
 8008110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008118 <nan+0x8>
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	00000000 	.word	0x00000000
 800811c:	7ff80000 	.word	0x7ff80000

08008120 <rint>:
 8008120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008122:	ec51 0b10 	vmov	r0, r1, d0
 8008126:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800812a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800812e:	2e13      	cmp	r6, #19
 8008130:	ee10 4a10 	vmov	r4, s0
 8008134:	460b      	mov	r3, r1
 8008136:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800813a:	dc58      	bgt.n	80081ee <rint+0xce>
 800813c:	2e00      	cmp	r6, #0
 800813e:	da2b      	bge.n	8008198 <rint+0x78>
 8008140:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008144:	4302      	orrs	r2, r0
 8008146:	d023      	beq.n	8008190 <rint+0x70>
 8008148:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800814c:	4302      	orrs	r2, r0
 800814e:	4254      	negs	r4, r2
 8008150:	4314      	orrs	r4, r2
 8008152:	0c4b      	lsrs	r3, r1, #17
 8008154:	0b24      	lsrs	r4, r4, #12
 8008156:	045b      	lsls	r3, r3, #17
 8008158:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800815c:	ea44 0103 	orr.w	r1, r4, r3
 8008160:	4b32      	ldr	r3, [pc, #200]	; (800822c <rint+0x10c>)
 8008162:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008166:	e9d3 6700 	ldrd	r6, r7, [r3]
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 f8b3 	bl	80002dc <__adddf3>
 8008176:	e9cd 0100 	strd	r0, r1, [sp]
 800817a:	463b      	mov	r3, r7
 800817c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008180:	4632      	mov	r2, r6
 8008182:	f7f8 f8a9 	bl	80002d8 <__aeabi_dsub>
 8008186:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800818a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800818e:	4639      	mov	r1, r7
 8008190:	ec41 0b10 	vmov	d0, r0, r1
 8008194:	b003      	add	sp, #12
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008198:	4a25      	ldr	r2, [pc, #148]	; (8008230 <rint+0x110>)
 800819a:	4132      	asrs	r2, r6
 800819c:	ea01 0702 	and.w	r7, r1, r2
 80081a0:	4307      	orrs	r7, r0
 80081a2:	d0f5      	beq.n	8008190 <rint+0x70>
 80081a4:	0851      	lsrs	r1, r2, #1
 80081a6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80081aa:	4314      	orrs	r4, r2
 80081ac:	d00c      	beq.n	80081c8 <rint+0xa8>
 80081ae:	ea23 0201 	bic.w	r2, r3, r1
 80081b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081b6:	2e13      	cmp	r6, #19
 80081b8:	fa43 f606 	asr.w	r6, r3, r6
 80081bc:	bf0c      	ite	eq
 80081be:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80081c2:	2400      	movne	r4, #0
 80081c4:	ea42 0306 	orr.w	r3, r2, r6
 80081c8:	4918      	ldr	r1, [pc, #96]	; (800822c <rint+0x10c>)
 80081ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80081ce:	4622      	mov	r2, r4
 80081d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f880 	bl	80002dc <__adddf3>
 80081dc:	e9cd 0100 	strd	r0, r1, [sp]
 80081e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e4:	4622      	mov	r2, r4
 80081e6:	462b      	mov	r3, r5
 80081e8:	f7f8 f876 	bl	80002d8 <__aeabi_dsub>
 80081ec:	e7d0      	b.n	8008190 <rint+0x70>
 80081ee:	2e33      	cmp	r6, #51	; 0x33
 80081f0:	dd07      	ble.n	8008202 <rint+0xe2>
 80081f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081f6:	d1cb      	bne.n	8008190 <rint+0x70>
 80081f8:	ee10 2a10 	vmov	r2, s0
 80081fc:	f7f8 f86e 	bl	80002dc <__adddf3>
 8008200:	e7c6      	b.n	8008190 <rint+0x70>
 8008202:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008206:	f04f 36ff 	mov.w	r6, #4294967295
 800820a:	40d6      	lsrs	r6, r2
 800820c:	4230      	tst	r0, r6
 800820e:	d0bf      	beq.n	8008190 <rint+0x70>
 8008210:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008214:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008218:	bf1f      	itttt	ne
 800821a:	ea24 0101 	bicne.w	r1, r4, r1
 800821e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008222:	fa44 f202 	asrne.w	r2, r4, r2
 8008226:	ea41 0402 	orrne.w	r4, r1, r2
 800822a:	e7cd      	b.n	80081c8 <rint+0xa8>
 800822c:	08008878 	.word	0x08008878
 8008230:	000fffff 	.word	0x000fffff
 8008234:	00000000 	.word	0x00000000

08008238 <scalbn>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	ec55 4b10 	vmov	r4, r5, d0
 800823e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008242:	4606      	mov	r6, r0
 8008244:	462b      	mov	r3, r5
 8008246:	b99a      	cbnz	r2, 8008270 <scalbn+0x38>
 8008248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800824c:	4323      	orrs	r3, r4
 800824e:	d036      	beq.n	80082be <scalbn+0x86>
 8008250:	4b39      	ldr	r3, [pc, #228]	; (8008338 <scalbn+0x100>)
 8008252:	4629      	mov	r1, r5
 8008254:	ee10 0a10 	vmov	r0, s0
 8008258:	2200      	movs	r2, #0
 800825a:	f7f8 f9f5 	bl	8000648 <__aeabi_dmul>
 800825e:	4b37      	ldr	r3, [pc, #220]	; (800833c <scalbn+0x104>)
 8008260:	429e      	cmp	r6, r3
 8008262:	4604      	mov	r4, r0
 8008264:	460d      	mov	r5, r1
 8008266:	da10      	bge.n	800828a <scalbn+0x52>
 8008268:	a32b      	add	r3, pc, #172	; (adr r3, 8008318 <scalbn+0xe0>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e03a      	b.n	80082e6 <scalbn+0xae>
 8008270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008274:	428a      	cmp	r2, r1
 8008276:	d10c      	bne.n	8008292 <scalbn+0x5a>
 8008278:	ee10 2a10 	vmov	r2, s0
 800827c:	4620      	mov	r0, r4
 800827e:	4629      	mov	r1, r5
 8008280:	f7f8 f82c 	bl	80002dc <__adddf3>
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	e019      	b.n	80082be <scalbn+0x86>
 800828a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800828e:	460b      	mov	r3, r1
 8008290:	3a36      	subs	r2, #54	; 0x36
 8008292:	4432      	add	r2, r6
 8008294:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008298:	428a      	cmp	r2, r1
 800829a:	dd08      	ble.n	80082ae <scalbn+0x76>
 800829c:	2d00      	cmp	r5, #0
 800829e:	a120      	add	r1, pc, #128	; (adr r1, 8008320 <scalbn+0xe8>)
 80082a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082a4:	da1c      	bge.n	80082e0 <scalbn+0xa8>
 80082a6:	a120      	add	r1, pc, #128	; (adr r1, 8008328 <scalbn+0xf0>)
 80082a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ac:	e018      	b.n	80082e0 <scalbn+0xa8>
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	dd08      	ble.n	80082c4 <scalbn+0x8c>
 80082b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082be:	ec45 4b10 	vmov	d0, r4, r5
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082c8:	da19      	bge.n	80082fe <scalbn+0xc6>
 80082ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082ce:	429e      	cmp	r6, r3
 80082d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80082d4:	dd0a      	ble.n	80082ec <scalbn+0xb4>
 80082d6:	a112      	add	r1, pc, #72	; (adr r1, 8008320 <scalbn+0xe8>)
 80082d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e2      	bne.n	80082a6 <scalbn+0x6e>
 80082e0:	a30f      	add	r3, pc, #60	; (adr r3, 8008320 <scalbn+0xe8>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f8 f9af 	bl	8000648 <__aeabi_dmul>
 80082ea:	e7cb      	b.n	8008284 <scalbn+0x4c>
 80082ec:	a10a      	add	r1, pc, #40	; (adr r1, 8008318 <scalbn+0xe0>)
 80082ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0b8      	beq.n	8008268 <scalbn+0x30>
 80082f6:	a10e      	add	r1, pc, #56	; (adr r1, 8008330 <scalbn+0xf8>)
 80082f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082fc:	e7b4      	b.n	8008268 <scalbn+0x30>
 80082fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008302:	3236      	adds	r2, #54	; 0x36
 8008304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800830c:	4620      	mov	r0, r4
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <scalbn+0x108>)
 8008310:	2200      	movs	r2, #0
 8008312:	e7e8      	b.n	80082e6 <scalbn+0xae>
 8008314:	f3af 8000 	nop.w
 8008318:	c2f8f359 	.word	0xc2f8f359
 800831c:	01a56e1f 	.word	0x01a56e1f
 8008320:	8800759c 	.word	0x8800759c
 8008324:	7e37e43c 	.word	0x7e37e43c
 8008328:	8800759c 	.word	0x8800759c
 800832c:	fe37e43c 	.word	0xfe37e43c
 8008330:	c2f8f359 	.word	0xc2f8f359
 8008334:	81a56e1f 	.word	0x81a56e1f
 8008338:	43500000 	.word	0x43500000
 800833c:	ffff3cb0 	.word	0xffff3cb0
 8008340:	3c900000 	.word	0x3c900000

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
