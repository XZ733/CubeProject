
ADS9226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005408  08005408  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005410  08005410  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08005488  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08005488  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165c0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c17  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00039278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a70  00000000  00000000  0003b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017018  00000000  00000000  00063100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc82b  00000000  00000000  0007a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c8  00000000  00000000  00176998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005310 	.word	0x08005310

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005310 	.word	0x08005310

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a27      	ldr	r2, [pc, #156]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_GPIO_Init+0xd0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_GPIO_Init+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_GPIO_Init+0xd0>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_GPIO_Init+0xd0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_GPIO_Init+0xd0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <MX_GPIO_Init+0xd0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_GPIO_Init+0xd0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4816      	ldr	r0, [pc, #88]	; (800068c <MX_GPIO_Init+0xd4>)
 8000634:	f000 feb2 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_GPIO_Init+0xd8>)
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_GPIO_Init+0xdc>)
 800064e:	f000 fd23 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000652:	2340      	movs	r3, #64	; 0x40
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <MX_GPIO_Init+0xd4>)
 800066a:	f000 fd15 	bl	8001098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2028      	movs	r0, #40	; 0x28
 8000674:	f000 fcdb 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000678:	2028      	movs	r0, #40	; 0x28
 800067a:	f000 fcf2 	bl	8001062 <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3728      	adds	r7, #40	; 0x28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	48000400 	.word	0x48000400
 8000690:	10110000 	.word	0x10110000
 8000694:	48000800 	.word	0x48000800

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fb7b 	bl	8000d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f82a 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff ff88 	bl	80005b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 faae 	bl	8000c08 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80006ac:	f000 fa24 	bl	8000af8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80006b0:	f000 f88c 	bl	80007cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);        //启动定时器TIM6
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <main+0x4c>)
 80006b6:	f002 fcdf 	bl	8003078 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(SendFlag == 1)
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main+0x50>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d1fb      	bne.n	80006ba <main+0x22>
	  {
		  HAL_SPI_Receive(&hspi1,&data,1,100);
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <main+0x54>)
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <main+0x58>)
 80006ca:	f001 ff82 	bl	80025d2 <HAL_SPI_Receive>
		  SendFlag = 0;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <main+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		  printf("%d\r\n",data);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <main+0x54>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <main+0x5c>)
 80006dc:	f003 fec2 	bl	8004464 <iprintf>
	  if(SendFlag == 1)
 80006e0:	e7eb      	b.n	80006ba <main+0x22>
 80006e2:	bf00      	nop
 80006e4:	20000104 	.word	0x20000104
 80006e8:	2000008d 	.word	0x2000008d
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	08005328 	.word	0x08005328

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a8      	sub	sp, #160	; 0xa0
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000702:	2238      	movs	r2, #56	; 0x38
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fea4 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2254      	movs	r2, #84	; 0x54
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fe96 	bl	8004454 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fe73 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072e:	2301      	movs	r3, #1
 8000730:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	2303      	movs	r3, #3
 8000740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000744:	2306      	movs	r3, #6
 8000746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074a:	2355      	movs	r3, #85	; 0x55
 800074c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000766:	4618      	mov	r0, r3
 8000768:	f000 ff08 	bl	800157c <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000772:	f000 f826 	bl	80007c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800078e:	2104      	movs	r1, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fa0b 	bl	8001bac <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800079c:	f000 f811 	bl	80007c2 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007a0:	2320      	movs	r3, #32
 80007a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fc1a 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b6:	f000 f804 	bl	80007c2 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	37a0      	adds	r7, #160	; 0xa0
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c6:	b672      	cpsid	i
}
 80007c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ca:	e7fe      	b.n	80007ca <Error_Handler+0x8>

080007cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_SPI1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI1_Init+0x74>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI1_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI1_Init+0x74>)
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI1_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI1_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI1_Init+0x74>)
 800082c:	f001 fe26 	bl	800247c <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f7ff ffc4 	bl	80007c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000a0 	.word	0x200000a0
 8000844:	40013000 	.word	0x40013000

08000848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d128      	bne.n	80008bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23e0      	movs	r3, #224	; 0xe0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fbee 	bl	8001098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000902:	f000 fe2b 	bl	800155c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 fa6c 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800096c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000970:	f000 fd2c 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM6_DAC_IRQHandler+0x10>)
 800097e:	f002 fbf3 	bl	8003168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000104 	.word	0x20000104

0800098c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e00a      	b.n	80009b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099e:	f3af 8000 	nop.w
 80009a2:	4601      	mov	r1, r0
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	b2ca      	uxtb	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <_read+0x12>
	}

return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f99d 	bl	8000d20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf1      	blt.n	80009d8 <_write+0x12>
	}
	return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_close>:

int _close(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	605a      	str	r2, [r3, #4]
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_isatty>:

int _isatty(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f003 fcb2 	bl	8004400 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <_sbrk+0x64>)
 8000ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20020000 	.word	0x20020000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	20000090 	.word	0x20000090
 8000ad0:	200001f8 	.word	0x200001f8

08000ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_TIM6_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b10:	2263      	movs	r2, #99	; 0x63
 8000b12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b1c:	2263      	movs	r2, #99	; 0x63
 8000b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b28:	f002 fa4e 	bl	8002fc8 <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b32:	f7ff fe46 	bl	80007c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_TIM6_Init+0x64>)
 8000b44:	f002 fd60 	bl	8003608 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b4e:	f7ff fe38 	bl	80007c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000104 	.word	0x20000104
 8000b60:	40001000 	.word	0x40001000

08000b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d113      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2036      	movs	r0, #54	; 0x36
 8000b94:	f000 fa4b 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f000 fa62 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	static uint8_t count = 0;
	count++;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bc2:	701a      	strb	r2, [r3, #0]
	if(count == 3)
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d107      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bd2:	f000 fbe3 	bl	800139c <HAL_GPIO_WritePin>
		SendFlag = 1;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
	}

	if(count == 8)
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d107      	bne.n	8000bf4 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		count = 0;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bf0:	f000 fbd4 	bl	800139c <HAL_GPIO_WritePin>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000094 	.word	0x20000094
 8000c00:	48000400 	.word	0x48000400
 8000c04:	2000008d 	.word	0x2000008d

08000c08 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <MX_LPUART1_UART_Init+0x90>)
 8000c10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c4c:	f002 fdb8 	bl	80037c0 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff fdb4 	bl	80007c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c5e:	f003 fb05 	bl	800426c <HAL_UARTEx_SetTxFifoThreshold>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000c68:	f7ff fdab 	bl	80007c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c70:	f003 fb3a 	bl	80042e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000c7a:	f7ff fda2 	bl	80007c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_LPUART1_UART_Init+0x8c>)
 8000c80:	f003 fabb 	bl	80041fa <HAL_UARTEx_DisableFifoMode>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000c8a:	f7ff fd9a 	bl	80007c2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000150 	.word	0x20000150
 8000c98:	40008000 	.word	0x40008000

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0x7c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d128      	bne.n	8000d10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_MspInit+0x80>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 f9c4 	bl	8001098 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40008000 	.word	0x40008000
 8000d1c:	40021000 	.word	0x40021000

08000d20 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)&ch,1,0xFFFF);
 8000d28:	1d39      	adds	r1, r7, #4
 8000d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <__io_putchar+0x20>)
 8000d32:	f002 fd95 	bl	8003860 <HAL_UART_Transmit>
  return ch;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000150 	.word	0x20000150

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d6e:	f7ff feb1 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f003 fb4b 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d76:	f7ff fc8f 	bl	8000698 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d88:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 8000d8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d90:	200001f4 	.word	0x200001f4

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>

08000d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f939 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f80e 	bl	8000dc8 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	e001      	b.n	8000dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db8:	f7ff fd88 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_InitTick+0x68>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d022      	beq.n	8000e22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_InitTick+0x6c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_InitTick+0x68>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f944 	bl	800107e <HAL_SYSTICK_Config>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10f      	bne.n	8000e1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	d809      	bhi.n	8000e16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e02:	2200      	movs	r2, #0
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	f000 f910 	bl	800102e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_InitTick+0x70>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e004      	b.n	8000e26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e001      	b.n	8000e26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	200001e0 	.word	0x200001e0
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200001e0 	.word	0x200001e0

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff40 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff33 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa4 	bl	8000fd4 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010a6:	e15a      	b.n	800135e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 814c 	beq.w	8001358 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0xea>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b12      	cmp	r3, #18
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0203 	and.w	r2, r3, #3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80a6 	beq.w	8001358 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b5b      	ldr	r3, [pc, #364]	; (800137c <HAL_GPIO_Init+0x2e4>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	4a5a      	ldr	r2, [pc, #360]	; (800137c <HAL_GPIO_Init+0x2e4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6613      	str	r3, [r2, #96]	; 0x60
 8001218:	4b58      	ldr	r3, [pc, #352]	; (800137c <HAL_GPIO_Init+0x2e4>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001224:	4a56      	ldr	r2, [pc, #344]	; (8001380 <HAL_GPIO_Init+0x2e8>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124e:	d01f      	beq.n	8001290 <HAL_GPIO_Init+0x1f8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x2ec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x1f4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1f0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4a      	ldr	r2, [pc, #296]	; (800138c <HAL_GPIO_Init+0x2f4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1ec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a49      	ldr	r2, [pc, #292]	; (8001390 <HAL_GPIO_Init+0x2f8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1e8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x2fc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1e4>
 8001278:	2305      	movs	r3, #5
 800127a:	e00a      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 800127c:	2306      	movs	r3, #6
 800127e:	e008      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 8001280:	2304      	movs	r3, #4
 8001282:	e006      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 8001284:	2303      	movs	r3, #3
 8001286:	e004      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 8001288:	2302      	movs	r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_GPIO_Init+0x1fa>
 8001290:	2300      	movs	r3, #0
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	4093      	lsls	r3, r2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a2:	4937      	ldr	r1, [pc, #220]	; (8001380 <HAL_GPIO_Init+0x2e8>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_GPIO_Init+0x300>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d4:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x300>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x300>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x300>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_GPIO_Init+0x300>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x300>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x300>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_GPIO_Init+0x300>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f47f ae9d 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	48000400 	.word	0x48000400
 8001388:	48000800 	.word	0x48000800
 800138c:	48000c00 	.word	0x48000c00
 8001390:	48001000 	.word	0x48001000
 8001394:	48001400 	.word	0x48001400
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f806 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d141      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142e:	d131      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001436:	4a46      	ldr	r2, [pc, #280]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001448:	4a41      	ldr	r2, [pc, #260]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001450:	4b40      	ldr	r3, [pc, #256]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2232      	movs	r2, #50	; 0x32
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	e002      	b.n	800146e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b01      	subs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d102      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148e:	d158      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e057      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014a4:	e04d      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ac:	d141      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d131      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2232      	movs	r2, #50	; 0x32
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	e002      	b.n	80014fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	d102      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151a:	d112      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e011      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001530:	e007      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001540:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40007000 	.word	0x40007000
 8001554:	20000000 	.word	0x20000000
 8001558:	431bde83 	.word	0x431bde83

0800155c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6093      	str	r3, [r2, #8]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e308      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159a:	4ba3      	ldr	r3, [pc, #652]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a4:	4ba0      	ldr	r3, [pc, #640]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x3e>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d002      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d10b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b99      	ldr	r3, [pc, #612]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d157      	bne.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e2e3      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x74>
 80015e2:	4b91      	ldr	r3, [pc, #580]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a90      	ldr	r2, [pc, #576]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a8a      	ldr	r2, [pc, #552]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a87      	ldr	r2, [pc, #540]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 8001614:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a83      	ldr	r2, [pc, #524]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a80      	ldr	r2, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc14 	bl	8000e60 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc10 	bl	8000e60 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e2a8      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xc0>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc00 	bl	8000e60 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fbfc 	bl	8000e60 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e294      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d075      	beq.n	800177e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4b65      	ldr	r3, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169c:	4b62      	ldr	r3, [pc, #392]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0x136>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_OscConfig+0x13c>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11f      	bne.n	80016f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x154>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e267      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4952      	ldr	r1, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <HAL_RCC_OscConfig+0x2b0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb6d 	bl	8000dc8 <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d043      	beq.n	800177c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e253      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d023      	beq.n	8001748 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fba8 	bl	8000e60 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fba4 	bl	8000e60 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e23c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	e01a      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001748:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb84 	bl	8000e60 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fb80 	bl	8000e60 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e218      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1e0>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03c      	beq.n	8001804 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01c      	beq.n	80017cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb5d 	bl	8000e60 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fb59 	bl	8000e60 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1f1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ef      	beq.n	80017aa <HAL_RCC_OscConfig+0x22e>
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fb40 	bl	8000e60 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fb3c 	bl	8000e60 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1d4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ef      	bne.n	80017e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80ab 	beq.w	8001968 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x2b4>
 8001822:	2301      	movs	r3, #1
 8001824:	e005      	b.n	8001832 <HAL_RCC_OscConfig+0x2b6>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	20000004 	.word	0x20000004
 8001830:	2300      	movs	r3, #0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4baf      	ldr	r3, [pc, #700]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4aae      	ldr	r2, [pc, #696]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4bac      	ldr	r3, [pc, #688]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4ba9      	ldr	r3, [pc, #676]	; (8001af8 <HAL_RCC_OscConfig+0x57c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185e:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <HAL_RCC_OscConfig+0x57c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4aa5      	ldr	r2, [pc, #660]	; (8001af8 <HAL_RCC_OscConfig+0x57c>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff faf9 	bl	8000e60 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff faf5 	bl	8000e60 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e18d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b9c      	ldr	r3, [pc, #624]	; (8001af8 <HAL_RCC_OscConfig+0x57c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_RCC_OscConfig+0x32e>
 8001898:	4b96      	ldr	r3, [pc, #600]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a95      	ldr	r2, [pc, #596]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a8:	e024      	b.n	80018f4 <HAL_RCC_OscConfig+0x378>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d110      	bne.n	80018d4 <HAL_RCC_OscConfig+0x358>
 80018b2:	4b90      	ldr	r3, [pc, #576]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a8e      	ldr	r2, [pc, #568]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	4b8c      	ldr	r3, [pc, #560]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c8:	4a8a      	ldr	r2, [pc, #552]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d2:	e00f      	b.n	80018f4 <HAL_RCC_OscConfig+0x378>
 80018d4:	4b87      	ldr	r3, [pc, #540]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a86      	ldr	r2, [pc, #536]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e4:	4b83      	ldr	r3, [pc, #524]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a82      	ldr	r2, [pc, #520]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fab0 	bl	8000e60 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff faac 	bl	8000e60 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e142      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ed      	beq.n	8001904 <HAL_RCC_OscConfig+0x388>
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fa99 	bl	8000e60 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fa95 	bl	8000e60 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e12b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ed      	bne.n	8001932 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800197c:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 800197e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001982:	4a5c      	ldr	r2, [pc, #368]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fa68 	bl	8000e60 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001994:	f7ff fa64 	bl	8000e60 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0fc      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x418>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b6:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa4b 	bl	8000e60 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ce:	f7ff fa47 	bl	8000e60 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0df      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80d3 	beq.w	8001b9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f8:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	f000 808d 	beq.w	8001b20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d15a      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa21 	bl	8000e60 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fa1d 	bl	8000e60 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0b5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x580>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6a11      	ldr	r1, [r2, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a5a:	0212      	lsls	r2, r2, #8
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	3a01      	subs	r2, #1
 8001a66:	0552      	lsls	r2, r2, #21
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a6e:	0852      	lsrs	r2, r2, #1
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0652      	lsls	r2, r2, #25
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a7a:	06d2      	lsls	r2, r2, #27
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	491d      	ldr	r1, [pc, #116]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9e0 	bl	8000e60 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f9dc 	bl	8000e60 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e074      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x528>
 8001ac2:	e06c      	b.n	8001b9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f9b8 	bl	8000e60 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	e00e      	b.n	8001b12 <HAL_RCC_OscConfig+0x596>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
 8001afc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f9ae 	bl	8000e60 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e046      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_RCC_OscConfig+0x62c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x584>
 8001b1e:	e03e      	b.n	8001b9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e039      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_OscConfig+0x62c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d12c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d123      	bne.n	8001b9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e11e      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 020f 	bic.w	r2, r3, #15
 8001bda:	498c      	ldr	r1, [pc, #560]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e106      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d073      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d129      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c08:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0f4      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c18:	f000 f99e 	bl	8001f58 <RCC_GetSysClockFreqFromPLLSource>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4a7c      	ldr	r2, [pc, #496]	; (8001e14 <HAL_RCC_ClockConfig+0x268>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d93f      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c26:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d033      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d12f      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c4e:	4a70      	ldr	r2, [pc, #448]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e024      	b.n	8001ca6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c64:	4b6a      	ldr	r3, [pc, #424]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0c6      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0be      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c84:	f000 f8ce 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4a61      	ldr	r2, [pc, #388]	; (8001e14 <HAL_RCC_ClockConfig+0x268>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d909      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4957      	ldr	r1, [pc, #348]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f8d2 	bl	8000e60 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f8ce 	bl	8000e60 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e095      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d20:	4a3b      	ldr	r2, [pc, #236]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b80      	cmp	r3, #128	; 0x80
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d21d      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 020f 	bic.w	r2, r3, #15
 8001d64:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff f878 	bl	8000e60 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff f874 	bl	8000e60 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e03b      	b.n	8001e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1ed      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4917      	ldr	r1, [pc, #92]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490f      	ldr	r1, [pc, #60]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd6:	f000 f825 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490c      	ldr	r1, [pc, #48]	; (8001e18 <HAL_RCC_ClockConfig+0x26c>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ffe4 	bl	8000dc8 <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	04c4b400 	.word	0x04c4b400
 8001e18:	08005330 	.word	0x08005330
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e047      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e03e      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d136      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	4a16      	ldr	r2, [pc, #88]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e82:	68d2      	ldr	r2, [r2, #12]
 8001e84:	0a12      	lsrs	r2, r2, #8
 8001e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
      break;
 8001e90:	e00c      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	0a12      	lsrs	r2, r2, #8
 8001ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
      break;
 8001eaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e001      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	016e3600 	.word	0x016e3600

08001ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08005340 	.word	0x08005340

08001f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f30:	f7ff ffda 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0adb      	lsrs	r3, r3, #11
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08005340 	.word	0x08005340

08001f58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3301      	adds	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d10c      	bne.n	8001f96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f86:	68d2      	ldr	r2, [r2, #12]
 8001f88:	0a12      	lsrs	r2, r2, #8
 8001f8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
    break;
 8001f94:	e00c      	b.n	8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa0:	68d2      	ldr	r2, [r2, #12]
 8001fa2:	0a12      	lsrs	r2, r2, #8
 8001fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    break;
 8001fae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0e5b      	lsrs	r3, r3, #25
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	016e3600 	.word	0x016e3600
 8001fe0:	00f42400 	.word	0x00f42400

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fec:	2300      	movs	r3, #0
 8001fee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8098 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a3f      	ldr	r2, [pc, #252]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	2301      	movs	r3, #1
 800202c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800203a:	f7fe ff11 	bl	8000e60 <HAL_GetTick>
 800203e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002040:	e009      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7fe ff0d 	bl	8000e60 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d902      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	74fb      	strb	r3, [r7, #19]
        break;
 8002054:	e005      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0ef      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d159      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01e      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d019      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002084:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fecd 	bl	8000e60 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fec9 	bl	8000e60 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d902      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	74fb      	strb	r3, [r7, #19]
            break;
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210c:	e008      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	74bb      	strb	r3, [r7, #18]
 8002112:	e005      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002120:	7c7b      	ldrb	r3, [r7, #17]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4baf      	ldr	r3, [pc, #700]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4aae      	ldr	r2, [pc, #696]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213e:	4ba9      	ldr	r3, [pc, #676]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f023 0203 	bic.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	49a5      	ldr	r1, [pc, #660]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002160:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 020c 	bic.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	499d      	ldr	r1, [pc, #628]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002182:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4994      	ldr	r1, [pc, #592]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a4:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	498c      	ldr	r1, [pc, #560]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c6:	4b87      	ldr	r3, [pc, #540]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	4983      	ldr	r1, [pc, #524]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	497b      	ldr	r1, [pc, #492]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220a:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4972      	ldr	r1, [pc, #456]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	496a      	ldr	r1, [pc, #424]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	4961      	ldr	r1, [pc, #388]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	4959      	ldr	r1, [pc, #356]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4950      	ldr	r1, [pc, #320]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4948      	ldr	r1, [pc, #288]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022d2:	d105      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d4:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a42      	ldr	r2, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	493a      	ldr	r1, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	492c      	ldr	r1, [pc, #176]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	491e      	ldr	r1, [pc, #120]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002386:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4910      	ldr	r1, [pc, #64]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4902      	ldr	r1, [pc, #8]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80023e4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f0:	d105      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002418:	4917      	ldr	r1, [pc, #92]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d105      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002460:	d105      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800246e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e09d      	b.n	80025ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249e:	d009      	beq.n	80024b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
 80024a6:	e005      	b.n	80024b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe f9ba 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f4:	d902      	bls.n	80024fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e002      	b.n	8002502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800250a:	d007      	beq.n	800251c <HAL_SPI_Init+0xa0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002514:	d002      	beq.n	800251c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	ea42 0103 	orr.w	r1, r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	0c1b      	lsrs	r3, r3, #16
 8002578:	f003 0204 	and.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002598:	ea42 0103 	orr.w	r1, r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af02      	add	r7, sp, #8
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ee:	d112      	bne.n	8002616 <HAL_SPI_Receive+0x44>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10e      	bne.n	8002616 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2204      	movs	r2, #4
 80025fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f910 	bl	8002832 <HAL_SPI_TransmitReceive>
 8002612:	4603      	mov	r3, r0
 8002614:	e109      	b.n	800282a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_SPI_Receive+0x52>
 8002620:	2302      	movs	r3, #2
 8002622:	e102      	b.n	800282a <HAL_SPI_Receive+0x258>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262c:	f7fe fc18 	bl	8000e60 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002642:	e0e9      	b.n	8002818 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_SPI_Receive+0x7e>
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002654:	e0e0      	b.n	8002818 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2204      	movs	r2, #4
 800265a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026a0:	d908      	bls.n	80026b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e007      	b.n	80026c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026cc:	d10f      	bne.n	80026ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d007      	beq.n	800270c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002714:	d867      	bhi.n	80027e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002716:	e030      	b.n	800277a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d117      	bne.n	8002756 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f103 020c 	add.w	r2, r3, #12
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002754:	e011      	b.n	800277a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002756:	f7fe fb83 	bl	8000e60 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d803      	bhi.n	800276e <HAL_SPI_Receive+0x19c>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d102      	bne.n	8002774 <HAL_SPI_Receive+0x1a2>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002778:	e04e      	b.n	8002818 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1c8      	bne.n	8002718 <HAL_SPI_Receive+0x146>
 8002786:	e034      	b.n	80027f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d115      	bne.n	80027c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	b292      	uxth	r2, r2
 80027a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80027c0:	e011      	b.n	80027e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c2:	f7fe fb4d 	bl	8000e60 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d803      	bhi.n	80027da <HAL_SPI_Receive+0x208>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d102      	bne.n	80027e0 <HAL_SPI_Receive+0x20e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027e4:	e018      	b.n	8002818 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ca      	bne.n	8002788 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fb48 	bl	8002e8c <SPI_EndRxTransaction>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	75fb      	strb	r3, [r7, #23]
 8002814:	e000      	b.n	8002818 <HAL_SPI_Receive+0x246>
  }

error :
 8002816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x26>
 8002854:	2302      	movs	r3, #2
 8002856:	e1fb      	b.n	8002c50 <HAL_SPI_TransmitReceive+0x41e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002860:	f7fe fafe 	bl	8000e60 <HAL_GetTick>
 8002864:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800286c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800287c:	7efb      	ldrb	r3, [r7, #27]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00e      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x6e>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002888:	d106      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x66>
 8002892:	7efb      	ldrb	r3, [r7, #27]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d003      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800289e:	e1cd      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x80>
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028b8:	e1c0      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002910:	d802      	bhi.n	8002918 <HAL_SPI_TransmitReceive+0xe6>
 8002912:	8a3b      	ldrh	r3, [r7, #16]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d908      	bls.n	800292a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	e007      	b.n	800293a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d007      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002960:	d97c      	bls.n	8002a5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x13e>
 800296a:	8a7b      	ldrh	r3, [r7, #18]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d169      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002994:	e056      	b.n	8002a44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d11b      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x1aa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x1aa>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d113      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d11c      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x1f2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	1c9a      	adds	r2, r3, #2
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a24:	f7fe fa1c 	bl	8000e60 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d807      	bhi.n	8002a44 <HAL_SPI_TransmitReceive+0x212>
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d003      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a42:	e0fb      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1a3      	bne.n	8002996 <HAL_SPI_TransmitReceive+0x164>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d19d      	bne.n	8002996 <HAL_SPI_TransmitReceive+0x164>
 8002a5a:	e0df      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x23a>
 8002a64:	8a7b      	ldrh	r3, [r7, #18]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	f040 80cb 	bne.w	8002c02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d912      	bls.n	8002a9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	881a      	ldrh	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b02      	subs	r3, #2
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a9a:	e0b2      	b.n	8002c02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac2:	e09e      	b.n	8002c02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d134      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x30a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02f      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x30a>
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d12c      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d912      	bls.n	8002b12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b02      	subs	r3, #2
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b10:	e012      	b.n	8002b38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d148      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x3aa>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d042      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d923      	bls.n	8002baa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b02      	subs	r3, #2
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d81f      	bhi.n	8002bd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	e016      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f103 020c 	add.w	r2, r3, #12
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bdc:	f7fe f940 	bl	8000e60 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d803      	bhi.n	8002bf4 <HAL_SPI_TransmitReceive+0x3c2>
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d102      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x3c8>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c00:	e01c      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af5b 	bne.w	8002ac4 <HAL_SPI_TransmitReceive+0x292>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f af54 	bne.w	8002ac4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f98b 	bl	8002f3c <SPI_EndRxTxTransaction>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
 8002c38:	e000      	b.n	8002c3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c68:	f7fe f8fa 	bl	8000e60 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c78:	f7fe f8f2 	bl	8000e60 <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8e:	e054      	b.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d050      	beq.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c98:	f7fe f8e2 	bl	8000e60 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d902      	bls.n	8002cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d13d      	bne.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d111      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	d004      	beq.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d107      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf4:	d10f      	bne.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e017      	b.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d19b      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000000 	.word	0x20000000

08002d68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d76:	f7fe f873 	bl	8000e60 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d86:	f7fe f86b 	bl	8000e60 <HAL_GetTick>
 8002d8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00da      	lsls	r2, r3, #3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	0d1b      	lsrs	r3, r3, #20
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002da4:	e062      	b.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dac:	d109      	bne.n	8002dc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002dc0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d050      	beq.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dca:	f7fe f849 	bl	8000e60 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d902      	bls.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13d      	bne.n	8002e5c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df8:	d111      	bne.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	d004      	beq.n	8002e0e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d107      	bne.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e26:	d10f      	bne.n	8002e48 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e010      	b.n	8002e7e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d194      	bne.n	8002da6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000000 	.word	0x20000000

08002e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea0:	d111      	bne.n	8002ec6 <SPI_EndRxTransaction+0x3a>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eaa:	d004      	beq.n	8002eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb4:	d107      	bne.n	8002ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fec1 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e023      	b.n	8002f34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef4:	d11d      	bne.n	8002f32 <SPI_EndRxTransaction+0xa6>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d004      	beq.n	8002f0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d113      	bne.n	8002f32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff ff26 	bl	8002d68 <SPI_WaitFifoStateUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e000      	b.n	8002f34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff07 	bl	8002d68 <SPI_WaitFifoStateUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e027      	b.n	8002fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fe6c 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e014      	b.n	8002fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff fee0 	bl	8002d68 <SPI_WaitFifoStateUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e000      	b.n	8002fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e049      	b.n	800306e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fdb8 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 fa56 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d001      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e054      	b.n	800313a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d01d      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_TIM_Base_Start_IT+0xd4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_TIM_Base_Start_IT+0xd8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_TIM_Base_Start_IT+0xdc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_TIM_Base_Start_IT+0xe0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_TIM_Base_Start_IT+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_TIM_Base_Start_IT+0xe8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d115      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_TIM_Base_Start_IT+0xec>)
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d015      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d011      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e008      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e000      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40013400 	.word	0x40013400
 800315c:	40014000 	.word	0x40014000
 8003160:	40015000 	.word	0x40015000
 8003164:	00010007 	.word	0x00010007

08003168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f965 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f957 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f968 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0204 	mvn.w	r2, #4
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f93b 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f92d 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f93e 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f911 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f903 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f914 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b10      	cmp	r3, #16
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2208      	movs	r2, #8
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8e7 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8d9 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8ea 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0201 	mvn.w	r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fc62 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa18 	bl	8003748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d10e      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d107      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa0b 	bl	800375c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d10e      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d107      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f898 	bl	80034a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0220 	mvn.w	r2, #32
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9cb 	bl	8003734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ac:	d10f      	bne.n	80033ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033bc:	d107      	bne.n	80033ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f9d1 	bl	8003770 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033dc:	d10f      	bne.n	80033fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9c3 	bl	8003784 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d10f      	bne.n	800342e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f9b5 	bl	8003798 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800343c:	d10f      	bne.n	800345e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800344c:	d107      	bne.n	800345e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9a7 	bl	80037ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <TIM_Base_SetConfig+0x12c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d017      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d013      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <TIM_Base_SetConfig+0x130>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a42      	ldr	r2, [pc, #264]	; (80035ec <TIM_Base_SetConfig+0x134>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00b      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <TIM_Base_SetConfig+0x138>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <TIM_Base_SetConfig+0x13c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0x48>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <TIM_Base_SetConfig+0x140>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d108      	bne.n	8003512 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <TIM_Base_SetConfig+0x12c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d023      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d01f      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <TIM_Base_SetConfig+0x130>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01b      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <TIM_Base_SetConfig+0x134>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d017      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <TIM_Base_SetConfig+0x138>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <TIM_Base_SetConfig+0x13c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00f      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <TIM_Base_SetConfig+0x144>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <TIM_Base_SetConfig+0x148>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <TIM_Base_SetConfig+0x14c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_Base_SetConfig+0xaa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <TIM_Base_SetConfig+0x140>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <TIM_Base_SetConfig+0x12c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_Base_SetConfig+0x110>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <TIM_Base_SetConfig+0x13c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x110>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <TIM_Base_SetConfig+0x144>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x110>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <TIM_Base_SetConfig+0x148>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x110>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <TIM_Base_SetConfig+0x14c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x110>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <TIM_Base_SetConfig+0x140>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40015000 	.word	0x40015000
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e074      	b.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003664:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a21      	ldr	r2, [pc, #132]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d01d      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10c      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40015000 	.word	0x40015000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40014000 	.word	0x40014000

08003734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e042      	b.n	8003858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fd fa59 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2224      	movs	r2, #36	; 0x24
 80037ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8c2 	bl	800398c <UART_SetConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fb80 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fc07 	bl	8004064 <UART_CheckIdleState>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 8083 	bne.w	8003982 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x28>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e07b      	b.n	8003984 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Transmit+0x3a>
 8003896:	2302      	movs	r3, #2
 8003898:	e074      	b.n	8003984 <HAL_UART_Transmit+0x124>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd fad5 	bl	8000e60 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Transmit+0x84>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038f4:	e02c      	b.n	8003950 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	; 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fbfa 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e039      	b.n	8003984 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3302      	adds	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e007      	b.n	800393e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1cc      	bne.n	80038f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	2140      	movs	r1, #64	; 0x40
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fbc7 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e006      	b.n	8003984 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4bb1      	ldr	r3, [pc, #708]	; (8003c7c <UART_SetConfig+0x2f0>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4aa6      	ldr	r2, [pc, #664]	; (8003c80 <UART_SetConfig+0x2f4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f023 010f 	bic.w	r1, r3, #15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a97      	ldr	r2, [pc, #604]	; (8003c84 <UART_SetConfig+0x2f8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d120      	bne.n	8003a6e <UART_SetConfig+0xe2>
 8003a2c:	4b96      	ldr	r3, [pc, #600]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d816      	bhi.n	8003a68 <UART_SetConfig+0xdc>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0xb4>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a5d 	.word	0x08003a5d
 8003a48:	08003a57 	.word	0x08003a57
 8003a4c:	08003a63 	.word	0x08003a63
 8003a50:	2301      	movs	r3, #1
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	e0e7      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	76fb      	strb	r3, [r7, #27]
 8003a5a:	e0e4      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	e0e1      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003a62:	2308      	movs	r3, #8
 8003a64:	76fb      	strb	r3, [r7, #27]
 8003a66:	e0de      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e0db      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a86      	ldr	r2, [pc, #536]	; (8003c8c <UART_SetConfig+0x300>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d132      	bne.n	8003ade <UART_SetConfig+0x152>
 8003a78:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d828      	bhi.n	8003ad8 <UART_SetConfig+0x14c>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x100>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ad9 	.word	0x08003ad9
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003acd 	.word	0x08003acd
 8003aa0:	08003ad9 	.word	0x08003ad9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003ac7 	.word	0x08003ac7
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003ad9 	.word	0x08003ad9
 8003abc:	08003ad3 	.word	0x08003ad3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e0af      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e0ac      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003acc:	2304      	movs	r3, #4
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e0a9      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e0a6      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	e0a3      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6b      	ldr	r2, [pc, #428]	; (8003c90 <UART_SetConfig+0x304>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d120      	bne.n	8003b2a <UART_SetConfig+0x19e>
 8003ae8:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003af2:	2b30      	cmp	r3, #48	; 0x30
 8003af4:	d013      	beq.n	8003b1e <UART_SetConfig+0x192>
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d814      	bhi.n	8003b24 <UART_SetConfig+0x198>
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d009      	beq.n	8003b12 <UART_SetConfig+0x186>
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d810      	bhi.n	8003b24 <UART_SetConfig+0x198>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <UART_SetConfig+0x180>
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d006      	beq.n	8003b18 <UART_SetConfig+0x18c>
 8003b0a:	e00b      	b.n	8003b24 <UART_SetConfig+0x198>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	76fb      	strb	r3, [r7, #27]
 8003b10:	e089      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b12:	2302      	movs	r3, #2
 8003b14:	76fb      	strb	r3, [r7, #27]
 8003b16:	e086      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e083      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e080      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b24:	2310      	movs	r3, #16
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e07d      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <UART_SetConfig+0x308>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d120      	bne.n	8003b76 <UART_SetConfig+0x1ea>
 8003b34:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b40:	d013      	beq.n	8003b6a <UART_SetConfig+0x1de>
 8003b42:	2bc0      	cmp	r3, #192	; 0xc0
 8003b44:	d814      	bhi.n	8003b70 <UART_SetConfig+0x1e4>
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d009      	beq.n	8003b5e <UART_SetConfig+0x1d2>
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d810      	bhi.n	8003b70 <UART_SetConfig+0x1e4>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <UART_SetConfig+0x1cc>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d006      	beq.n	8003b64 <UART_SetConfig+0x1d8>
 8003b56:	e00b      	b.n	8003b70 <UART_SetConfig+0x1e4>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	76fb      	strb	r3, [r7, #27]
 8003b5c:	e063      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	76fb      	strb	r3, [r7, #27]
 8003b62:	e060      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b64:	2304      	movs	r3, #4
 8003b66:	76fb      	strb	r3, [r7, #27]
 8003b68:	e05d      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	76fb      	strb	r3, [r7, #27]
 8003b6e:	e05a      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b70:	2310      	movs	r3, #16
 8003b72:	76fb      	strb	r3, [r7, #27]
 8003b74:	e057      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a47      	ldr	r2, [pc, #284]	; (8003c98 <UART_SetConfig+0x30c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d125      	bne.n	8003bcc <UART_SetConfig+0x240>
 8003b80:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8e:	d017      	beq.n	8003bc0 <UART_SetConfig+0x234>
 8003b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b94:	d817      	bhi.n	8003bc6 <UART_SetConfig+0x23a>
 8003b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9a:	d00b      	beq.n	8003bb4 <UART_SetConfig+0x228>
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba0:	d811      	bhi.n	8003bc6 <UART_SetConfig+0x23a>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <UART_SetConfig+0x222>
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	d006      	beq.n	8003bba <UART_SetConfig+0x22e>
 8003bac:	e00b      	b.n	8003bc6 <UART_SetConfig+0x23a>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e038      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e035      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e032      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	e02f      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	76fb      	strb	r3, [r7, #27]
 8003bca:	e02c      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <UART_SetConfig+0x2f4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d125      	bne.n	8003c22 <UART_SetConfig+0x296>
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <UART_SetConfig+0x2fc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be4:	d017      	beq.n	8003c16 <UART_SetConfig+0x28a>
 8003be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bea:	d817      	bhi.n	8003c1c <UART_SetConfig+0x290>
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d00b      	beq.n	8003c0a <UART_SetConfig+0x27e>
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d811      	bhi.n	8003c1c <UART_SetConfig+0x290>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <UART_SetConfig+0x278>
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x284>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x290>
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	76fb      	strb	r3, [r7, #27]
 8003c0e:	e00a      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003c10:	2304      	movs	r3, #4
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	e007      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003c16:	2308      	movs	r3, #8
 8003c18:	76fb      	strb	r3, [r7, #27]
 8003c1a:	e004      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e001      	b.n	8003c26 <UART_SetConfig+0x29a>
 8003c22:	2310      	movs	r3, #16
 8003c24:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <UART_SetConfig+0x2f4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	f040 809f 	bne.w	8003d70 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c32:	7efb      	ldrb	r3, [r7, #27]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d837      	bhi.n	8003ca8 <UART_SetConfig+0x31c>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x2b4>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003ca9 	.word	0x08003ca9
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003ca9 	.word	0x08003ca9
 8003c50:	08003c73 	.word	0x08003c73
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003ca9 	.word	0x08003ca9
 8003c5c:	08003ca9 	.word	0x08003ca9
 8003c60:	08003ca1 	.word	0x08003ca1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe f94c 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003c68:	6178      	str	r0, [r7, #20]
        break;
 8003c6a:	e022      	b.n	8003cb2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <UART_SetConfig+0x310>)
 8003c6e:	617b      	str	r3, [r7, #20]
        break;
 8003c70:	e01f      	b.n	8003cb2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe f8d7 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8003c76:	6178      	str	r0, [r7, #20]
        break;
 8003c78:	e01b      	b.n	8003cb2 <UART_SetConfig+0x326>
 8003c7a:	bf00      	nop
 8003c7c:	cfff69f3 	.word	0xcfff69f3
 8003c80:	40008000 	.word	0x40008000
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40004800 	.word	0x40004800
 8003c94:	40004c00 	.word	0x40004c00
 8003c98:	40005000 	.word	0x40005000
 8003c9c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca4:	617b      	str	r3, [r7, #20]
        break;
 8003ca6:	e004      	b.n	8003cb2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	76bb      	strb	r3, [r7, #26]
        break;
 8003cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 811b 	beq.w	8003ef0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	4a96      	ldr	r2, [pc, #600]	; (8003f18 <UART_SetConfig+0x58c>)
 8003cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ccc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d305      	bcc.n	8003cea <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d902      	bls.n	8003cf0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	76bb      	strb	r3, [r7, #26]
 8003cee:	e0ff      	b.n	8003ef0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	4a86      	ldr	r2, [pc, #536]	; (8003f18 <UART_SetConfig+0x58c>)
 8003cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f7fc fada 	bl	80002c0 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	020b      	lsls	r3, r1, #8
 8003d1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d22:	0202      	lsls	r2, r0, #8
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	6849      	ldr	r1, [r1, #4]
 8003d28:	0849      	lsrs	r1, r1, #1
 8003d2a:	4608      	mov	r0, r1
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	1814      	adds	r4, r2, r0
 8003d32:	eb43 0501 	adc.w	r5, r3, r1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fabc 	bl	80002c0 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d308      	bcc.n	8003d6a <UART_SetConfig+0x3de>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d204      	bcs.n	8003d6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e0c2      	b.n	8003ef0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	76bb      	strb	r3, [r7, #26]
 8003d6e:	e0bf      	b.n	8003ef0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d165      	bne.n	8003e46 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003d7a:	7efb      	ldrb	r3, [r7, #27]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d828      	bhi.n	8003dd2 <UART_SetConfig+0x446>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <UART_SetConfig+0x3fc>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7fe f8a8 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003db0:	6178      	str	r0, [r7, #20]
        break;
 8003db2:	e013      	b.n	8003ddc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db4:	f7fe f8ba 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003db8:	6178      	str	r0, [r7, #20]
        break;
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dbc:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <UART_SetConfig+0x590>)
 8003dbe:	617b      	str	r3, [r7, #20]
        break;
 8003dc0:	e00c      	b.n	8003ddc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc2:	f7fe f82f 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8003dc6:	6178      	str	r0, [r7, #20]
        break;
 8003dc8:	e008      	b.n	8003ddc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dce:	617b      	str	r3, [r7, #20]
        break;
 8003dd0:	e004      	b.n	8003ddc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	76bb      	strb	r3, [r7, #26]
        break;
 8003dda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8086 	beq.w	8003ef0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	4a4b      	ldr	r2, [pc, #300]	; (8003f18 <UART_SetConfig+0x58c>)
 8003dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dee:	461a      	mov	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df6:	005a      	lsls	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	441a      	add	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d916      	bls.n	8003e40 <UART_SetConfig+0x4b4>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d212      	bcs.n	8003e40 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f023 030f 	bic.w	r3, r3, #15
 8003e22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	89fb      	ldrh	r3, [r7, #14]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	89fa      	ldrh	r2, [r7, #14]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	e057      	b.n	8003ef0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	76bb      	strb	r3, [r7, #26]
 8003e44:	e054      	b.n	8003ef0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e46:	7efb      	ldrb	r3, [r7, #27]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d828      	bhi.n	8003e9e <UART_SetConfig+0x512>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0x4c8>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e9f 	.word	0x08003e9f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e9f 	.word	0x08003e9f
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe f842 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	6178      	str	r0, [r7, #20]
        break;
 8003e7e:	e013      	b.n	8003ea8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7fe f854 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003e84:	6178      	str	r0, [r7, #20]
        break;
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <UART_SetConfig+0x590>)
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	e00c      	b.n	8003ea8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7fd ffc9 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8003e92:	6178      	str	r0, [r7, #20]
        break;
 8003e94:	e008      	b.n	8003ea8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	617b      	str	r3, [r7, #20]
        break;
 8003e9c:	e004      	b.n	8003ea8 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d020      	beq.n	8003ef0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <UART_SetConfig+0x58c>)
 8003eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	441a      	add	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d908      	bls.n	8003eec <UART_SetConfig+0x560>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d204      	bcs.n	8003eec <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e001      	b.n	8003ef0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bdb0      	pop	{r4, r5, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08005348 	.word	0x08005348
 8003f1c:	00f42400 	.word	0x00f42400

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401e:	d10a      	bne.n	8004036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004074:	f7fc fef4 	bl	8000e60 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d10e      	bne.n	80040a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f82f 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e025      	b.n	80040f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d10e      	bne.n	80040d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f819 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e00f      	b.n	80040f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	e062      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d05e      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fc fea4 	bl	8000e60 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <UART_WaitOnFlagUntilTimeout+0x30>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004138:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e045      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02e      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d126      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800418c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800419c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00f      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d08d      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_UARTEx_DisableFifoMode+0x16>
 800420c:	2302      	movs	r3, #2
 800420e:	e027      	b.n	8004260 <HAL_UARTEx_DisableFifoMode+0x66>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	; 0x24
 800421c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800423e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e02d      	b.n	80042e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f84f 	bl	8004364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e02d      	b.n	800435c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f811 	bl	8004364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004384:	e031      	b.n	80043ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004386:	2308      	movs	r3, #8
 8004388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800438a:	2308      	movs	r3, #8
 800438c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	0e5b      	lsrs	r3, r3, #25
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	0f5b      	lsrs	r3, r3, #29
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ae:	7bbb      	ldrb	r3, [r7, #14]
 80043b0:	7b3a      	ldrb	r2, [r7, #12]
 80043b2:	4911      	ldr	r1, [pc, #68]	; (80043f8 <UARTEx_SetNbDataToProcess+0x94>)
 80043b4:	5c8a      	ldrb	r2, [r1, r2]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ba:	7b3a      	ldrb	r2, [r7, #12]
 80043bc:	490f      	ldr	r1, [pc, #60]	; (80043fc <UARTEx_SetNbDataToProcess+0x98>)
 80043be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	7b7a      	ldrb	r2, [r7, #13]
 80043d0:	4909      	ldr	r1, [pc, #36]	; (80043f8 <UARTEx_SetNbDataToProcess+0x94>)
 80043d2:	5c8a      	ldrb	r2, [r1, r2]
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043d8:	7b7a      	ldrb	r2, [r7, #13]
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <UARTEx_SetNbDataToProcess+0x98>)
 80043dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043de:	fb93 f3f2 	sdiv	r3, r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08005360 	.word	0x08005360
 80043fc:	08005368 	.word	0x08005368

08004400 <__errno>:
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <__errno+0x8>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	; (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	; (8004450 <__libc_init_array+0x44>)
 8004420:	f000 ff76 	bl	8005310 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	08005410 	.word	0x08005410
 8004448:	08005410 	.word	0x08005410
 800444c:	08005410 	.word	0x08005410
 8004450:	08005414 	.word	0x08005414

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <iprintf>:
 8004464:	b40f      	push	{r0, r1, r2, r3}
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <iprintf+0x2c>)
 8004468:	b513      	push	{r0, r1, r4, lr}
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	b124      	cbz	r4, 8004478 <iprintf+0x14>
 800446e:	69a3      	ldr	r3, [r4, #24]
 8004470:	b913      	cbnz	r3, 8004478 <iprintf+0x14>
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f866 	bl	8004544 <__sinit>
 8004478:	ab05      	add	r3, sp, #20
 800447a:	9a04      	ldr	r2, [sp, #16]
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	4620      	mov	r0, r4
 8004482:	f000 f983 	bl	800478c <_vfiprintf_r>
 8004486:	b002      	add	sp, #8
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	b004      	add	sp, #16
 800448e:	4770      	bx	lr
 8004490:	2000000c 	.word	0x2000000c

08004494 <std>:
 8004494:	2300      	movs	r3, #0
 8004496:	b510      	push	{r4, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	e9c0 3300 	strd	r3, r3, [r0]
 800449e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044a2:	6083      	str	r3, [r0, #8]
 80044a4:	8181      	strh	r1, [r0, #12]
 80044a6:	6643      	str	r3, [r0, #100]	; 0x64
 80044a8:	81c2      	strh	r2, [r0, #14]
 80044aa:	6183      	str	r3, [r0, #24]
 80044ac:	4619      	mov	r1, r3
 80044ae:	2208      	movs	r2, #8
 80044b0:	305c      	adds	r0, #92	; 0x5c
 80044b2:	f7ff ffcf 	bl	8004454 <memset>
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <std+0x38>)
 80044b8:	6263      	str	r3, [r4, #36]	; 0x24
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <std+0x3c>)
 80044bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <std+0x40>)
 80044c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <std+0x44>)
 80044c4:	6224      	str	r4, [r4, #32]
 80044c6:	6323      	str	r3, [r4, #48]	; 0x30
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	bf00      	nop
 80044cc:	08004d35 	.word	0x08004d35
 80044d0:	08004d57 	.word	0x08004d57
 80044d4:	08004d8f 	.word	0x08004d8f
 80044d8:	08004db3 	.word	0x08004db3

080044dc <_cleanup_r>:
 80044dc:	4901      	ldr	r1, [pc, #4]	; (80044e4 <_cleanup_r+0x8>)
 80044de:	f000 b8af 	b.w	8004640 <_fwalk_reent>
 80044e2:	bf00      	nop
 80044e4:	0800508d 	.word	0x0800508d

080044e8 <__sfmoreglue>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	1e4a      	subs	r2, r1, #1
 80044ec:	2568      	movs	r5, #104	; 0x68
 80044ee:	4355      	muls	r5, r2
 80044f0:	460e      	mov	r6, r1
 80044f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044f6:	f000 f8c5 	bl	8004684 <_malloc_r>
 80044fa:	4604      	mov	r4, r0
 80044fc:	b140      	cbz	r0, 8004510 <__sfmoreglue+0x28>
 80044fe:	2100      	movs	r1, #0
 8004500:	e9c0 1600 	strd	r1, r6, [r0]
 8004504:	300c      	adds	r0, #12
 8004506:	60a0      	str	r0, [r4, #8]
 8004508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800450c:	f7ff ffa2 	bl	8004454 <memset>
 8004510:	4620      	mov	r0, r4
 8004512:	bd70      	pop	{r4, r5, r6, pc}

08004514 <__sfp_lock_acquire>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__sfp_lock_acquire+0x8>)
 8004516:	f000 b8b3 	b.w	8004680 <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	200001ec 	.word	0x200001ec

08004520 <__sfp_lock_release>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__sfp_lock_release+0x8>)
 8004522:	f000 b8ae 	b.w	8004682 <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	200001ec 	.word	0x200001ec

0800452c <__sinit_lock_acquire>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__sinit_lock_acquire+0x8>)
 800452e:	f000 b8a7 	b.w	8004680 <__retarget_lock_acquire_recursive>
 8004532:	bf00      	nop
 8004534:	200001e7 	.word	0x200001e7

08004538 <__sinit_lock_release>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__sinit_lock_release+0x8>)
 800453a:	f000 b8a2 	b.w	8004682 <__retarget_lock_release_recursive>
 800453e:	bf00      	nop
 8004540:	200001e7 	.word	0x200001e7

08004544 <__sinit>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4604      	mov	r4, r0
 8004548:	f7ff fff0 	bl	800452c <__sinit_lock_acquire>
 800454c:	69a3      	ldr	r3, [r4, #24]
 800454e:	b11b      	cbz	r3, 8004558 <__sinit+0x14>
 8004550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004554:	f7ff bff0 	b.w	8004538 <__sinit_lock_release>
 8004558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800455c:	6523      	str	r3, [r4, #80]	; 0x50
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <__sinit+0x68>)
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <__sinit+0x6c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	62a2      	str	r2, [r4, #40]	; 0x28
 8004566:	42a3      	cmp	r3, r4
 8004568:	bf04      	itt	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	61a3      	streq	r3, [r4, #24]
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f820 	bl	80045b4 <__sfp>
 8004574:	6060      	str	r0, [r4, #4]
 8004576:	4620      	mov	r0, r4
 8004578:	f000 f81c 	bl	80045b4 <__sfp>
 800457c:	60a0      	str	r0, [r4, #8]
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f818 	bl	80045b4 <__sfp>
 8004584:	2200      	movs	r2, #0
 8004586:	60e0      	str	r0, [r4, #12]
 8004588:	2104      	movs	r1, #4
 800458a:	6860      	ldr	r0, [r4, #4]
 800458c:	f7ff ff82 	bl	8004494 <std>
 8004590:	68a0      	ldr	r0, [r4, #8]
 8004592:	2201      	movs	r2, #1
 8004594:	2109      	movs	r1, #9
 8004596:	f7ff ff7d 	bl	8004494 <std>
 800459a:	68e0      	ldr	r0, [r4, #12]
 800459c:	2202      	movs	r2, #2
 800459e:	2112      	movs	r1, #18
 80045a0:	f7ff ff78 	bl	8004494 <std>
 80045a4:	2301      	movs	r3, #1
 80045a6:	61a3      	str	r3, [r4, #24]
 80045a8:	e7d2      	b.n	8004550 <__sinit+0xc>
 80045aa:	bf00      	nop
 80045ac:	08005370 	.word	0x08005370
 80045b0:	080044dd 	.word	0x080044dd

080045b4 <__sfp>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	4607      	mov	r7, r0
 80045b8:	f7ff ffac 	bl	8004514 <__sfp_lock_acquire>
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <__sfp+0x84>)
 80045be:	681e      	ldr	r6, [r3, #0]
 80045c0:	69b3      	ldr	r3, [r6, #24]
 80045c2:	b913      	cbnz	r3, 80045ca <__sfp+0x16>
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff ffbd 	bl	8004544 <__sinit>
 80045ca:	3648      	adds	r6, #72	; 0x48
 80045cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	d503      	bpl.n	80045dc <__sfp+0x28>
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	b30b      	cbz	r3, 800461c <__sfp+0x68>
 80045d8:	6836      	ldr	r6, [r6, #0]
 80045da:	e7f7      	b.n	80045cc <__sfp+0x18>
 80045dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045e0:	b9d5      	cbnz	r5, 8004618 <__sfp+0x64>
 80045e2:	4b16      	ldr	r3, [pc, #88]	; (800463c <__sfp+0x88>)
 80045e4:	60e3      	str	r3, [r4, #12]
 80045e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ea:	6665      	str	r5, [r4, #100]	; 0x64
 80045ec:	f000 f847 	bl	800467e <__retarget_lock_init_recursive>
 80045f0:	f7ff ff96 	bl	8004520 <__sfp_lock_release>
 80045f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045fc:	6025      	str	r5, [r4, #0]
 80045fe:	61a5      	str	r5, [r4, #24]
 8004600:	2208      	movs	r2, #8
 8004602:	4629      	mov	r1, r5
 8004604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004608:	f7ff ff24 	bl	8004454 <memset>
 800460c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004614:	4620      	mov	r0, r4
 8004616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004618:	3468      	adds	r4, #104	; 0x68
 800461a:	e7d9      	b.n	80045d0 <__sfp+0x1c>
 800461c:	2104      	movs	r1, #4
 800461e:	4638      	mov	r0, r7
 8004620:	f7ff ff62 	bl	80044e8 <__sfmoreglue>
 8004624:	4604      	mov	r4, r0
 8004626:	6030      	str	r0, [r6, #0]
 8004628:	2800      	cmp	r0, #0
 800462a:	d1d5      	bne.n	80045d8 <__sfp+0x24>
 800462c:	f7ff ff78 	bl	8004520 <__sfp_lock_release>
 8004630:	230c      	movs	r3, #12
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	e7ee      	b.n	8004614 <__sfp+0x60>
 8004636:	bf00      	nop
 8004638:	08005370 	.word	0x08005370
 800463c:	ffff0001 	.word	0xffff0001

08004640 <_fwalk_reent>:
 8004640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004644:	4606      	mov	r6, r0
 8004646:	4688      	mov	r8, r1
 8004648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800464c:	2700      	movs	r7, #0
 800464e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004652:	f1b9 0901 	subs.w	r9, r9, #1
 8004656:	d505      	bpl.n	8004664 <_fwalk_reent+0x24>
 8004658:	6824      	ldr	r4, [r4, #0]
 800465a:	2c00      	cmp	r4, #0
 800465c:	d1f7      	bne.n	800464e <_fwalk_reent+0xe>
 800465e:	4638      	mov	r0, r7
 8004660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004664:	89ab      	ldrh	r3, [r5, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d907      	bls.n	800467a <_fwalk_reent+0x3a>
 800466a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800466e:	3301      	adds	r3, #1
 8004670:	d003      	beq.n	800467a <_fwalk_reent+0x3a>
 8004672:	4629      	mov	r1, r5
 8004674:	4630      	mov	r0, r6
 8004676:	47c0      	blx	r8
 8004678:	4307      	orrs	r7, r0
 800467a:	3568      	adds	r5, #104	; 0x68
 800467c:	e7e9      	b.n	8004652 <_fwalk_reent+0x12>

0800467e <__retarget_lock_init_recursive>:
 800467e:	4770      	bx	lr

08004680 <__retarget_lock_acquire_recursive>:
 8004680:	4770      	bx	lr

08004682 <__retarget_lock_release_recursive>:
 8004682:	4770      	bx	lr

08004684 <_malloc_r>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	1ccd      	adds	r5, r1, #3
 8004688:	f025 0503 	bic.w	r5, r5, #3
 800468c:	3508      	adds	r5, #8
 800468e:	2d0c      	cmp	r5, #12
 8004690:	bf38      	it	cc
 8004692:	250c      	movcc	r5, #12
 8004694:	2d00      	cmp	r5, #0
 8004696:	4606      	mov	r6, r0
 8004698:	db01      	blt.n	800469e <_malloc_r+0x1a>
 800469a:	42a9      	cmp	r1, r5
 800469c:	d903      	bls.n	80046a6 <_malloc_r+0x22>
 800469e:	230c      	movs	r3, #12
 80046a0:	6033      	str	r3, [r6, #0]
 80046a2:	2000      	movs	r0, #0
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046a6:	f000 fda3 	bl	80051f0 <__malloc_lock>
 80046aa:	4921      	ldr	r1, [pc, #132]	; (8004730 <_malloc_r+0xac>)
 80046ac:	680a      	ldr	r2, [r1, #0]
 80046ae:	4614      	mov	r4, r2
 80046b0:	b99c      	cbnz	r4, 80046da <_malloc_r+0x56>
 80046b2:	4f20      	ldr	r7, [pc, #128]	; (8004734 <_malloc_r+0xb0>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b923      	cbnz	r3, 80046c2 <_malloc_r+0x3e>
 80046b8:	4621      	mov	r1, r4
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 fb2a 	bl	8004d14 <_sbrk_r>
 80046c0:	6038      	str	r0, [r7, #0]
 80046c2:	4629      	mov	r1, r5
 80046c4:	4630      	mov	r0, r6
 80046c6:	f000 fb25 	bl	8004d14 <_sbrk_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d123      	bne.n	8004716 <_malloc_r+0x92>
 80046ce:	230c      	movs	r3, #12
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	4630      	mov	r0, r6
 80046d4:	f000 fd92 	bl	80051fc <__malloc_unlock>
 80046d8:	e7e3      	b.n	80046a2 <_malloc_r+0x1e>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	1b5b      	subs	r3, r3, r5
 80046de:	d417      	bmi.n	8004710 <_malloc_r+0x8c>
 80046e0:	2b0b      	cmp	r3, #11
 80046e2:	d903      	bls.n	80046ec <_malloc_r+0x68>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	441c      	add	r4, r3
 80046e8:	6025      	str	r5, [r4, #0]
 80046ea:	e004      	b.n	80046f6 <_malloc_r+0x72>
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	42a2      	cmp	r2, r4
 80046f0:	bf0c      	ite	eq
 80046f2:	600b      	streq	r3, [r1, #0]
 80046f4:	6053      	strne	r3, [r2, #4]
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 fd80 	bl	80051fc <__malloc_unlock>
 80046fc:	f104 000b 	add.w	r0, r4, #11
 8004700:	1d23      	adds	r3, r4, #4
 8004702:	f020 0007 	bic.w	r0, r0, #7
 8004706:	1ac2      	subs	r2, r0, r3
 8004708:	d0cc      	beq.n	80046a4 <_malloc_r+0x20>
 800470a:	1a1b      	subs	r3, r3, r0
 800470c:	50a3      	str	r3, [r4, r2]
 800470e:	e7c9      	b.n	80046a4 <_malloc_r+0x20>
 8004710:	4622      	mov	r2, r4
 8004712:	6864      	ldr	r4, [r4, #4]
 8004714:	e7cc      	b.n	80046b0 <_malloc_r+0x2c>
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d0e3      	beq.n	80046e8 <_malloc_r+0x64>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4630      	mov	r0, r6
 8004724:	f000 faf6 	bl	8004d14 <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d1dd      	bne.n	80046e8 <_malloc_r+0x64>
 800472c:	e7cf      	b.n	80046ce <_malloc_r+0x4a>
 800472e:	bf00      	nop
 8004730:	20000098 	.word	0x20000098
 8004734:	2000009c 	.word	0x2000009c

08004738 <__sfputc_r>:
 8004738:	6893      	ldr	r3, [r2, #8]
 800473a:	3b01      	subs	r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	b410      	push	{r4}
 8004740:	6093      	str	r3, [r2, #8]
 8004742:	da08      	bge.n	8004756 <__sfputc_r+0x1e>
 8004744:	6994      	ldr	r4, [r2, #24]
 8004746:	42a3      	cmp	r3, r4
 8004748:	db01      	blt.n	800474e <__sfputc_r+0x16>
 800474a:	290a      	cmp	r1, #10
 800474c:	d103      	bne.n	8004756 <__sfputc_r+0x1e>
 800474e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004752:	f000 bb33 	b.w	8004dbc <__swbuf_r>
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	1c58      	adds	r0, r3, #1
 800475a:	6010      	str	r0, [r2, #0]
 800475c:	7019      	strb	r1, [r3, #0]
 800475e:	4608      	mov	r0, r1
 8004760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004764:	4770      	bx	lr

08004766 <__sfputs_r>:
 8004766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004768:	4606      	mov	r6, r0
 800476a:	460f      	mov	r7, r1
 800476c:	4614      	mov	r4, r2
 800476e:	18d5      	adds	r5, r2, r3
 8004770:	42ac      	cmp	r4, r5
 8004772:	d101      	bne.n	8004778 <__sfputs_r+0x12>
 8004774:	2000      	movs	r0, #0
 8004776:	e007      	b.n	8004788 <__sfputs_r+0x22>
 8004778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477c:	463a      	mov	r2, r7
 800477e:	4630      	mov	r0, r6
 8004780:	f7ff ffda 	bl	8004738 <__sfputc_r>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d1f3      	bne.n	8004770 <__sfputs_r+0xa>
 8004788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800478c <_vfiprintf_r>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	460d      	mov	r5, r1
 8004792:	b09d      	sub	sp, #116	; 0x74
 8004794:	4614      	mov	r4, r2
 8004796:	4698      	mov	r8, r3
 8004798:	4606      	mov	r6, r0
 800479a:	b118      	cbz	r0, 80047a4 <_vfiprintf_r+0x18>
 800479c:	6983      	ldr	r3, [r0, #24]
 800479e:	b90b      	cbnz	r3, 80047a4 <_vfiprintf_r+0x18>
 80047a0:	f7ff fed0 	bl	8004544 <__sinit>
 80047a4:	4b89      	ldr	r3, [pc, #548]	; (80049cc <_vfiprintf_r+0x240>)
 80047a6:	429d      	cmp	r5, r3
 80047a8:	d11b      	bne.n	80047e2 <_vfiprintf_r+0x56>
 80047aa:	6875      	ldr	r5, [r6, #4]
 80047ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047ae:	07d9      	lsls	r1, r3, #31
 80047b0:	d405      	bmi.n	80047be <_vfiprintf_r+0x32>
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	059a      	lsls	r2, r3, #22
 80047b6:	d402      	bmi.n	80047be <_vfiprintf_r+0x32>
 80047b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ba:	f7ff ff61 	bl	8004680 <__retarget_lock_acquire_recursive>
 80047be:	89ab      	ldrh	r3, [r5, #12]
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	d501      	bpl.n	80047c8 <_vfiprintf_r+0x3c>
 80047c4:	692b      	ldr	r3, [r5, #16]
 80047c6:	b9eb      	cbnz	r3, 8004804 <_vfiprintf_r+0x78>
 80047c8:	4629      	mov	r1, r5
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 fb5a 	bl	8004e84 <__swsetup_r>
 80047d0:	b1c0      	cbz	r0, 8004804 <_vfiprintf_r+0x78>
 80047d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047d4:	07dc      	lsls	r4, r3, #31
 80047d6:	d50e      	bpl.n	80047f6 <_vfiprintf_r+0x6a>
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b01d      	add	sp, #116	; 0x74
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	4b7b      	ldr	r3, [pc, #492]	; (80049d0 <_vfiprintf_r+0x244>)
 80047e4:	429d      	cmp	r5, r3
 80047e6:	d101      	bne.n	80047ec <_vfiprintf_r+0x60>
 80047e8:	68b5      	ldr	r5, [r6, #8]
 80047ea:	e7df      	b.n	80047ac <_vfiprintf_r+0x20>
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <_vfiprintf_r+0x248>)
 80047ee:	429d      	cmp	r5, r3
 80047f0:	bf08      	it	eq
 80047f2:	68f5      	ldreq	r5, [r6, #12]
 80047f4:	e7da      	b.n	80047ac <_vfiprintf_r+0x20>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	0598      	lsls	r0, r3, #22
 80047fa:	d4ed      	bmi.n	80047d8 <_vfiprintf_r+0x4c>
 80047fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fe:	f7ff ff40 	bl	8004682 <__retarget_lock_release_recursive>
 8004802:	e7e9      	b.n	80047d8 <_vfiprintf_r+0x4c>
 8004804:	2300      	movs	r3, #0
 8004806:	9309      	str	r3, [sp, #36]	; 0x24
 8004808:	2320      	movs	r3, #32
 800480a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800480e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004812:	2330      	movs	r3, #48	; 0x30
 8004814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80049d8 <_vfiprintf_r+0x24c>
 8004818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800481c:	f04f 0901 	mov.w	r9, #1
 8004820:	4623      	mov	r3, r4
 8004822:	469a      	mov	sl, r3
 8004824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004828:	b10a      	cbz	r2, 800482e <_vfiprintf_r+0xa2>
 800482a:	2a25      	cmp	r2, #37	; 0x25
 800482c:	d1f9      	bne.n	8004822 <_vfiprintf_r+0x96>
 800482e:	ebba 0b04 	subs.w	fp, sl, r4
 8004832:	d00b      	beq.n	800484c <_vfiprintf_r+0xc0>
 8004834:	465b      	mov	r3, fp
 8004836:	4622      	mov	r2, r4
 8004838:	4629      	mov	r1, r5
 800483a:	4630      	mov	r0, r6
 800483c:	f7ff ff93 	bl	8004766 <__sfputs_r>
 8004840:	3001      	adds	r0, #1
 8004842:	f000 80aa 	beq.w	800499a <_vfiprintf_r+0x20e>
 8004846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004848:	445a      	add	r2, fp
 800484a:	9209      	str	r2, [sp, #36]	; 0x24
 800484c:	f89a 3000 	ldrb.w	r3, [sl]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a2 	beq.w	800499a <_vfiprintf_r+0x20e>
 8004856:	2300      	movs	r3, #0
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004860:	f10a 0a01 	add.w	sl, sl, #1
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800486c:	931a      	str	r3, [sp, #104]	; 0x68
 800486e:	4654      	mov	r4, sl
 8004870:	2205      	movs	r2, #5
 8004872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004876:	4858      	ldr	r0, [pc, #352]	; (80049d8 <_vfiprintf_r+0x24c>)
 8004878:	f7fb fcd2 	bl	8000220 <memchr>
 800487c:	9a04      	ldr	r2, [sp, #16]
 800487e:	b9d8      	cbnz	r0, 80048b8 <_vfiprintf_r+0x12c>
 8004880:	06d1      	lsls	r1, r2, #27
 8004882:	bf44      	itt	mi
 8004884:	2320      	movmi	r3, #32
 8004886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800488a:	0713      	lsls	r3, r2, #28
 800488c:	bf44      	itt	mi
 800488e:	232b      	movmi	r3, #43	; 0x2b
 8004890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004894:	f89a 3000 	ldrb.w	r3, [sl]
 8004898:	2b2a      	cmp	r3, #42	; 0x2a
 800489a:	d015      	beq.n	80048c8 <_vfiprintf_r+0x13c>
 800489c:	9a07      	ldr	r2, [sp, #28]
 800489e:	4654      	mov	r4, sl
 80048a0:	2000      	movs	r0, #0
 80048a2:	f04f 0c0a 	mov.w	ip, #10
 80048a6:	4621      	mov	r1, r4
 80048a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ac:	3b30      	subs	r3, #48	; 0x30
 80048ae:	2b09      	cmp	r3, #9
 80048b0:	d94e      	bls.n	8004950 <_vfiprintf_r+0x1c4>
 80048b2:	b1b0      	cbz	r0, 80048e2 <_vfiprintf_r+0x156>
 80048b4:	9207      	str	r2, [sp, #28]
 80048b6:	e014      	b.n	80048e2 <_vfiprintf_r+0x156>
 80048b8:	eba0 0308 	sub.w	r3, r0, r8
 80048bc:	fa09 f303 	lsl.w	r3, r9, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	9304      	str	r3, [sp, #16]
 80048c4:	46a2      	mov	sl, r4
 80048c6:	e7d2      	b.n	800486e <_vfiprintf_r+0xe2>
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	1d19      	adds	r1, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	9103      	str	r1, [sp, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bfbb      	ittet	lt
 80048d4:	425b      	neglt	r3, r3
 80048d6:	f042 0202 	orrlt.w	r2, r2, #2
 80048da:	9307      	strge	r3, [sp, #28]
 80048dc:	9307      	strlt	r3, [sp, #28]
 80048de:	bfb8      	it	lt
 80048e0:	9204      	strlt	r2, [sp, #16]
 80048e2:	7823      	ldrb	r3, [r4, #0]
 80048e4:	2b2e      	cmp	r3, #46	; 0x2e
 80048e6:	d10c      	bne.n	8004902 <_vfiprintf_r+0x176>
 80048e8:	7863      	ldrb	r3, [r4, #1]
 80048ea:	2b2a      	cmp	r3, #42	; 0x2a
 80048ec:	d135      	bne.n	800495a <_vfiprintf_r+0x1ce>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	9203      	str	r2, [sp, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfb8      	it	lt
 80048fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80048fe:	3402      	adds	r4, #2
 8004900:	9305      	str	r3, [sp, #20]
 8004902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049e8 <_vfiprintf_r+0x25c>
 8004906:	7821      	ldrb	r1, [r4, #0]
 8004908:	2203      	movs	r2, #3
 800490a:	4650      	mov	r0, sl
 800490c:	f7fb fc88 	bl	8000220 <memchr>
 8004910:	b140      	cbz	r0, 8004924 <_vfiprintf_r+0x198>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	eba0 000a 	sub.w	r0, r0, sl
 8004918:	fa03 f000 	lsl.w	r0, r3, r0
 800491c:	9b04      	ldr	r3, [sp, #16]
 800491e:	4303      	orrs	r3, r0
 8004920:	3401      	adds	r4, #1
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004928:	482c      	ldr	r0, [pc, #176]	; (80049dc <_vfiprintf_r+0x250>)
 800492a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800492e:	2206      	movs	r2, #6
 8004930:	f7fb fc76 	bl	8000220 <memchr>
 8004934:	2800      	cmp	r0, #0
 8004936:	d03f      	beq.n	80049b8 <_vfiprintf_r+0x22c>
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <_vfiprintf_r+0x254>)
 800493a:	bb1b      	cbnz	r3, 8004984 <_vfiprintf_r+0x1f8>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	3307      	adds	r3, #7
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	3308      	adds	r3, #8
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494a:	443b      	add	r3, r7
 800494c:	9309      	str	r3, [sp, #36]	; 0x24
 800494e:	e767      	b.n	8004820 <_vfiprintf_r+0x94>
 8004950:	fb0c 3202 	mla	r2, ip, r2, r3
 8004954:	460c      	mov	r4, r1
 8004956:	2001      	movs	r0, #1
 8004958:	e7a5      	b.n	80048a6 <_vfiprintf_r+0x11a>
 800495a:	2300      	movs	r3, #0
 800495c:	3401      	adds	r4, #1
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	4619      	mov	r1, r3
 8004962:	f04f 0c0a 	mov.w	ip, #10
 8004966:	4620      	mov	r0, r4
 8004968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800496c:	3a30      	subs	r2, #48	; 0x30
 800496e:	2a09      	cmp	r2, #9
 8004970:	d903      	bls.n	800497a <_vfiprintf_r+0x1ee>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0c5      	beq.n	8004902 <_vfiprintf_r+0x176>
 8004976:	9105      	str	r1, [sp, #20]
 8004978:	e7c3      	b.n	8004902 <_vfiprintf_r+0x176>
 800497a:	fb0c 2101 	mla	r1, ip, r1, r2
 800497e:	4604      	mov	r4, r0
 8004980:	2301      	movs	r3, #1
 8004982:	e7f0      	b.n	8004966 <_vfiprintf_r+0x1da>
 8004984:	ab03      	add	r3, sp, #12
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	462a      	mov	r2, r5
 800498a:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <_vfiprintf_r+0x258>)
 800498c:	a904      	add	r1, sp, #16
 800498e:	4630      	mov	r0, r6
 8004990:	f3af 8000 	nop.w
 8004994:	4607      	mov	r7, r0
 8004996:	1c78      	adds	r0, r7, #1
 8004998:	d1d6      	bne.n	8004948 <_vfiprintf_r+0x1bc>
 800499a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800499c:	07d9      	lsls	r1, r3, #31
 800499e:	d405      	bmi.n	80049ac <_vfiprintf_r+0x220>
 80049a0:	89ab      	ldrh	r3, [r5, #12]
 80049a2:	059a      	lsls	r2, r3, #22
 80049a4:	d402      	bmi.n	80049ac <_vfiprintf_r+0x220>
 80049a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049a8:	f7ff fe6b 	bl	8004682 <__retarget_lock_release_recursive>
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	065b      	lsls	r3, r3, #25
 80049b0:	f53f af12 	bmi.w	80047d8 <_vfiprintf_r+0x4c>
 80049b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049b6:	e711      	b.n	80047dc <_vfiprintf_r+0x50>
 80049b8:	ab03      	add	r3, sp, #12
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	462a      	mov	r2, r5
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <_vfiprintf_r+0x258>)
 80049c0:	a904      	add	r1, sp, #16
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 f880 	bl	8004ac8 <_printf_i>
 80049c8:	e7e4      	b.n	8004994 <_vfiprintf_r+0x208>
 80049ca:	bf00      	nop
 80049cc:	08005394 	.word	0x08005394
 80049d0:	080053b4 	.word	0x080053b4
 80049d4:	08005374 	.word	0x08005374
 80049d8:	080053d4 	.word	0x080053d4
 80049dc:	080053de 	.word	0x080053de
 80049e0:	00000000 	.word	0x00000000
 80049e4:	08004767 	.word	0x08004767
 80049e8:	080053da 	.word	0x080053da

080049ec <_printf_common>:
 80049ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	4616      	mov	r6, r2
 80049f2:	4699      	mov	r9, r3
 80049f4:	688a      	ldr	r2, [r1, #8]
 80049f6:	690b      	ldr	r3, [r1, #16]
 80049f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bfb8      	it	lt
 8004a00:	4613      	movlt	r3, r2
 8004a02:	6033      	str	r3, [r6, #0]
 8004a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a08:	4607      	mov	r7, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	b10a      	cbz	r2, 8004a12 <_printf_common+0x26>
 8004a0e:	3301      	adds	r3, #1
 8004a10:	6033      	str	r3, [r6, #0]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	0699      	lsls	r1, r3, #26
 8004a16:	bf42      	ittt	mi
 8004a18:	6833      	ldrmi	r3, [r6, #0]
 8004a1a:	3302      	addmi	r3, #2
 8004a1c:	6033      	strmi	r3, [r6, #0]
 8004a1e:	6825      	ldr	r5, [r4, #0]
 8004a20:	f015 0506 	ands.w	r5, r5, #6
 8004a24:	d106      	bne.n	8004a34 <_printf_common+0x48>
 8004a26:	f104 0a19 	add.w	sl, r4, #25
 8004a2a:	68e3      	ldr	r3, [r4, #12]
 8004a2c:	6832      	ldr	r2, [r6, #0]
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	42ab      	cmp	r3, r5
 8004a32:	dc26      	bgt.n	8004a82 <_printf_common+0x96>
 8004a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a38:	1e13      	subs	r3, r2, #0
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	bf18      	it	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	0692      	lsls	r2, r2, #26
 8004a42:	d42b      	bmi.n	8004a9c <_printf_common+0xb0>
 8004a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a48:	4649      	mov	r1, r9
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	47c0      	blx	r8
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d01e      	beq.n	8004a90 <_printf_common+0xa4>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	68e5      	ldr	r5, [r4, #12]
 8004a56:	6832      	ldr	r2, [r6, #0]
 8004a58:	f003 0306 	and.w	r3, r3, #6
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	bf08      	it	eq
 8004a60:	1aad      	subeq	r5, r5, r2
 8004a62:	68a3      	ldr	r3, [r4, #8]
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	bf0c      	ite	eq
 8004a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a6c:	2500      	movne	r5, #0
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	bfc4      	itt	gt
 8004a72:	1a9b      	subgt	r3, r3, r2
 8004a74:	18ed      	addgt	r5, r5, r3
 8004a76:	2600      	movs	r6, #0
 8004a78:	341a      	adds	r4, #26
 8004a7a:	42b5      	cmp	r5, r6
 8004a7c:	d11a      	bne.n	8004ab4 <_printf_common+0xc8>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e008      	b.n	8004a94 <_printf_common+0xa8>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4652      	mov	r2, sl
 8004a86:	4649      	mov	r1, r9
 8004a88:	4638      	mov	r0, r7
 8004a8a:	47c0      	blx	r8
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d103      	bne.n	8004a98 <_printf_common+0xac>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a98:	3501      	adds	r5, #1
 8004a9a:	e7c6      	b.n	8004a2a <_printf_common+0x3e>
 8004a9c:	18e1      	adds	r1, r4, r3
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	2030      	movs	r0, #48	; 0x30
 8004aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa6:	4422      	add	r2, r4
 8004aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	e7c7      	b.n	8004a44 <_printf_common+0x58>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	4649      	mov	r1, r9
 8004aba:	4638      	mov	r0, r7
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d0e6      	beq.n	8004a90 <_printf_common+0xa4>
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7d9      	b.n	8004a7a <_printf_common+0x8e>
	...

08004ac8 <_printf_i>:
 8004ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004acc:	460c      	mov	r4, r1
 8004ace:	4691      	mov	r9, r2
 8004ad0:	7e27      	ldrb	r7, [r4, #24]
 8004ad2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ad4:	2f78      	cmp	r7, #120	; 0x78
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	469a      	mov	sl, r3
 8004ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ade:	d807      	bhi.n	8004af0 <_printf_i+0x28>
 8004ae0:	2f62      	cmp	r7, #98	; 0x62
 8004ae2:	d80a      	bhi.n	8004afa <_printf_i+0x32>
 8004ae4:	2f00      	cmp	r7, #0
 8004ae6:	f000 80d8 	beq.w	8004c9a <_printf_i+0x1d2>
 8004aea:	2f58      	cmp	r7, #88	; 0x58
 8004aec:	f000 80a3 	beq.w	8004c36 <_printf_i+0x16e>
 8004af0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af8:	e03a      	b.n	8004b70 <_printf_i+0xa8>
 8004afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004afe:	2b15      	cmp	r3, #21
 8004b00:	d8f6      	bhi.n	8004af0 <_printf_i+0x28>
 8004b02:	a001      	add	r0, pc, #4	; (adr r0, 8004b08 <_printf_i+0x40>)
 8004b04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b08:	08004b61 	.word	0x08004b61
 8004b0c:	08004b75 	.word	0x08004b75
 8004b10:	08004af1 	.word	0x08004af1
 8004b14:	08004af1 	.word	0x08004af1
 8004b18:	08004af1 	.word	0x08004af1
 8004b1c:	08004af1 	.word	0x08004af1
 8004b20:	08004b75 	.word	0x08004b75
 8004b24:	08004af1 	.word	0x08004af1
 8004b28:	08004af1 	.word	0x08004af1
 8004b2c:	08004af1 	.word	0x08004af1
 8004b30:	08004af1 	.word	0x08004af1
 8004b34:	08004c81 	.word	0x08004c81
 8004b38:	08004ba5 	.word	0x08004ba5
 8004b3c:	08004c63 	.word	0x08004c63
 8004b40:	08004af1 	.word	0x08004af1
 8004b44:	08004af1 	.word	0x08004af1
 8004b48:	08004ca3 	.word	0x08004ca3
 8004b4c:	08004af1 	.word	0x08004af1
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004af1 	.word	0x08004af1
 8004b58:	08004af1 	.word	0x08004af1
 8004b5c:	08004c6b 	.word	0x08004c6b
 8004b60:	680b      	ldr	r3, [r1, #0]
 8004b62:	1d1a      	adds	r2, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	600a      	str	r2, [r1, #0]
 8004b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0a3      	b.n	8004cbc <_printf_i+0x1f4>
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	6808      	ldr	r0, [r1, #0]
 8004b78:	062e      	lsls	r6, r5, #24
 8004b7a:	f100 0304 	add.w	r3, r0, #4
 8004b7e:	d50a      	bpl.n	8004b96 <_printf_i+0xce>
 8004b80:	6805      	ldr	r5, [r0, #0]
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	da03      	bge.n	8004b90 <_printf_i+0xc8>
 8004b88:	232d      	movs	r3, #45	; 0x2d
 8004b8a:	426d      	negs	r5, r5
 8004b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b90:	485e      	ldr	r0, [pc, #376]	; (8004d0c <_printf_i+0x244>)
 8004b92:	230a      	movs	r3, #10
 8004b94:	e019      	b.n	8004bca <_printf_i+0x102>
 8004b96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b9a:	6805      	ldr	r5, [r0, #0]
 8004b9c:	600b      	str	r3, [r1, #0]
 8004b9e:	bf18      	it	ne
 8004ba0:	b22d      	sxthne	r5, r5
 8004ba2:	e7ef      	b.n	8004b84 <_printf_i+0xbc>
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	1d18      	adds	r0, r3, #4
 8004baa:	6008      	str	r0, [r1, #0]
 8004bac:	0628      	lsls	r0, r5, #24
 8004bae:	d501      	bpl.n	8004bb4 <_printf_i+0xec>
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <_printf_i+0xf2>
 8004bb4:	0669      	lsls	r1, r5, #25
 8004bb6:	d5fb      	bpl.n	8004bb0 <_printf_i+0xe8>
 8004bb8:	881d      	ldrh	r5, [r3, #0]
 8004bba:	4854      	ldr	r0, [pc, #336]	; (8004d0c <_printf_i+0x244>)
 8004bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2308      	moveq	r3, #8
 8004bc2:	230a      	movne	r3, #10
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bca:	6866      	ldr	r6, [r4, #4]
 8004bcc:	60a6      	str	r6, [r4, #8]
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	bfa2      	ittt	ge
 8004bd2:	6821      	ldrge	r1, [r4, #0]
 8004bd4:	f021 0104 	bicge.w	r1, r1, #4
 8004bd8:	6021      	strge	r1, [r4, #0]
 8004bda:	b90d      	cbnz	r5, 8004be0 <_printf_i+0x118>
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	d04d      	beq.n	8004c7c <_printf_i+0x1b4>
 8004be0:	4616      	mov	r6, r2
 8004be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004be6:	fb03 5711 	mls	r7, r3, r1, r5
 8004bea:	5dc7      	ldrb	r7, [r0, r7]
 8004bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bf0:	462f      	mov	r7, r5
 8004bf2:	42bb      	cmp	r3, r7
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	d9f4      	bls.n	8004be2 <_printf_i+0x11a>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d10b      	bne.n	8004c14 <_printf_i+0x14c>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	07df      	lsls	r7, r3, #31
 8004c00:	d508      	bpl.n	8004c14 <_printf_i+0x14c>
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	6861      	ldr	r1, [r4, #4]
 8004c06:	4299      	cmp	r1, r3
 8004c08:	bfde      	ittt	le
 8004c0a:	2330      	movle	r3, #48	; 0x30
 8004c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c14:	1b92      	subs	r2, r2, r6
 8004c16:	6122      	str	r2, [r4, #16]
 8004c18:	f8cd a000 	str.w	sl, [sp]
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	aa03      	add	r2, sp, #12
 8004c20:	4621      	mov	r1, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7ff fee2 	bl	80049ec <_printf_common>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d14c      	bne.n	8004cc6 <_printf_i+0x1fe>
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c30:	b004      	add	sp, #16
 8004c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c36:	4835      	ldr	r0, [pc, #212]	; (8004d0c <_printf_i+0x244>)
 8004c38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	680e      	ldr	r6, [r1, #0]
 8004c40:	061f      	lsls	r7, r3, #24
 8004c42:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c46:	600e      	str	r6, [r1, #0]
 8004c48:	d514      	bpl.n	8004c74 <_printf_i+0x1ac>
 8004c4a:	07d9      	lsls	r1, r3, #31
 8004c4c:	bf44      	itt	mi
 8004c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c52:	6023      	strmi	r3, [r4, #0]
 8004c54:	b91d      	cbnz	r5, 8004c5e <_printf_i+0x196>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	f023 0320 	bic.w	r3, r3, #32
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	2310      	movs	r3, #16
 8004c60:	e7b0      	b.n	8004bc4 <_printf_i+0xfc>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	f043 0320 	orr.w	r3, r3, #32
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	2378      	movs	r3, #120	; 0x78
 8004c6c:	4828      	ldr	r0, [pc, #160]	; (8004d10 <_printf_i+0x248>)
 8004c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c72:	e7e3      	b.n	8004c3c <_printf_i+0x174>
 8004c74:	065e      	lsls	r6, r3, #25
 8004c76:	bf48      	it	mi
 8004c78:	b2ad      	uxthmi	r5, r5
 8004c7a:	e7e6      	b.n	8004c4a <_printf_i+0x182>
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	e7bb      	b.n	8004bf8 <_printf_i+0x130>
 8004c80:	680b      	ldr	r3, [r1, #0]
 8004c82:	6826      	ldr	r6, [r4, #0]
 8004c84:	6960      	ldr	r0, [r4, #20]
 8004c86:	1d1d      	adds	r5, r3, #4
 8004c88:	600d      	str	r5, [r1, #0]
 8004c8a:	0635      	lsls	r5, r6, #24
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	d501      	bpl.n	8004c94 <_printf_i+0x1cc>
 8004c90:	6018      	str	r0, [r3, #0]
 8004c92:	e002      	b.n	8004c9a <_printf_i+0x1d2>
 8004c94:	0671      	lsls	r1, r6, #25
 8004c96:	d5fb      	bpl.n	8004c90 <_printf_i+0x1c8>
 8004c98:	8018      	strh	r0, [r3, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	4616      	mov	r6, r2
 8004ca0:	e7ba      	b.n	8004c18 <_printf_i+0x150>
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	1d1a      	adds	r2, r3, #4
 8004ca6:	600a      	str	r2, [r1, #0]
 8004ca8:	681e      	ldr	r6, [r3, #0]
 8004caa:	6862      	ldr	r2, [r4, #4]
 8004cac:	2100      	movs	r1, #0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7fb fab6 	bl	8000220 <memchr>
 8004cb4:	b108      	cbz	r0, 8004cba <_printf_i+0x1f2>
 8004cb6:	1b80      	subs	r0, r0, r6
 8004cb8:	6060      	str	r0, [r4, #4]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc4:	e7a8      	b.n	8004c18 <_printf_i+0x150>
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4640      	mov	r0, r8
 8004cce:	47d0      	blx	sl
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d0ab      	beq.n	8004c2c <_printf_i+0x164>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	079b      	lsls	r3, r3, #30
 8004cd8:	d413      	bmi.n	8004d02 <_printf_i+0x23a>
 8004cda:	68e0      	ldr	r0, [r4, #12]
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	4298      	cmp	r0, r3
 8004ce0:	bfb8      	it	lt
 8004ce2:	4618      	movlt	r0, r3
 8004ce4:	e7a4      	b.n	8004c30 <_printf_i+0x168>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4649      	mov	r1, r9
 8004cec:	4640      	mov	r0, r8
 8004cee:	47d0      	blx	sl
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d09b      	beq.n	8004c2c <_printf_i+0x164>
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	9903      	ldr	r1, [sp, #12]
 8004cfa:	1a5b      	subs	r3, r3, r1
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	dcf2      	bgt.n	8004ce6 <_printf_i+0x21e>
 8004d00:	e7eb      	b.n	8004cda <_printf_i+0x212>
 8004d02:	2500      	movs	r5, #0
 8004d04:	f104 0619 	add.w	r6, r4, #25
 8004d08:	e7f5      	b.n	8004cf6 <_printf_i+0x22e>
 8004d0a:	bf00      	nop
 8004d0c:	080053e5 	.word	0x080053e5
 8004d10:	080053f6 	.word	0x080053f6

08004d14 <_sbrk_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d06      	ldr	r5, [pc, #24]	; (8004d30 <_sbrk_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	f7fb fea2 	bl	8000a68 <_sbrk>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_sbrk_r+0x1a>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_sbrk_r+0x1a>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	200001f0 	.word	0x200001f0

08004d34 <__sread>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	460c      	mov	r4, r1
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	f000 fab4 	bl	80052a8 <_read_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	bfab      	itete	ge
 8004d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d46:	89a3      	ldrhlt	r3, [r4, #12]
 8004d48:	181b      	addge	r3, r3, r0
 8004d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d4e:	bfac      	ite	ge
 8004d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d52:	81a3      	strhlt	r3, [r4, #12]
 8004d54:	bd10      	pop	{r4, pc}

08004d56 <__swrite>:
 8004d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	05db      	lsls	r3, r3, #23
 8004d60:	4605      	mov	r5, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	4616      	mov	r6, r2
 8004d66:	d505      	bpl.n	8004d74 <__swrite+0x1e>
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f000 f9c8 	bl	8005104 <_lseek_r>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	4632      	mov	r2, r6
 8004d82:	463b      	mov	r3, r7
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	f000 b869 	b.w	8004e60 <_write_r>

08004d8e <__sseek>:
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	460c      	mov	r4, r1
 8004d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d96:	f000 f9b5 	bl	8005104 <_lseek_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	bf15      	itete	ne
 8004da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004daa:	81a3      	strheq	r3, [r4, #12]
 8004dac:	bf18      	it	ne
 8004dae:	81a3      	strhne	r3, [r4, #12]
 8004db0:	bd10      	pop	{r4, pc}

08004db2 <__sclose>:
 8004db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db6:	f000 b8d3 	b.w	8004f60 <_close_r>
	...

08004dbc <__swbuf_r>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	460e      	mov	r6, r1
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	b118      	cbz	r0, 8004dce <__swbuf_r+0x12>
 8004dc6:	6983      	ldr	r3, [r0, #24]
 8004dc8:	b90b      	cbnz	r3, 8004dce <__swbuf_r+0x12>
 8004dca:	f7ff fbbb 	bl	8004544 <__sinit>
 8004dce:	4b21      	ldr	r3, [pc, #132]	; (8004e54 <__swbuf_r+0x98>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d12b      	bne.n	8004e2c <__swbuf_r+0x70>
 8004dd4:	686c      	ldr	r4, [r5, #4]
 8004dd6:	69a3      	ldr	r3, [r4, #24]
 8004dd8:	60a3      	str	r3, [r4, #8]
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	071a      	lsls	r2, r3, #28
 8004dde:	d52f      	bpl.n	8004e40 <__swbuf_r+0x84>
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	b36b      	cbz	r3, 8004e40 <__swbuf_r+0x84>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	1ac0      	subs	r0, r0, r3
 8004dea:	6963      	ldr	r3, [r4, #20]
 8004dec:	b2f6      	uxtb	r6, r6
 8004dee:	4283      	cmp	r3, r0
 8004df0:	4637      	mov	r7, r6
 8004df2:	dc04      	bgt.n	8004dfe <__swbuf_r+0x42>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f948 	bl	800508c <_fflush_r>
 8004dfc:	bb30      	cbnz	r0, 8004e4c <__swbuf_r+0x90>
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	6022      	str	r2, [r4, #0]
 8004e0a:	701e      	strb	r6, [r3, #0]
 8004e0c:	6963      	ldr	r3, [r4, #20]
 8004e0e:	3001      	adds	r0, #1
 8004e10:	4283      	cmp	r3, r0
 8004e12:	d004      	beq.n	8004e1e <__swbuf_r+0x62>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	07db      	lsls	r3, r3, #31
 8004e18:	d506      	bpl.n	8004e28 <__swbuf_r+0x6c>
 8004e1a:	2e0a      	cmp	r6, #10
 8004e1c:	d104      	bne.n	8004e28 <__swbuf_r+0x6c>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 f933 	bl	800508c <_fflush_r>
 8004e26:	b988      	cbnz	r0, 8004e4c <__swbuf_r+0x90>
 8004e28:	4638      	mov	r0, r7
 8004e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <__swbuf_r+0x9c>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d101      	bne.n	8004e36 <__swbuf_r+0x7a>
 8004e32:	68ac      	ldr	r4, [r5, #8]
 8004e34:	e7cf      	b.n	8004dd6 <__swbuf_r+0x1a>
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <__swbuf_r+0xa0>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	bf08      	it	eq
 8004e3c:	68ec      	ldreq	r4, [r5, #12]
 8004e3e:	e7ca      	b.n	8004dd6 <__swbuf_r+0x1a>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f81e 	bl	8004e84 <__swsetup_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0cb      	beq.n	8004de4 <__swbuf_r+0x28>
 8004e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e50:	e7ea      	b.n	8004e28 <__swbuf_r+0x6c>
 8004e52:	bf00      	nop
 8004e54:	08005394 	.word	0x08005394
 8004e58:	080053b4 	.word	0x080053b4
 8004e5c:	08005374 	.word	0x08005374

08004e60 <_write_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d07      	ldr	r5, [pc, #28]	; (8004e80 <_write_r+0x20>)
 8004e64:	4604      	mov	r4, r0
 8004e66:	4608      	mov	r0, r1
 8004e68:	4611      	mov	r1, r2
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	602a      	str	r2, [r5, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f7fb fda9 	bl	80009c6 <_write>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_write_r+0x1e>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_write_r+0x1e>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	200001f0 	.word	0x200001f0

08004e84 <__swsetup_r>:
 8004e84:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <__swsetup_r+0xcc>)
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	b125      	cbz	r5, 8004e9a <__swsetup_r+0x16>
 8004e90:	69ab      	ldr	r3, [r5, #24]
 8004e92:	b913      	cbnz	r3, 8004e9a <__swsetup_r+0x16>
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff fb55 	bl	8004544 <__sinit>
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <__swsetup_r+0xd0>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	d10f      	bne.n	8004ec0 <__swsetup_r+0x3c>
 8004ea0:	686c      	ldr	r4, [r5, #4]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea8:	0719      	lsls	r1, r3, #28
 8004eaa:	d42c      	bmi.n	8004f06 <__swsetup_r+0x82>
 8004eac:	06dd      	lsls	r5, r3, #27
 8004eae:	d411      	bmi.n	8004ed4 <__swsetup_r+0x50>
 8004eb0:	2309      	movs	r3, #9
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e03e      	b.n	8004f3e <__swsetup_r+0xba>
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <__swsetup_r+0xd4>)
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d101      	bne.n	8004eca <__swsetup_r+0x46>
 8004ec6:	68ac      	ldr	r4, [r5, #8]
 8004ec8:	e7eb      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <__swsetup_r+0xd8>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	bf08      	it	eq
 8004ed0:	68ec      	ldreq	r4, [r5, #12]
 8004ed2:	e7e6      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004ed4:	0758      	lsls	r0, r3, #29
 8004ed6:	d512      	bpl.n	8004efe <__swsetup_r+0x7a>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	b141      	cbz	r1, 8004eee <__swsetup_r+0x6a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__swsetup_r+0x66>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f98f 	bl	8005208 <_free_r>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6363      	str	r3, [r4, #52]	; 0x34
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	b94b      	cbnz	r3, 8004f1e <__swsetup_r+0x9a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d003      	beq.n	8004f1e <__swsetup_r+0x9a>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f929 	bl	8005170 <__smakebuf_r>
 8004f1e:	89a0      	ldrh	r0, [r4, #12]
 8004f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f24:	f010 0301 	ands.w	r3, r0, #1
 8004f28:	d00a      	beq.n	8004f40 <__swsetup_r+0xbc>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6963      	ldr	r3, [r4, #20]
 8004f30:	425b      	negs	r3, r3
 8004f32:	61a3      	str	r3, [r4, #24]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b943      	cbnz	r3, 8004f4a <__swsetup_r+0xc6>
 8004f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f3c:	d1ba      	bne.n	8004eb4 <__swsetup_r+0x30>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	0781      	lsls	r1, r0, #30
 8004f42:	bf58      	it	pl
 8004f44:	6963      	ldrpl	r3, [r4, #20]
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	e7f4      	b.n	8004f34 <__swsetup_r+0xb0>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e7f7      	b.n	8004f3e <__swsetup_r+0xba>
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	08005394 	.word	0x08005394
 8004f58:	080053b4 	.word	0x080053b4
 8004f5c:	08005374 	.word	0x08005374

08004f60 <_close_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	; (8004f7c <_close_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fb fd47 	bl	80009fe <_close>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_close_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_close_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200001f0 	.word	0x200001f0

08004f80 <__sflush_r>:
 8004f80:	898a      	ldrh	r2, [r1, #12]
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	4605      	mov	r5, r0
 8004f88:	0710      	lsls	r0, r2, #28
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	d458      	bmi.n	8005040 <__sflush_r+0xc0>
 8004f8e:	684b      	ldr	r3, [r1, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc05      	bgt.n	8004fa0 <__sflush_r+0x20>
 8004f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dc02      	bgt.n	8004fa0 <__sflush_r+0x20>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d0f9      	beq.n	8004f9a <__sflush_r+0x1a>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fac:	682f      	ldr	r7, [r5, #0]
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	d032      	beq.n	8005018 <__sflush_r+0x98>
 8004fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	075a      	lsls	r2, r3, #29
 8004fb8:	d505      	bpl.n	8004fc6 <__sflush_r+0x46>
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	1ac0      	subs	r0, r0, r3
 8004fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fc0:	b10b      	cbz	r3, 8004fc6 <__sflush_r+0x46>
 8004fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc4:	1ac0      	subs	r0, r0, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b0      	blx	r6
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	d106      	bne.n	8004fe6 <__sflush_r+0x66>
 8004fd8:	6829      	ldr	r1, [r5, #0]
 8004fda:	291d      	cmp	r1, #29
 8004fdc:	d82c      	bhi.n	8005038 <__sflush_r+0xb8>
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <__sflush_r+0x108>)
 8004fe0:	40ca      	lsrs	r2, r1
 8004fe2:	07d6      	lsls	r6, r2, #31
 8004fe4:	d528      	bpl.n	8005038 <__sflush_r+0xb8>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6062      	str	r2, [r4, #4]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	d504      	bpl.n	8004ffc <__sflush_r+0x7c>
 8004ff2:	1c42      	adds	r2, r0, #1
 8004ff4:	d101      	bne.n	8004ffa <__sflush_r+0x7a>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	b903      	cbnz	r3, 8004ffc <__sflush_r+0x7c>
 8004ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8004ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffe:	602f      	str	r7, [r5, #0]
 8005000:	2900      	cmp	r1, #0
 8005002:	d0ca      	beq.n	8004f9a <__sflush_r+0x1a>
 8005004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005008:	4299      	cmp	r1, r3
 800500a:	d002      	beq.n	8005012 <__sflush_r+0x92>
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f8fb 	bl	8005208 <_free_r>
 8005012:	2000      	movs	r0, #0
 8005014:	6360      	str	r0, [r4, #52]	; 0x34
 8005016:	e7c1      	b.n	8004f9c <__sflush_r+0x1c>
 8005018:	6a21      	ldr	r1, [r4, #32]
 800501a:	2301      	movs	r3, #1
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	1c41      	adds	r1, r0, #1
 8005022:	d1c7      	bne.n	8004fb4 <__sflush_r+0x34>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0c4      	beq.n	8004fb4 <__sflush_r+0x34>
 800502a:	2b1d      	cmp	r3, #29
 800502c:	d001      	beq.n	8005032 <__sflush_r+0xb2>
 800502e:	2b16      	cmp	r3, #22
 8005030:	d101      	bne.n	8005036 <__sflush_r+0xb6>
 8005032:	602f      	str	r7, [r5, #0]
 8005034:	e7b1      	b.n	8004f9a <__sflush_r+0x1a>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	e7ad      	b.n	8004f9c <__sflush_r+0x1c>
 8005040:	690f      	ldr	r7, [r1, #16]
 8005042:	2f00      	cmp	r7, #0
 8005044:	d0a9      	beq.n	8004f9a <__sflush_r+0x1a>
 8005046:	0793      	lsls	r3, r2, #30
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	bf08      	it	eq
 800504c:	694b      	ldreq	r3, [r1, #20]
 800504e:	600f      	str	r7, [r1, #0]
 8005050:	bf18      	it	ne
 8005052:	2300      	movne	r3, #0
 8005054:	eba6 0807 	sub.w	r8, r6, r7
 8005058:	608b      	str	r3, [r1, #8]
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	dd9c      	ble.n	8004f9a <__sflush_r+0x1a>
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005064:	4643      	mov	r3, r8
 8005066:	463a      	mov	r2, r7
 8005068:	4628      	mov	r0, r5
 800506a:	47b0      	blx	r6
 800506c:	2800      	cmp	r0, #0
 800506e:	dc06      	bgt.n	800507e <__sflush_r+0xfe>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e78e      	b.n	8004f9c <__sflush_r+0x1c>
 800507e:	4407      	add	r7, r0
 8005080:	eba8 0800 	sub.w	r8, r8, r0
 8005084:	e7e9      	b.n	800505a <__sflush_r+0xda>
 8005086:	bf00      	nop
 8005088:	20400001 	.word	0x20400001

0800508c <_fflush_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	4605      	mov	r5, r0
 8005092:	460c      	mov	r4, r1
 8005094:	b913      	cbnz	r3, 800509c <_fflush_r+0x10>
 8005096:	2500      	movs	r5, #0
 8005098:	4628      	mov	r0, r5
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	b118      	cbz	r0, 80050a6 <_fflush_r+0x1a>
 800509e:	6983      	ldr	r3, [r0, #24]
 80050a0:	b90b      	cbnz	r3, 80050a6 <_fflush_r+0x1a>
 80050a2:	f7ff fa4f 	bl	8004544 <__sinit>
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <_fflush_r+0x6c>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	d11b      	bne.n	80050e4 <_fflush_r+0x58>
 80050ac:	686c      	ldr	r4, [r5, #4]
 80050ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ef      	beq.n	8005096 <_fflush_r+0xa>
 80050b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050b8:	07d0      	lsls	r0, r2, #31
 80050ba:	d404      	bmi.n	80050c6 <_fflush_r+0x3a>
 80050bc:	0599      	lsls	r1, r3, #22
 80050be:	d402      	bmi.n	80050c6 <_fflush_r+0x3a>
 80050c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c2:	f7ff fadd 	bl	8004680 <__retarget_lock_acquire_recursive>
 80050c6:	4628      	mov	r0, r5
 80050c8:	4621      	mov	r1, r4
 80050ca:	f7ff ff59 	bl	8004f80 <__sflush_r>
 80050ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d0:	07da      	lsls	r2, r3, #31
 80050d2:	4605      	mov	r5, r0
 80050d4:	d4e0      	bmi.n	8005098 <_fflush_r+0xc>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	059b      	lsls	r3, r3, #22
 80050da:	d4dd      	bmi.n	8005098 <_fflush_r+0xc>
 80050dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050de:	f7ff fad0 	bl	8004682 <__retarget_lock_release_recursive>
 80050e2:	e7d9      	b.n	8005098 <_fflush_r+0xc>
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_fflush_r+0x70>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d101      	bne.n	80050ee <_fflush_r+0x62>
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	e7df      	b.n	80050ae <_fflush_r+0x22>
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <_fflush_r+0x74>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	bf08      	it	eq
 80050f4:	68ec      	ldreq	r4, [r5, #12]
 80050f6:	e7da      	b.n	80050ae <_fflush_r+0x22>
 80050f8:	08005394 	.word	0x08005394
 80050fc:	080053b4 	.word	0x080053b4
 8005100:	08005374 	.word	0x08005374

08005104 <_lseek_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d07      	ldr	r5, [pc, #28]	; (8005124 <_lseek_r+0x20>)
 8005108:	4604      	mov	r4, r0
 800510a:	4608      	mov	r0, r1
 800510c:	4611      	mov	r1, r2
 800510e:	2200      	movs	r2, #0
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fb fc9a 	bl	8000a4c <_lseek>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_lseek_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_lseek_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	200001f0 	.word	0x200001f0

08005128 <__swhatbuf_r>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	460e      	mov	r6, r1
 800512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005130:	2900      	cmp	r1, #0
 8005132:	b096      	sub	sp, #88	; 0x58
 8005134:	4614      	mov	r4, r2
 8005136:	461d      	mov	r5, r3
 8005138:	da07      	bge.n	800514a <__swhatbuf_r+0x22>
 800513a:	2300      	movs	r3, #0
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	89b3      	ldrh	r3, [r6, #12]
 8005140:	061a      	lsls	r2, r3, #24
 8005142:	d410      	bmi.n	8005166 <__swhatbuf_r+0x3e>
 8005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005148:	e00e      	b.n	8005168 <__swhatbuf_r+0x40>
 800514a:	466a      	mov	r2, sp
 800514c:	f000 f8be 	bl	80052cc <_fstat_r>
 8005150:	2800      	cmp	r0, #0
 8005152:	dbf2      	blt.n	800513a <__swhatbuf_r+0x12>
 8005154:	9a01      	ldr	r2, [sp, #4]
 8005156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800515a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800515e:	425a      	negs	r2, r3
 8005160:	415a      	adcs	r2, r3
 8005162:	602a      	str	r2, [r5, #0]
 8005164:	e7ee      	b.n	8005144 <__swhatbuf_r+0x1c>
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	2000      	movs	r0, #0
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	b016      	add	sp, #88	; 0x58
 800516e:	bd70      	pop	{r4, r5, r6, pc}

08005170 <__smakebuf_r>:
 8005170:	898b      	ldrh	r3, [r1, #12]
 8005172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005174:	079d      	lsls	r5, r3, #30
 8005176:	4606      	mov	r6, r0
 8005178:	460c      	mov	r4, r1
 800517a:	d507      	bpl.n	800518c <__smakebuf_r+0x1c>
 800517c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	2301      	movs	r3, #1
 8005186:	6163      	str	r3, [r4, #20]
 8005188:	b002      	add	sp, #8
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	ab01      	add	r3, sp, #4
 800518e:	466a      	mov	r2, sp
 8005190:	f7ff ffca 	bl	8005128 <__swhatbuf_r>
 8005194:	9900      	ldr	r1, [sp, #0]
 8005196:	4605      	mov	r5, r0
 8005198:	4630      	mov	r0, r6
 800519a:	f7ff fa73 	bl	8004684 <_malloc_r>
 800519e:	b948      	cbnz	r0, 80051b4 <__smakebuf_r+0x44>
 80051a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a4:	059a      	lsls	r2, r3, #22
 80051a6:	d4ef      	bmi.n	8005188 <__smakebuf_r+0x18>
 80051a8:	f023 0303 	bic.w	r3, r3, #3
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	e7e3      	b.n	800517c <__smakebuf_r+0xc>
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <__smakebuf_r+0x7c>)
 80051b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	6020      	str	r0, [r4, #0]
 80051bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	9b00      	ldr	r3, [sp, #0]
 80051c4:	6163      	str	r3, [r4, #20]
 80051c6:	9b01      	ldr	r3, [sp, #4]
 80051c8:	6120      	str	r0, [r4, #16]
 80051ca:	b15b      	cbz	r3, 80051e4 <__smakebuf_r+0x74>
 80051cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 f88d 	bl	80052f0 <_isatty_r>
 80051d6:	b128      	cbz	r0, 80051e4 <__smakebuf_r+0x74>
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	89a0      	ldrh	r0, [r4, #12]
 80051e6:	4305      	orrs	r5, r0
 80051e8:	81a5      	strh	r5, [r4, #12]
 80051ea:	e7cd      	b.n	8005188 <__smakebuf_r+0x18>
 80051ec:	080044dd 	.word	0x080044dd

080051f0 <__malloc_lock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__malloc_lock+0x8>)
 80051f2:	f7ff ba45 	b.w	8004680 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	200001e8 	.word	0x200001e8

080051fc <__malloc_unlock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__malloc_unlock+0x8>)
 80051fe:	f7ff ba40 	b.w	8004682 <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	200001e8 	.word	0x200001e8

08005208 <_free_r>:
 8005208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800520a:	2900      	cmp	r1, #0
 800520c:	d048      	beq.n	80052a0 <_free_r+0x98>
 800520e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005212:	9001      	str	r0, [sp, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f1a1 0404 	sub.w	r4, r1, #4
 800521a:	bfb8      	it	lt
 800521c:	18e4      	addlt	r4, r4, r3
 800521e:	f7ff ffe7 	bl	80051f0 <__malloc_lock>
 8005222:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <_free_r+0x9c>)
 8005224:	9801      	ldr	r0, [sp, #4]
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	4615      	mov	r5, r2
 800522a:	b933      	cbnz	r3, 800523a <_free_r+0x32>
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	6014      	str	r4, [r2, #0]
 8005230:	b003      	add	sp, #12
 8005232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005236:	f7ff bfe1 	b.w	80051fc <__malloc_unlock>
 800523a:	42a3      	cmp	r3, r4
 800523c:	d90b      	bls.n	8005256 <_free_r+0x4e>
 800523e:	6821      	ldr	r1, [r4, #0]
 8005240:	1862      	adds	r2, r4, r1
 8005242:	4293      	cmp	r3, r2
 8005244:	bf04      	itt	eq
 8005246:	681a      	ldreq	r2, [r3, #0]
 8005248:	685b      	ldreq	r3, [r3, #4]
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	bf04      	itt	eq
 800524e:	1852      	addeq	r2, r2, r1
 8005250:	6022      	streq	r2, [r4, #0]
 8005252:	602c      	str	r4, [r5, #0]
 8005254:	e7ec      	b.n	8005230 <_free_r+0x28>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x58>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x4e>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1855      	adds	r5, r2, r1
 8005264:	42a5      	cmp	r5, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x78>
 8005268:	6824      	ldr	r4, [r4, #0]
 800526a:	4421      	add	r1, r4
 800526c:	1854      	adds	r4, r2, r1
 800526e:	42a3      	cmp	r3, r4
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1dd      	bne.n	8005230 <_free_r+0x28>
 8005274:	681c      	ldr	r4, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	4421      	add	r1, r4
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	e7d7      	b.n	8005230 <_free_r+0x28>
 8005280:	d902      	bls.n	8005288 <_free_r+0x80>
 8005282:	230c      	movs	r3, #12
 8005284:	6003      	str	r3, [r0, #0]
 8005286:	e7d3      	b.n	8005230 <_free_r+0x28>
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	1961      	adds	r1, r4, r5
 800528c:	428b      	cmp	r3, r1
 800528e:	bf04      	itt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	bf04      	itt	eq
 8005298:	1949      	addeq	r1, r1, r5
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	6054      	str	r4, [r2, #4]
 800529e:	e7c7      	b.n	8005230 <_free_r+0x28>
 80052a0:	b003      	add	sp, #12
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	20000098 	.word	0x20000098

080052a8 <_read_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	; (80052c8 <_read_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb fb68 	bl	800098c <_read>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_read_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_read_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200001f0 	.word	0x200001f0

080052cc <_fstat_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	; (80052ec <_fstat_r+0x20>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	f7fb fb9c 	bl	8000a16 <_fstat>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d102      	bne.n	80052e8 <_fstat_r+0x1c>
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	b103      	cbz	r3, 80052e8 <_fstat_r+0x1c>
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	bd38      	pop	{r3, r4, r5, pc}
 80052ea:	bf00      	nop
 80052ec:	200001f0 	.word	0x200001f0

080052f0 <_isatty_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	; (800530c <_isatty_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fb fb9b 	bl	8000a36 <_isatty>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_isatty_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_isatty_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200001f0 	.word	0x200001f0

08005310 <_init>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr

0800531c <_fini>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr
